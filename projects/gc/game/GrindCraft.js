(function ($hx_exports, $global) { "use strict"; var $hx_script = (function (exports, global) { (function ($hx_exports, $global) { "use strict";
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = "lime.app.IModule";
lime_app_IModule.__isInterface__ = true;
lime_app_IModule.prototype = {
	__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app__$Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = "lime.app.Module";
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	__registerLimeModule: function(application) {
	}
	,__class__: lime_app_Module
};
var lime__$internal_backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_media_AudioManager.init();
	this.accelerometer = lime_system_Sensor.registerSensor(lime_system_SensorType.ACCELEROMETER,0);
};
$hxClasses["lime._internal.backend.html5.HTML5Application"] = lime__$internal_backend_html5_HTML5Application;
lime__$internal_backend_html5_HTML5Application.__name__ = "lime._internal.backend.html5.HTML5Application";
lime__$internal_backend_html5_HTML5Application.prototype = {
	convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 12:
			return 1073741980;
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 19:
			return 1073741896;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 41:
			return 1073741943;
		case 43:
			return 1073741940;
		case 44:
			return 1073741894;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 91:
			return 1073742051;
		case 92:
			return 1073742055;
		case 93:
			return 1073742055;
		case 95:
			return 1073742106;
		case 96:
			return 1073741922;
		case 97:
			return 1073741913;
		case 98:
			return 1073741914;
		case 99:
			return 1073741915;
		case 100:
			return 1073741916;
		case 101:
			return 1073741917;
		case 102:
			return 1073741918;
		case 103:
			return 1073741919;
		case 104:
			return 1073741920;
		case 105:
			return 1073741921;
		case 106:
			return 1073741909;
		case 107:
			return 1073741911;
		case 108:
			return 1073741923;
		case 109:
			return 1073741910;
		case 110:
			return 1073741923;
		case 111:
			return 1073741908;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 127:
			return 1073741931;
		case 128:
			return 1073741932;
		case 129:
			return 1073741933;
		case 130:
			return 1073741934;
		case 131:
			return 1073741935;
		case 132:
			return 1073741936;
		case 133:
			return 1073741937;
		case 134:
			return 1073741938;
		case 135:
			return 1073741939;
		case 144:
			return 1073741907;
		case 145:
			return 1073741895;
		case 160:
			return 94;
		case 161:
			return 33;
		case 163:
			return 35;
		case 164:
			return 36;
		case 166:
			return 1073742094;
		case 167:
			return 1073742095;
		case 168:
			return 1073742097;
		case 169:
			return 41;
		case 170:
			return 42;
		case 171:
			return 96;
		case 172:
			return 1073741898;
		case 173:
			return 45;
		case 174:
			return 1073741953;
		case 175:
			return 1073741952;
		case 176:
			return 1073742082;
		case 177:
			return 1073742083;
		case 178:
			return 1073742084;
		case 179:
			return 1073742085;
		case 180:
			return 1073742089;
		case 181:
			return 1073742086;
		case 182:
			return 1073741953;
		case 183:
			return 1073741952;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 193:
			return 63;
		case 194:
			return 1073741923;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		case 223:
			return 96;
		case 224:
			return 1073742051;
		case 226:
			return 92;
		}
		return keyCode;
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("devicemotion",$bind(this,this.handleSensorEvent),false);
		
			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}
			if (!CanvasRenderingContext2D.prototype.isPointInPath) {
				CanvasRenderingContext2D.prototype.isPointInPath = function (path, x, y) {
					return false;
				};
			}

			if ('performance' in window == false) {
				window.performance = {};
			}

			if ('now' in window.performance == false) {
				var offset = Date.now();
				if (performance.timing && performance.timing.navigationStart) {
					offset = performance.timing.navigationStart
				}
				window.performance.now = function now() {
					return Date.now() - offset;
				}
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,handleApplicationEvent: function(__) {
		var _g = 0;
		var _g1 = this.parent.__windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.__backend.updateSize();
		}
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			var _g = 0;
			var _g1 = this.parent.__windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				this.parent.onUpdate.dispatch(this.deltaTime | 0);
				if($window.context != null) {
					$window.onRender.dispatch($window.context);
				}
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate - this.currentUpdate % this.framePeriod + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.__window != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null ? event.keyCode : event.which);
			var modifier = (event.shiftKey ? 3 : 0) | (event.ctrlKey ? 192 : 0) | (event.altKey ? 768 : 0) | (event.metaKey ? 3072 : 0);
			if(event.type == "keydown") {
				this.parent.__window.onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyDown.canceled && event.cancelable) {
					event.preventDefault();
				}
			} else {
				this.parent.__window.onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.__window.onKeyUp.canceled && event.cancelable) {
					event.preventDefault();
				}
			}
		}
	}
	,handleSensorEvent: function(event) {
		this.accelerometer.onUpdate.dispatch(event.accelerationIncludingGravity.x,event.accelerationIncludingGravity.y,event.accelerationIncludingGravity.z);
	}
	,handleWindowEvent: function(event) {
		if(this.parent.__window != null) {
			switch(event.type) {
			case "beforeunload":
				break;
			case "blur":
				if(!this.hidden) {
					this.parent.__window.onFocusOut.dispatch();
					this.parent.__window.onDeactivate.dispatch();
					this.hidden = true;
				}
				break;
			case "focus":
				if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			case "resize":
				this.parent.__window.__backend.handleResizeEvent(event);
				break;
			case "visibilitychange":
				if(window.document.hidden) {
					if(!this.hidden) {
						this.parent.__window.onFocusOut.dispatch();
						this.parent.__window.onDeactivate.dispatch();
						this.hidden = true;
					}
				} else if(this.hidden) {
					this.parent.__window.onFocusIn.dispatch();
					this.parent.__window.onActivate.dispatch();
					this.hidden = false;
				}
				break;
			}
		}
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var id;
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g = 0;
		var _g1 = devices.length;
		while(_g < _g1) {
			var i = _g++;
			id = i;
			data = devices[id];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(id)) {
				cache = new lime__$internal_backend_html5_GameDeviceData();
				cache.id = id;
				cache.connected = data.connected;
				var _g2 = 0;
				var _g3 = data.buttons.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					cache.buttons.push(data.buttons[i1].value);
				}
				var _g4 = 0;
				var _g5 = data.axes.length;
				while(_g4 < _g5) {
					var i2 = _g4++;
					cache.axes.push(data.axes[i2]);
				}
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[id] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(id);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(id);
					}
				}
			}
			cache = this.gameDeviceCache.h[id];
			joystick = lime_ui_Joystick.devices.h[id];
			gamepad = lime_ui_Gamepad.devices.h[id];
			if(data.connected) {
				var button;
				var value;
				var _g6 = 0;
				var _g7 = data.buttons.length;
				while(_g6 < _g7) {
					var i3 = _g6++;
					value = data.buttons[i3].value;
					if(value != cache.buttons[i3]) {
						if(i3 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i3 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i3);
							} else {
								joystick.onButtonUp.dispatch(i3);
							}
							if(gamepad != null) {
								switch(i3) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i3] = value;
					}
				}
				var _g8 = 0;
				var _g9 = data.axes.length;
				while(_g8 < _g9) {
					var i4 = _g8++;
					if(data.axes[i4] != cache.axes[i4]) {
						joystick.onAxisMove.dispatch(i4,data.axes[i4]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i4,data.axes[i4]);
						}
						cache.axes[i4] = data.axes[i4];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(id);
				lime_ui_Gamepad.__disconnect(id);
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Application
};
var lime_app_Application = function() {
	this.onCreateWindow = new lime_app__$Event_$lime_$ui_$Window_$Void();
	this.onUpdate = new lime_app__$Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.meta = new haxe_ds_StringMap();
	this.modules = [];
	this.__windowByID = new haxe_ds_IntMap();
	this.__windows = [];
	this.__backend = new lime__$internal_backend_html5_HTML5Application(this);
	this.__registerLimeModule(this);
	this.__preloader = new lime_utils_Preloader();
	this.__preloader.onProgress.add($bind(this,this.onPreloadProgress));
	this.__preloader.onComplete.add($bind(this,this.onPreloadComplete));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = "lime.app.Application";
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	addModule: function(module) {
		module.__registerLimeModule(this);
		this.modules.push(module);
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.__backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,x,y) {
	}
	,onKeyDown: function(keyCode,modifier) {
	}
	,onKeyUp: function(keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(x,y,button) {
	}
	,onMouseMove: function(x,y) {
	}
	,onMouseMoveRelative: function(x,y) {
	}
	,onMouseUp: function(x,y,button) {
	}
	,onMouseWheel: function(deltaX,deltaY,deltaMode) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function() {
	}
	,onRenderContextRestored: function(context) {
	}
	,onTextEdit: function(text,start,length) {
	}
	,onTextInput: function(text) {
	}
	,onTouchCancel: function(touch) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function() {
	}
	,onWindowClose: function() {
	}
	,onWindowCreate: function() {
	}
	,onWindowDeactivate: function() {
	}
	,onWindowDropFile: function(file) {
	}
	,onWindowEnter: function() {
	}
	,onWindowExpose: function() {
	}
	,onWindowFocusIn: function() {
	}
	,onWindowFocusOut: function() {
	}
	,onWindowFullscreen: function() {
	}
	,onWindowLeave: function() {
	}
	,onWindowMove: function(x,y) {
	}
	,onWindowMinimize: function() {
	}
	,onWindowResize: function(width,height) {
	}
	,onWindowRestore: function() {
	}
	,render: function(context) {
	}
	,update: function(deltaTime) {
	}
	,__registerLimeModule: function(application) {
		application.onUpdate.add($bind(this,this.update));
		application.onExit.add($bind(this,this.onModuleExit),false,0);
		application.onExit.add($bind(this,this.__onModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
		var joystick = lime_ui_Joystick.devices.iterator();
		while(joystick.hasNext()) {
			var joystick1 = joystick.next();
			this.__onJoystickConnect(joystick1);
		}
		lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
		lime_ui_Touch.onCancel.add($bind(this,this.onTouchCancel));
		lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
	}
	,__removeWindow: function($window) {
		if($window != null && this.__windowByID.h.hasOwnProperty($window.id)) {
			if(this.__window == $window) {
				this.__window = null;
			}
			HxOverrides.remove(this.__windows,$window);
			this.__windowByID.remove($window.id);
			$window.close();
			if(this.__windows.length == 0) {
				lime_system_System.exit(0);
			}
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var _g = $bind(this,this.onGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var _g = $bind(this,this.onJoystickAxisMove);
		var joystick1 = joystick;
		var tmp = function(axis,value) {
			_g(joystick1,axis,value);
		};
		joystick.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.onJoystickButtonDown);
		var joystick2 = joystick;
		var tmp = function(button) {
			_g1(joystick2,button);
		};
		joystick.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.onJoystickButtonUp);
		var joystick3 = joystick;
		var tmp = function(button) {
			_g2(joystick3,button);
		};
		joystick.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.onJoystickDisconnect);
		var joystick4 = joystick;
		var tmp = function() {
			_g3(joystick4);
		};
		joystick.onDisconnect.add(tmp);
		var _g4 = $bind(this,this.onJoystickHatMove);
		var joystick5 = joystick;
		var tmp = function(hat,position) {
			_g4(joystick5,hat,position);
		};
		joystick.onHatMove.add(tmp);
		var _g5 = $bind(this,this.onJoystickTrackballMove);
		var joystick6 = joystick;
		var tmp = function(trackball,x,y) {
			_g5(joystick6,trackball,x,y);
		};
		joystick.onTrackballMove.add(tmp);
	}
	,__onModuleExit: function(code) {
		this.__backend.exit();
	}
	,__onWindowClose: function($window) {
		if(this.__window == $window) {
			this.onWindowClose();
		}
		this.__removeWindow($window);
	}
	,__class__: lime_app_Application
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = "ApplicationMain";
ApplicationMain.main = function() {
	lime_system_System.__registerEntryPoint("GrindCraft",ApplicationMain.create);
};
ApplicationMain.create = function(config) {
	var app = new openfl_display_Application();
	ManifestResources.init(config);
	app.meta.h["build"] = "259";
	app.meta.h["company"] = "gonzos";
	app.meta.h["file"] = "GrindCraft";
	app.meta.h["name"] = "GrindCraft";
	app.meta.h["packageName"] = "com.coffeebreak.GrindCraft";
	app.meta.h["version"] = "1.0.0";
	var attributes = { allowHighDPI : true, alwaysOnTop : false, borderless : false, element : null, frameRate : 60, height : 0, hidden : false, maximized : false, minimized : false, parameters : { }, resizable : true, title : "GrindCraft", width : 0, x : null, y : null};
	attributes.context = { antialiasing : 0, background : 0, colorDepth : 32, depth : true, hardware : true, stencil : true, type : null, vsync : false};
	if(app.__window == null) {
		if(config != null) {
			var _g = 0;
			var _g1 = Reflect.fields(config);
			while(_g < _g1.length) {
				var field = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(attributes,field)) {
					attributes[field] = Reflect.field(config,field);
				} else if(Object.prototype.hasOwnProperty.call(attributes.context,field)) {
					attributes.context[field] = Reflect.field(config,field);
				}
			}
		}
	}
	app.createWindow(attributes);
	var preloader = new openfl_display_Preloader(new com_coffeebreak_GamePreloader());
	app.__preloader.onProgress.add(function(loaded,total) {
		preloader.update(loaded,total);
	});
	app.__preloader.onComplete.add(function() {
		preloader.start();
	});
	var stage = app.__window.stage;
	var tmp = function() {
		ApplicationMain.start(stage);
	};
	preloader.onComplete.add(tmp);
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraries;
	while(_g < _g1.length) {
		var library = _g1[_g];
		++_g;
		app.__preloader.addLibrary(library);
	}
	var _g = 0;
	var _g1 = ManifestResources.preloadLibraryNames;
	while(_g < _g1.length) {
		var name = _g1[_g];
		++_g;
		app.__preloader.addLibraryName(name);
	}
	app.__preloader.load();
	var result = app.exec();
};
ApplicationMain.start = function(stage) {
	try {
		var current = stage.getChildAt(0);
		if(current == null || !((current) instanceof openfl_display_DisplayObjectContainer)) {
			current = new openfl_display_MovieClip();
			stage.addChild(current);
		}
		new DocumentClass(current);
		stage.dispatchEvent(new openfl_events_Event("resize",false,false));
		if(stage.window.__fullscreen) {
			stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		stage.__handleError(e);
	}
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = "openfl.events.IEventDispatcher";
openfl_events_IEventDispatcher.__isInterface__ = true;
openfl_events_IEventDispatcher.prototype = {
	__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = "openfl.events.EventDispatcher";
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.prototype = {
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(listener == null) {
			return;
		}
		if(this.__eventMap == null) {
			this.__eventMap = new haxe_ds_StringMap();
			this.__iterators = new haxe_ds_StringMap();
		}
		if(!Object.prototype.hasOwnProperty.call(this.__eventMap.h,type)) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			this.__eventMap.h[type] = list;
			this.__iterators.h[type] = [iterator];
		} else {
			var list = this.__eventMap.h[type];
			var _g = 0;
			var _g1 = list.length;
			while(_g < _g1) {
				var i = _g++;
				if(list[i].match(listener,useCapture)) {
					return;
				}
			}
			var iterators = this.__iterators.h[type];
			var _g = 0;
			while(_g < iterators.length) {
				var iterator = iterators[_g];
				++_g;
				if(iterator.active) {
					iterator.copy();
				}
			}
			this.__addListenerByPriority(list,new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		return Object.prototype.hasOwnProperty.call(this.__eventMap.h,type);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null || listener == null) {
			return;
		}
		var list = this.__eventMap.h[type];
		if(list == null) {
			return;
		}
		var iterators = this.__iterators.h[type];
		var _g = 0;
		var _g1 = list.length;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].match(listener,useCapture)) {
				var _g2 = 0;
				while(_g2 < iterators.length) {
					var iterator = iterators[_g2];
					++_g2;
					iterator.remove(list[i],i);
				}
				list.splice(i,1);
				break;
			}
		}
		if(list.length == 0) {
			var _this = this.__eventMap;
			var key = type;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			var _this = this.__iterators;
			var key = type;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		var h = this.__eventMap.h;
		var inlStringMapValueIterator_h = h;
		var inlStringMapValueIterator_keys = Object.keys(h);
		var inlStringMapValueIterator_length = inlStringMapValueIterator_keys.length;
		var inlStringMapValueIterator_current = 0;
		if(inlStringMapValueIterator_current >= inlStringMapValueIterator_length) {
			this.__eventMap = null;
			this.__iterators = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var full = c.__name__;
		var short = full.split(".").pop();
		return "[object " + short + "]";
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return true;
		}
		var type = event.type;
		var list = this.__eventMap.h[type];
		if(list == null) {
			return true;
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var iterators = this.__iterators.h[type];
		var iterator = iterators[0];
		if(iterator.active) {
			iterator = new openfl_events__$EventDispatcher_DispatchIterator(list);
			iterators.push(iterator);
		}
		iterator.start();
		var listener = iterator;
		while(listener.hasNext()) {
			var listener1 = listener.next();
			if(listener1 == null) {
				continue;
			}
			if(listener1.useCapture == capture) {
				listener1.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
		}
		iterator.stop();
		if(iterator != iterators[0]) {
			HxOverrides.remove(iterators,iterator);
		} else {
			iterator.reset(list);
		}
		return !event.isDefaultPrevented();
	}
	,__addListenerByPriority: function(list,listener) {
		var numElements = list.length;
		var addAtPosition = numElements;
		var _g = 0;
		var _g1 = numElements;
		while(_g < _g1) {
			var i = _g++;
			if(list[i].priority < listener.priority) {
				addAtPosition = i;
				break;
			}
		}
		list.splice(addAtPosition,0,listener);
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = "openfl.display.IBitmapDrawable";
openfl_display_IBitmapDrawable.__isInterface__ = true;
openfl_display_IBitmapDrawable.prototype = {
	__class__: openfl_display_IBitmapDrawable
};
var openfl_Vector = {};
openfl_Vector.toIntVector = function(t,length,fixed,array) {
	return new openfl__$Vector_IntVector(length,fixed,array);
};
openfl_Vector.toFloatVector = function(t,length,fixed,array) {
	return new openfl__$Vector_FloatVector(length,fixed,array,true);
};
openfl_Vector.toObjectVector = function(t,length,fixed,array) {
	return new openfl__$Vector_ObjectVector(length,fixed,array,true);
};
var lime_utils_ObjectPool = function(create,clean,size) {
	this.__pool = new haxe_ds_ObjectMap();
	this.activeObjects = 0;
	this.inactiveObjects = 0;
	this.__inactiveObject0 = null;
	this.__inactiveObject1 = null;
	this.__inactiveObjectList = new haxe_ds_List();
	if(create != null) {
		this.create = create;
	}
	if(clean != null) {
		this.clean = clean;
	}
	if(size != null) {
		this.set_size(size);
	}
};
$hxClasses["lime.utils.ObjectPool"] = lime_utils_ObjectPool;
lime_utils_ObjectPool.__name__ = "lime.utils.ObjectPool";
lime_utils_ObjectPool.prototype = {
	clean: function(object) {
	}
	,create: function() {
		return null;
	}
	,get: function() {
		var object = null;
		if(this.inactiveObjects > 0) {
			var object1 = null;
			if(this.__inactiveObject0 != null) {
				object1 = this.__inactiveObject0;
				this.__inactiveObject0 = null;
			} else if(this.__inactiveObject1 != null) {
				object1 = this.__inactiveObject1;
				this.__inactiveObject1 = null;
			} else {
				object1 = this.__inactiveObjectList.pop();
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject0 = this.__inactiveObjectList.pop();
				}
				if(this.__inactiveObjectList.length > 0) {
					this.__inactiveObject1 = this.__inactiveObjectList.pop();
				}
			}
			this.inactiveObjects--;
			this.activeObjects++;
			object = object1;
		} else if(this.__size == null || this.activeObjects < this.__size) {
			object = this.create();
			if(object != null) {
				this.__pool.set(object,true);
				this.activeObjects++;
			}
		}
		return object;
	}
	,release: function(object) {
		this.activeObjects--;
		if(this.__size == null || this.activeObjects + this.inactiveObjects < this.__size) {
			this.clean(object);
			if(this.__inactiveObject0 == null) {
				this.__inactiveObject0 = object;
			} else if(this.__inactiveObject1 == null) {
				this.__inactiveObject1 = object;
			} else {
				this.__inactiveObjectList.add(object);
			}
			this.inactiveObjects++;
		} else {
			this.__pool.remove(object);
		}
	}
	,__removeInactive: function(count) {
		if(count <= 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject0 != null) {
			this.__pool.remove(this.__inactiveObject0);
			this.__inactiveObject0 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		if(this.__inactiveObject1 != null) {
			this.__pool.remove(this.__inactiveObject1);
			this.__inactiveObject1 = null;
			this.inactiveObjects--;
			--count;
		}
		if(count == 0 || this.inactiveObjects == 0) {
			return;
		}
		var _g_head = this.__inactiveObjectList.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var object = val;
			this.__pool.remove(object);
			this.__inactiveObjectList.remove(object);
			this.inactiveObjects--;
			--count;
			if(count == 0 || this.inactiveObjects == 0) {
				return;
			}
		}
	}
	,set_size: function(value) {
		if(value == null) {
			this.__size = null;
		} else {
			var current = this.inactiveObjects + this.activeObjects;
			this.__size = value;
			if(current > value) {
				this.__removeInactive(current - value);
			} else if(value > current) {
				var object;
				var _g = 0;
				var _g1 = value - current;
				while(_g < _g1) {
					var i = _g++;
					object = this.create();
					if(object != null) {
						this.__pool.set(object,false);
						this.__inactiveObjectList.add(object);
						this.inactiveObjects++;
					} else {
						break;
					}
				}
			}
		}
		return value;
	}
	,__class__: lime_utils_ObjectPool
	,__properties__: {set_size:"set_size"}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,clear: function() {
		this.h = null;
		this.q = null;
		this.length = 0;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,iterator: function() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
	,__class__: haxe_ds_List
};
var openfl_display_DisplayObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.__drawableType = 1;
	this.__alpha = 1;
	this.__blendMode = 10;
	this.__cacheAsBitmap = false;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__scaleX = 1;
	this.__scaleY = 1;
	this.__worldAlpha = 1;
	this.__worldBlendMode = 10;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldVisible = true;
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
	if(openfl_display_DisplayObject.__initStage != null) {
		this.stage = openfl_display_DisplayObject.__initStage;
		openfl_display_DisplayObject.__initStage = null;
		this.stage.addChild(this);
	}
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = "openfl.display.DisplayObject";
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
				openfl_display_DisplayObject.__broadcastEvents.h[type] = [];
			}
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[type];
			if(dispatchers.indexOf(this) == -1) {
				dispatchers.push(this);
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(this.__customRenderEvent == null) {
				this.__customRenderEvent = new openfl_events_RenderEvent(null);
				this.__customRenderEvent.objectColorTransform = new openfl_geom_ColorTransform();
				this.__customRenderEvent.objectMatrix = new openfl_geom_Matrix();
				this.__customRenderClear = true;
			}
			break;
		default:
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
	}
	,dispatchEvent: function(event) {
		if(((event) instanceof openfl_events_MouseEvent)) {
			var mouseEvent = event;
			var _this = this.__getRenderTransform();
			mouseEvent.stageX = mouseEvent.localX * _this.a + mouseEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			mouseEvent.stageY = mouseEvent.localX * _this.b + mouseEvent.localY * _this.d + _this.ty;
		} else if(((event) instanceof openfl_events_TouchEvent)) {
			var touchEvent = event;
			var _this = this.__getRenderTransform();
			touchEvent.stageX = touchEvent.localX * _this.a + touchEvent.localY * _this.c + _this.tx;
			var _this = this.__getRenderTransform();
			touchEvent.stageY = touchEvent.localX * _this.b + touchEvent.localY * _this.d + _this.ty;
		}
		event.target = this;
		return this.__dispatchWithCapture(event);
	}
	,getBounds: function(targetCoordinateSpace) {
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		return this.__globalToLocal(pos,new openfl_geom_Point());
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.stage != null) {
			return this.__hitTest(x,y,shapeFlag,null,false,this);
		} else {
			return false;
		}
	}
	,localToGlobal: function(point) {
		return this.__getRenderTransform().transformPoint(point);
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.removeEventListener.call(this,type,listener,useCapture);
		switch(type) {
		case "activate":case "deactivate":case "enterFrame":case "exitFrame":case "frameConstructed":case "render":
			if(!this.hasEventListener(type)) {
				if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,type)) {
					HxOverrides.remove(openfl_display_DisplayObject.__broadcastEvents.h[type],this);
				}
			}
			break;
		case "clearDOM":case "renderCairo":case "renderCanvas":case "renderDOM":case "renderOpenGL":
			if(!this.hasEventListener("clearDOM") && !this.hasEventListener("renderCairo") && !this.hasEventListener("renderCanvas") && !this.hasEventListener("renderDOM") && !this.hasEventListener("renderOpenGL")) {
				this.__customRenderEvent = null;
			}
			break;
		default:
		}
	}
	,__cleanup: function() {
		this.__cairo = null;
		this.__canvas = null;
		this.__context = null;
		if(this.__graphics != null) {
			this.__graphics.__cleanup();
		}
		if(this.__cacheBitmap != null) {
			this.__cacheBitmap.__cleanup();
			this.__cacheBitmap = null;
		}
		if(this.__cacheBitmapData != null) {
			this.__cacheBitmapData.dispose();
			this.__cacheBitmapData = null;
		}
	}
	,__dispatch: function(event) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return true;
	}
	,__dispatchChildren: function(event) {
	}
	,__dispatchEvent: function(event) {
		var parent = event.bubbles ? this.parent : null;
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(parent != null && parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			parent.__dispatchEvent(event);
		}
		return result;
	}
	,__dispatchWithCapture: function(event) {
		if(event.target == null) {
			event.target = this;
		}
		if(this.parent != null) {
			event.eventPhase = 1;
			if(this.parent == this.stage) {
				this.parent.__dispatch(event);
			} else {
				var stack = openfl_display_DisplayObject.__tempStack.get();
				var parent = this.parent;
				var i = 0;
				while(parent != null) {
					stack.set(i,parent);
					parent = parent.parent;
					++i;
				}
				var _g = 0;
				var _g1 = i;
				while(_g < _g1) {
					var j = _g++;
					stack.get(i - j - 1).__dispatch(event);
				}
				openfl_display_DisplayObject.__tempStack.release(stack);
			}
		}
		event.eventPhase = 2;
		return this.__dispatchEvent(event);
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getFilterBounds: function(rect,matrix) {
		this.__getRenderBounds(rect,matrix);
		if(this.__filters != null) {
			var extension = openfl_geom_Rectangle.__pool.get();
			var _g = 0;
			var _g1 = this.__filters;
			while(_g < _g1.length) {
				var filter = _g1[_g];
				++_g;
				extension.__expand(-filter.__leftExtension,-filter.__topExtension,filter.__leftExtension + filter.__rightExtension,filter.__topExtension + filter.__bottomExtension);
			}
			rect.width += extension.width;
			rect.height += extension.height;
			rect.x += extension.x;
			rect.y += extension.y;
			openfl_geom_Rectangle.__pool.release(extension);
		}
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
		rect.x -= this.__transform.tx;
		rect.y -= this.__transform.ty;
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__pool.get();
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(r.x,r.y,r.width,r.height);
			openfl_geom_Rectangle.__pool.release(r);
		}
	}
	,__getRenderTransform: function() {
		this.__getWorldTransform();
		return this.__renderTransform;
	}
	,__getWorldTransform: function() {
		var transformDirty = this.__transformDirty || this.__worldTransformInvalid;
		if(transformDirty) {
			var list = [];
			var current = this;
			if(this.parent == null) {
				this.__update(true,false);
			} else {
				while(current != this.stage) {
					list.push(current);
					current = current.parent;
					if(current == null) {
						break;
					}
				}
			}
			var i = list.length;
			while(--i >= 0) {
				current = list[i];
				current.__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__globalToLocal: function(global,local) {
		this.__getRenderTransform();
		if(global == local) {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				global.x = -_this.tx;
				global.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
				global.y = 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
				global.x = px;
			}
		} else {
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.x = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - global.y) + _this.d * (global.x - _this.tx));
			var _this = this.__renderTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			local.y = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (global.y - _this.ty) + _this.b * (_this.tx - global.x));
		}
		return local;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.__visible || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
				return true;
			}
		}
		return false;
	}
	,__setParentRenderDirty: function() {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(renderParent != null && !renderParent.__renderDirty) {
			renderParent.__renderDirty = true;
			renderParent.__setParentRenderDirty();
		}
	}
	,__setStageReference: function(stage) {
		this.stage = stage;
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			this.__setWorldTransformInvalid();
			this.__setParentRenderDirty();
		}
	}
	,__setWorldTransformInvalid: function() {
		this.__worldTransformInvalid = true;
	}
	,__update: function(transformOnly,updateChildren) {
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(this.__isMask && renderParent == null) {
			renderParent = this.__maskTarget;
		}
		this.__renderable = this.__visible && this.__scaleX != 0 && this.__scaleY != 0 && !this.__isMask && (renderParent == null || !renderParent.__isMask);
		this.__updateTransforms();
		this.__transformDirty = false;
		this.__worldTransformInvalid = false;
		if(!transformOnly) {
			if(openfl_display_DisplayObject.__supportDOM) {
				this.__renderTransformChanged = !this.__renderTransform.equals(this.__renderTransformCache);
				if(this.__renderTransformCache == null) {
					this.__renderTransformCache = this.__renderTransform.clone();
				} else {
					this.__renderTransformCache.copyFrom(this.__renderTransform);
				}
			}
			if(renderParent != null) {
				if(openfl_display_DisplayObject.__supportDOM) {
					var worldVisible = renderParent.__worldVisible && this.__visible;
					this.__worldVisibleChanged = this.__worldVisible != worldVisible;
					this.__worldVisible = worldVisible;
					var worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
					this.__worldAlphaChanged = this.__worldAlpha != worldAlpha;
					this.__worldAlpha = worldAlpha;
				} else {
					this.__worldAlpha = this.get_alpha() * renderParent.__worldAlpha;
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
					this.__worldColorTransform.__combine(renderParent.__worldColorTransform);
				} else {
					this.__worldColorTransform.__copyFrom(renderParent.__worldColorTransform);
				}
				if(this.__blendMode == null || this.__blendMode == 10) {
					this.__worldBlendMode = renderParent.__worldBlendMode;
				} else {
					this.__worldBlendMode = this.__blendMode;
				}
				if(this.__shader == null) {
					this.__worldShader = renderParent.__shader;
				} else {
					this.__worldShader = this.__shader;
				}
				if(this.__scale9Grid == null) {
					this.__worldScale9Grid = renderParent.__scale9Grid;
				} else {
					this.__worldScale9Grid = this.__scale9Grid;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__worldVisibleChanged = this.__worldVisible != this.__visible;
					this.__worldVisible = this.__visible;
					this.__worldAlphaChanged = this.__worldAlpha != this.get_alpha();
				}
				if(this.__objectTransform != null) {
					this.__worldColorTransform.__copyFrom(this.__objectTransform.__colorTransform);
				} else {
					this.__worldColorTransform.__identity();
				}
				this.__worldBlendMode = this.__blendMode;
				this.__worldShader = this.__shader;
				this.__worldScale9Grid = this.__scale9Grid;
			}
		}
		if(updateChildren && this.get_mask() != null) {
			this.get_mask().__update(transformOnly,true);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided ? overrideTransform : this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(this.__renderTransform == null) {
			this.__renderTransform = new openfl_geom_Matrix();
		}
		var renderParent = this.__renderParent != null ? this.__renderParent : this.parent;
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			var target = this.__worldTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__worldTransform.copyFrom(local);
		}
		if(!overrided && renderParent != null) {
			var parentTransform = renderParent.__renderTransform;
			var target = this.__renderTransform;
			target.a = local.a * parentTransform.a + local.b * parentTransform.c;
			target.b = local.a * parentTransform.b + local.b * parentTransform.d;
			target.c = local.c * parentTransform.a + local.d * parentTransform.c;
			target.d = local.c * parentTransform.b + local.d * parentTransform.d;
			target.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			target.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
		} else {
			this.__renderTransform.copyFrom(local);
		}
		if(this.__scrollRect != null) {
			var _this = this.__renderTransform;
			var px = -this.__scrollRect.x;
			var py = -this.__scrollRect.y;
			_this.tx = px * _this.a + py * _this.c + _this.tx;
			_this.ty = px * _this.b + py * _this.d + _this.ty;
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value < 0.0) {
			value = 0.0;
		}
		if(value != this.__alpha && !this.get_cacheAsBitmap()) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__alpha = value;
	}
	,get_cacheAsBitmap: function() {
		if(this.__filters == null) {
			return this.__cacheAsBitmap;
		} else {
			return true;
		}
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else if(this.__filters != null) {
			this.__filters = null;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_height: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var height = rect.height;
		openfl_geom_Rectangle.__pool.release(rect);
		return height;
	}
	,set_height: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.height) {
			this.set_scaleY(value / rect.height);
		} else {
			this.set_scaleY(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_loaderInfo: function() {
		if(this.stage != null) {
			return openfl_utils__$internal_Lib.current.__loaderInfo;
		}
		return null;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value == this.__mask) {
			return value;
		}
		if(value != this.__mask) {
			this.__setTransformDirty();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskTarget = null;
			this.__mask.__setTransformDirty();
			var _this = this.__mask;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value != null) {
			value.__isMask = true;
			value.__maskTarget = this;
			value.__setWorldTransformInvalid();
		}
		if(this.__cacheBitmap != null && this.__cacheBitmap.get_mask() != value) {
			this.__cacheBitmap.set_mask(value);
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null ? this.stage.__mouseX : openfl_utils__$internal_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null ? this.stage.__mouseY : openfl_utils__$internal_Lib.current.stage.__mouseY;
		var _this = this.__getRenderTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			this.__transform.a = this.__rotationCosine * this.__scaleX;
			this.__transform.b = this.__rotationSine * this.__scaleX;
			this.__transform.c = -this.__rotationSine * this.__scaleY;
			this.__transform.d = this.__rotationCosine * this.__scaleY;
			this.__setTransformDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__transform.b == 0) {
				if(value != this.__transform.a) {
					this.__setTransformDirty();
				}
				this.__transform.a = value;
			} else {
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				if(this.__transform.a != a || this.__transform.b != b) {
					this.__setTransformDirty();
				}
				this.__transform.a = a;
				this.__transform.b = b;
			}
		}
		return value;
	}
	,get_scaleY: function() {
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__transform.c == 0) {
				if(value != this.__transform.d) {
					this.__setTransformDirty();
				}
				this.__transform.d = value;
			} else {
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				if(this.__transform.d != d || this.__transform.c != c) {
					this.__setTransformDirty();
				}
				this.__transform.c = c;
				this.__transform.d = d;
			}
		}
		return value;
	}
	,set_scrollRect: function(value) {
		if(value == null && this.__scrollRect == null) {
			return value;
		}
		if(value != null && this.__scrollRect != null && this.__scrollRect.equals(value)) {
			return value;
		}
		if(value != null) {
			if(this.__scrollRect == null) {
				this.__scrollRect = new openfl_geom_Rectangle();
			}
			this.__scrollRect.copyFrom(value);
		} else {
			this.__scrollRect = null;
		}
		this.__setTransformDirty();
		if(openfl_display_DisplayObject.__supportDOM) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		this.__setTransformDirty();
		this.__objectTransform.set_matrix(value.get_matrix());
		if(!this.__objectTransform.__colorTransform.__equals(value.__colorTransform,true) || !this.get_cacheAsBitmap() && this.__objectTransform.__colorTransform.alphaMultiplier != value.__colorTransform.alphaMultiplier) {
			this.__objectTransform.__colorTransform.__copyFrom(value.get_colorTransform());
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var rect = openfl_geom_Rectangle.__pool.get();
		this.__getLocalBounds(rect);
		var width = rect.width;
		openfl_geom_Rectangle.__pool.release(rect);
		return width;
	}
	,set_width: function(value) {
		var rect = openfl_geom_Rectangle.__pool.get();
		var matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		this.__getBounds(rect,matrix);
		if(value != rect.width) {
			this.set_scaleX(value / rect.width);
		} else {
			this.set_scaleX(1);
		}
		openfl_geom_Rectangle.__pool.release(rect);
		openfl_geom_Matrix.__pool.release(matrix);
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_scrollRect:"set_scrollRect",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",get_loaderInfo:"get_loaderInfo",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",get_cacheAsBitmap:"get_cacheAsBitmap",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = null;
	this.__tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = "openfl.display.InteractiveObject";
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__allowMouseFocus: function() {
		return this.get_tabEnabled();
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__tabTest: function(stack) {
		if(this.get_tabEnabled()) {
			stack.push(this);
		}
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == true) {
			return true;
		} else {
			return false;
		}
	}
	,set_tabEnabled: function(value) {
		if(this.__tabEnabled != value) {
			this.__tabEnabled = value;
			this.dispatchEvent(new openfl_events_Event("tabEnabledChange",true,false));
		}
		return this.__tabEnabled;
	}
	,get_tabIndex: function() {
		return this.__tabIndex;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_tabIndex:"get_tabIndex",set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__tabChildren = true;
	this.__children = [];
	this.__removedChildren = openfl_Vector.toObjectVector(null);
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = "openfl.display.DisplayObjectContainer";
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	addChild: function(child) {
		return this.addChildAt(child,this.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(child == null) {
			var error = new openfl_errors_TypeError("Error #2007: Parameter child must be non-null.");
			error.errorID = 2007;
			throw haxe_Exception.thrown(error);
		} else if(child.stage == child) {
			var error = new openfl_errors_ArgumentError("Error #3783: A Stage object cannot be added as the child of another object.");
			error.errorID = 3783;
			throw haxe_Exception.thrown(error);
		}
		if(index > this.__children.length || index < 0) {
			throw haxe_Exception.thrown("Invalid index position " + index);
		}
		if(child.parent == this) {
			if(this.__children[index] != child) {
				HxOverrides.remove(this.__children,child);
				this.__children.splice(index,0,child);
				if(!this.__renderDirty) {
					this.__renderDirty = true;
					this.__setParentRenderDirty();
				}
			}
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.splice(index,0,child);
			child.parent = this;
			var addedToStage = this.stage != null && child.stage == null;
			if(addedToStage) {
				child.__setStageReference(this.stage);
			}
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("added");
			event.bubbles = true;
			event.target = child;
			child.__dispatchWithCapture(event);
			if(addedToStage) {
				event = new openfl_events_Event("addedToStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
			}
		}
		return child;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g = 0;
		var _g1 = this.__children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__setTransformDirty();
			if(!child.__renderDirty) {
				child.__renderDirty = true;
				child.__setParentRenderDirty();
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			var event = new openfl_events_Event("removed",true);
			child.__dispatchWithCapture(event);
			if(this.stage != null) {
				if(child.stage != null && this.stage.get_focus() == child) {
					this.stage.set_focus(null);
				}
				var event = new openfl_events_Event("removedFromStage",false,false);
				child.__dispatchWithCapture(event);
				child.__dispatchChildren(event);
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			child.__setTransformDirty();
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,__cleanup: function() {
		openfl_display_InteractiveObject.prototype.__cleanup.call(this);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__cleanup();
		}
		var orphan = this.__removedChildren.iterator();
		while(orphan.hasNext()) {
			var orphan1 = orphan.next();
			if(orphan1.stage == null) {
				orphan1.__cleanup();
			}
		}
		this.__removedChildren.set_length(0);
	}
	,__dispatchChildren: function(event) {
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				event.target = child;
				if(!child.__dispatchWithCapture(event)) {
					break;
				}
				child.__dispatchChildren(event);
			}
		}
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getFilterBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getFilterBounds.call(this,rect,matrix);
		if(this.__scrollRect != null) {
			return;
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			var childRect = openfl_geom_Rectangle.__pool.get();
			child.__getFilterBounds(childRect,childWorldTransform);
			rect.__expand(childRect.x,childRect.y,childRect.width,childRect.height);
			openfl_geom_Rectangle.__pool.release(childRect);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.__scaleX == 0 || child.__scaleY == 0 || child.__isMask) {
				continue;
			}
			var local = child.__transform;
			childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
			childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
			childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
			childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
			childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
			childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
			child.__getRenderBounds(rect,childWorldTransform);
		}
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return false;
			}
			openfl_geom_Point.__pool.release(point);
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive && stack.length > length) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			var hitTest = false;
			while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i])) {
				hitTest = true;
				if(stack == null) {
					break;
				}
			}
			return hitTest;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__children != null) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__setStageReference(stage);
			}
		}
	}
	,__setWorldTransformInvalid: function() {
		if(!this.__worldTransformInvalid) {
			this.__worldTransformInvalid = true;
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setWorldTransformInvalid();
				}
			}
		}
	}
	,__tabTest: function(stack) {
		openfl_display_InteractiveObject.prototype.__tabTest.call(this,stack);
		if(!this.get_tabChildren()) {
			return;
		}
		var interactive = false;
		var interactiveObject = null;
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			interactive = child.__getInteractive(null);
			if(interactive) {
				interactiveObject = child;
				interactiveObject.__tabTest(stack);
			}
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true);
			}
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,get_tabChildren: function() {
		return this.__tabChildren;
	}
	,set_tabChildren: function(value) {
		if(this.__tabChildren != value) {
			this.__tabChildren = value;
			this.dispatchEvent(new openfl_events_Event("tabChildrenChange",true,false));
		}
		return this.__tabChildren;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_tabChildren:"set_tabChildren",get_tabChildren:"get_tabChildren",get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.__buttonMode = false;
	this.useHandCursor = true;
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = "openfl.display.Sprite";
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.__buttonMode && this.useHandCursor) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(!hitObject.get_visible() || this.__isMask) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
		}
		if(this.__scrollRect != null) {
			var point = openfl_geom_Point.__pool.get();
			point.setTo(x,y);
			var _this = this.__getRenderTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				point.x = -_this.tx;
				point.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - point.y) + _this.d * (point.x - _this.tx));
				point.y = 1.0 / norm * (_this.a * (point.y - _this.ty) + _this.b * (_this.tx - point.x));
				point.x = px;
			}
			if(!this.__scrollRect.containsPoint(point)) {
				openfl_geom_Point.__pool.release(point);
				return this.__hitTestHitArea(x,y,shapeFlag,stack,true,hitObject);
			}
			openfl_geom_Point.__pool.release(point);
		}
		if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
			if(stack != null) {
				return interactiveOnly;
			} else {
				return true;
			}
		} else if(this.hitArea == null && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getRenderTransform())) {
			if(stack != null && (!interactiveOnly || this.mouseEnabled)) {
				stack.push(hitObject);
			}
			return true;
		}
		return this.__hitTestHitArea(x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,__hitTestHitArea: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(stack != null && hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getRenderTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__buttonMode;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_buttonMode: function() {
		return this.__buttonMode;
	}
	,set_buttonMode: function(value) {
		return this.__buttonMode = value;
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics",set_buttonMode:"set_buttonMode",get_buttonMode:"get_buttonMode"})
});
var com_coffeebreak_CoffeeGame = function() {
	this.sceneIndex = 0;
	openfl_display_Sprite.call(this);
	this.isMusicStopped = false;
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["com.coffeebreak.CoffeeGame"] = com_coffeebreak_CoffeeGame;
com_coffeebreak_CoffeeGame.__name__ = "com.coffeebreak.CoffeeGame";
com_coffeebreak_CoffeeGame.__super__ = openfl_display_Sprite;
com_coffeebreak_CoffeeGame.prototype = $extend(openfl_display_Sprite.prototype,{
	onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		com_coffeebreak_CoffeeConstants.SCENE_CREATOR = new com_coffeebreak_core_SceneCreator();
		this.sceneCreator = com_coffeebreak_CoffeeConstants.SCENE_CREATOR;
		this.ratio = window.devicePixelRatio;
		com_coffeebreak_CoffeeConstants.STAGE = this.stage;
		com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
		com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
		this.gameContainer = new openfl_display_Sprite();
		this.addChild(this.gameContainer);
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("MAIN_GAME_CONTAINER",this.gameContainer);
		com_coffeebreak_CoffeeConstants.FOCUS_MANAGER = new com_coffeebreak_managers_FocusManager();
		com_coffeebreak_CoffeeConstants.FOCUS_MANAGER.get_activationSignal().add($bind(this,this.checkFocus));
		com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER = new com_coffeebreak_managers_OrientationManager();
		com_coffeebreak_CoffeeConstants.ORIENTATION = com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION;
		com_coffeebreak_CoffeeConstants.ORIENTATION = com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION;
		this.stage.addEventListener("resize",$bind(this,this.onResize));
		if(com_coffeebreak_utils_DetectSystem.getBrowserType() != com_coffeebreak_BrowserType.BROWSER_MOBILE) {
			if(com_coffeebreak_CoffeeConstants.ORIENTATION == com_coffeebreak_managers_OrientationManager.LANDSCAPE) {
				if(com_coffeebreak_CoffeeConstants.STAGE_WIDTH >= com_coffeebreak_CoffeeConstants.BASE_WIDTH) {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
				} else {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
				}
			} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_WIDTH / com_coffeebreak_CoffeeConstants.BASE_RATIO;
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
			} else {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			}
		} else if(com_coffeebreak_CoffeeConstants.CHECK_MOBILE_BROWSER == false) {
			com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
			com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
		} else if(com_coffeebreak_CoffeeConstants.FORCE_ORIENTATION == true) {
			if(com_coffeebreak_CoffeeConstants.GAME_GRAF_SUFIX == com_coffeebreak_managers_OrientationManager.PORTRAIT) {
				if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_WIDTH / com_coffeebreak_CoffeeConstants.BASE_RATIO;
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
				} else {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
				}
			} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
			} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT > com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO) {
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
			} else {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			}
		} else if(com_coffeebreak_CoffeeConstants.ORIENTATION == com_coffeebreak_managers_OrientationManager.LANDSCAPE) {
			if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
			} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT > com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO) {
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
			} else {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			}
		}
	}
	,createCustomScreen: function(_screenForCreate,listenForInitialisation) {
		if(listenForInitialisation == null) {
			listenForInitialisation = false;
		}
		if(listenForInitialisation == true) {
			_screenForCreate.get_screenCreatedSignal().add($bind(this,this.onScreenCreated));
		}
		_screenForCreate.set_sceneCreator(this.sceneCreator);
		_screenForCreate.init();
		_screenForCreate.addEventListener(com_coffeebreak_events_CoffeeEvent.KLIK,$bind(this,this.onScreenAction));
		this.gameContainer.addChildAt(_screenForCreate,this.sceneIndex);
		this.currentScreen = _screenForCreate;
		this.resize(this.stage.stageWidth,this.stage.stageHeight);
	}
	,removeCurrentScreen: function() {
		this.currentScreen.destroy();
		this.gameContainer.removeChild(this.currentScreen);
		this.gameContainer.set_scaleX(this.gameContainer.set_scaleY(1));
		this.gameContainer.set_x(this.gameContainer.set_y(0));
	}
	,onScreenAction: function(evt) {
	}
	,onScreenCreated: function() {
	}
	,checkFocus: function(focus) {
		if(focus == true) {
			if(com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_isMusicMute() == false) {
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playMusic(com_coffeebreak_CoffeeConstants.MAIN_MUSIC_THEME + com_coffeebreak_CoffeeConstants.SOUND_SUFIX,com_coffeebreak_CoffeeConstants.MAIN_SOUND_VOLUME);
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_isSoundMute(false);
			}
			if(this.currentScreen != null) {
				if(this.currentScreen.get_screenName() == "GameScene" && Reflect.isFunction(Reflect.field(this.currentScreen,"unpauseGame"))) {
					this.currentScreen.unpauseGame();
				}
			}
		} else {
			if(com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_isMusicMute() == false) {
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.stopMusic(com_coffeebreak_CoffeeConstants.MAIN_MUSIC_THEME + com_coffeebreak_CoffeeConstants.SOUND_SUFIX);
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_isSoundMute(true);
			}
			if(this.currentScreen != null) {
				if(this.currentScreen.get_screenName() == "GameScene" && Reflect.isFunction(Reflect.field(this.currentScreen,"pauseGame"))) {
					this.currentScreen.pauseGame();
				}
			}
		}
	}
	,onResize: function(e) {
		haxe_Log.trace("ONE EVENT RESIZE",{ fileName : "com/coffeebreak/CoffeeGame.hx", lineNumber : 283, className : "com.coffeebreak.CoffeeGame", methodName : "onResize"});
		if(com_coffeebreak_data_ResizeEventRegister.instance != null) {
			com_coffeebreak_data_ResizeEventRegister.callMethod();
		}
		com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION = com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.checkOrientation();
		if(com_coffeebreak_CoffeeConstants.ORIENTATION != com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION) {
			com_coffeebreak_CoffeeConstants.ORIENTATION = com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION;
			com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
			com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			if(com_coffeebreak_utils_DetectSystem.getBrowserType() != com_coffeebreak_BrowserType.BROWSER_MOBILE) {
				if(com_coffeebreak_CoffeeConstants.ORIENTATION == com_coffeebreak_managers_OrientationManager.LANDSCAPE) {
					if(com_coffeebreak_CoffeeConstants.STAGE_WIDTH >= com_coffeebreak_CoffeeConstants.BASE_WIDTH) {
						com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
						com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
					} else {
						com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
						com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
					}
				} else if(com_coffeebreak_CoffeeConstants.STAGE_WIDTH >= com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
				} else {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
				}
			} else if(com_coffeebreak_CoffeeConstants.CHECK_MOBILE_BROWSER == false) {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			} else if(com_coffeebreak_CoffeeConstants.ORIENTATION == com_coffeebreak_managers_OrientationManager.LANDSCAPE) {
				if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
				} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT > com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO) {
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.STAGE_HEIGHT * com_coffeebreak_CoffeeConstants.BASE_RATIO;
				} else {
					com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
					com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
				}
			} else if(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_WIDTH / com_coffeebreak_CoffeeConstants.BASE_RATIO;
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
			} else {
				com_coffeebreak_CoffeeConstants.STAGE_WIDTH = this.stage.stageWidth;
				com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = this.stage.stageHeight;
			}
			if(this.gameContainer.get_scaleX() != 1 || this.gameContainer.get_scaleY() != 1) {
				this.gameContainer.set_scaleX(this.gameContainer.set_scaleY(1));
			}
			this.gameContainer.set_x(this.gameContainer.set_y(0));
			com_coffeebreak_CoffeeConstants.STAGE_WIDTH = com_coffeebreak_CoffeeConstants.BASE_WIDTH;
			com_coffeebreak_CoffeeConstants.STAGE_HEIGHT = com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
			com_coffeebreak_CoffeeConstants.POSITION_MANAGER.set_stageWidth(com_coffeebreak_CoffeeConstants.STAGE_WIDTH);
			com_coffeebreak_CoffeeConstants.POSITION_MANAGER.set_stageHeight(com_coffeebreak_CoffeeConstants.STAGE_HEIGHT);
			if(com_coffeebreak_CoffeeConstants.MULTISCREEN == true) {
				this.currentScreen.listenOrientationChange(com_coffeebreak_CoffeeConstants.ORIENTATION);
			}
		}
		if(this.bcg != null) {
			this.bcg.set_width(this.stage.stageWidth);
			this.bcg.set_height(this.stage.stageHeight);
		}
		if(com_coffeebreak_utils_DetectSystem.getBrowserType() != com_coffeebreak_BrowserType.BROWSER_MOBILE || com_coffeebreak_CoffeeConstants.CHECK_MOBILE_BROWSER == true) {
			this.resize(this.stage.stageWidth,this.stage.stageHeight);
		}
	}
	,resize: function(newWidth,newHeight) {
		if(this.currentScreen != null) {
			this.currentScreen.resize();
		}
		if(com_coffeebreak_CoffeeConstants.SHOULD_RESIZE == false) {
			return;
		}
		var maxWidth = this.stage.stageWidth;
		var maxHeight = this.stage.stageHeight;
		var maxScaleX = maxWidth / com_coffeebreak_CoffeeConstants.BASE_WIDTH;
		var maxScaleY = maxHeight / com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
		var currentScale = 1;
		if(maxScaleX < maxScaleY) {
			currentScale = maxScaleX;
		} else {
			currentScale = maxScaleY;
		}
		this.gameContainer.set_scaleX(currentScale);
		this.gameContainer.set_scaleY(currentScale);
		this.gameContainer.set_x(maxWidth / 2 - com_coffeebreak_CoffeeConstants.BASE_WIDTH * currentScale / 2);
		this.gameContainer.set_y(maxHeight / 2 - com_coffeebreak_CoffeeConstants.BASE_HEIGHT * currentScale / 2);
		com_coffeebreak_CoffeeConstants.SCALE_FACTOR = currentScale;
		if(this.currentScreen != null) {
			this.currentScreen.resizeDone();
		}
	}
	,__class__: com_coffeebreak_CoffeeGame
});
var com_coffeebreak_GrindCraftGame = function() {
	com_coffeebreak_CoffeeConstants.BASE_WIDTH = 800;
	com_coffeebreak_CoffeeConstants.BASE_HEIGHT = 619;
	com_coffeebreak_CoffeeConstants.MULTISCREEN = false;
	com_coffeebreak_CoffeeConstants.CHECK_MOBILE_BROWSER = true;
	com_coffeebreak_CoffeeConstants.RATIO = com_coffeebreak_CoffeeConstants.BASE_WIDTH / com_coffeebreak_CoffeeConstants.BASE_HEIGHT;
	com_coffeebreak_CoffeeGame.call(this);
};
$hxClasses["com.coffeebreak.GrindCraftGame"] = com_coffeebreak_GrindCraftGame;
com_coffeebreak_GrindCraftGame.__name__ = "com.coffeebreak.GrindCraftGame";
com_coffeebreak_GrindCraftGame.__super__ = com_coffeebreak_CoffeeGame;
com_coffeebreak_GrindCraftGame.prototype = $extend(com_coffeebreak_CoffeeGame.prototype,{
	onAddedToStage: function(e) {
		com_coffeebreak_CoffeeGame.prototype.onAddedToStage.call(this,e);
		com_coffeebreak_CoffeeConstants.FONT_MANAGER.registerFonts(com_coffeebreak_GameProperties.FONTS);
		com_coffeebreak_CoffeeConstants.ANIMATION_TYPE = com_coffeebreak_data_AnimationTypes.ENTER_FRAME;
		com_coffeebreak_CoffeeConstants.IMG_PATH = "img/";
		com_coffeebreak_CoffeeConstants.SOUND_SUFIX = ".mp3";
		com_coffeebreak_managers_SoundManager.SOUNDS_PATH = "sounds/";
		com_coffeebreak_GameProperties.FONT_MANAGER = new com_coffeebreak_managers_FontManager();
		this.dataManager = new com_coffeebreak_data_GrindCraftData();
		this.dataManager.addEventListener(com_coffeebreak_managers_DataManager.DATA_LOADED,$bind(this,this.onDataLoaded));
		this.dataManager.initData("data/settings.xml");
	}
	,onDataLoaded: function(e) {
		this.dataManager.removeEventListener(com_coffeebreak_managers_DataManager.DATA_LOADED,$bind(this,this.onDataLoaded));
		haxe_Log.trace("::::::::::::::::: version " + com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("sInfo") + " ::::::::::::::::::::::::::::::",{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 81, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		com_coffeebreak_GameProperties.MAPS = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("maps");
		com_coffeebreak_GameProperties.CURRENT_MAP_ID = Std.parseInt(com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("current_map"));
		com_coffeebreak_GameProperties.CURRENT_MAP_NAME = com_coffeebreak_GameProperties.MAPS[com_coffeebreak_GameProperties.CURRENT_MAP_ID];
		com_coffeebreak_GameProperties.SAVE_FILE_NAME = com_coffeebreak_GameProperties.CURRENT_MAP_NAME + ".json";
		var gc = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("MAIN_GAME_CONTAINER");
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("PARTICLE_EFFECT",new com_coffeebreak_components_particles_ParticleEffect());
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("BGS",new com_coffeebreak_data_BaseGameSettings());
		(js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS") , com_coffeebreak_data_BaseGameSettings)).setDefaultValues();
		var bgs = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS");
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("INVENTORY_DATA",new com_coffeebreak_data_InventoryData());
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("ACH_DATA",new com_coffeebreak_data_AchievementData());
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("GRIND_GENERATOR",new com_coffeebreak_utils_GrindRandomGenerator());
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("DATA_COLLECTOR",new com_coffeebreak_data_DataCollector());
		var dCollector = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR");
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("DATA_PARSER",new com_coffeebreak_data_GameDataParser());
		this.mapsLoader = new com_coffeebreak_data_MapsLoader();
		this.mapsLoader.get_mapsLoaderSignal().add($bind(this,this.onMapLoaded));
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("MAP_LOADER",this.mapsLoader);
		if(window.externalCallManagerInstance != null) {
			window.externalCallManagerInstance.registerFunction("pause",$bind(this,this.pauseGame));
			window.externalCallManagerInstance.registerFunction("unpause",$bind(this,this.unpauseGame));
			haxe_Log.trace("ExternalCallManagerInstance registred",{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 130, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		} else {
			haxe_Log.trace("No externalCallManagerInstance",{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 134, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		}
		com_coffeebreak_GameProperties.SAVE_MANAGER = new com_coffeebreak_managers_GrindcraftSaveManager();
		var currentMap = "";
		if(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData() != null) {
			var tmp = com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData();
			haxe_Log.trace("LOCAL DATA: " + (tmp == null ? "null" : Std.string(tmp)),{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 146, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
			var inventory = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
			var ach = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
			var inventObject;
			var key = $iterator(openfl_utils_Object)(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData());
			while(key.hasNext()) {
				var key1 = key.next();
				if(key1 == "inventory") {
					inventObject = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					var key11 = $iterator(openfl_utils_Object)(inventObject);
					while(key11.hasNext()) {
						var key12 = key11.next();
						inventory.setData(key12,Reflect.getProperty(inventObject,key12));
					}
				} else if(key1 == "achievement") {
					inventObject = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					var key13 = $iterator(openfl_utils_Object)(inventObject);
					while(key13.hasNext()) {
						var key14 = key13.next();
						ach.setAchievement(Std.parseInt(key14),Reflect.getProperty(inventObject,key14));
					}
				} else if(key1 == "grindmenu") {
					var tmpArray = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					var _g = 0;
					var _g1 = tmpArray.length;
					while(_g < _g1) {
						var i = _g++;
						dCollector.setGrindMenuData(tmpArray[i].ID,tmpArray[i].label,tmpArray[i].img,tmpArray[i].isAutomate,tmpArray[i].automateName,tmpArray[i].grinder);
					}
				} else if(key1 == "BGS") {
					inventObject = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					bgs.setValues(inventObject);
				} else if(key1 == "MAP") {
					inventObject = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					var key15 = $iterator(openfl_utils_Object)(inventObject);
					while(key15.hasNext()) {
						var key16 = key15.next();
						dCollector.setMapData(key16,Reflect.getProperty(inventObject,key16));
						if(key16 == "currentLocation") {
							currentMap = Reflect.getProperty(inventObject,key16);
						}
					}
				} else if(key1 == "ACF") {
					var tmpArray1 = [];
					var tmpArray2 = [];
					inventObject = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
					var key17 = $iterator(openfl_utils_Object)(inventObject);
					while(key17.hasNext()) {
						var key18 = key17.next();
						if(key18 == "actf") {
							tmpArray1 = Reflect.getProperty(inventObject,key18);
						} else {
							tmpArray2 = Reflect.getProperty(inventObject,key18);
						}
					}
					var _g2 = 0;
					var _g3 = tmpArray1.length;
					while(_g2 < _g3) {
						var i1 = _g2++;
						dCollector.saveAutoCrafters(tmpArray1[i1],tmpArray2[i1]);
					}
				} else if(key1 == "current_menu") {
					com_coffeebreak_GameProperties.LOADED_MENU_NAME = Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1);
				} else if(key1 == "AUTO") {
					dCollector.set_automationData(Reflect.getProperty(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData(),key1));
				}
			}
		}
		haxe_Log.trace("CUR LOCATION: " + currentMap,{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 229, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		haxe_Log.trace("CUR MENU: " + com_coffeebreak_GameProperties.LOADED_MENU_NAME,{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 230, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		haxe_Log.trace("CUR MAP NAME " + com_coffeebreak_GameProperties.CURRENT_MAP_NAME,{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 231, className : "com.coffeebreak.GrindCraftGame", methodName : "onDataLoaded"});
		if(currentMap != "") {
			this.setCurrentMapId(currentMap);
			this.mapsLoader.loadMap(com_coffeebreak_utils_TextUtils.replaceDelimiter(currentMap," ",""));
			com_coffeebreak_GameProperties.CURRENT_MAP_NAME = currentMap;
		} else {
			this.mapsLoader.loadMap(com_coffeebreak_GameProperties.CURRENT_MAP_NAME);
		}
	}
	,onMapLoaded: function() {
		this.mapsLoader.get_mapsLoaderSignal().remove($bind(this,this.onMapLoaded));
		if(this.dbgPanel == null) {
			this.dbgPanel = new com_coffeebreak_utils_DebugPanel();
			this.dbgPanel.get_screenSignal().add($bind(this,this.onDebugSignal));
			this.createCustomScreen(new com_coffeebreak_screens_StartScreen());
			this.dbgPanel.set_currentScreen(this.currentScreen);
		}
	}
	,onDebugSignal: function(_val) {
		var tmp = _val == "MAP_LOADED";
	}
	,setCurrentMapId: function(_name) {
		var mapData = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers");
		var _g = 0;
		var _g1 = mapData.length;
		while(_g < _g1) {
			var i = _g++;
			var tmpArray = mapData[i].split(",");
			if(tmpArray[0] == _name) {
				com_coffeebreak_GameProperties.CURRENT_MAP_ID = i;
				break;
			}
		}
	}
	,resetAll: function() {
		var inventory = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
		inventory.reset();
		var ach = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
		ach.reset();
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("DATA_COLLECTOR",new com_coffeebreak_data_DataCollector());
		com_coffeebreak_GameProperties.CURRENT_MAP_NAME = "CityState";
		com_coffeebreak_GameProperties.CURRENT_MAP_ID = 0;
		this.mapsLoader.get_mapsLoaderSignal().add($bind(this,this.onMapLoadedReset));
		this.mapsLoader.loadMap(com_coffeebreak_GameProperties.CURRENT_MAP_NAME);
	}
	,onMapLoadedReset: function() {
		this.mapsLoader.get_mapsLoaderSignal().remove($bind(this,this.onMapLoadedReset));
		this.removeCurrentScreen();
		this.createCustomScreen(new com_coffeebreak_screens_StartScreen());
	}
	,pauseGame: function() {
		haxe_Log.trace("pause game called...",{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 337, className : "com.coffeebreak.GrindCraftGame", methodName : "pauseGame"});
		if(this.currentScreen.get_screenName() == "GameScreen") {
			this.currentScreen.pauseGame();
		}
	}
	,unpauseGame: function() {
		haxe_Log.trace("unpause game called...",{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 345, className : "com.coffeebreak.GrindCraftGame", methodName : "unpauseGame"});
		if(this.currentScreen.get_screenName() == "GameScreen") {
			this.currentScreen.unpauseGame();
		}
	}
	,checkFocus: function(focus) {
	}
	,onScreenAction: function(evt) {
		haxe_Log.trace("ACTION: " + Std.string(evt.data),{ fileName : "src/com/coffeebreak/GrindCraftGame.hx", lineNumber : 359, className : "com.coffeebreak.GrindCraftGame", methodName : "onScreenAction", customParams : [evt.data.action]});
		switch(evt.data.action) {
		case "PLAY":
			this.removeCurrentScreen();
			this.createCustomScreen(new com_coffeebreak_screens_GameScreen());
			break;
		case "PLAY_LOADED":
			this.removeCurrentScreen();
			this.createCustomScreen(new com_coffeebreak_screens_StartScreen());
			break;
		case "START":
			this.resetAll();
			break;
		case "TUTOR":
			this.removeCurrentScreen();
			this.createCustomScreen(new com_coffeebreak_screens_GameScreen(true));
			break;
		}
		this.dbgPanel.set_currentScreen(this.currentScreen);
	}
	,__class__: com_coffeebreak_GrindCraftGame
});
var DocumentClass = function(current) {
	current.addChild(this);
	com_coffeebreak_GrindCraftGame.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = "DocumentClass";
DocumentClass.__super__ = com_coffeebreak_GrindCraftGame;
DocumentClass.prototype = $extend(com_coffeebreak_GrindCraftGame.prototype,{
	__class__: DocumentClass
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,split: function(s) {
		var d = "#__delim__#";
		return s.replace(this.r,d).split(d);
	}
	,map: function(s,f) {
		var offset = 0;
		var buf_b = "";
		while(true) {
			if(offset >= s.length) {
				break;
			} else if(!this.matchSub(s,offset)) {
				buf_b += Std.string(HxOverrides.substr(s,offset,null));
				break;
			}
			var p = this.matchedPos();
			buf_b += Std.string(HxOverrides.substr(s,offset,p.pos - offset));
			buf_b += Std.string(f(this));
			if(p.len == 0) {
				buf_b += Std.string(HxOverrides.substr(s,p.pos,1));
				offset = p.pos + 1;
			} else {
				offset = p.pos + p.len;
			}
			if(!this.r.global) {
				break;
			}
		}
		if(!this.r.global && offset > 0 && offset < s.length) {
			buf_b += Std.string(HxOverrides.substr(s,offset,null));
		}
		return buf_b;
	}
	,__class__: EReg
};
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var ManifestResources = function() { };
$hxClasses["ManifestResources"] = ManifestResources;
ManifestResources.__name__ = "ManifestResources";
ManifestResources.init = function(config) {
	ManifestResources.preloadLibraries = [];
	ManifestResources.preloadLibraryNames = [];
	ManifestResources.rootPath = null;
	if(config != null && Object.prototype.hasOwnProperty.call(config,"rootPath")) {
		ManifestResources.rootPath = Reflect.field(config,"rootPath");
	}
	if(ManifestResources.rootPath == null) {
		ManifestResources.rootPath = "./";
	}
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf);
	var bundle;
	var v = ManifestResources.rootPath + "manifest/preloader.json";
	lime_utils_Assets.libraryPaths.h["preloader"] = v;
	var data = "{\"name\":null,\"assets\":\"aoy4:pathy20:img%2FachBttSkin.pngy4:sizei786y4:typey5:IMAGEy2:idR1y7:preloadtgoR0y19:img%2Falchemist.pngR2i1218R3R4R5R7R6tgoR0y25:img%2FalchemistSchool.pngR2i4585R3R4R5R8R6tgoR0y15:img%2Fanvil.pngR2i2180R3R4R5R9R6tgoR0y20:img%2Fapothecary.pngR2i1125R3R4R5R10R6tgoR0y26:img%2FapothecarySchool.pngR2i3906R3R4R5R11R6tgoR0y15:img%2Fapple.pngR2i867R3R4R5R12R6tgoR0y16:img%2Farcher.pngR2i1887R3R4R5R13R6tgoR0y16:img%2Farmada.pngR2i5447R3R4R5R14R6tgoR0y16:img%2Farmory.pngR2i3147R3R4R5R15R6tgoR0y15:img%2Farrow.pngR2i1621R3R4R5R16R6tgoR0y21:img%2FarrowLaunch.pngR2i1079R3R4R5R17R6tgoR0y21:img%2Fautoclicker.pngR2i832R3R4R5R18R6tgoR0y16:img%2Faviary.pngR2i4368R3R4R5R19R6tgoR0y15:img%2Fbarge.pngR2i3888R3R4R5R20R6tgoR0y18:img%2Fbarracks.pngR2i4510R3R4R5R21R6tgoR0y14:img%2Fbeam.pngR2i2477R3R4R5R22R6tgoR0y25:img%2FbigBlackBtt_001.pngR2i1475R3R4R5R23R6tgoR0y25:img%2FbigBlackBtt_002.pngR2i2029R3R4R5R24R6tgoR0y19:img%2FbigBttBcg.pngR2i428R3R4R5R25R6tgoR0y25:img%2FbigBttBlack_001.pngR2i1475R3R4R5R26R6tgoR0y25:img%2FbigBttBlack_002.pngR2i2029R3R4R5R27R6tgoR0y19:img%2FbigCrater.pngR2i3738R3R4R5R28R6tgoR0y16:img%2FbigLog.pngR2i1549R3R4R5R29R6tgoR0y20:img%2Fblacksmith.pngR2i1755R3R4R5R30R6tgoR0y15:img%2Fblaze.pngR2i1125R3R4R5R31R6tgoR0y21:img%2FblazePowder.pngR2i1542R3R4R5R32R6tgoR0y18:img%2FblazeRod.pngR2i948R3R4R5R33R6tgoR0y23:img%2FblockOfQuartz.pngR2i1814R3R4R5R34R6tgoR0y14:img%2Fbook.pngR2i992R3R4R5R35R6tgoR0y18:img%2Fbookcase.pngR2i2432R3R4R5R36R6tgoR0y19:img%2Fbookshelf.pngR2i4266R3R4R5R37R6tgoR0y20:img%2FbookStacks.pngR2i5037R3R4R5R38R6tgoR0y13:img%2Fbow.pngR2i1967R3R4R5R39R6tgoR0y17:img%2Fbracket.pngR2i405R3R4R5R40R6tgoR0y22:img%2FbrewingStand.pngR2i1548R3R4R5R41R6tgoR0y16:img%2Fbridge.pngR2i2793R3R4R5R42R6tgoR0y16:img%2Fbucket.pngR2i1444R3R4R5R43R6tgoR0y21:img%2FbuilderPork.pngR2i609R3R4R5R44R6tgoR0y16:img%2Fbushel.pngR2i1330R3R4R5R45R6tgoR0y17:img%2Fbutcher.pngR2i2586R3R4R5R46R6tgoR0y23:img%2FbutcherDemote.pngR2i2612R3R4R5R47R6tgoR0y16:img%2Fbutton.pngR2i602R3R4R5R48R6tgoR0y15:img%2Fcabin.pngR2i5242R3R4R5R49R6tgoR0y17:img%2FcallOut.pngR2i1075R3R4R5R50R6tgoR0y16:img%2Fcannon.pngR2i5353R3R4R5R51R6tgoR0y23:img%2FcannonChamber.pngR2i2646R3R4R5R52R6tgoR0y24:img%2FcannonPlatform.pngR2i1759R3R4R5R53R6tgoR0y23:img%2FcannonTrigger.pngR2i732R3R4R5R54R6tgoR0y19:img%2Fcarpenter.pngR2i1714R3R4R5R55R6tgoR0y16:img%2Fcastle.pngR2i6125R3R4R5R56R6tgoR0y20:img%2FchainBoots.pngR2i385R3R4R5R57R6tgoR0y26:img%2FchainBreastplate.pngR2i458R3R4R5R58R6tgoR0y21:img%2FchainHelmet.pngR2i371R3R4R5R59R6tgoR0y23:img%2FchainLeggings.pngR2i358R3R4R5R60R6tgoR0y20:img%2Fchalkboard.pngR2i2068R3R4R5R61R6tgoR0y15:img%2Fchest.pngR2i3633R3R4R5R62R6tgoR0y23:img%2FchestCorridor.pngR2i5673R3R4R5R63R6tgoR0y22:img%2FchestGrinder.pngR2i26783R3R4R5R64R6tgoR0y17:img%2Fchicken.pngR2i870R3R4R5R65R6tgoR0y16:img%2Fchurch.pngR2i4518R3R4R5R66R6tgoR0y19:img%2FcityState.pngR2i3579R3R4R5R67R6tgoR0y19:img%2Fclassroom.pngR2i4035R3R4R5R68R6tgoR0y14:img%2Fcoal.pngR2i706R3R4R5R69R6tgoR0y17:img%2FcoalOre.pngR2i3005R3R4R5R70R6tgoR0y21:img%2Fcobblestone.pngR2i3270R3R4R5R71R6tgoR0y19:img%2Fcolonnade.pngR2i2329R3R4R5R72R6tgoR0y16:img%2Fcolumn.pngR2i2768R3R4R5R73R6tgoR0y20:img%2FcolumnBase.pngR2i1875R3R4R5R74R6tgoR0y23:img%2FcolumnCapital.pngR2i1477R3R4R5R75R6tgoR0y19:img%2Fcommander.pngR2i1145R3R4R5R76R6tgoR0y17:img%2Fcompass.pngR2i1990R3R4R5R77R6tgoR0y20:img%2Fcontractor.pngR2i933R3R4R5R78R6tgoR0y13:img%2Fcow.pngR2i548R3R4R5R79R6tgoR0y17:img%2Fcrafter.pngR2i778R3R4R5R80R6tgoR0y23:img%2FcraftingArrow.pngR2i282R3R4R5R81R6tgoR0y23:img%2FcraftingTable.pngR2i3435R3R4R5R82R6tgoR0y16:img%2Fcrater.pngR2i6277R3R4R5R83R6tgoR0y17:img%2Fcreeper.pngR2i1102R3R4R5R84R6tgoR0y14:img%2Fdeck.pngR2i1804R3R4R5R85R6tgoR0y19:img%2Fdeckhouse.pngR2i3945R3R4R5R86R6tgoR0y20:img%2Fdemolition.pngR2i6692R3R4R5R87R6tgoR0y14:img%2Fdesk.pngR2i4022R3R4R5R88R6tgoR0y24:img%2FdestroyedChest.pngR2i3550R3R4R5R89R6tgoR0y23:img%2FdestroyedIsle.pngR2i5786R3R4R5R90R6tgoR0y26:img%2FdestroyedSpawner.pngR2i3784R3R4R5R91R6tgoR0y17:img%2Fdiamond.pngR2i654R3R4R5R92R6tgoR0y22:img%2FdiamondArmor.pngR2i2981R3R4R5R93R6tgoR0y20:img%2FdiamondAxe.pngR2i838R3R4R5R94R6tgoR0y22:img%2FdiamondBlock.pngR2i1990R3R4R5R95R6tgoR0y22:img%2FdiamondBoots.pngR2i3459R3R4R5R96R6tgoR0y28:img%2FdiamondBreastplate.pngR2i3864R3R4R5R97R6tgoR0y23:img%2FdiamondHelmet.pngR2i3347R3R4R5R98R6tgoR0y20:img%2FdiamondHoe.pngR2i759R3R4R5R99R6tgoR0y25:img%2FdiamondLeggings.pngR2i3389R3R4R5R100R6tgoR0y20:img%2FdiamondOre.pngR2i3472R3R4R5R101R6tgoR0y21:img%2FdiamondPick.pngR2i826R3R4R5R102R6tgoR0y24:img%2FdiamondScepter.pngR2i712R3R4R5R103R6tgoR0y23:img%2FdiamondShovel.pngR2i873R3R4R5R104R6tgoR0y22:img%2FdiamondSmith.pngR2i1106R3R4R5R105R6tgoR0y24:img%2FdiamondSoldier.pngR2i1388R3R4R5R106R6tgoR0y22:img%2FdiamondSword.pngR2i1007R3R4R5R107R6tgoR0y14:img%2Fdirt.pngR2i2793R3R4R5R108R6tgoR0y22:img%2Fdisintegrate.pngR2i235R3R4R5R109R6tgoR0y19:img%2Fdispenser.pngR2i3728R3R4R5R110R6tgoR0y14:img%2Fdock.pngR2i1316R3R4R5R111R6tgoR0y18:img%2FdomedHut.pngR2i3682R3R4R5R112R6tgoR0y14:img%2Fdoor.pngR2i871R3R4R5R113R6tgoR0y21:img%2FdragonBody1.pngR2i2739R3R4R5R114R6tgoR0y21:img%2FdragonBody2.pngR2i4367R3R4R5R115R6tgoR0y21:img%2FdragonBody3.pngR2i3924R3R4R5R116R6tgoR0y19:img%2FdragonEgg.pngR2i3724R3R4R5R117R6tgoR0y20:img%2FdragonHead.pngR2i4293R3R4R5R118R6tgoR0y25:img%2FdragonLeftWing1.pngR2i2224R3R4R5R119R6tgoR0y25:img%2FdragonLeftWing2.pngR2i2557R3R4R5R120R6tgoR0y25:img%2FdragonLeftWing3.pngR2i2243R3R4R5R121R6tgoR0y25:img%2FdragonLeftWing4.pngR2i5092R3R4R5R122R6tgoR0y25:img%2FdragonLeftWing5.pngR2i2091R3R4R5R123R6tgoR0y25:img%2FdragonLeftWing6.pngR2i2355R3R4R5R124R6tgoR0y21:img%2FdragonNeck1.pngR2i3994R3R4R5R125R6tgoR0y21:img%2FdragonNeck2.pngR2i1536R3R4R5R126R6tgoR0y21:img%2FdragonNeck3.pngR2i1853R3R4R5R127R6tgoR0y26:img%2FdragonRightWing1.pngR2i1173R3R4R5R128R6tgoR0y26:img%2FdragonRightWing2.pngR2i3637R3R4R5R129R6tgoR0y26:img%2FdragonRightWing3.pngR2i2609R3R4R5R130R6tgoR0y26:img%2FdragonRightWing4.pngR2i5011R3R4R5R131R6tgoR0y26:img%2FdragonRightWing5.pngR2i3420R3R4R5R132R6tgoR0y26:img%2FdragonRightWing6.pngR2i2924R3R4R5R133R6tgoR0y26:img%2FdragonRightWing7.pngR2i2363R3R4R5R134R6tgoR0y21:img%2FdragonTail1.pngR2i2968R3R4R5R135R6tgoR0y21:img%2FdragonTail2.pngR2i2679R3R4R5R136R6tgoR0y21:img%2FdragonTail3.pngR2i1827R3R4R5R137R6tgoR0y17:img%2Femerald.pngR2i1736R3R4R5R138R6tgoR0y20:img%2Femeralds10.pngR2i1963R3R4R5R139R6tgoR0y21:img%2Femeralds100.pngR2i1914R3R4R5R140R6tgoR0y20:img%2Femeralds30.pngR2i1972R3R4R5R141R6tgoR0y19:img%2FemptyRoom.pngR2i4170R3R4R5R142R6tgoR0y24:img%2FenchantedApple.pngR2i1307R3R4R5R143R6tgoR0y22:img%2FenderCrystal.pngR2i3089R3R4R5R144R6tgoR0y21:img%2FenderDragon.pngR2i2747R3R4R5R145R6tgoR0y18:img%2Fenderman.pngR2i750R3R4R5R146R6tgoR0y20:img%2FenderPearl.pngR2i481R3R4R5R147R6tgoR0y20:img%2FendGrinder.pngR2i16486R3R4R5R148R6tgoR0y19:img%2FendPortal.pngR2i6709R3R4R5R149R6tgoR0y23:img%2FendPortalRoom.pngR2i6176R3R4R5R150R6tgoR0y16:img%2Fexport.pngR2i213R3R4R5R151R6tgoR0y25:img%2FexporterToolTip.pngR2i14647R3R4R5R152R6tgoR0y20:img%2FeyeOfEnder.pngR2i709R3R4R5R153R6tgoR0y21:img%2FeyesOfEnder.pngR2i2631R3R4R5R154R6tgoR0y16:img%2Ffarmer.pngR2i896R3R4R5R155R6tgoR0y17:img%2Ffeather.pngR2i1271R3R4R5R156R6tgoR0y15:img%2Ffence.pngR2i1962R3R4R5R157R6tgoR0y18:img%2FfillDirt.pngR2i4784R3R4R5R158R6tgoR0y18:img%2FfireTeam.pngR2i2865R3R4R5R159R6tgoR0y20:img%2FfishingRod.pngR2i547R3R4R5R160R6tgoR0y25:img%2FfiveWayCrossing.pngR2i5866R3R4R5R161R6tgoR0y18:img%2Ffletcher.pngR2i1311R3R4R5R162R6tgoR0y15:img%2Fflint.pngR2i865R3R4R5R163R6tgoR0y23:img%2FflintAndSteel.pngR2i3241R3R4R5R164R6tgoR0y21:img%2FflyingHorse.pngR2i1075R3R4R5R165R6tgoR0y22:img%2FflyingKnight.pngR2i3280R3R4R5R166R6tgoR0y24:img%2FflyingWarHorse.pngR2i1576R3R4R5R167R6tgoR0y16:img%2Ffodder.pngR2i1617R3R4R5R168R6tgoR0y14:img%2Ffood.pngR2i27941R3R4R5R169R6tgoR0y20:img%2Fforecastle.pngR2i4287R3R4R5R170R6tgoR0y15:img%2Fforge.pngR2i6017R3R4R5R171R6tgoR0y14:img%2Ffort.pngR2i5641R3R4R5R172R6tgoR0y17:img%2Ffurnace.pngR2i3127R3R4R5R173R6tgoR0y18:img%2Fgardener.pngR2i1549R3R4R5R174R6tgoR0y24:img%2FgardenerDemote.pngR2i1601R3R4R5R175R6tgoR0y14:img%2Fgate.pngR2i1277R3R4R5R176R6tgoR0y16:img%2Fgazebo.pngR2i3213R3R4R5R177R6tgoR0y15:img%2Fghast.pngR2i696R3R4R5R178R6tgoR0y22:img%2FghastCatcher.pngR2i2978R3R4R5R179R6tgoR0y19:img%2FghastTear.pngR2i609R3R4R5R180R6tgoR0y19:img%2FghastTrap.pngR2i3195R3R4R5R181R6tgoR0y19:img%2FgoldArmor.pngR2i2975R3R4R5R182R6tgoR0y17:img%2FgoldAxe.pngR2i803R3R4R5R183R6tgoR0y19:img%2FgoldBlock.pngR2i1698R3R4R5R184R6tgoR0y19:img%2FgoldBoots.pngR2i3455R3R4R5R185R6tgoR0y25:img%2FgoldBreastplate.pngR2i3846R3R4R5R186R6tgoR0y21:img%2FgoldenApple.pngR2i693R3R4R5R187R6tgoR0y20:img%2FgoldHelmet.pngR2i3347R3R4R5R188R6tgoR0y17:img%2FgoldHoe.pngR2i706R3R4R5R189R6tgoR0y19:img%2FgoldIngot.pngR2i595R3R4R5R190R6tgoR0y20:img%2FgoldKnight.pngR2i2938R3R4R5R191R6tgoR0y22:img%2FgoldLeggings.pngR2i3388R3R4R5R192R6tgoR0y17:img%2FgoldOre.pngR2i3306R3R4R5R193R6tgoR0y18:img%2FgoldPick.pngR2i821R3R4R5R194R6tgoR0y20:img%2FgoldShovel.pngR2i783R3R4R5R195R6tgoR0y19:img%2FgoldSmith.pngR2i847R3R4R5R196R6tgoR0y21:img%2FgoldSoldier.pngR2i2858R3R4R5R197R6tgoR0y19:img%2FgoldSword.pngR2i1035R3R4R5R198R6tgoR0y18:img%2Fgovernor.pngR2i801R3R4R5R199R6tgoR0y15:img%2Fgrass.pngR2i4413R3R4R5R200R6tgoR0y16:img%2Fgravel.pngR2i3050R3R4R5R201R6tgoR0y19:img%2Fgunpowder.pngR2i589R3R4R5R202R6tgoR0y17:img%2Fgunship.pngR2i5736R3R4R5R203R6tgoR0y24:img%2FgunshipGrinder.pngR2i26888R3R4R5R204R6tgoR0y14:img%2Fhand.pngR2i719R3R4R5R205R6tgoR0y17:img%2FhayBale.pngR2i5209R3R4R5R206R6tgoR0y19:img%2Fhogquartz.pngR2i4290R3R4R5R207R6tgoR0y15:img%2Fhorse.pngR2i892R3R4R5R208R6tgoR0y22:img%2FhorseTrainer.pngR2i1316R3R4R5R209R6tgoR0y14:img%2Fhull.pngR2i3007R3R4R5R210R6tgoR0y16:img%2Fhunter.pngR2i1584R3R4R5R211R6tgoR0y22:img%2FhunterDemote.pngR2i1617R3R4R5R212R6tgoR0y13:img%2Fhut.pngR2i4158R3R4R5R213R6tgoR0y17:img%2FiconBug.pngR2i300R3R4R5R214R6tgoR0y22:img%2FiconContract.pngR2i261R3R4R5R215R6tgoR0y21:img%2FiconDesktop.pngR2i226R3R4R5R216R6tgoR0y20:img%2FiconExpand.pngR2i256R3R4R5R217R6tgoR0y18:img%2FiconInfo.pngR2i2138R3R4R5R218R6tgoR0y20:img%2FiconLayout.pngR2i215R3R4R5R219R6tgoR0y22:img%2FiconLocation.pngR2i250R3R4R5R220R6tgoR0y19:img%2FiconMinus.pngR2i192R3R4R5R221R6tgoR0y25:img%2FiconMusicalNote.pngR2i301R3R4R5R222R6tgoR0y23:img%2FiconParticles.pngR2i216R3R4R5R223R6tgoR0y19:img%2FiconPause.pngR2i197R3R4R5R224R6tgoR0y18:img%2FiconPlus.pngR2i202R3R4R5R225R6tgoR0y18:img%2FiconSave.pngR2i6805R3R4R5R226R6tgoR0y22:img%2FiconSettings.pngR2i313R3R4R5R227R6tgoR0y19:img%2FiconSound.pngR2i462R3R4R5R228R6tgoR0y27:img%2FiconSteadyClicker.pngR2i275R3R4R5R229R6tgoR0y19:img%2FiconTrash.pngR2i286R3R4R5R230R6tgoR0y27:img%2FiconX10Multiplier.pngR2i248R3R4R5R231R6tgoR0y26:img%2FiconX5Multiplier.pngR2i245R3R4R5R232R6tgoR0y19:img%2FironArmor.pngR2i2969R3R4R5R233R6tgoR0y17:img%2FironAxe.pngR2i835R3R4R5R234R6tgoR0y19:img%2FironBlock.pngR2i1687R3R4R5R235R6tgoR0y19:img%2FironBoots.pngR2i3447R3R4R5R236R6tgoR0y25:img%2FironBreastplate.pngR2i3851R3R4R5R237R6tgoR0y18:img%2FironDoor.pngR2i2649R3R4R5R238R6tgoR0y20:img%2FironHelmet.pngR2i3333R3R4R5R239R6tgoR0y17:img%2FironHoe.pngR2i736R3R4R5R240R6tgoR0y19:img%2FironIngot.pngR2i582R3R4R5R241R6tgoR0y22:img%2FironLeggings.pngR2i3401R3R4R5R242R6tgoR0y17:img%2FironOre.pngR2i3367R3R4R5R243R6tgoR0y18:img%2FironPick.pngR2i1066R3R4R5R244R6tgoR0y20:img%2FironShovel.pngR2i779R3R4R5R245R6tgoR0y21:img%2FironSoldier.pngR2i2874R3R4R5R246R6tgoR0y19:img%2FironSword.pngR2i1032R3R4R5R247R6tgoR0y18:img%2FironTrap.pngR2i3344R3R4R5R248R6tgoR0y24:img%2FitemHandle_001.pngR2i168R3R4R5R249R6tgoR0y24:img%2FitemHandle_002.pngR2i1459R3R4R5R250R6tgoR0y15:img%2Fjetty.pngR2i2932R3R4R5R251R6tgoR0y17:img%2Fjukebox.pngR2i4240R3R4R5R252R6tgoR0y14:img%2Fkeep.pngR2i4048R3R4R5R253R6tgoR0y14:img%2Fking.pngR2i1775R3R4R5R254R6tgoR0y14:img%2Fkred.pngR2i3802R3R4R5R255R6tgoR0y13:img%2Flab.pngR2i4098R3R4R5R256R6tgoR0y16:img%2Fladder.pngR2i2318R3R4R5R257R6tgoR0y19:img%2FlargeDome.pngR2i2298R3R4R5R258R6tgoR0y18:img%2Flauncher.pngR2i6280R3R4R5R259R6tgoR0y14:img%2Flava.pngR2i4335R3R4R5R260R6tgoR0y20:img%2FlavaBucket.pngR2i1696R3R4R5R261R6tgoR0y18:img%2FlavaPool.pngR2i3759R3R4R5R262R6tgoR0y14:img%2Flead.pngR2i773R3R4R5R263R6tgoR0y17:img%2Fleather.pngR2i811R3R4R5R264R6tgoR0y22:img%2FleatherArmor.pngR2i3121R3R4R5R265R6tgoR0y22:img%2FleatherBoots.pngR2i1002R3R4R5R266R6tgoR0y28:img%2FleatherBreastplate.pngR2i1379R3R4R5R267R6tgoR0y23:img%2FleatherHelmet.pngR2i818R3R4R5R268R6tgoR0y25:img%2FleatherLeggings.pngR2i935R3R4R5R269R6tgoR0y24:img%2FleatherSoldier.pngR2i2160R3R4R5R270R6tgoR0y23:img%2FleatherWorker.pngR2i1232R3R4R5R271R6tgoR0y17:img%2Flibrary.pngR2i4938R3R4R5R272R6tgoR0y24:img%2FlibraryGrinder.pngR2i26358R3R4R5R273R6tgoR0y21:img%2FlibraryRoom.pngR2i5209R3R4R5R274R6tgoR0y17:img%2FlineBar.pngR2i447R3R4R5R275R6tgoR0y15:img%2Flodge.pngR2i3964R3R4R5R276R6tgoR0y19:img%2FlodgeBase.pngR2i3193R3R4R5R277R6tgoR0y19:img%2FlodgeRoof.pngR2i2668R3R4R5R278R6tgoR0y19:img%2FlodgeTier.pngR2i1893R3R4R5R279R6tgoR0y13:img%2Flog.pngR2i3457R3R4R5R280R6tgoR0y17:img%2FlogTier.pngR2i1737R3R4R5R281R6tgoR0y18:img%2FlogTower.pngR2i4921R3R4R5R282R6tgoR0y17:img%2Flookout.pngR2i3562R3R4R5R283R6tgoR0y19:img%2FmainPanel.pngR2i2573R3R4R5R284R6tgoR0y23:img%2FmainPanelSkin.pngR2i2206R3R4R5R285R6tgoR0y18:img%2FmainSail.pngR2i3480R3R4R5R286R6tgoR0y13:img%2Fmap.pngR2i1057R3R4R5R287R6tgoR0y23:img%2FmapBackground.pngR2i826000R3R4R5R288R6tgoR0y19:img%2FmapMarker.pngR2i275R3R4R5R289R6tgoR0y24:img%2FmapMarkerCheck.pngR2i258R3R4R5R290R6tgoR0y28:img%2FmapMarkerHighlight.pngR2i299R3R4R5R291R6tgoR0y25:img%2FmapMarkerShadow.pngR2i272R3R4R5R292R6tgoR0y15:img%2Fmason.pngR2i1360R3R4R5R293R6tgoR0y19:img%2FmasonPork.pngR2i724R3R4R5R294R6tgoR0y14:img%2Fmast.pngR2i2030R3R4R5R295R6tgoR0y21:img%2FmasterSmith.pngR2i670R3R4R5R296R6tgoR0y15:img%2Fmayor.pngR2i723R3R4R5R297R6tgoR0y14:img%2Fmine.pngR2i22031R3R4R5R298R6tgoR0y18:img%2Fminecart.pngR2i544R3R4R5R299R6tgoR0y15:img%2Fminer.pngR2i1759R3R4R5R300R6tgoR0y21:img%2FminerDemote.pngR2i1854R3R4R5R301R6tgoR0y14:img%2Fmobs.pngR2i5775R3R4R5R302R6tgoR0y14:img%2Fnest.pngR2i3748R3R4R5R303R6tgoR0y16:img%2Fnether.pngR2i24362R3R4R5R304R6tgoR0y23:img%2FnetherBalcony.pngR2i2546R3R4R5R305R6tgoR0y21:img%2Fnetherblock.pngR2i2330R3R4R5R306R6tgoR0y21:img%2FnetherBrick.pngR2i389R3R4R5R307R6tgoR0y22:img%2FnetherBridge.pngR2i2262R3R4R5R308R6tgoR0y26:img%2FnetherBridgeways.pngR2i2597R3R4R5R309R6tgoR0y21:img%2FnetherFence.pngR2i1344R3R4R5R310R6tgoR0y24:img%2FnetherFortress.pngR2i4095R3R4R5R311R6tgoR0y32:img%2FnetherFortressExterior.pngR2i4090R3R4R5R312R6tgoR0y32:img%2FnetherFortressInterior.pngR2i3975R3R4R5R313R6tgoR0y27:img%2FnetherHallSection.pngR2i3567R3R4R5R314R6tgoR0y23:img%2FnetherHallway.pngR2i2490R3R4R5R315R6tgoR0y20:img%2FnetherMobs.pngR2i19448R3R4R5R316R6tgoR0y22:img%2FnetherPillar.pngR2i1272R3R4R5R317R6tgoR0y22:img%2FnetherQuartz.pngR2i547R3R4R5R318R6tgoR0y25:img%2FnetherQuartzOre.pngR2i3701R3R4R5R319R6tgoR0y20:img%2Fnetherrack.pngR2i3385R3R4R5R320R6tgoR0y19:img%2FnetherRib.pngR2i2800R3R4R5R321R6tgoR0y20:img%2FnetherRoom.pngR2i2518R3R4R5R322R6tgoR0y23:img%2FnetherSection.pngR2i2723R3R4R5R323R6tgoR0y19:img%2FnetherSki.pngR2i1825R3R4R5R324R6tgoR0y20:img%2FnetherSlab.pngR2i1564R3R4R5R325R6tgoR0y20:img%2FnetherSled.pngR2i2632R3R4R5R326R6tgoR0y22:img%2FnetherSleigh.pngR2i3407R3R4R5R327R6tgoR0y29:img%2FnetherSleighGrinder.pngR2i22807R3R4R5R328R6tgoR0y21:img%2FnetherSpawn.pngR2i3714R3R4R5R329R6tgoR0y25:img%2FnetherStaircase.pngR2i3413R3R4R5R330R6tgoR0y25:img%2FnetherStairRoom.pngR2i4534R3R4R5R331R6tgoR0y22:img%2FnetherStairs.pngR2i2412R3R4R5R332R6tgoR0y25:img%2FnetherStairwell.pngR2i4149R3R4R5R333R6tgoR0y20:img%2FnetherWall.pngR2i2966R3R4R5R334R6tgoR0y20:img%2FnetherWart.pngR2i579R3R4R5R335R6tgoR0y24:img%2FnetherWartRoom.pngR2i4382R3R4R5R336R6tgoR0y20:img%2FnetherWell.pngR2i3069R3R4R5R337R6tgoR0y24:img%2FnetherWellRoom.pngR2i4473R3R4R5R338R6tgoR0y18:img%2Fobsidian.pngR2i2698R3R4R5R339R6tgoR0y23:img%2FobsidianArmor.pngR2i4208R3R4R5R340R6tgoR0y22:img%2FobsidianArmy.pngR2i4096R3R4R5R341R6tgoR0y23:img%2FobsidianBoots.pngR2i4376R3R4R5R342R6tgoR0y29:img%2FobsidianBreastplate.pngR2i4092R3R4R5R343R6tgoR0y29:img%2FobsidianFlyingHorse.pngR2i1085R3R4R5R344R6tgoR0y30:img%2FobsidianFlyingKnight.pngR2i1944R3R4R5R345R6tgoR0y24:img%2FobsidianHelmet.pngR2i4265R3R4R5R346R6tgoR0y24:img%2FobsidianKnight.pngR2i1997R3R4R5R347R6tgoR0y26:img%2FobsidianLeggings.pngR2i4336R3R4R5R348R6tgoR0y25:img%2FobsidianSoldier.pngR2i1628R3R4R5R349R6tgoR0y23:img%2FobsidianSword.pngR2i733R3R4R5R350R6tgoR0y26:img%2FobsidianWarHorse.pngR2i1055R3R4R5R351R6tgoR0y19:img%2FoceanTube.pngR2i5133R3R4R5R352R6tgoR0y19:img%2FouterWall.pngR2i3544R3R4R5R353R6tgoR0y18:img%2FoutOfAir.pngR2i474R3R4R5R354R6tgoR0y17:img%2Foutpost.pngR2i4319R3R4R5R355R6tgoR0y19:img%2Foverworld.pngR2i22156R3R4R5R356R6tgoR0y18:img%2FpanelBtt.pngR2i662R3R4R5R357R6tgoR0y19:img%2FpanelBtt1.pngR2i593R3R4R5R358R6tgoR0y22:img%2FpanelBtt_001.pngR2i781R3R4R5R359R6tgoR0y22:img%2FpanelBtt_002.pngR2i667R3R4R5R360R6tgoR0y15:img%2Fpaper.pngR2i749R3R4R5R361R6tgoR0y24:img%2FpavedColonnade.pngR2i2723R3R4R5R362R6tgoR0y18:img%2Fpavilion.pngR2i3923R3R4R5R363R6tgoR0y13:img%2Fpen.pngR2i2161R3R4R5R364R6tgoR0y14:img%2Fpier.pngR2i2688R3R4R5R365R6tgoR0y13:img%2Fpig.pngR2i603R3R4R5R366R6tgoR0y23:img%2FpigmanBuilder.pngR2i822R3R4R5R367R6tgoR0y21:img%2FpigmanMason.pngR2i880R3R4R5R368R6tgoR0y23:img%2FpigmanSmelter.pngR2i582R3R4R5R369R6tgoR0y22:img%2FpigmanWorker.pngR2i1044R3R4R5R370R6tgoR0y27:img%2FpillarQuartzBlock.pngR2i1482R3R4R5R371R6tgoR0y19:img%2FpitchFork.pngR2i374R3R4R5R372R6tgoR0y16:img%2Fplanks.pngR2i2878R3R4R5R373R6tgoR0y18:img%2Fplatform.pngR2i2116R3R4R5R374R6tgoR0y14:img%2Fplot.pngR2i3406R3R4R5R375R6tgoR0y14:img%2Fpool.pngR2i2678R3R4R5R376R6tgoR0y14:img%2Fport.pngR2i4393R3R4R5R377R6tgoR0y16:img%2Fportal.pngR2i2751R3R4R5R378R6tgoR0y20:img%2FportalSled.pngR2i3771R3R4R5R379R6tgoR0y22:img%2FportalSleigh.pngR2i3173R3R4R5R380R6tgoR0y14:img%2Fpost.pngR2i1021R3R4R5R381R6tgoR0y16:img%2Fpotion.pngR2i1395R3R4R5R382R6tgoR0y23:img%2FpressurePlate.pngR2i1649R3R4R5R383R6tgoR0y16:img%2Fpriest.pngR2i882R3R4R5R384R6tgoR0y20:img%2FprisonCell.pngR2i6088R3R4R5R385R6tgoR0y20:img%2Fpufferfish.pngR2i635R3R4R5R386R6tgoR0y14:img%2Fquad.pngR2i6545R3R4R5R387R6tgoR0y26:img%2FquartzClassrooms.pngR2i2828R3R4R5R388R6tgoR0y21:img%2FquartzHenge.pngR2i2490R3R4R5R389R6tgoR0y19:img%2FquartzHog.pngR2i1222R3R4R5R390R6tgoR0y19:img%2FquartzHut.pngR2i3470R3R4R5R391R6tgoR0y24:img%2FquartzPavement.pngR2i1706R3R4R5R392R6tgoR0y22:img%2FquartzPillar.pngR2i858R3R4R5R393R6tgoR0y20:img%2FquartzSlab.pngR2i1615R3R4R5R394R6tgoR0y27:img%2FquartzSpiralRiser.pngR2i1687R3R4R5R395R6tgoR0y31:img%2FquartzSpiralStaircase.pngR2i3756R3R4R5R396R6tgoR0y25:img%2FquartzStaircase.pngR2i2916R3R4R5R397R6tgoR0y22:img%2FquartzStairs.pngR2i2110R3R4R5R398R6tgoR0y25:img%2FquartzStairwell.pngR2i3881R3R4R5R399R6tgoR0y21:img%2FquartzTable.pngR2i1832R3R4R5R400R6tgoR0y20:img%2FquartzWall.pngR2i3090R3R4R5R401R6tgoR0y14:img%2Fraft.pngR2i2788R3R4R5R402R6tgoR0y16:img%2Frafter.pngR2i1981R3R4R5R403R6tgoR0y14:img%2Frail.pngR2i1900R3R4R5R404R6tgoR0y20:img%2FrailBridge.pngR2i2419R3R4R5R405R6tgoR0y17:img%2Frailway.pngR2i2331R3R4R5R406R6tgoR0y20:img%2FrailWorker.pngR2i1059R3R4R5R407R6tgoR0y20:img%2FraisedDeck.pngR2i2043R3R4R5R408R6tgoR0y17:img%2Frampart.pngR2i1940R3R4R5R409R6tgoR0y18:img%2Fredstone.pngR2i1038R3R4R5R410R6tgoR0y21:img%2FredstoneOre.pngR2i3371R3R4R5R411R6tgoR0y24:img%2FredstoneSchool.pngR2i4008R3R4R5R412R6tgoR0y23:img%2FredstoneTorch.pngR2i785R3R4R5R413R6tgoR0y24:img%2FredstoneWizard.pngR2i749R3R4R5R414R6tgoR0y13:img%2Frib.pngR2i2902R3R4R5R415R6tgoR0y14:img%2Froof.pngR2i2132R3R4R5R416R6tgoR0y15:img%2Froost.pngR2i2984R3R4R5R417R6tgoR0y16:img%2Fsaddle.pngR2i792R3R4R5R418R6tgoR0y14:img%2Fsand.pngR2i4704R3R4R5R419R6tgoR0y20:img%2FsandColumn.pngR2i994R3R4R5R420R6tgoR0y13:img%2Fsaw.pngR2i330R3R4R5R421R6tgoR0y18:img%2Fscaffold.pngR2i3024R3R4R5R422R6tgoR0y21:img%2Fscaffolding.pngR2i1578R3R4R5R423R6tgoR0y20:img%2FscoutTower.pngR2i3533R3R4R5R424R6tgoR0y17:img%2FseaWall.pngR2i2721R3R4R5R425R6tgoR0y15:img%2Fseeds.pngR2i921R3R4R5R426R6tgoR0y18:img%2Fsergeant.pngR2i1155R3R4R5R427R6tgoR0y25:img%2FsettingsBttSkin.pngR2i1914R3R4R5R428R6tgoR0y15:img%2Fsheep.pngR2i921R3R4R5R429R6tgoR0y15:img%2Fshell.pngR2i3251R3R4R5R430R6tgoR0y14:img%2Fship.pngR2i3359R3R4R5R431R6tgoR0y17:img%2FshipBow.pngR2i3694R3R4R5R432R6tgoR0y18:img%2Fshipyard.pngR2i3242R3R4R5R433R6tgoR0y14:img%2Fsign.pngR2i345R3R4R5R434R6tgoR0y18:img%2Fskeleton.pngR2i1195R3R4R5R435R6tgoR0y15:img%2Fslime.pngR2i3305R3R4R5R436R6tgoR0y19:img%2FslimeBall.pngR2i602R3R4R5R437R6tgoR0y18:img%2FsmallBtt.pngR2i699R3R4R5R438R6tgoR0y19:img%2FsmallDome.pngR2i2179R3R4R5R439R6tgoR0y25:img%2FsmallTntCluster.pngR2i4033R3R4R5R440R6tgoR0y21:img%2FsmeltBucket.pngR2i927R3R4R5R441R6tgoR0y17:img%2Fsmelter.pngR2i1224R3R4R5R442R6tgoR0y21:img%2FsmelterPork.pngR2i1199R3R4R5R443R6tgoR0y14:img%2Fsoil.pngR2i2748R3R4R5R444R6tgoR0y17:img%2Fsoldier.pngR2i1654R3R4R5R445R6tgoR0y17:img%2Fspawner.pngR2i3983R3R4R5R446R6tgoR0y22:img%2FspawnGrinder.pngR2i27591R3R4R5R447R6tgoR0y16:img%2Fspider.pngR2i2409R3R4R5R448R6tgoR0y19:img%2FspikeMaul.pngR2i501R3R4R5R449R6tgoR0y21:img%2FspiralRiser.pngR2i1892R3R4R5R450R6tgoR0y25:img%2FspiralStaircase.pngR2i3774R3R4R5R451R6tgoR0y16:img%2Fstable.pngR2i3001R3R4R5R452R6tgoR0y16:img%2Fstairs.pngR2i3047R3R4R5R453R6tgoR0y15:img%2Fstall.pngR2i3255R3R4R5R454R6tgoR0y17:img%2Fstation.pngR2i4446R3R4R5R455R6tgoR0y23:img%2FsteadyClicker.pngR2i832R3R4R5R456R6tgoR0y15:img%2Fstern.pngR2i3614R3R4R5R457R6tgoR0y15:img%2Fstick.pngR2i588R3R4R5R458R6tgoR0y17:img%2Fstirrup.pngR2i452R3R4R5R459R6tgoR0y15:img%2Fstone.pngR2i2857R3R4R5R460R6tgoR0y18:img%2FstoneAxe.pngR2i602R3R4R5R461R6tgoR0y18:img%2FstoneHoe.pngR2i555R3R4R5R462R6tgoR0y19:img%2FstonePick.pngR2i730R3R4R5R463R6tgoR0y21:img%2FstoneShovel.pngR2i658R3R4R5R464R6tgoR0y30:img%2FstoneSpiralStaircase.pngR2i4181R3R4R5R465R6tgoR0y24:img%2FstoneStaircase.pngR2i5660R3R4R5R466R6tgoR0y20:img%2FstoneSword.pngR2i688R3R4R5R467R6tgoR0y19:img%2FstoreRoom.pngR2i6067R3R4R5R468R6tgoR0y16:img%2Fstring.pngR2i923R3R4R5R469R6tgoR0y26:img%2FstrongholdBreach.pngR2i4567R3R4R5R470R6tgoR0y28:img%2FstrongholdFountain.pngR2i5437R3R4R5R471R6tgoR0y27:img%2FstrongholdLibrary.pngR2i7041R3R4R5R472R6tgoR0y21:img%2FstrongsIsle.pngR2i5852R3R4R5R473R6tgoR0y15:img%2Fsugar.pngR2i614R3R4R5R474R6tgoR0y19:img%2FsugarCane.pngR2i1185R3R4R5R475R6tgoR0y24:img%2FsugarCaneField.pngR2i3521R3R4R5R476R6tgoR0y20:img%2FswordSwing.pngR2i1471R3R4R5R477R6tgoR0y17:img%2Ftab_001.pngR2i1010R3R4R5R478R6tgoR0y17:img%2Ftab_002.pngR2i976R3R4R5R479R6tgoR0y17:img%2Ftab_003.pngR2i976R3R4R5R480R6tgoR0y26:img%2FtamedFlyingHorse.pngR2i1214R3R4R5R481R6tgoR0y20:img%2FtamedGhast.pngR2i1067R3R4R5R482R6tgoR0y20:img%2FtamedHorse.pngR2i1026R3R4R5R483R6tgoR0y13:img%2Ftnt.pngR2i4822R3R4R5R484R6tgoR0y20:img%2FtntCluster.pngR2i5574R3R4R5R485R6tgoR0y21:img%2FtonOfApples.pngR2i3638R3R4R5R486R6tgoR0y20:img%2FtonOfBooks.pngR2i3110R3R4R5R487R6tgoR0y19:img%2FtonOfSand.pngR2i2418R3R4R5R488R6tgoR0y15:img%2Ftower.pngR2i3427R3R4R5R489R6tgoR0y15:img%2Ftrade.pngR2i684R3R4R5R490R6tgoR0y21:img%2FtradingPost.pngR2i5158R3R4R5R491R6tgoR0y17:img%2Ftrainer.pngR2i1262R3R4R5R492R6tgoR0y14:img%2Ftrap.pngR2i1924R3R4R5R493R6tgoR0y15:img%2Ftruss.pngR2i2034R3R4R5R494R6tgoR0y20:img%2FtutorPanel.pngR2i2090R3R4R5R495R6tgoR0y19:img%2FupperSail.pngR2i3682R3R4R5R496R6tgoR0y19:img%2FusePotion.pngR2i1741R3R4R5R497R6tgoR0y25:img%2FvillageBuilding.pngR2i4717R3R4R5R498R6tgoR0y18:img%2Fvillager.pngR2i841R3R4R5R499R6tgoR0y14:img%2Fwall.pngR2i3660R3R4R5R500R6tgoR0y14:img%2Fwarf.pngR2i3197R3R4R5R501R6tgoR0y18:img%2FwarHorse.pngR2i1513R3R4R5R502R6tgoR0y15:img%2Fwater.pngR2i2123R3R4R5R503R6tgoR0y21:img%2FwaterBucket.pngR2i1576R3R4R5R504R6tgoR0y14:img%2Fwell.pngR2i3605R3R4R5R505R6tgoR0y15:img%2Fwheat.pngR2i779R3R4R5R506R6tgoR0y20:img%2FwheatField.pngR2i3471R3R4R5R507R6tgoR0y15:img%2Fwitch.pngR2i789R3R4R5R508R6tgoR0y24:img%2FwitherSkeleton.pngR2i1087R3R4R5R509R6tgoR0y16:img%2Fwizard.pngR2i749R3R4R5R510R6tgoR0y14:img%2Fwood.pngR2i2390R3R4R5R511R6tgoR0y17:img%2FwoodAxe.pngR2i642R3R4R5R512R6tgoR0y17:img%2FwoodHoe.pngR2i648R3R4R5R513R6tgoR0y18:img%2FwoodPick.pngR2i596R3R4R5R514R6tgoR0y20:img%2FwoodShovel.pngR2i578R3R4R5R515R6tgoR0y18:img%2FwoodSlab.pngR2i2262R3R4R5R516R6tgoR0y18:img%2Fwoodsman.pngR2i1853R3R4R5R517R6tgoR0y24:img%2FwoodsmanDemote.pngR2i1968R3R4R5R518R6tgoR0y19:img%2FwoodSword.pngR2i653R3R4R5R519R6tgoR0y14:img%2Fwool.pngR2i2569R3R4R5R520R6tgoR0y20:img%2FworkerPork.pngR2i947R3R4R5R521R6tgoR0y23:img%2Fx10Multiplier.pngR2i829R3R4R5R522R6tgoR0y22:img%2Fx5Multiplier.pngR2i720R3R4R5R523R6tgoR0y16:img%2Fzombie.pngR2i861R3R4R5R524R6tgoR0y22:img%2FzombiePigman.pngR2i977R3R4R5R525R6tgoR0y24:img%2FzombieVillager.pngR2i795R3R4R5R526R6tgoR2i1595828R3y5:MUSICR5y16:sounds%2F1up.oggy9:pathGroupaR528hR6tgoR2i43601R3R527R5y21:sounds%2Fachieve1.mp3R529aR530hR6tgoR2i43601R3R527R5y21:sounds%2Fachieve2.mp3R529aR531hR6tgoR2i43601R3R527R5y21:sounds%2Fachieve3.mp3R529aR532hR6tgoR2i103685R3R527R5y21:sounds%2Fachieve4.mp3R529aR533hR6tgoR2i123538R3R527R5y21:sounds%2Fachieve5.mp3R529aR534hR6tgoR2i103685R3R527R5y21:sounds%2Fachieve6.mp3R529aR535hR6tgoR2i13812R3R527R5y18:sounds%2Fdirt1.mp3R529aR536hR6tgoR2i13813R3R527R5y18:sounds%2Fdirt2.mp3R529aR537hR6tgoR2i13813R3R527R5y18:sounds%2Fdirt3.mp3R529aR538hR6tgoR2i13813R3R527R5y18:sounds%2Fdirt4.mp3R529aR539hR6tgoR2i13812R3R527R5y18:sounds%2Fdirt5.mp3R529aR540hR6tgoR2i13813R3R527R5y18:sounds%2Fdirt6.mp3R529aR541hR6tgoR2i21314R3R527R5y22:sounds%2Fexplosion.mp3R529aR542hR6tgoR2i13822R3R527R5y18:sounds%2Fhand1.mp3R529aR543hR6tgoR2i13822R3R527R5y18:sounds%2Fhand2.mp3R529aR544hR6tgoR2i13822R3R527R5y18:sounds%2Fhand3.mp3R529aR545hR6tgoR2i13822R3R527R5y18:sounds%2Fhand4.mp3R529aR546hR6tgoR2i13822R3R527R5y18:sounds%2Fhand5.mp3R529aR547hR6tgoR2i13822R3R527R5y18:sounds%2Fhand6.mp3R529aR548hR6tgoR2i23750R3R527R5y19:sounds%2Fmetal1.mp3R529aR549hR6tgoR2i23750R3R527R5y19:sounds%2Fmetal2.mp3R529aR550hR6tgoR2i23750R3R527R5y19:sounds%2Fmetal3.mp3R529aR551hR6tgoR2i23750R3R527R5y19:sounds%2Fmetal4.mp3R529aR552hR6tgoR2i23750R3R527R5y19:sounds%2Fmetal5.mp3R529aR553hR6tgoR2i18016R3R527R5y19:sounds%2Fmetal6.mp3R529aR554hR6tgoR2i13738R3R527R5y20:sounds%2Fwhoosh1.mp3R529aR555hR6tgoR2i13738R3R527R5y20:sounds%2Fwhoosh2.mp3R529aR556hR6tgoR2i13738R3R527R5y20:sounds%2Fwhoosh3.mp3R529aR557hR6tgoR2i13738R3R527R5y20:sounds%2Fwhoosh4.mp3R529aR558hR6tgoR2i13738R3R527R5y20:sounds%2Fwhoosh5.mp3R529aR559hR6tgoR2i13739R3R527R5y20:sounds%2Fwhoosh6.mp3R529aR560hR6tgoR2i13823R3R527R5y18:sounds%2Fwood1.mp3R529aR561hR6tgoR2i13823R3R527R5y18:sounds%2Fwood2.mp3R529aR562hR6tgoR2i13823R3R527R5y18:sounds%2Fwood3.mp3R529aR563hR6tgoR2i13823R3R527R5y18:sounds%2Fwood4.mp3R529aR564hR6tgoR2i13823R3R527R5y18:sounds%2Fwood5.mp3R529aR565hR6tgoR2i13823R3R527R5y18:sounds%2Fwood6.mp3R529aR566hR6tgoR0y15:data%2Fdata.xmlR2i22836R3y4:TEXTR5R567R6tgoR0y25:data%2Flanguages%2Fen.xmlR2i2435R3R568R5R569R6tgoR0y34:data%2Fmaps%2FApothecarySchool.xmlR2i26269R3R568R5R570R6tgoR0y27:data%2Fmaps%2FChasmMine.xmlR2i33838R3R568R5R571R6tgoR0y27:data%2Fmaps%2FCityState.xmlR2i57875R3R568R5R572R6tgoR0y27:data%2Fmaps%2FHogquartz.xmlR2i28283R3R568R5R573R6tgoR0y25:data%2Fmaps%2FLieBury.xmlR2i16253R3R568R5R574R6tgoR0y26:data%2Fmaps%2FLostMine.xmlR2i18620R3R568R5R575R6tgoR0y31:data%2Fmaps%2FObsidianYards.xmlR2i33272R3R568R5R576R6tgoR0y29:data%2Fmaps%2FStrongsIsle.xmlR2i23902R3R568R5R577R6tgoR0y29:data%2Fmaps%2FTradingPost.xmlR2i7164R3R568R5R578R6tgoR0y19:data%2Fsettings.xmlR2i767R3R568R5R579R6tgoR2i1036584R3y4:FONTy9:classNamey24:__ASSET__fonts_arial_ttfR5y17:fonts%2FARIAL.TTFR6tgoR2i18236R3R580R581y30:__ASSET__fonts_minecraftia_ttfR5y23:fonts%2FMinecraftia.ttfR6tgh\",\"rootPath\":null,\"version\":2,\"libraryArgs\":[],\"libraryType\":null}";
	var manifest = lime_utils_AssetManifest.parse(data,ManifestResources.rootPath);
	var library = lime_utils_AssetLibrary.fromManifest(manifest);
	lime_utils_Assets.registerLibrary("default",library);
	library = lime_utils_Assets.getLibrary("default");
	if(library != null) {
		ManifestResources.preloadLibraries.push(library);
	} else {
		ManifestResources.preloadLibraryNames.push("default");
	}
};
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(!this.__init) {
		if(this.ascender == undefined) {
			this.ascender = 0;
		}
		if(this.descender == undefined) {
			this.descender = 0;
		}
		if(this.height == undefined) {
			this.height = 0;
		}
		if(this.numGlyphs == undefined) {
			this.numGlyphs = 0;
		}
		if(this.underlinePosition == undefined) {
			this.underlinePosition = 0;
		}
		if(this.underlineThickness == undefined) {
			this.underlineThickness = 0;
		}
		if(this.unitsPerEM == undefined) {
			this.unitsPerEM = 0;
		}
		if(this.__fontID != null) {
			if(lime_utils_Assets.isLocal(this.__fontID)) {
				this.__fromBytes(lime_utils_Assets.getBytes(this.__fontID));
			}
		} else if(this.__fontPath != null) {
			this.__fromFile(this.__fontPath);
		}
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = "lime.text.Font";
lime_text_Font.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.loadFromName = function(path) {
	var font = new lime_text_Font();
	return font.__loadFromName(path);
};
lime_text_Font.__measureFontNode = function(fontFamily) {
	var node = window.document.createElement("span");
	node.setAttribute("aria-hidden","true");
	var text = window.document.createTextNode("BESbswy");
	node.appendChild(text);
	var style = node.style;
	style.display = "block";
	style.position = "absolute";
	style.top = "-9999px";
	style.left = "-9999px";
	style.fontSize = "300px";
	style.width = "auto";
	style.height = "auto";
	style.lineHeight = "normal";
	style.margin = "0";
	style.padding = "0";
	style.fontVariant = "normal";
	style.whiteSpace = "nowrap";
	style.fontFamily = fontFamily;
	window.document.body.appendChild(node);
	return node;
};
lime_text_Font.prototype = {
	__copyFrom: function(other) {
		if(other != null) {
			this.ascender = other.ascender;
			this.descender = other.descender;
			this.height = other.height;
			this.name = other.name;
			this.numGlyphs = other.numGlyphs;
			this.src = other.src;
			this.underlinePosition = other.underlinePosition;
			this.underlineThickness = other.underlineThickness;
			this.unitsPerEM = other.unitsPerEM;
			this.__fontID = other.__fontID;
			this.__fontPath = other.__fontPath;
			this.__init = true;
		}
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__loadFromName: function(name) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		this.name = name;
		var userAgent = $global.navigator.userAgent.toLowerCase();
		var isSafari = userAgent.indexOf(" safari/") >= 0 && userAgent.indexOf(" chrome/") < 0;
		var isUIWebView = new EReg("(iPhone|iPod|iPad).*AppleWebKit(?!.*Version)","i").match(userAgent);
		if(!isSafari && !isUIWebView && (window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load)))) {
			window.document.fonts.load("1em '" + name + "'").then(function(_) {
				promise.complete(_gthis);
			},function(_) {
				lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 513, className : "lime.text.Font", methodName : "__loadFromName"});
				promise.complete(_gthis);
			});
		} else {
			var node1 = lime_text_Font.__measureFontNode("'" + name + "', sans-serif");
			var node2 = lime_text_Font.__measureFontNode("'" + name + "', serif");
			var width1 = node1.offsetWidth;
			var width2 = node2.offsetWidth;
			var interval = -1;
			var timeout = 3000;
			var intervalLength = 50;
			var intervalCount = 0;
			var loaded;
			var timeExpired;
			var checkFont = function() {
				intervalCount += 1;
				loaded = node1.offsetWidth != width1 || node2.offsetWidth != width2;
				timeExpired = intervalCount * intervalLength >= timeout;
				if(loaded || timeExpired) {
					window.clearInterval(interval);
					node1.parentNode.removeChild(node1);
					node2.parentNode.removeChild(node2);
					node1 = null;
					node2 = null;
					if(timeExpired) {
						lime_utils_Log.warn("Could not load web font \"" + name + "\"",{ fileName : "lime/text/Font.hx", lineNumber : 548, className : "lime.text.Font", methodName : "__loadFromName"});
					}
					promise.complete(_gthis);
				}
			};
			interval = window.setInterval(checkFont,intervalLength);
		}
		return promise.future;
	}
	,__class__: lime_text_Font
};
var _$_$ASSET_$_$fonts_$arial_$ttf = $hx_exports["__ASSET__fonts_arial_ttf"] = function() {
	this.ascender = 1854;
	this.descender = -434;
	this.height = 2355;
	this.numGlyphs = 4503;
	this.underlinePosition = -292;
	this.underlineThickness = 150;
	this.unitsPerEM = 2048;
	this.name = "Arial";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__fonts_arial_ttf"] = _$_$ASSET_$_$fonts_$arial_$ttf;
_$_$ASSET_$_$fonts_$arial_$ttf.__name__ = "__ASSET__fonts_arial_ttf";
_$_$ASSET_$_$fonts_$arial_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$arial_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$arial_$ttf
});
var _$_$ASSET_$_$fonts_$minecraftia_$ttf = $hx_exports["__ASSET__fonts_minecraftia_ttf"] = function() {
	this.ascender = 1280;
	this.descender = -256;
	this.height = 1536;
	this.numGlyphs = 212;
	this.underlinePosition = 73;
	this.underlineThickness = 51;
	this.unitsPerEM = 1024;
	this.name = "Minecraftia Regular";
	lime_text_Font.call(this);
};
$hxClasses["__ASSET__fonts_minecraftia_ttf"] = _$_$ASSET_$_$fonts_$minecraftia_$ttf;
_$_$ASSET_$_$fonts_$minecraftia_$ttf.__name__ = "__ASSET__fonts_minecraftia_ttf";
_$_$ASSET_$_$fonts_$minecraftia_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$minecraftia_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$minecraftia_$ttf
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = "openfl.text.Font";
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.loadFromName = function(path) {
	return lime_text_Font.loadFromName(path).then(function(limeFont) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		return lime_app_Future.withValue(font);
	});
};
openfl_text_Font.registerFont = function(font) {
	var instance = null;
	if(js_Boot.getClass(font) == null) {
		instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	} else {
		instance = js_Boot.__cast(font , openfl_text_Font);
	}
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
		openfl_text_Font.__fontByName.h[instance.name] = instance;
	}
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	__fromLimeFont: function(font) {
		this.__copyFrom(font);
	}
	,__class__: openfl_text_Font
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf = $hx_exports["__ASSET__OPENFL__fonts_arial_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$fonts_$arial_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_arial_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf.__name__ = "__ASSET__OPENFL__fonts_arial_ttf";
_$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$arial_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf = $hx_exports["__ASSET__OPENFL__fonts_minecraftia_ttf"] = function() {
	this.__fromLimeFont(new _$_$ASSET_$_$fonts_$minecraftia_$ttf());
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_minecraftia_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf.__name__ = "__ASSET__OPENFL__fonts_minecraftia_ttf";
_$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$minecraftia_$ttf
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
Reflect.getProperty = function(o,field) {
	var tmp;
	if(o == null) {
		return null;
	} else {
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["get_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			return o[tmp]();
		} else {
			return o[field];
		}
	}
};
Reflect.setProperty = function(o,field,value) {
	var tmp;
	var tmp1;
	if(o.__properties__) {
		tmp = o.__properties__["set_" + field];
		tmp1 = tmp;
	} else {
		tmp1 = false;
	}
	if(tmp1) {
		o[tmp](value);
	} else {
		o[field] = value;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var _$String_String_$Impl_$ = function() { };
$hxClasses["_String.String_Impl_"] = _$String_String_$Impl_$;
_$String_String_$Impl_$.__name__ = "_String.String_Impl_";
_$String_String_$Impl_$.fromCharCode = function(code) {
	return String.fromCodePoint(code);
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.htmlUnescape = function(s) {
	return s.split("&gt;").join(">").split("&lt;").join("<").split("&quot;").join("\"").split("&#039;").join("'").split("&amp;").join("&");
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__:"ValueType",__constructs__:null
	,TNull: {_hx_name:"TNull",_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_name:"TInt",_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_name:"TFloat",_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_name:"TBool",_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_name:"TObject",_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_name:"TFunction",_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TClass",$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_._hx_name="TEnum",$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_name:"TUnknown",_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TClass,ValueType.TEnum,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.resolveEnum = function(name) {
	return $hxEnums[name];
};
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var params = enm.__constructs__[a._hx_index].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var params = enm.__constructs__[e._hx_index].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var UInt = {};
UInt.gt = function(a,b) {
	var aNeg = a < 0;
	var bNeg = b < 0;
	if(aNeg != bNeg) {
		return aNeg;
	} else {
		return a > b;
	}
};
UInt.toFloat = function(this1) {
	var int = this1;
	if(int < 0) {
		return 4294967296.0 + int;
	} else {
		return int + 0.0;
	}
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var com_coffeebreak_BrowserType = $hxEnums["com.coffeebreak.BrowserType"] = { __ename__:"com.coffeebreak.BrowserType",__constructs__:null
	,BROWSER_DESKTOP: {_hx_name:"BROWSER_DESKTOP",_hx_index:0,__enum__:"com.coffeebreak.BrowserType",toString:$estr}
	,BROWSER_MOBILE: {_hx_name:"BROWSER_MOBILE",_hx_index:1,__enum__:"com.coffeebreak.BrowserType",toString:$estr}
	,BROWSER_UNDEFINED: {_hx_name:"BROWSER_UNDEFINED",_hx_index:2,__enum__:"com.coffeebreak.BrowserType",toString:$estr}
};
com_coffeebreak_BrowserType.__constructs__ = [com_coffeebreak_BrowserType.BROWSER_DESKTOP,com_coffeebreak_BrowserType.BROWSER_MOBILE,com_coffeebreak_BrowserType.BROWSER_UNDEFINED];
var com_coffeebreak_data_AnimationTypes = function() { };
$hxClasses["com.coffeebreak.data.AnimationTypes"] = com_coffeebreak_data_AnimationTypes;
com_coffeebreak_data_AnimationTypes.__name__ = "com.coffeebreak.data.AnimationTypes";
var com_coffeebreak_data_ComponentsHolder = function() {
	this.cHolder = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.data.ComponentsHolder"] = com_coffeebreak_data_ComponentsHolder;
com_coffeebreak_data_ComponentsHolder.__name__ = "com.coffeebreak.data.ComponentsHolder";
com_coffeebreak_data_ComponentsHolder.prototype = {
	setComponent: function(_cName,_component) {
		this.cHolder.h[_cName] = _component;
	}
	,getComponent: function(_cName) {
		if(Object.prototype.hasOwnProperty.call(this.cHolder.h,_cName) == true) {
			return this.cHolder.h[_cName];
		} else {
			haxe_Log.trace("Component doesn't exist " + _cName,{ fileName : "com/coffeebreak/data/ComponentsHolder.hx", lineNumber : 39, className : "com.coffeebreak.data.ComponentsHolder", methodName : "getComponent"});
		}
		return null;
	}
	,__class__: com_coffeebreak_data_ComponentsHolder
};
var com_coffeebreak_managers_FontManager = function() {
	this.fontHolder = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.managers.FontManager"] = com_coffeebreak_managers_FontManager;
com_coffeebreak_managers_FontManager.__name__ = "com.coffeebreak.managers.FontManager";
com_coffeebreak_managers_FontManager.prototype = {
	registerFonts: function(_fonts) {
		var fi = null;
		var _g = 0;
		var _g1 = _fonts.length;
		while(_g < _g1) {
			var i = _g++;
			fi = _fonts[i];
			var this1 = this.fontHolder;
			var key = fi.get_fontName();
			var value = openfl_utils_Assets.getFont(fi.get_fontPath());
			this1.h[key] = value;
		}
	}
	,__class__: com_coffeebreak_managers_FontManager
};
var com_coffeebreak_managers_OrientationManager = function() {
	this.ORIENTATION = com_coffeebreak_managers_OrientationManager.PORTRAIT;
	this.init();
	this.orientationSignal = new msignal_Signal1();
};
$hxClasses["com.coffeebreak.managers.OrientationManager"] = com_coffeebreak_managers_OrientationManager;
com_coffeebreak_managers_OrientationManager.__name__ = "com.coffeebreak.managers.OrientationManager";
com_coffeebreak_managers_OrientationManager.prototype = {
	init: function() {
		window.addEventListener("resize",$bind(this,this.handleWindowResize));
		this.ORIENTATION = this.checkOrientation();
	}
	,handleWindowResize: function(e) {
		haxe_Log.trace("--------ORIENTATION RESIZE-------",{ fileName : "com/coffeebreak/managers/OrientationManager.hx", lineNumber : 43, className : "com.coffeebreak.managers.OrientationManager", methodName : "handleWindowResize"});
		this.ORIENTATION = this.checkOrientation();
		this.get_orientationSignal().dispatch(this.ORIENTATION);
	}
	,checkOrientation: function() {
		if(window.innerWidth > window.innerHeight) {
			return com_coffeebreak_managers_OrientationManager.LANDSCAPE;
		}
		return com_coffeebreak_managers_OrientationManager.PORTRAIT;
	}
	,get_orientationSignal: function() {
		return this.orientationSignal;
	}
	,__class__: com_coffeebreak_managers_OrientationManager
	,__properties__: {get_orientationSignal:"get_orientationSignal"}
};
var com_coffeebreak_utils_MultiScreenNamesConverter = function() {
};
$hxClasses["com.coffeebreak.utils.MultiScreenNamesConverter"] = com_coffeebreak_utils_MultiScreenNamesConverter;
com_coffeebreak_utils_MultiScreenNamesConverter.__name__ = "com.coffeebreak.utils.MultiScreenNamesConverter";
com_coffeebreak_utils_MultiScreenNamesConverter.prototype = {
	nameConversion: function(_name) {
		if(com_coffeebreak_CoffeeConstants.MULTISCREEN == true) {
			if(com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION == "portrait") {
				_name += "Portrait";
			} else {
				_name += "Landscape";
			}
		}
		return _name;
	}
	,nameConversionWithBox: function(_name) {
		var box = HxOverrides.substr(_name,0,_name.indexOf("_box"));
		if(com_coffeebreak_CoffeeConstants.MULTISCREEN == true) {
			if(com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.ORIENTATION == "portrait") {
				_name = box + "Portrait_box";
			} else {
				_name = box + "Landscape_box";
			}
		}
		return _name;
	}
	,__class__: com_coffeebreak_utils_MultiScreenNamesConverter
};
var com_coffeebreak_CoffeeConstants = function() { };
$hxClasses["com.coffeebreak.CoffeeConstants"] = com_coffeebreak_CoffeeConstants;
com_coffeebreak_CoffeeConstants.__name__ = "com.coffeebreak.CoffeeConstants";
var com_coffeebreak_core_Preloader = function() {
	this.delay = 60;
	openfl_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.onInit));
	this.addEventListener("complete",$bind(this,this.onLoaded));
	this.addEventListener("progress",$bind(this,this.onUpdate));
};
$hxClasses["com.coffeebreak.core.Preloader"] = com_coffeebreak_core_Preloader;
com_coffeebreak_core_Preloader.__name__ = "com.coffeebreak.core.Preloader";
com_coffeebreak_core_Preloader.__super__ = openfl_display_Sprite;
com_coffeebreak_core_Preloader.prototype = $extend(openfl_display_Sprite.prototype,{
	onInit: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onInit));
	}
	,onLoaded: function(e) {
		haxe_Log.trace("game loaded ",{ fileName : "com/coffeebreak/core/Preloader.hx", lineNumber : 47, className : "com.coffeebreak.core.Preloader", methodName : "onLoaded"});
		e.preventDefault();
		this.removeEventListener("complete",$bind(this,this.onLoaded));
		this.removeEventListener("progress",$bind(this,this.onUpdate));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(e) {
		this.set_progresNum(e.bytesLoaded / e.bytesTotal);
	}
	,runApplication: function(e) {
		this.delay--;
		if(this.delay == 0) {
			haxe_Log.trace("delayed start",{ fileName : "com/coffeebreak/core/Preloader.hx", lineNumber : 72, className : "com.coffeebreak.core.Preloader", methodName : "runApplication"});
			this.parent.removeChild(this);
			this.removeEventListener("enterFrame",$bind(this,this.runApplication));
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,get_progresNum: function() {
		return this.progresNum;
	}
	,set_progresNum: function(value) {
		return this.progresNum = value;
	}
	,__class__: com_coffeebreak_core_Preloader
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_progresNum:"set_progresNum",get_progresNum:"get_progresNum"})
});
var com_coffeebreak_GamePreloader = function() {
	this.logo = null;
	var _gthis = this;
	com_coffeebreak_core_Preloader.call(this);
	openfl_display_BitmapData.loadFromFile("assets/preloader/preloaderLogo.png").onComplete(function(_bmd) {
		if(_bmd != null) {
			_gthis.logo = new openfl_display_Bitmap(_bmd);
			_gthis.logo.smoothing = true;
			_gthis.logo.set_x(openfl_Lib.get_current().stage.stageWidth / 2 - _gthis.logo.get_width() / 2);
			_gthis.logo.set_y(openfl_Lib.get_current().stage.stageHeight / 2 - _gthis.logo.get_height() / 2);
			_gthis.addChild(_gthis.logo);
		}
		if(_gthis.logo != null) {
			_gthis.progress = new openfl_display_Sprite();
			_gthis.progress.get_graphics().beginFill(16777215);
			_gthis.progress.get_graphics().lineStyle(3,11966000);
			_gthis.progress.get_graphics().drawRoundRect(0,0,_gthis.logo.get_width(),20,10,10);
			_gthis.progress.get_graphics().endFill();
			_gthis.addChild(_gthis.progress);
			_gthis.progress.set_x(_gthis.logo.get_x());
			_gthis.progress.set_y(_gthis.logo.get_y() + _gthis.logo.get_height() + 10);
			_gthis.progress.set_scaleX(0);
		}
	});
};
$hxClasses["com.coffeebreak.GamePreloader"] = com_coffeebreak_GamePreloader;
com_coffeebreak_GamePreloader.__name__ = "com.coffeebreak.GamePreloader";
com_coffeebreak_GamePreloader.__super__ = com_coffeebreak_core_Preloader;
com_coffeebreak_GamePreloader.prototype = $extend(com_coffeebreak_core_Preloader.prototype,{
	onUpdate: function(e) {
		com_coffeebreak_core_Preloader.prototype.onUpdate.call(this,e);
		if(this.progress == null) {
			return;
		}
		if(this.get_progresNum() == 0) {
			this.progress.set_scaleX(0);
		} else {
			this.progress.set_scaleX(this.get_progresNum());
		}
	}
	,__class__: com_coffeebreak_GamePreloader
});
var com_coffeebreak_core_FontItem = function(_fName,_fPath) {
	this.set_fontName(_fName);
	this.set_fontPath(_fPath);
};
$hxClasses["com.coffeebreak.core.FontItem"] = com_coffeebreak_core_FontItem;
com_coffeebreak_core_FontItem.__name__ = "com.coffeebreak.core.FontItem";
com_coffeebreak_core_FontItem.prototype = {
	get_fontName: function() {
		return this.fontName;
	}
	,set_fontName: function(value) {
		return this.fontName = value;
	}
	,get_fontPath: function() {
		return this.fontPath;
	}
	,set_fontPath: function(value) {
		return this.fontPath = value;
	}
	,__class__: com_coffeebreak_core_FontItem
	,__properties__: {set_fontPath:"set_fontPath",get_fontPath:"get_fontPath",set_fontName:"set_fontName",get_fontName:"get_fontName"}
};
var com_coffeebreak_GameProperties = function() { };
$hxClasses["com.coffeebreak.GameProperties"] = com_coffeebreak_GameProperties;
com_coffeebreak_GameProperties.__name__ = "com.coffeebreak.GameProperties";
var com_coffeebreak_core_IGameItem = function() { };
$hxClasses["com.coffeebreak.core.IGameItem"] = com_coffeebreak_core_IGameItem;
com_coffeebreak_core_IGameItem.__name__ = "com.coffeebreak.core.IGameItem";
com_coffeebreak_core_IGameItem.__isInterface__ = true;
var com_coffeebreak_core_GameItem = function(_itemName,_positionName,_scaleName,_proportion) {
	if(_proportion == null) {
		_proportion = false;
	}
	this.scaleProportion = false;
	openfl_display_Sprite.call(this);
	this.position = com_coffeebreak_CoffeeConstants.POSITION_MANAGER;
	this.set_rect(new openfl_geom_Rectangle());
	this.scaleProportion = _proportion;
	if(_positionName != null) {
		this.set_itemName(_positionName);
		this.set_name(_positionName);
		if(_positionName.indexOf("Portrait") != -1) {
			this.set_itemName(HxOverrides.substr(_positionName,0,_positionName.indexOf("Portrait")));
			this.set_name(this.get_itemName());
		}
		if(_positionName.indexOf("Landscape") != -1) {
			this.set_itemName(HxOverrides.substr(_positionName,0,_positionName.indexOf("Landscape")));
			this.set_name(this.get_itemName());
		}
	}
	if(_itemName == null) {
		return;
	}
	this.init(_itemName,_positionName,_scaleName);
};
$hxClasses["com.coffeebreak.core.GameItem"] = com_coffeebreak_core_GameItem;
com_coffeebreak_core_GameItem.__name__ = "com.coffeebreak.core.GameItem";
com_coffeebreak_core_GameItem.__interfaces__ = [com_coffeebreak_core_IGameItem];
com_coffeebreak_core_GameItem.__super__ = openfl_display_Sprite;
com_coffeebreak_core_GameItem.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function(_itemName,_positionName,_scaleName) {
		if(com_coffeebreak_CoffeeConstants.USE_IMG_FROM_TEXTURE) {
			var ob = com_coffeebreak_CoffeeConstants.LOADER_MANAGER.getImage(_itemName);
			if(ob != null) {
				this.bmpSource = ob.get_bmp();
				this.set_rect(ob.get_rect());
			} else {
				this.bmpSource = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName));
				this.set_rect(this.bmpSource.getRect(this));
			}
		} else {
			this.bmpSource = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName));
			this.set_rect(this.bmpSource.getRect(this));
		}
		this.bmpSource.smoothing = true;
		this.addChild(this.bmpSource);
		if(_positionName != null) {
			this.position.setItemScale(this.bmpSource,_positionName,this.get_rect(),this.scaleProportion);
			this.position.setItemXY(this,_positionName,this.get_rect());
		}
		if(_scaleName != null) {
			this.position.setItemScale(this.bmpSource,_scaleName,this.get_rect(),this.scaleProportion);
		}
		var regPoint = this.position.getRegistrationPoint(_positionName);
		if(regPoint == null) {
			regPoint = this.position.getRegistrationPoint(_scaleName);
		}
		if(regPoint != null) {
			if(regPoint != "topleft") {
				this.pivotPointCenter(this.bmpSource);
			}
		}
		if(this.bmpSource != null) {
			this.set_originWidth(this.bmpSource.get_width());
			this.set_originHeight(this.bmpSource.get_height());
		} else {
			this.set_originWidth(this.get_width());
			this.set_originHeight(this.get_height());
		}
	}
	,pivotPointCenter: function(_bmp) {
		var mat = _bmp.get_transform().get_matrix();
		mat.translate(_bmp.get_width() / 2 * -1,_bmp.get_height() / 2 * -1);
		_bmp.get_transform().set_matrix(mat);
	}
	,get_rect: function() {
		return this.rect;
	}
	,set_rect: function(value) {
		return this.rect = value;
	}
	,get_itemName: function() {
		return this.itemName;
	}
	,set_itemName: function(value) {
		return this.itemName = value;
	}
	,get_ID: function() {
		return this.ID;
	}
	,set_ID: function(value) {
		return this.ID = value;
	}
	,set_originWidth: function(value) {
		return this.originWidth = value;
	}
	,set_originHeight: function(value) {
		return this.originHeight = value;
	}
	,__class__: com_coffeebreak_core_GameItem
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_originHeight:"set_originHeight",set_originWidth:"set_originWidth",set_ID:"set_ID",get_ID:"get_ID",set_itemName:"set_itemName",get_itemName:"get_itemName",set_rect:"set_rect",get_rect:"get_rect"})
});
var com_coffeebreak_components_AchieveItem = function(_itemName,_positionName,_scaleName,_proportion) {
	if(_proportion == null) {
		_proportion = false;
	}
	com_coffeebreak_core_GameItem.call(this,_itemName,_positionName,_scaleName,_proportion);
	this.iconHolder = new openfl_display_Sprite();
	this.addChild(this.iconHolder);
	this.originX = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("achBttTxt");
	this.label = com_coffeebreak_utils_TextUtils.createText("achBttTxt","");
	this.label.set_multiline(true);
	this.label.set_wordWrap(true);
	this.addChild(this.label);
};
$hxClasses["com.coffeebreak.components.AchieveItem"] = com_coffeebreak_components_AchieveItem;
com_coffeebreak_components_AchieveItem.__name__ = "com.coffeebreak.components.AchieveItem";
com_coffeebreak_components_AchieveItem.__super__ = com_coffeebreak_core_GameItem;
com_coffeebreak_components_AchieveItem.prototype = $extend(com_coffeebreak_core_GameItem.prototype,{
	addIcon: function(_name) {
		var gi = new com_coffeebreak_core_GameItem(_name,"achBttIcon");
		this.iconHolder.addChild(gi);
	}
	,updateLabel: function(_val) {
		this.label.set_text(_val);
		if(this.label.get_numLines() == 1) {
			this.label.set_autoSize(0);
			this.align();
		}
		this.label.set_autoSize(2);
	}
	,align: function() {
		this.label.set_y(this.bmpSource.get_height() / 2 - this.label.get_height() / 2);
	}
	,__class__: com_coffeebreak_components_AchieveItem
});
var com_coffeebreak_core_BaseScreen = function() {
	this.shouldBeDestroyed = true;
	openfl_display_Sprite.call(this);
	this.eventListenerMap = new haxe_ds_StringMap();
	this.gameEndSignal = new msignal_Signal1();
	this.screenCreatedSignal = new msignal_Signal0();
	this.disabledButtonsAlpha = .5;
	this.canClick = false;
	this.repositionNames = [];
	if(com_coffeebreak_utils_DetectSystem.getBrowserType() == com_coffeebreak_BrowserType.BROWSER_MOBILE) {
		com_coffeebreak_CoffeeConstants.ORIENTATION_MANAGER.get_orientationSignal().add($bind(this,this.listenOrientationChange));
	}
	if(com_coffeebreak_CoffeeConstants.SCENE_CREATOR != null) {
		this.set_sceneCreator(com_coffeebreak_CoffeeConstants.SCENE_CREATOR);
	}
};
$hxClasses["com.coffeebreak.core.BaseScreen"] = com_coffeebreak_core_BaseScreen;
com_coffeebreak_core_BaseScreen.__name__ = "com.coffeebreak.core.BaseScreen";
com_coffeebreak_core_BaseScreen.__super__ = openfl_display_Sprite;
com_coffeebreak_core_BaseScreen.prototype = $extend(openfl_display_Sprite.prototype,{
	init: function() {
	}
	,destroy: function() {
		if(this.shouldBeDestroyed == false) {
			return;
		}
		this.destroyLayers();
		this.emptyListenerMap();
		var child;
		var type;
		while(this.get_numChildren() > 0) {
			child = this.getChildAt(0);
			if(Object.prototype.hasOwnProperty.call(child,"shouldBeDestroyed") == true) {
				if(child.shouldBeDestroyed == false) {
					this.removeChild(child);
					continue;
				}
			}
			type = js_Boot.getClass(child);
			if(type != com_coffeebreak_core_CoffeeTextField) {
				this.killAllChildren(child);
			}
			if(child.parent != null) {
				this.removeChild(child);
			}
			child = null;
		}
		this.get_sceneCreator().removeFromSceneHolder(this.get_screenName());
	}
	,killAllChildren: function(_item) {
		var child;
		while(_item.numChildren > 0) {
			child = _item.getChildAt(0);
			if(Object.prototype.hasOwnProperty.call(child,"destroy") == true) {
				child.destroy();
			}
			_item.removeChild(child);
			child = null;
		}
		if(Object.prototype.hasOwnProperty.call(_item,"destroy") == true) {
			_item.destroy();
		} else if(_item.parent != null) {
			_item.parent.removeChild(_item);
		}
	}
	,destroyLayers: function() {
		var child = null;
		var type = null;
		var h = this.get_sceneCreator().layersHolder.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var layer = js_Boot.__cast(this.get_sceneCreator().getFromLayer(key) , openfl_display_Sprite);
			haxe_Log.trace(layer.get_name(),{ fileName : "com/coffeebreak/core/BaseScreen.hx", lineNumber : 155, className : "com.coffeebreak.core.BaseScreen", methodName : "destroyLayers"});
			while(layer.get_numChildren() > 0) {
				var child = layer.getChildAt(0);
				if(child.parent != null) {
					child.parent.removeChild(child);
				}
				child = null;
			}
		}
		this.get_sceneCreator().destroyLayers();
	}
	,addButton: function(_item) {
		this.eventListenerMap.h[_item.name] = _item;
		_item.mouseEnabled = true;
		_item.addEventListener("click",$bind(this,this.onClick));
	}
	,removeButton: function(_item) {
		if(_item == null) {
			return;
		}
		if(_item.name == null) {
			return;
		}
		if(Object.prototype.hasOwnProperty.call(this.eventListenerMap.h,_item.name)) {
			var key = _item.name;
			var _this = this.eventListenerMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
			_item.mouseEnabled = false;
			_item.removeEventListener("click",$bind(this,this.onClick));
		}
	}
	,onClick: function(e) {
		this.set_targetItem(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_GameItem));
	}
	,dispatchCoffeeEvent: function(_data) {
		this.dispatchEvent(new com_coffeebreak_events_CoffeeEvent(com_coffeebreak_events_CoffeeEvent.KLIK,_data));
	}
	,emptyListenerMap: function() {
		var item;
		if(this.eventListenerMap == null) {
			return;
		}
		var h = this.eventListenerMap.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(this.eventListenerMap.h[key] == false) {
				continue;
			}
			item = this.eventListenerMap.h[key];
			this.removeButton(item);
		}
		this.eventListenerMap = null;
	}
	,listenOrientationChange: function(_orientation) {
		var _g = 0;
		var _g1 = this.repositionNames.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.get_sceneCreator().getElementByID(this.get_screenName(),this.repositionNames[i]);
			haxe_Log.trace(this.repositionNames[i],{ fileName : "com/coffeebreak/core/BaseScreen.hx", lineNumber : 283, className : "com.coffeebreak.core.BaseScreen", methodName : "listenOrientationChange"});
			if(item == null) {
				item = this.runThrougLayers(this.repositionNames[i]);
			}
			haxe_Log.trace(item,{ fileName : "com/coffeebreak/core/BaseScreen.hx", lineNumber : 289, className : "com.coffeebreak.core.BaseScreen", methodName : "listenOrientationChange"});
			if(item != null) {
				if(item.updateOrientation != null) {
					if(this.repositionNames[i].indexOf("_box") != -1) {
						var tmp = com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversionWithBox(this.repositionNames[i]);
						item.updateOrientation(tmp);
					} else {
						var tmp1 = com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversion(this.repositionNames[i]);
						item.updateOrientation(tmp1);
					}
				} else if(this.repositionNames[i].indexOf("_box") != -1) {
					this.repositionOtherItems(item,com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversionWithBox(this.repositionNames[i]));
				} else {
					this.repositionOtherItems(item,com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversion(this.repositionNames[i]));
				}
			}
		}
	}
	,runThrougLayers: function(_targetId) {
		var h = this.get_sceneCreator().layersHolder.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var layer = js_Boot.__cast(this.get_sceneCreator().getFromLayer(key) , openfl_display_Sprite);
			var _g = 0;
			var _g1 = layer.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				var child = layer.getChildAt(i);
				if(child != null) {
					if(_targetId == child.get_name()) {
						return child;
					}
				}
			}
		}
		return null;
	}
	,repositionOtherItems: function(_item,_itemName) {
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.setItemXY(_item,_itemName,_item.getRect(this));
	}
	,pauseGame: function() {
	}
	,unpauseGame: function() {
	}
	,resize: function() {
	}
	,resizeDone: function() {
	}
	,get_sceneCreator: function() {
		return this.sceneCreator;
	}
	,set_sceneCreator: function(value) {
		return this.sceneCreator = value;
	}
	,get_targetItem: function() {
		return this.targetItem;
	}
	,set_targetItem: function(value) {
		return this.targetItem = value;
	}
	,get_screenName: function() {
		return this.screenName;
	}
	,set_screenName: function(value) {
		return this.screenName = value;
	}
	,get_screenCreatedSignal: function() {
		return this.screenCreatedSignal;
	}
	,__class__: com_coffeebreak_core_BaseScreen
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_screenCreatedSignal:"get_screenCreatedSignal",set_screenName:"set_screenName",get_screenName:"get_screenName",set_targetItem:"set_targetItem",get_targetItem:"get_targetItem",set_sceneCreator:"set_sceneCreator",get_sceneCreator:"get_sceneCreator"})
});
var com_coffeebreak_components_AchievementPanel = function() {
	this.gap = 3;
	com_coffeebreak_core_BaseScreen.call(this);
	this.itemsHolder = [];
	this.movedPosition = 0;
	this.aLabel = com_coffeebreak_utils_TextUtils.createText("achieveLabel",null,"achLabel");
	this.aLabel.set_embedFonts(true);
	this.aLabel.set_visible(false);
	this.addChild(this.aLabel);
	this.scrollContainer = new feathers_controls_ScrollContainer();
	this.scrollContainer.set_backgroundSkin(null);
	this.scrollContainer.set_maxHeight(197);
	this.addChild(this.scrollContainer);
	this.aData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
	this.pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("achPanel_box");
	this.soundCounter = 1;
	this.achCounter = 0;
	var pd1 = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("achBtt");
	this.itemsHeight = pd1.get_height();
	this.scrollContainer.set_x(pd1.get_posX());
	this.scrollContainer.set_y(pd1.get_posY());
	var posY = 0;
	var aItem = null;
	var tmpArray = [];
	var key = this.aData.achData.keys();
	while(key.hasNext()) {
		var key1 = key.next();
		aItem = this.updateAchievementData(this.aData.achData.h[key1],posY);
		if(tmpArray.length == 0) {
			tmpArray.push(aItem);
		} else {
			tmpArray.unshift(aItem);
		}
	}
	var _g = 0;
	var _g1 = tmpArray.length;
	while(_g < _g1) {
		var i = _g++;
		var value = posY;
		Reflect.setProperty(tmpArray[i],"y",value);
		posY += aItem.get_height() + this.gap;
		this.achCounter++;
	}
	if(posY > 0) {
		this.aLabel.set_visible(true);
	}
	this.set_x(this.pd.get_posX());
	this.set_y(this.pd.get_posY());
};
$hxClasses["com.coffeebreak.components.AchievementPanel"] = com_coffeebreak_components_AchievementPanel;
com_coffeebreak_components_AchievementPanel.__name__ = "com.coffeebreak.components.AchievementPanel";
com_coffeebreak_components_AchievementPanel.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_AchievementPanel.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	updateAchievementData: function(_data,_posY) {
		var aItem = new com_coffeebreak_components_AchieveItem("achBttSkin.png");
		aItem.updateLabel(_data.txt);
		aItem.addIcon(_data.img);
		this.scrollContainer.addChild(aItem);
		this.itemsHolder.push(aItem);
		return aItem;
	}
	,addAchievement: function(_data) {
		if(this.aData.checkAchievement(_data.txt) || _data.txt == "") {
			return;
		}
		if(!this.aLabel.get_visible()) {
			this.aLabel.set_visible(true);
		}
		var ct = this.itemsHolder.length;
		var cItem;
		while(ct > 0) {
			cItem = this.itemsHolder[ct - 1];
			cItem.set_y(ct * this.itemsHeight + this.gap);
			--ct;
		}
		var aItem = new com_coffeebreak_components_AchieveItem("achBttSkin.png");
		aItem.updateLabel(_data.txt);
		aItem.addIcon(_data.img);
		this.scrollContainer.addChild(aItem);
		this.itemsHolder.unshift(aItem);
		this.aData.setAchievement(this.achCounter,_data);
		this.achCounter++;
		if(this.soundCounter > 6) {
			this.soundCounter = 1;
		}
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playSound("achieve" + Std.string(Math.round(Math.random() * 5) + 1) + com_coffeebreak_CoffeeConstants.SOUND_SUFIX);
		this.pe.emitAchievementParticles(this.pd.get_posX() + 10,this.pd.get_posY() + this.movedPosition);
		this.pe.emitAchievementParticles(this.pd.get_posX() + this.get_width() - 20,this.pd.get_posY() + this.movedPosition);
		this.soundCounter++;
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
		if(this.scrollContainer.get_scrollY() > 0) {
			this.scrollContainer.set_scrollY(0);
		}
	}
	,adjustPositionAccordingMap: function(_val) {
		if(_val < 100) {
			this.scrollContainer.set_maxHeight(150);
		} else {
			this.scrollContainer.set_maxHeight(197);
		}
		this.movedPosition = _val + 5;
		this.set_y(this.pd.get_posY() + this.movedPosition);
	}
	,__class__: com_coffeebreak_components_AchievementPanel
});
var openfl_utils_Timer = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	if(isNaN(delay) || delay < 0) {
		throw haxe_Exception.thrown(new openfl_errors_Error("The delay specified is negative or not a finite number"));
	}
	openfl_events_EventDispatcher.call(this);
	this.__delay = delay;
	this.__repeatCount = repeatCount;
	this.running = false;
	this.currentCount = 0;
};
$hxClasses["openfl.utils.Timer"] = openfl_utils_Timer;
openfl_utils_Timer.__name__ = "openfl.utils.Timer";
openfl_utils_Timer.__super__ = openfl_events_EventDispatcher;
openfl_utils_Timer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	reset: function() {
		if(this.running) {
			this.stop();
		}
		this.currentCount = 0;
	}
	,start: function() {
		if(!this.running) {
			this.running = true;
			this.__timerID = window.setInterval($bind(this,this.timer_onTimer),this.__delay | 0);
		}
	}
	,stop: function() {
		this.running = false;
		if(this.__timerID != null) {
			window.clearInterval(this.__timerID);
			this.__timerID = null;
		}
	}
	,timer_onTimer: function() {
		this.currentCount++;
		if(this.__repeatCount > 0 && this.currentCount >= this.__repeatCount) {
			this.stop();
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
			this.dispatchEvent(new openfl_events_TimerEvent("timerComplete"));
		} else {
			this.dispatchEvent(new openfl_events_TimerEvent("timer"));
		}
	}
	,__class__: openfl_utils_Timer
});
var com_coffeebreak_components_AutoCrafter = function(delay,repeatCount) {
	if(repeatCount == null) {
		repeatCount = 0;
	}
	openfl_utils_Timer.call(this,delay,repeatCount);
};
$hxClasses["com.coffeebreak.components.AutoCrafter"] = com_coffeebreak_components_AutoCrafter;
com_coffeebreak_components_AutoCrafter.__name__ = "com.coffeebreak.components.AutoCrafter";
com_coffeebreak_components_AutoCrafter.__super__ = openfl_utils_Timer;
com_coffeebreak_components_AutoCrafter.prototype = $extend(openfl_utils_Timer.prototype,{
	get_item: function() {
		return this.item;
	}
	,set_item: function(value) {
		return this.item = value;
	}
	,__class__: com_coffeebreak_components_AutoCrafter
	,__properties__: {set_item:"set_item",get_item:"get_item"}
});
var com_coffeebreak_screens_BaseShadowScreen = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_screenSignal(new msignal_Signal1());
	if(com_coffeebreak_CoffeeConstants.STAGE.stageHeight < com_coffeebreak_CoffeeConstants.BASE_HEIGHT) {
		this.shadowScreen = new com_coffeebreak_core_ShadowLayer(0,.5,com_coffeebreak_CoffeeConstants.BASE_WIDTH,com_coffeebreak_CoffeeConstants.BASE_HEIGHT);
	} else {
		this.shadowScreen = new com_coffeebreak_core_ShadowLayer(0,.5,com_coffeebreak_CoffeeConstants.BASE_WIDTH,com_coffeebreak_CoffeeConstants.BASE_HEIGHT);
	}
	this.addEventListener("addedToStage",$bind(this,this.onAddedToStage));
};
$hxClasses["com.coffeebreak.screens.BaseShadowScreen"] = com_coffeebreak_screens_BaseShadowScreen;
com_coffeebreak_screens_BaseShadowScreen.__name__ = "com.coffeebreak.screens.BaseShadowScreen";
com_coffeebreak_screens_BaseShadowScreen.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_screens_BaseShadowScreen.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	onAddedToStage: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.onAddedToStage));
		this.stage.addEventListener("resize",$bind(this,this.onResize));
	}
	,redrawShadowScreen: function(_color,_alpha,_w,_h) {
		if(_h == null) {
			_h = 0;
		}
		if(_w == null) {
			_w = 0;
		}
		var gc = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("bcg");
		if(_w == 0) {
			_w = gc.get_width();
		}
		if(_h == 0) {
			_h = gc.get_height();
		}
		this.shadowScreen = new com_coffeebreak_core_ShadowLayer(_color,_alpha,_w,_h);
	}
	,onResize: function(e) {
		var _color = this.shadowScreen.get_transform().get_colorTransform().get_color();
		var _alpha = this.shadowScreen.get_alpha();
		this.redrawShadowScreen(_color,_alpha);
	}
	,destroy: function() {
		if(this.stage != null) {
			this.stage.removeEventListener("resize",$bind(this,this.onResize));
		}
		com_coffeebreak_core_BaseScreen.prototype.destroy.call(this);
	}
	,show: function() {
		this.shadowScreen.show();
	}
	,hide: function(_isAuto) {
		if(_isAuto == null) {
			_isAuto = false;
		}
		this.shadowScreen.hide();
	}
	,get_screenSignal: function() {
		return this.screenSignal;
	}
	,set_screenSignal: function(value) {
		return this.screenSignal = value;
	}
	,__class__: com_coffeebreak_screens_BaseShadowScreen
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_screenSignal:"set_screenSignal",get_screenSignal:"get_screenSignal"})
});
var com_coffeebreak_components_BeatPanel = function() {
	com_coffeebreak_screens_BaseShadowScreen.call(this);
	this.initScreen();
};
$hxClasses["com.coffeebreak.components.BeatPanel"] = com_coffeebreak_components_BeatPanel;
com_coffeebreak_components_BeatPanel.__name__ = "com.coffeebreak.components.BeatPanel";
com_coffeebreak_components_BeatPanel.__super__ = com_coffeebreak_screens_BaseShadowScreen;
com_coffeebreak_components_BeatPanel.prototype = $extend(com_coffeebreak_screens_BaseShadowScreen.prototype,{
	initScreen: function() {
		this.addChild(this.shadowScreen);
		this.set_holder(new openfl_display_Sprite());
		this.addChild(this.get_holder());
		var panel = new com_coffeebreak_core_GameItem("mainPanelSkin.png","settingsPanelBcg");
		this.get_holder().addChild(panel);
		this.mainTxt = com_coffeebreak_utils_TextUtils.createText("beatInfoTxt",null,"");
		this.mainTxt.set_multiline(true);
		this.mainTxt.set_wordWrap(true);
		this.mainTxt.set_embedFonts(true);
		this.get_holder().addChild(this.mainTxt);
		var btts_0 = "beatOkBtt";
		var btts_1 = "beatBtt1";
		var btts_2 = "beatBtt2";
		var labels_0 = "ok";
		var labels_1 = "go";
		var labels_2 = "no";
		this.buttonsHolder = [];
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_0);
		btt.set_ID(0);
		btt.initButtonText("panelBttTxt",null,labels_0);
		this.addButton(btt);
		this.get_holder().addChild(btt);
		this.buttonsHolder[0] = btt;
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_1);
		btt.set_ID(1);
		btt.initButtonText("panelBttTxt",null,labels_1);
		this.addButton(btt);
		this.get_holder().addChild(btt);
		this.buttonsHolder[1] = btt;
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_2);
		btt.set_ID(2);
		btt.initButtonText("panelBttTxt",null,labels_2);
		this.addButton(btt);
		this.get_holder().addChild(btt);
		this.buttonsHolder[2] = btt;
		this.icon = new com_coffeebreak_components_MapMarker();
		this.icon.set_x(this.mainTxt.get_x() + this.mainTxt.get_width() / 2 - this.icon.get_width() / 3);
		this.icon.set_y(this.buttonsHolder[0].get_y() - (this.icon.get_height() + 10));
		this.icon.set_visible(false);
		this.get_holder().addChild(this.icon);
		this.pe = new com_coffeebreak_components_particles_ParticleEffect();
		this.addChild(this.pe);
		var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("mainPanel_box");
		this.get_holder().set_x(pd.get_posX());
		this.get_holder().set_y(pd.get_posY());
		this.halfWidth = pd.get_width() / 2;
		this.halfHeight = pd.get_width() / 2;
		this.set_visible(false);
	}
	,showAlert: function(_type,_msg) {
		this.currentAlertType = _type;
		this.msg = "";
		if(_msg != null) {
			this.msg = com_coffeebreak_utils_TextUtils.replaceDelimiter(_msg,"{NL}","\n");
		}
		this.switchType(_type);
		this.show();
	}
	,show: function() {
		com_coffeebreak_screens_BaseShadowScreen.prototype.show.call(this);
		this.set_visible(true);
	}
	,hide: function(_isAuto) {
		if(_isAuto == null) {
			_isAuto = false;
		}
		com_coffeebreak_screens_BaseShadowScreen.prototype.hide.call(this,_isAuto);
		this.set_visible(false);
	}
	,switchType: function(_type) {
		if(this.msg.indexOf("Check") != -1) {
			this.icon.set_visible(true);
		} else {
			this.icon.set_visible(false);
		}
		if(_type == com_coffeebreak_data_AlertTypes.WIN) {
			this.isNewLocation = true;
			this.playMsgParticles();
			this.mainTxt.set_text(this.msg);
			this.setOKState();
		} else if(_type == com_coffeebreak_data_AlertTypes.MSG) {
			this.mainTxt.set_text(this.msg);
			this.setOKState();
		} else if(_type == com_coffeebreak_data_AlertTypes.GOTO) {
			this.mainTxt.set_text(this.msg);
			this.setPromptState();
		} else if(_type == com_coffeebreak_data_AlertTypes.END) {
			this.mainTxt.set_text(this.msg);
			this.setOKState();
		}
	}
	,playMsgParticles: function() {
		this.pe.emitMessageParticles(this.get_holder().get_x() - this.halfWidth,this.get_holder().get_y() - this.halfHeight);
		this.pe.emitMessageParticles(this.get_holder().get_x() - this.halfWidth,this.get_holder().get_y() + this.halfHeight);
		this.pe.emitMessageParticles(this.get_holder().get_x() + this.halfWidth,this.get_holder().get_y() - this.halfHeight);
		this.pe.emitMessageParticles(this.get_holder().get_x() + this.halfWidth,this.get_holder().get_y() + this.halfHeight);
	}
	,setOKState: function() {
		this.buttonsHolder[0].set_visible(true);
		this.buttonsHolder[1].set_visible(false);
		this.buttonsHolder[2].set_visible(false);
	}
	,setPromptState: function() {
		this.buttonsHolder[0].set_visible(false);
		this.buttonsHolder[1].set_visible(true);
		this.buttonsHolder[2].set_visible(true);
	}
	,onClick: function(e) {
		com_coffeebreak_screens_BaseShadowScreen.prototype.onClick.call(this,e);
		if(this.isNewLocation) {
			this.get_screenSignal().dispatch("NEW_LOCATION");
			this.isNewLocation = false;
			return;
		}
		if(this.gotoLocation) {
			this.gotoLocation = false;
			this.get_screenSignal().dispatch("GOTO_LOCATION");
			return;
		}
		if(this.get_targetItem().get_ID() == 0 || this.get_targetItem().get_ID() == 2) {
			this.hide();
			this.get_screenSignal().dispatch("CLOSE");
			return;
		} else if(this.get_targetItem().get_ID() == 1) {
			this.get_screenSignal().dispatch("GOTO_LOCATION");
		}
		this.get_screenSignal().dispatch(this.get_targetItem().get_name());
		haxe_Log.trace(this.get_targetItem().get_ID(),{ fileName : "src/com/coffeebreak/components/BeatPanel.hx", lineNumber : 229, className : "com.coffeebreak.components.BeatPanel", methodName : "onClick"});
	}
	,get_holder: function() {
		return this.holder;
	}
	,set_holder: function(value) {
		return this.holder = value;
	}
	,__class__: com_coffeebreak_components_BeatPanel
	,__properties__: $extend(com_coffeebreak_screens_BaseShadowScreen.prototype.__properties__,{set_holder:"set_holder",get_holder:"get_holder"})
});
var com_coffeebreak_components_HowerItemPanel = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.container = new openfl_display_Sprite();
	this.addChild(this.container);
	this.pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("samplePanel_box");
	this.bcg = com_coffeebreak_utils_SimplePrimitive.createRectWithLine(this.pd.get_width(),this.pd.get_height(),11579568,1,1,5987163);
	this.container.addChild(this.bcg);
	this.itemsHolder = new openfl_display_Sprite();
	this.addChild(this.itemsHolder);
	this.txtOriginPos = [];
	this.txtHolder = [];
	var tf = com_coffeebreak_utils_TextUtils.createText("panelTxt" + 1,"test");
	tf.set_embedFonts(true);
	this.addChild(tf);
	this.txtHolder[0] = tf;
	this.txtOriginPos[0] = tf.get_y();
	var tf = com_coffeebreak_utils_TextUtils.createText("panelTxt" + 2,"test");
	tf.set_embedFonts(true);
	this.addChild(tf);
	this.txtHolder[1] = tf;
	tf.set_autoSize(1);
	tf.set_wordWrap(true);
	this.txtOriginPos[1] = tf.get_y();
	this.txtHolder[1].set_multiline(true);
	this.txtHolder[1].set_wordWrap(true);
	this.startPD = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("panelHandle");
	this.imagesData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("IMAGES_DATA");
	this.set_visible(false);
};
$hxClasses["com.coffeebreak.components.HowerItemPanel"] = com_coffeebreak_components_HowerItemPanel;
com_coffeebreak_components_HowerItemPanel.__name__ = "com.coffeebreak.components.HowerItemPanel";
com_coffeebreak_components_HowerItemPanel.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_HowerItemPanel.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	clearPanel: function() {
		while(this.itemsHolder.get_numChildren() > 0) this.itemsHolder.removeChildAt(0);
		var _g = 0;
		var _g1 = this.txtHolder.length;
		while(_g < _g1) {
			var i = _g++;
			this.txtHolder[i].set_y(this.txtOriginPos[i]);
		}
	}
	,showPanel: function(_item) {
		this.clearPanel();
		this.txtHolder[0].set_text(_item.cData.get_craftedItems().split("=")[0]);
		this.txtHolder[1].set_text(_item.cData.get_tooltip());
		var rItemArray = _item.cData.get_requiredItem().split(",");
		var startX = this.startPD.get_posX();
		var mb = null;
		var littleArray;
		if(rItemArray.length >= 3) {
			mb = new com_coffeebreak_components_MenuButton("itemHandle_","");
			mb.addIcon(this.imagesData.h[rItemArray[0]]);
			mb.set_x(startX);
			mb.set_y(this.startPD.get_posY());
			this.itemsHolder.addChild(mb);
		} else if(rItemArray.length < 3) {
			if(rItemArray[0].indexOf("nothing") == -1) {
				mb = new com_coffeebreak_components_MenuButton("itemHandle_","");
				mb.addIcon(this.imagesData.h[rItemArray[0]]);
				mb.set_x(startX);
				mb.set_y(this.startPD.get_posY());
				this.itemsHolder.addChild(mb);
				startX = mb.get_x() + mb.get_width() + 5;
			}
			var ingrediensArray = _item.cData.get_ingrediens().split(",");
			if(ingrediensArray[0].indexOf("nothing") == -1) {
				var _g = 0;
				var _g1 = ingrediensArray.length;
				while(_g < _g1) {
					var i = _g++;
					littleArray = ingrediensArray[i].split("=");
					mb = new com_coffeebreak_components_MenuButton("itemHandle_","");
					mb.addIcon(this.imagesData.h[littleArray[0]]);
					mb.numTxt.set_text(littleArray[1]);
					mb.set_x(startX);
					mb.set_y(this.startPD.get_posY());
					this.itemsHolder.addChild(mb);
					startX = mb.get_x() + mb.get_width() + 5;
				}
			}
		}
		if(mb == null) {
			this.redrawPanel(startX,false);
		} else {
			this.redrawPanel(startX);
		}
		this.set_visible(true);
	}
	,redrawPanel: function(_width,_hasImg) {
		if(_hasImg == null) {
			_hasImg = true;
		}
		if(_width < this.pd.get_width()) {
			_width = this.pd.get_width();
		}
		var height = this.pd.get_height();
		if(height < this.txtHolder[1].get_y() + this.txtHolder[1].get_height()) {
			height += this.txtHolder[1].get_height() / 2;
		}
		if(!_hasImg) {
			height = 0;
			var _g = 0;
			var _g1 = this.txtHolder.length;
			while(_g < _g1) {
				var i = _g++;
				height += this.txtHolder[i].get_height();
			}
			height += this.txtHolder[0].get_height();
			this.txtHolder[1].set_y(this.txtHolder[0].get_y() + this.txtHolder[0].get_height() * 2);
		}
		this.bcg.get_graphics().clear();
		this.bcg = com_coffeebreak_utils_SimplePrimitive.createRectWithLine(_width,height,11579568,1,1,5987163);
		this.container.addChild(this.bcg);
	}
	,reset: function() {
		this.imagesData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("IMAGES_DATA");
	}
	,hidePanel: function() {
		this.set_visible(false);
	}
	,__class__: com_coffeebreak_components_HowerItemPanel
});
var com_coffeebreak_components_GrindHowerPanel = function() {
	com_coffeebreak_components_HowerItemPanel.call(this);
	this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
	this.container = new openfl_display_Sprite();
	this.addChild(this.container);
	this.pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("panelBcg1");
	this.bcg.get_graphics().clear();
	this.bcg = com_coffeebreak_utils_SimplePrimitive.createRectWithLine(this.pd.get_width(),this.pd.get_height(),11579568,1,1,5987163);
	this.container.addChild(this.bcg);
	this.itemsHolder = new openfl_display_Sprite();
	this.addChild(this.itemsHolder);
	if(this.txtHolder != null) {
		var _g = 0;
		var _g1 = this.txtHolder.length;
		while(_g < _g1) {
			var i = _g++;
			this.txtHolder[i].parent.removeChild(this.txtHolder[i]);
		}
	}
	this.startPD = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("panelHandle1");
	this.endPD = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("panelHandle2");
	this.arrowPD = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("panelArrow");
	this.set_visible(false);
};
$hxClasses["com.coffeebreak.components.GrindHowerPanel"] = com_coffeebreak_components_GrindHowerPanel;
com_coffeebreak_components_GrindHowerPanel.__name__ = "com.coffeebreak.components.GrindHowerPanel";
com_coffeebreak_components_GrindHowerPanel.__super__ = com_coffeebreak_components_HowerItemPanel;
com_coffeebreak_components_GrindHowerPanel.prototype = $extend(com_coffeebreak_components_HowerItemPanel.prototype,{
	showPanel: function(_item) {
	}
	,showGrindPanel: function(_data,_grindsData) {
		this.clearPanel();
		var icon = null;
		var icon2 = null;
		var arrow;
		var posY = this.startPD.get_posY();
		var _g = 0;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = _grindsData.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(_grindsData[j].get_name() == _data[i]) {
					icon = new com_coffeebreak_core_GameItem(_grindsData[j].get_img(),"panelHandle1");
					icon.set_y(posY);
					this.itemsHolder.addChild(icon);
					var depName = _grindsData[j].get_dependency().split(",")[0];
					if(depName == "hand") {
						icon2 = new com_coffeebreak_core_GameItem("hand.png","panelHandle2");
					} else {
						var iconName;
						var _g4 = 0;
						var _g5 = this.craftersData.length;
						while(_g4 < _g5) {
							var j1 = _g4++;
							if(this.craftersData[j1].get_name() == depName) {
								icon2 = new com_coffeebreak_core_GameItem(this.craftersData[j1].get_image(),"panelHandle2");
							}
						}
					}
					if(icon2 != null) {
						icon2.set_y(posY);
						this.itemsHolder.addChild(icon2);
					}
					posY += icon.get_height() + 3;
					arrow = new com_coffeebreak_core_GameItem("craftingArrow.png","panelArrow");
					arrow.set_y(icon.get_y() + icon.get_height() / 2 - arrow.get_height() / 2);
					this.itemsHolder.addChild(arrow);
					continue;
				}
			}
		}
		this.redrawPanel(posY);
		this.set_visible(true);
	}
	,redrawPanel: function(_height,_hasImg) {
		if(_hasImg == null) {
			_hasImg = true;
		}
		this.bcg.get_graphics().clear();
		this.bcg = com_coffeebreak_utils_SimplePrimitive.createRectWithLine(this.pd.get_width(),_height,11579568,1,1,5987163);
		this.container.addChild(this.bcg);
	}
	,__class__: com_coffeebreak_components_GrindHowerPanel
});
var com_coffeebreak_components_GrindItem = function(itemName,_positionName,_scaleName) {
	this.isAutomate = false;
	this.soundNumber = 1;
	this.soundCounter = 1;
	com_coffeebreak_core_GameItem.call(this,itemName,_positionName,_scaleName);
	this.set_autoDependency("");
	this.set_grindItemSignal(new msignal_Signal1());
	this.set_actionSignal(new msignal_Signal1());
	this.holder = new openfl_display_Sprite();
	this.addChild(this.holder);
	this.btt = new com_coffeebreak_components_MenuButton("bigBlackBtt_","bigBttBlack");
	this.btt.addTopText();
	this.btt.addEventListener("mouseOver",$bind(this,this.onMOver));
	this.btt.addEventListener("mouseOut",$bind(this,this.onMOut));
	this.btt.addEventListener("releaseOutside",$bind(this,this.onMOut));
	this.btt.addEventListener("click",$bind(this,this.onMClick));
	this.holder.addChild(this.btt);
	this.gLoader = new com_coffeebreak_components_GrindLoader();
	this.gLoader.get_loaderSignal().add($bind(this,this.onLoaderSignal));
	this.addChild(this.gLoader);
	this.label = com_coffeebreak_utils_TextUtils.createText("bigBttTxt","");
	this.label.set_filters([new openfl_filters_DropShadowFilter()]);
	this.addChild(this.label);
	this.enebledItems = new haxe_ds_StringMap();
	this.set_grindsData(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDS_DATA"));
	this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
	com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_soundCompleteSignal().add($bind(this,this.onSoundDone));
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
	this.dShadow = [new openfl_filters_DropShadowFilter()];
	this.set_isReminder(false);
	this.set_isActive(true);
	this.set_visible(true);
	this.set_automatorCount(0);
};
$hxClasses["com.coffeebreak.components.GrindItem"] = com_coffeebreak_components_GrindItem;
com_coffeebreak_components_GrindItem.__name__ = "com.coffeebreak.components.GrindItem";
com_coffeebreak_components_GrindItem.__super__ = com_coffeebreak_core_GameItem;
com_coffeebreak_components_GrindItem.prototype = $extend(com_coffeebreak_core_GameItem.prototype,{
	setEnebledItems: function(_key,_value) {
		if(_value == null) {
			_value = true;
		}
		this.enebledItems.h[_key] = _value;
	}
	,stop: function() {
		this.set_isAction(false);
		this.set_isAutomate(false);
		this.set_isActive(false);
	}
	,pause: function() {
		if(this.get_isAction()) {
			this.gLoader.doPause();
		}
	}
	,play: function() {
		if(this.get_isAction()) {
			this.gLoader.unpause();
			this.onSoundDone();
		}
	}
	,setButtonVisible: function(_visible) {
		this.btt.set_visible(_visible);
	}
	,onSoundDone: function() {
		if(!this.isSoundPlay) {
			return;
		}
		if(com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			return;
		}
		if(this.soundCounter < 6) {
			this.soundCounter++;
			this.soundNumber = this.getRandomSoundNum(this.soundNumber);
			if(this.soundPrefix != "") {
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playSound(this.soundPrefix + Std.string(Math.round(Math.random() * 5) + 1) + com_coffeebreak_CoffeeConstants.SOUND_SUFIX,true);
			}
			this.pe.emitGrindParticles(this.particlePoint.x,this.particlePoint.y);
		} else {
			this.soundCounter = 1;
			this.isSoundPlay = false;
		}
	}
	,onLoaderSignal: function() {
		this.isSoundPlay = false;
		this.soundCounter = 1;
		if(!this.get_isAutomate()) {
			this.removeActionIcon();
		}
		this.get_actionSignal().dispatch(this.get_ID());
		this.set_isAction(false);
	}
	,removeActionIcon: function() {
		if(this.currentActionIcon != null) {
			this.currentActionIcon.set_filters(null);
			this.currentActionIcon.parent.removeChild(this.currentActionIcon);
			this.currentActionIcon = null;
		}
	}
	,onMClick: function(e) {
		if(this.get_isAction()) {
			return;
		}
		if(this.get_isAutomate()) {
			this.set_isAction(true);
			return;
		}
		this.set_isAction(true);
		this.get_grindItemSignal().dispatch(this);
	}
	,onMOut: function(e) {
		this.btt.blackTxt.set_visible(false);
	}
	,onMOver: function(e) {
		this.btt.blackTxt.set_visible(true);
	}
	,updateParticlePoint: function() {
		this.particlePoint = new openfl_geom_Point();
		var tmp = this.get_x() + this.get_width() / 2;
		this.particlePoint.x = tmp + 60;
		var tmp = this.get_y();
		var tmp1 = this.get_height() / 2;
		this.particlePoint.y = tmp + tmp1;
	}
	,addImg: function(_imgName,_imgPosition) {
		if(_imgPosition == null) {
			_imgPosition = "";
		}
		var gItem = new com_coffeebreak_core_GameItem(_imgName,_imgPosition);
		this.holder.addChild(gItem);
	}
	,doAction: function(_iconName,_time,_soundId) {
		if(this.gLoader == null) {
			return;
		}
		this.removeActionIcon();
		this.currActionIconName = _iconName;
		this.currentActionIcon = new com_coffeebreak_core_GameItem(_iconName,"grindIcon");
		this.currentActionIcon.set_filters(this.dShadow);
		this.holder.addChild(this.currentActionIcon);
		if(!this.btt.get_visible()) {
			this.btt.set_visible(true);
		}
		this.gLoader.playLoader(_time);
		if(HxOverrides.substr(_iconName,0,-4) == "hand") {
			this.soundPrefix = HxOverrides.substr(_iconName,0,-4);
		} else {
			this.soundPrefix = _soundId;
		}
		if(this.particlePoint == null) {
			this.particlePoint = new openfl_geom_Point();
			var tmp = this.get_x() + this.get_width() / 2;
			this.particlePoint.x = tmp + 60;
			var tmp = this.get_y();
			var tmp1 = this.get_height() / 2;
			this.particlePoint.y = tmp + tmp1;
		}
		this.pe.setupGrindParticleEffect(this);
		if(this.soundPrefix != "") {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.stopSound(this.soundPrefix + this.soundNumber + com_coffeebreak_CoffeeConstants.SOUND_SUFIX);
		}
		this.soundNumber = this.getRandomSoundNum(this.soundNumber);
		this.isSoundPlay = true;
		if(this.soundPrefix != "") {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playSound(this.soundPrefix + Std.string(Math.round(Math.random() * 5) + 1) + com_coffeebreak_CoffeeConstants.SOUND_SUFIX,true);
		}
		this.pe.emitGrindParticles(this.particlePoint.x,this.particlePoint.y);
	}
	,setBttIcon: function(_name,_pos,_iconName) {
		if(this.btt.icon != null) {
			return;
		}
		this.setEnebledItems(_iconName);
		this.set_currentState(_iconName);
		this.btt.addIcon(_name,_pos);
		this.btt.set_name(_iconName);
		if(this.btt.blackTxt != null) {
			this.btt.blackTxt.set_text(_iconName);
			this.checkLabelLength();
			this.btt.blackTxt.set_visible(false);
		}
		this.iconName = _iconName;
		this.bttIconName = _name;
	}
	,updateBttIcon: function(_name,_pos,_iconName) {
		if(this.get_currentState() == _iconName) {
			return;
		}
		this.setEnebledItems(_iconName);
		this.set_currentState(_iconName);
		this.btt.addIcon(_name,_pos);
		this.btt.set_name(_iconName);
		if(this.btt.blackTxt != null) {
			this.btt.blackTxt.set_text(_iconName);
			this.checkLabelLength();
			this.btt.blackTxt.set_visible(false);
		}
		this.bttIconName = _name;
	}
	,getRandomSoundNum: function(_current) {
		var curr = _current;
		while(curr == _current) curr = com_coffeebreak_utils_RandomNumber.getRandom(1,6);
		return curr;
	}
	,checkLabelLength: function() {
	}
	,reset: function() {
		this.isSoundPlay = false;
		this.gLoader.doPause();
		this.gLoader = null;
		this.set_currentState("");
		this.btt.removeEventListener("mouseOver",$bind(this,this.onMOver));
		this.btt.removeEventListener("mouseOut",$bind(this,this.onMOut));
		this.btt.removeEventListener("releaseOutside",$bind(this,this.onMOut));
		this.btt.removeEventListener("click",$bind(this,this.onMClick));
		this.set_grindsData(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDS_DATA"));
		this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
	}
	,getButton: function() {
		return this.btt;
	}
	,get_grindItemSignal: function() {
		return this.grindItemSignal;
	}
	,set_grindItemSignal: function(value) {
		return this.grindItemSignal = value;
	}
	,get_actionSignal: function() {
		return this.actionSignal;
	}
	,set_actionSignal: function(value) {
		return this.actionSignal = value;
	}
	,set_grindsData: function(value) {
		return this.grindsData = value;
	}
	,get_autoDependency: function() {
		return this.autoDependency;
	}
	,set_autoDependency: function(value) {
		return this.autoDependency = value;
	}
	,get_isAction: function() {
		return this.isAction;
	}
	,set_isAction: function(value) {
		return this.isAction = value;
	}
	,get_isAutomate: function() {
		return this.isAutomate;
	}
	,set_isAutomate: function(value) {
		return this.isAutomate = value;
	}
	,get_generates: function() {
		return this.generates;
	}
	,set_generates: function(value) {
		return this.generates = value;
	}
	,set_generateValues: function(value) {
		return this.generateValues = value;
	}
	,get_isReminder: function() {
		return this.isReminder;
	}
	,set_isReminder: function(value) {
		return this.isReminder = value;
	}
	,set_isActive: function(value) {
		return this.isActive = value;
	}
	,get_automatorCount: function() {
		return this.automatorCount;
	}
	,set_automatorCount: function(value) {
		if(value < 0) {
			return 0;
		}
		return this.automatorCount = value;
	}
	,get_currentState: function() {
		return this.currentState;
	}
	,set_currentState: function(value) {
		return this.currentState = value;
	}
	,__class__: com_coffeebreak_components_GrindItem
	,__properties__: $extend(com_coffeebreak_core_GameItem.prototype.__properties__,{set_automatorCount:"set_automatorCount",get_automatorCount:"get_automatorCount",set_isActive:"set_isActive",set_isReminder:"set_isReminder",get_isReminder:"get_isReminder",set_autoDependency:"set_autoDependency",get_autoDependency:"get_autoDependency",set_isAutomate:"set_isAutomate",get_isAutomate:"get_isAutomate",set_grindsData:"set_grindsData",set_currentState:"set_currentState",get_currentState:"get_currentState",set_isAction:"set_isAction",get_isAction:"get_isAction",set_generateValues:"set_generateValues",set_generates:"set_generates",get_generates:"get_generates",set_actionSignal:"set_actionSignal",get_actionSignal:"get_actionSignal",set_grindItemSignal:"set_grindItemSignal",get_grindItemSignal:"get_grindItemSignal"})
});
var com_coffeebreak_components_GrindLoader = function() {
	openfl_display_Sprite.call(this);
	this.set_loaderSignal(new msignal_Signal0());
	var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("grindLoader");
	this.baseItem = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),16711680);
	this.addChild(this.baseItem);
	this.maskItem = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),34816);
	this.addChild(this.maskItem);
	this.mainMask = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),34816);
	this.addChild(this.mainMask);
	this.mainMask.set_scaleX(.5);
	this.maskItem.set_mask(this.mainMask);
	this.set_x(pd.get_posX());
	this.set_y(pd.get_posY());
	this.set_visible(false);
};
$hxClasses["com.coffeebreak.components.GrindLoader"] = com_coffeebreak_components_GrindLoader;
com_coffeebreak_components_GrindLoader.__name__ = "com.coffeebreak.components.GrindLoader";
com_coffeebreak_components_GrindLoader.__super__ = openfl_display_Sprite;
com_coffeebreak_components_GrindLoader.prototype = $extend(openfl_display_Sprite.prototype,{
	doPause: function() {
		motion_Actuate.pauseAll();
	}
	,unpause: function() {
		motion_Actuate.resumeAll();
	}
	,playLoader: function(_time) {
		var _gthis = this;
		this.mainMask.set_scaleX(0);
		this.tween = motion_Actuate.tween(this.mainMask,_time,{ scaleX : 1}).ease(motion_easing_Linear.get_easeNone()).onComplete(function() {
			_gthis.set_visible(false);
			return _gthis.get_loaderSignal().dispatch();
		});
		this.set_visible(true);
	}
	,get_loaderSignal: function() {
		return this.loaderSignal;
	}
	,set_loaderSignal: function(value) {
		return this.loaderSignal = value;
	}
	,__class__: com_coffeebreak_components_GrindLoader
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_loaderSignal:"set_loaderSignal",get_loaderSignal:"get_loaderSignal"})
});
var com_coffeebreak_components_GrindMap = function(_gm) {
	this.markerMinScale = .5;
	this.markerMaxScale = 1.8;
	this.maskMinHeight = 40;
	this.mapSize = 600;
	this.mapHeight = 222;
	this.mapWidth = 217;
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_screenName("Map");
	this.placementPoint = _gm.mapPoint;
	this.set_mapSignal(new msignal_Signal2());
	this.set_isOpenTravel(false);
	this.set_isActive(false);
	this.set_isCollapsed(false);
	this.markersID = 0;
	this.markers = [];
	this.set_beatLocation(0);
};
$hxClasses["com.coffeebreak.components.GrindMap"] = com_coffeebreak_components_GrindMap;
com_coffeebreak_components_GrindMap.__name__ = "com.coffeebreak.components.GrindMap";
com_coffeebreak_components_GrindMap.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_GrindMap.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		this.container = new openfl_display_Sprite();
		this.addChild(this.container);
		this.mapBmp = new openfl_display_Sprite();
		var bmp = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData("img/mapBackground.png"));
		this.mapBmp.addChild(bmp);
		this.mapBmp.addEventListener("mouseDown",$bind(this,this.onMDown));
		this.mapBmp.addEventListener("mouseUp",$bind(this,this.onMUp));
		this.mapBmp.addEventListener("releaseOutside",$bind(this,this.onMUp));
		this.mapBmp.addEventListener("mouseMove",$bind(this,this.onMMove));
		this.mapBmp.set_width(this.mapSize);
		this.mapBmp.set_height(this.mapSize);
		this.container.addChild(this.mapBmp);
		this.pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("map_box");
		this.mapMask = com_coffeebreak_utils_SimplePrimitive.createRect(this.pd.get_width(),this.pd.get_height(),16711680,0.3);
		this.addChild(this.mapMask);
		this.container.set_mask(this.mapMask);
		this.centerMap();
		this.tooltip = new com_coffeebreak_components_MarkerTooltip();
		this.tooltip.set_visible(false);
		this.addChild(this.tooltip);
		this.label = com_coffeebreak_utils_TextUtils.createText("mapTxt",null,"map_lbl");
		this.label.set_visible(false);
		this.addChild(this.label);
		var icons = ["iconLocation.png","iconPlus.png","iconMinus.png","iconExpand.png"];
		var btt;
		var _g = 0;
		var _g1 = icons.length;
		while(_g < _g1) {
			var i = _g++;
			btt = new com_coffeebreak_components_MenuButton("smallBtt.png","mapBtt" + (i + 1));
			btt.set_ID(i);
			btt.addIcon(icons[i]);
			this.addChild(btt);
			this.addButton(btt);
		}
		this.isDrag = false;
		var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("achPanel_box");
		var pd1 = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("mainBigBtt_box");
		this.set_x(pd1.get_posX());
		this.set_y(pd.get_posY() + 10);
	}
	,setSavedData: function(_data) {
		var markersData = Reflect.getProperty(_data,"markers");
		this.markersID = 0;
		var _g = 0;
		var _g1 = markersData.length;
		while(_g < _g1) {
			var i = _g++;
			var tmpArray = markersData[i][0].split(",");
			this.addNewMarker(HxOverrides.substr(markersData[i][0],0,markersData[i][0].lastIndexOf(",")));
			if(tmpArray[3] == "true") {
				var currMarker = this.getMarkerByName(tmpArray[0]);
				if(currMarker != null) {
					currMarker.set_isCompleted(true);
					currMarker.setDisabledState();
					if(currMarker.get_markerName() != com_coffeebreak_data_MarkerNames.TRADING_POST) {
						this.removeMarkerListeners(currMarker);
					}
				}
			}
		}
		this.currentMarker = this.getMarkerByName(Reflect.getProperty(_data,"currentLocation"));
		this.set_isActive(Reflect.getProperty(_data,"isActive"));
		this.set_isOpenTravel(Reflect.getProperty(_data,"isOpenTravel"));
		this.set_isCollapsed(Reflect.getProperty(_data,"isCollapsed"));
		this.set_beatLocation(Reflect.getProperty(_data,"beatLocation"));
		if(this.get_isCollapsed()) {
			this.colapse(true);
		} else {
			this.colapse(false);
		}
	}
	,onMMove: function(e) {
		if(this.isDrag) {
			this.stopAllMarkersBlinking();
			var mapXChange = this.get_mouseX() - this.mouseDownX;
			var mapYChange = this.get_mouseY() - this.mouseDownY;
			this.mapBmp.set_x(this.mapX + mapXChange);
			this.mapBmp.set_y(this.mapY + mapYChange);
			this.mapLimits();
		}
	}
	,onMUp: function(e) {
		this.isDrag = false;
	}
	,onMDown: function(e) {
		this.isDrag = true;
		this.mouseDownX = this.get_mouseX();
		this.mouseDownY = this.get_mouseY();
		this.mapX = this.mapBmp.get_x();
		this.mapY = this.mapBmp.get_y();
	}
	,isMarkerCompleted: function(_markerName) {
		var marker = this.getMarkerByName(_markerName);
		return marker.get_isCompleted();
	}
	,setMarkerCompleted: function(_markerName) {
		var marker = this.getMarkerByName(_markerName);
		marker.set_isCompleted(true);
		marker.setDisabledState();
	}
	,addNewMarker: function(value,_curLoc) {
		if(_curLoc == null) {
			_curLoc = true;
		}
		var markerName = value.split(",")[0];
		if(this.getMarkerByName(markerName) == null) {
			this.set_isCollapsed(false);
			this.placeMarker(value,true,true,_curLoc);
			return true;
		}
		return false;
	}
	,placeMarker: function(value,blink,center,isCurrentMarker) {
		if(isCurrentMarker == null) {
			isCurrentMarker = false;
		}
		if(center == null) {
			center = false;
		}
		if(blink == null) {
			blink = false;
		}
		var mapMarker = this.getMarkerByName(value.split(",")[0]);
		if(mapMarker == null) {
			mapMarker = new com_coffeebreak_components_MapMarker();
			mapMarker.set_data(value);
			mapMarker.set_ID(this.markersID);
			mapMarker.addEventListener("mouseOver",$bind(this,this.onMarkerOver));
			mapMarker.addEventListener("mouseOut",$bind(this,this.onMarkerOut));
			mapMarker.addEventListener("releaseOutside",$bind(this,this.onMarkerOut));
			mapMarker.addEventListener("click",$bind(this,this.onMarkerClick));
			this.markers.push(mapMarker);
			mapMarker.set_scaleX(mapMarker.set_scaleY(1.8));
			this.mapBmp.addChild(mapMarker);
			this.markersID++;
		}
		this.positionMapMarkers();
		if(blink) {
			mapMarker.blinkContinuous();
		}
		if(isCurrentMarker) {
			this.currentMarker = mapMarker;
		}
		if(center) {
			this.centerOnMarker(mapMarker);
		}
	}
	,onMarkerClick: function(e) {
		if((js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MapMarker)).get_markerName() == this.getCurrentLocation()) {
			return;
		}
		if((js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MapMarker)).get_isCompleted() && !this.get_isOpenTravel()) {
			return;
		}
		this.get_mapSignal().dispatch("MARKER",js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MapMarker));
	}
	,onMarkerOut: function(e) {
		var marker = js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MapMarker);
		this.tooltip.set_visible(false);
		marker.highlight(0);
	}
	,onMarkerOver: function(e) {
		var marker = js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MapMarker);
		marker.highlight(1);
		var p = new openfl_geom_Point(marker.get_x(),marker.get_y());
		p = this.mapBmp.localToGlobal(p);
		p = this.globalToLocal(p);
		this.tooltip.update(marker.get_markerName());
		this.tooltip.set_x(p.x - this.tooltip.get_width() / 2);
		this.tooltip.set_y(p.y - (this.tooltip.get_height() + 20));
		this.tooltip.set_visible(true);
	}
	,centerMap: function() {
		this.mapBmp.set_x(this.mapWidth / 2 - this.mapBmp.get_width() / 2);
		this.mapBmp.set_y(this.mapHeight / 2 - this.mapBmp.get_height() / 2);
	}
	,mapLimits: function() {
		var limit = this.mapWidth;
		if(this.mapBmp.get_x() > this.mapWidth - limit) {
			this.mapBmp.set_x(this.mapWidth - limit);
		}
		if(this.mapBmp.get_x() < limit - this.mapBmp.get_width()) {
			this.mapBmp.set_x(limit - this.mapBmp.get_width());
		}
		if(this.mapBmp.get_y() > this.mapHeight - limit) {
			this.mapBmp.set_y(this.mapHeight - limit);
		}
		if(this.mapBmp.get_y() < limit - this.mapBmp.get_height()) {
			this.mapBmp.set_y(limit - this.mapBmp.get_height());
		}
	}
	,zoomBy: function(value) {
		if(this.mapBmp.get_width() + value * 4 > this.mapWidth) {
			var fh = this.mapBmp;
			this.mapBmp.set_width(fh.set_height(fh.get_height() + value));
		} else {
			return;
		}
		var p = this.localToGlobal(new openfl_geom_Point(this.mapWidth / 2,this.mapHeight / 2));
		p = this.mapBmp.globalToLocal(p);
		p.x /= this.mapSize;
		p.y /= this.mapSize;
		this.mapSize = this.mapSizeLimit(this.mapSize + value);
		p.x *= this.mapSize;
		p.y *= this.mapSize;
		p = this.mapBmp.localToGlobal(p);
		p = this.globalToLocal(p);
		var fh = this.mapBmp;
		fh.set_x(fh.get_x() + (this.mapWidth / 2 - p.x));
		var fh = this.mapBmp;
		fh.set_y(fh.get_y() + (this.mapHeight / 2 - p.y));
		this.mapLimits();
		this.scaleMarkers(value);
	}
	,locationClicked: function() {
		if(this.currentMarker != null) {
			this.centerOnMarker(this.currentMarker);
			this.currentMarker.flashThrice();
		}
	}
	,setCurrentMarkerByName: function(value) {
		this.currentMarker = this.getMarkerByName(value);
		this.centerOnMarker(this.currentMarker);
	}
	,centerOnMarker: function(mapMarker) {
		var p = new openfl_geom_Point(mapMarker.get_x(),mapMarker.get_y());
		p = this.mapBmp.localToGlobal(p);
		p = this.globalToLocal(p);
		var fh = this.mapBmp;
		fh.set_x(fh.get_x() + (this.mapWidth / 2 - p.x - 15.5));
		var fh = this.mapBmp;
		fh.set_y(fh.get_y() + (this.mapWidth / 2 - p.y - 30));
		this.mapLimits();
	}
	,positionMapMarkers: function() {
		var length = this.markers.length;
		if(length == 0) {
			return;
		}
		var mapMarker;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			mapMarker = this.markers[i];
			mapMarker.set_x(this.mapSize / 600 * mapMarker.get_mapX() - 15.5);
			mapMarker.set_y(this.mapSize / 600 * mapMarker.get_mapY() - 30);
		}
	}
	,getMarkerByName: function(_val) {
		var _g = 0;
		var _g1 = this.markers.length;
		while(_g < _g1) {
			var i = _g++;
			if(_val == this.markers[i].get_markerName()) {
				return this.markers[i];
			}
		}
		return null;
	}
	,scaleMarkers: function(_val) {
		var length = this.markers.length;
		if(length == 0) {
			return;
		}
		var mapMarker;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			mapMarker = this.markers[i];
			if(_val > 0 && mapMarker.get_scaleX() > this.markerMinScale) {
				mapMarker.set_scaleX(mapMarker.set_scaleY(mapMarker.get_scaleY() - .1));
			} else if(mapMarker.get_scaleX() < this.markerMaxScale) {
				mapMarker.set_scaleX(mapMarker.set_scaleY(mapMarker.get_scaleY() + .1));
			}
		}
	}
	,stopAllMarkersBlinking: function() {
		var length = this.markers.length;
		var mapMarker;
		if(length > 0) {
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mapMarker = this.markers[i];
				mapMarker.stopBlinking();
			}
		}
	}
	,colapse: function(_val) {
		if(_val) {
			this.mapMask.set_height(this.maskMinHeight);
			this.label.set_visible(true);
			this.set_isCollapsed(true);
		} else {
			this.mapMask.set_height(this.mapHeight);
			this.label.set_visible(false);
			this.set_isCollapsed(false);
		}
		this.get_mapSignal().dispatch("SIZE",this.mapMask.get_height());
	}
	,disableCurrMarker: function(_data,_setCurrLoc) {
		if(_setCurrLoc == null) {
			_setCurrLoc = true;
		}
		this.currentMarker.setDisabledState();
		this.removeMarkerListeners(this.currentMarker);
		if(_setCurrLoc) {
			this.addNewMarker(_data,_setCurrLoc);
		}
	}
	,removeMarkerListeners: function(_marker) {
		_marker.addEventListener("mouseOver",$bind(this,this.onMarkerOver));
		_marker.addEventListener("mouseOut",$bind(this,this.onMarkerOut));
		_marker.addEventListener("releaseOutside",$bind(this,this.onMarkerOut));
		_marker.addEventListener("click",$bind(this,this.onMarkerClick));
	}
	,onClick: function(e) {
		com_coffeebreak_core_BaseScreen.prototype.onClick.call(this,e);
		switch(this.get_targetItem().get_ID()) {
		case 0:
			this.locationClicked();
			break;
		case 1:
			this.zoomBy(this.mapWidth / 4);
			break;
		case 2:
			this.zoomBy(-(this.mapWidth / 4));
			break;
		case 3:
			if(this.mapMask.get_height() != this.maskMinHeight) {
				this.colapse(true);
			} else {
				this.colapse(false);
			}
			break;
		}
	}
	,getMarkers: function() {
		var tmpArray = [];
		var _g = 0;
		var _g1 = this.markers.length;
		while(_g < _g1) {
			var i = _g++;
			tmpArray[i] = [];
			var tmp = this.markers[i].get_data() + "," + Std.string(this.markers[i].get_isCompleted());
			tmpArray[i].push(tmp);
		}
		return tmpArray;
	}
	,getCurrentLocation: function() {
		if(this.currentMarker != null) {
			return this.currentMarker.get_markerName();
		}
		return null;
	}
	,getMapHeight: function() {
		return this.mapMask.get_height();
	}
	,mapSizeLimit: function(value) {
		return Math.max(Math.min(value,3000),222);
	}
	,get_isOpenTravel: function() {
		return this.isOpenTravel;
	}
	,set_isOpenTravel: function(value) {
		return this.isOpenTravel = value;
	}
	,get_isActive: function() {
		return this.isActive;
	}
	,set_isActive: function(value) {
		return this.isActive = value;
	}
	,get_isCollapsed: function() {
		return this.isCollapsed;
	}
	,set_isCollapsed: function(value) {
		return this.isCollapsed = value;
	}
	,get_mapSignal: function() {
		return this.mapSignal;
	}
	,set_mapSignal: function(value) {
		return this.mapSignal = value;
	}
	,get_beatLocation: function() {
		return this.beatLocation;
	}
	,set_beatLocation: function(value) {
		return this.beatLocation = value;
	}
	,__class__: com_coffeebreak_components_GrindMap
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_beatLocation:"set_beatLocation",get_beatLocation:"get_beatLocation",set_isCollapsed:"set_isCollapsed",get_isCollapsed:"get_isCollapsed",set_isActive:"set_isActive",get_isActive:"get_isActive",set_isOpenTravel:"set_isOpenTravel",get_isOpenTravel:"get_isOpenTravel",set_mapSignal:"set_mapSignal",get_mapSignal:"get_mapSignal"})
});
var com_coffeebreak_components_GrindMenu = function() {
	this.potionSpeedTime = 0;
	this.mouseOffset = 15;
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_grindSignal(new msignal_Signal2());
	this.grindersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDERS_DATA");
	this.grindsData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDS_DATA");
	this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
	this.grindRandomGenerator = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRIND_GENERATOR");
	this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
	this.currentAnswerMap = new haxe_ds_IntMap();
	this.gameState = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GAME_STATE");
	this.dataCollector = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR");
	this.itemsHolder = new haxe_ds_StringMap();
	this.currentItemMap = new haxe_ds_IntMap();
	this.menuHolder = new openfl_display_Sprite();
	this.addChild(this.menuHolder);
	this.pausedId = -1;
	this.mapPoint = new openfl_geom_Point();
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
	this.potionSpeedTimer = new openfl_utils_Timer(1000);
};
$hxClasses["com.coffeebreak.components.GrindMenu"] = com_coffeebreak_components_GrindMenu;
com_coffeebreak_components_GrindMenu.__name__ = "com.coffeebreak.components.GrindMenu";
com_coffeebreak_components_GrindMenu.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_GrindMenu.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		this.mainPosition = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("mainBigBtt_box");
		this.posY = this.mainPosition.get_posY();
		this.gameState.updateItemsAfterLoadMap();
		this.addNewItem();
		this.enableItemAutomation();
		this.howerItemPanel = new com_coffeebreak_components_GrindHowerPanel();
		(js_Boot.__cast(this.parent.parent , com_coffeebreak_screens_GameScreen)).setItemToLayer("HOVER_ITEM_PANEL",this.howerItemPanel);
	}
	,enableItemAutomation: function() {
		var gm = this.currentItemMap.keys();
		while(gm.hasNext()) {
			var gm1 = gm.next();
			var item = this.currentItemMap.h[gm1];
			if(item != null) {
				item.label.set_text(this.grindersData[item.get_ID()].get_name());
				item.updateBttIcon(item.bttIconName,"grindBttIcon",item.get_currentState());
				var showBtt = false;
				var _g = 0;
				var _g1 = item.get_generates().length;
				while(_g < _g1) {
					var i = _g++;
					var numImg = this.inventoryData.getData(item.get_generates()[i]);
					if(numImg != null || numImg > 0) {
						showBtt = true;
					}
				}
				if(item.label.get_text() == "") {
					item.setButtonVisible(showBtt);
				}
				if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "CityState") {
					var _g2 = 0;
					var _g3 = this.dataCollector.get_automationData().length;
					while(_g2 < _g3) {
						var n = _g2++;
						var datArr = this.dataCollector.get_automationData()[n].split(":");
						if(item.get_name() == datArr[0]) {
							item.set_isAutomate(datArr[1] == "true");
						}
					}
					this.dataCollector.updateAutomationData(item.get_name(),item.get_isAutomate());
					this.checkAutomation(item);
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Chasm Mine") {
					if(item.get_name() != "nether" || item.get_name() != "nether mobs") {
						item.set_isAutomate(true);
					}
					this.checkAutomation(item);
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Lost Mine") {
					if(item.get_name() != "overworld") {
						var num = this.inventoryData.getData("ocean tube");
						if(num == null || num <= 0) {
							item.set_isActive(false);
							item.set_isAutomate(false);
							item.set_visible(false);
						} else if(item.get_name() == "lost mine") {
							item.set_isAutomate(true);
						}
					} else {
						item.set_isAutomate(true);
						this.checkAutomation(item);
					}
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Apothecary School") {
					if(item.get_name() == "nether sleigh") {
						if(this.inventoryData.getData("pigman worker") > 0) {
							item.set_isAutomate(true);
						}
					} else {
						item.set_isAutomate(true);
					}
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Lie Bury") {
					if(item.get_name() != "library") {
						item.set_isAutomate(true);
					}
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Hogquartz") {
					if(item.get_name() == "nether sleigh") {
						if(this.inventoryData.getData("pigman worker") > 0) {
							item.set_isAutomate(true);
						}
					} else {
						item.set_isAutomate(true);
					}
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Obsidian Yards") {
					item.set_isAutomate(true);
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Strongs Isle") {
					if(item.get_name() == "nether sleigh" || item.get_name() == "mobs") {
						item.set_isAutomate(true);
					}
				} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Trading Post") {
					item.set_isAutomate(true);
				}
				this.checkAutomation(item,false);
			}
		}
	}
	,addNewItem: function(_shouldShow,_grindName) {
		if(_grindName == null) {
			_grindName = "";
		}
		if(_shouldShow == null) {
			_shouldShow = false;
		}
		var shouldShow;
		var gItem = null;
		var tmpArray;
		var passEnd = true;
		if(_shouldShow) {
			if(!Object.prototype.hasOwnProperty.call(this.itemsHolder.h,_grindName.split("=")[0])) {
				var grindIndex = this.gameState.findGrindersIndexByName(_grindName.split("=")[0]);
				gItem = new com_coffeebreak_components_GrindItem("bigBttBcg.png");
				gItem.set_ID(grindIndex);
				gItem.addImg(this.grindersData[grindIndex].get_img(),"bigBttImg");
				gItem.get_grindItemSignal().add($bind(this,this.onGrindItem));
				gItem.get_actionSignal().add($bind(this,this.onGrindAction));
				gItem.label.set_text(this.grindersData[grindIndex].get_name());
				gItem.set_name(this.grindersData[grindIndex].get_name());
				gItem.set_isReminder(this.grindersData[grindIndex].get_hasReminder());
				gItem.set_automatorCount(this.grindersData[grindIndex].get_maxIncrease());
				if(gItem.get_name() == "nether sleigh") {
					if(this.inventoryData.getData("pigman worker") > 0) {
						gItem.set_automatorCount(this.inventoryData.getData("pigman worker"));
					}
				}
				tmpArray = this.grindersData[grindIndex].get_generatesArray();
				gItem.set_generates(tmpArray);
				gItem.set_generateValues(this.grindersData[grindIndex].get_generateValues());
				var _g = 0;
				var _g1 = tmpArray.length;
				while(_g < _g1) {
					var j = _g++;
					var img;
					var newArray;
					if(tmpArray[j].indexOf("=") != -1) {
						newArray = tmpArray[j].split("=");
						gItem.set_grindsData(this.getGrindsData(tmpArray[grindIndex]));
						if(tmpArray[0] != "nothing") {
							img = this.gameState.getGrindDataItem(newArray[0]).get_img();
							gItem.setBttIcon(img,"grindBttIcon",newArray[0]);
						} else {
							img = this.gameState.getGrindDataItem(newArray[1]).get_img();
							gItem.setBttIcon(img,"grindBttIcon",newArray[1]);
						}
					} else {
						gItem.set_grindsData(this.getGrindsData(tmpArray[grindIndex]));
						if(tmpArray[0] != "nothing") {
							img = this.gameState.getGrindDataItem(tmpArray[0]).get_img();
							gItem.setBttIcon(img,"grindBttIcon",tmpArray[0]);
						} else {
							img = this.gameState.getGrindDataItem(tmpArray[1]).get_img();
							gItem.setBttIcon(img,"grindBttIcon",tmpArray[1]);
						}
					}
				}
				this.dataCollector.updateAutomationData(gItem.get_name(),gItem.get_isAutomate());
				gItem.addEventListener("mouseOver",$bind(this,this.onMouseOver));
				gItem.addEventListener("mouseOut",$bind(this,this.onMouseOut));
				gItem.addEventListener("releaseOutside",$bind(this,this.onMouseOut));
				gItem.addEventListener("mouseMove",$bind(this,this.onMouseMove));
				gItem.addEventListener("click",$bind(this,this.onMouseClick));
				gItem.set_x(this.mainPosition.get_posX());
				gItem.set_y(this.posY);
				this.posY += this.mainPosition.get_height() + 2;
				if(this.menuHolder.get_numChildren() > grindIndex) {
					this.menuHolder.addChildAt(gItem,grindIndex);
				} else {
					this.menuHolder.addChild(gItem);
				}
				this.addButton(gItem.getButton());
				var this1 = this.itemsHolder;
				var key = this.grindersData[grindIndex].get_name();
				this1.h[key] = gItem;
				this.gameState.setGrindPercentValues(this.grindersData[grindIndex]);
				var this1 = this.currentItemMap;
				var key = gItem.get_ID();
				this1.h[key] = gItem;
				this.mapPoint.setTo(this.mainPosition.get_posX(),this.posY);
				if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Strongs Isle") {
					if(_grindName.split("=")[0] == "end") {
						gItem.set_visible(false);
						passEnd = false;
					}
				}
			} else if(_grindName == "end") {
				gItem = this.itemsHolder.h[_grindName];
				gItem.set_visible(true);
			} else {
				var gi = this.itemsHolder.h[_grindName];
				gi.set_visible(true);
			}
		} else {
			var _g = 0;
			var _g1 = this.grindersData.length;
			while(_g < _g1) {
				var i = _g++;
				var this1 = this.itemsHolder;
				var key = this.grindersData[i].get_name();
				if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
					shouldShow = this.checkDependencies(this.grindersData[i].get_generatesArray());
					if(this.addMobs) {
						shouldShow = true;
						this.addMobs = false;
					}
					if(shouldShow) {
						if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Strongs Isle") {
							if(this.grindersData[i].get_name() == "end") {
								var this2 = this.dataCollector.get_automationMap();
								if(!Object.prototype.hasOwnProperty.call(this2.h,"end")) {
									continue;
								}
							}
						}
						if(this.grindersData[i].get_name() == "food") {
							this.addMobs = true;
						}
						gItem = new com_coffeebreak_components_GrindItem("bigBttBcg.png");
						gItem.set_ID(i);
						gItem.addImg(this.grindersData[i].get_img(),"bigBttImg");
						gItem.get_grindItemSignal().add($bind(this,this.onGrindItem));
						gItem.get_actionSignal().add($bind(this,this.onGrindAction));
						gItem.label.set_text(this.grindersData[i].get_name());
						gItem.set_name(this.grindersData[i].get_name());
						gItem.set_isReminder(this.grindersData[i].get_hasReminder());
						gItem.set_automatorCount(this.grindersData[i].get_maxIncrease());
						var this3 = this.dataCollector.get_automationMap();
						var key1 = gItem.get_name();
						var autData = this3.h[key1];
						gItem.set_isAutomate(autData);
						if(gItem.get_name() == "nether sleigh") {
							if(this.inventoryData.getData("pigman worker") > 0) {
								gItem.set_automatorCount(this.inventoryData.getData("pigman worker"));
							}
						}
						var tmpArray = this.grindersData[i].get_generatesArray();
						gItem.set_generates(tmpArray);
						var _g2 = 0;
						var _g3 = tmpArray.length;
						while(_g2 < _g3) {
							var j = _g2++;
							var img;
							gItem.set_grindsData(this.getGrindsData(tmpArray[j]));
							if(tmpArray[0] != "nothing") {
								img = this.gameState.getGrindDataItem(tmpArray[0]).get_img();
								gItem.setBttIcon(img,"grindBttIcon",tmpArray[0]);
							} else {
								img = this.gameState.getGrindDataItem(tmpArray[1]).get_img();
								gItem.setBttIcon(img,"grindBttIcon",tmpArray[1]);
							}
						}
						gItem.addEventListener("mouseOver",$bind(this,this.onMouseOver));
						gItem.addEventListener("mouseOut",$bind(this,this.onMouseOut));
						gItem.addEventListener("releaseOutside",$bind(this,this.onMouseOut));
						gItem.addEventListener("mouseMove",$bind(this,this.onMouseMove));
						gItem.addEventListener("click",$bind(this,this.onMouseClick));
						gItem.set_x(this.mainPosition.get_posX());
						gItem.set_y(this.posY);
						this.posY += this.mainPosition.get_height() + 2;
						this.dataCollector.updateAutomationData(gItem.get_name(),gItem.get_isAutomate());
						this.menuHolder.addChild(gItem);
						this.addButton(gItem.getButton());
						var this4 = this.itemsHolder;
						var key2 = this.grindersData[i].get_name();
						this4.h[key2] = gItem;
						this.gameState.setGrindPercentValues(this.grindersData[i]);
						var this5 = this.currentItemMap;
						var key3 = gItem.get_ID();
						this5.h[key3] = gItem;
						this.mapPoint.setTo(this.mainPosition.get_posX(),this.posY);
					}
				}
			}
		}
		if(gItem == null) {
			return null;
		}
		if(gItem.get_name() != "end") {
			this.arangeGrinders();
		} else if(passEnd) {
			this.arangeGrinders();
		}
		this.checkEnabledItems();
		this.currentActionItem = gItem;
		this.checkDefaultGrinderState(gItem,_shouldShow);
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
		if(gItem.get_name() != "end") {
			this.checkAutomation(gItem);
		} else if(passEnd) {
			this.checkAutomation(gItem);
		}
		return gItem;
	}
	,checkDefaultGrinderState: function(_item,_shouldShow) {
		var h = this.itemsHolder.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			_item = this.itemsHolder.h[key];
			var index = this.gameState;
			var index1 = _item.get_ID();
			var this1 = this.currentItemMap;
			var key1 = _item.get_ID();
			var index2 = index.displayRandomGrind(index1,this1.h[key1].enebledItems);
			if(!_item.get_isReminder()) {
				var index3 = this.gameState;
				var index4 = _item.get_ID();
				var this2 = this.currentItemMap;
				var key2 = _item.get_ID();
				index2 = index3.displayRandomGrind(index4,this2.h[key2].enebledItems);
				this.setRandomReminder();
			} else if(_item.get_isAutomate()) {
				var index5 = this.gameState;
				var index6 = _item.get_ID();
				var this3 = this.currentItemMap;
				var key3 = _item.get_ID();
				index2 = index5.displayRandomGrind(index6,this3.h[key3].enebledItems,false);
			} else {
				var index7 = this.gameState;
				var index8 = _item.get_ID();
				var this4 = this.currentItemMap;
				var key4 = _item.get_ID();
				index2 = index7.displayRandomGrind(index8,this4.h[key4].enebledItems,true);
			}
			if(index2 == -1) {
				var isItemAuto = this.dataCollector.checkIsAutomated(_item.get_ID());
				if(_item.get_isReminder()) {
					_item.setButtonVisible(false);
				}
				if(!isItemAuto && !_shouldShow) {
					_item.setButtonVisible(false);
					this.saveGame(_item.get_ID(),"",_item.bttIconName,_item.get_isAutomate(),"",_item.get_name());
				}
			} else {
				if(!_item.btt.get_visible()) {
					_item.setButtonVisible(true);
				}
				var ggd = this.gameState.getGrinderByGrindId(_item.get_ID(),index2);
				_item.updateBttIcon(this.getGrindsData(ggd.get_name()).get_img(),"grindBttIcon",ggd.get_name());
				if(_item.get_autoDependency() != "") {
					this.saveGame(_item.get_ID(),_item.get_currentState(),_item.bttIconName,_item.get_isAutomate(),_item.get_name() + "=" + _item.get_autoDependency(),_item.get_name());
				}
			}
		}
	}
	,arangeGrinders: function() {
		this.posY = this.mainPosition.get_posY();
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.menuHolder.get_numChildren();
			while(_g2 < _g3) {
				var j = _g2++;
				var child = this.menuHolder.getChildAt(j);
				if(this.grindersData[i].get_name() == child.get_name()) {
					child.set_y(this.posY);
					this.posY += this.mainPosition.get_height() + 2;
					child.updateParticlePoint();
				}
			}
		}
	}
	,resetMenuForNewLoc: function() {
		while(this.menuHolder.get_numChildren() > 0) {
			var gi = js_Boot.__cast(this.menuHolder.getChildAt(0) , com_coffeebreak_components_GrindItem);
			gi.set_isAutomate(false);
			gi.set_isAction(false);
			gi.removeEventListener("mouseOver",$bind(this,this.onMouseOver));
			gi.removeEventListener("mouseOut",$bind(this,this.onMouseOut));
			gi.removeEventListener("releaseOutside",$bind(this,this.onMouseOut));
			gi.removeEventListener("mouseMove",$bind(this,this.onMouseMove));
			gi.removeEventListener("click",$bind(this,this.onMouseClick));
			this.removeButton(gi.getButton());
			gi.reset();
			gi.parent.removeChild(gi);
		}
		this.itemsHolder.h = Object.create(null);
		this.currentItemMap.h = { };
		this.posY = this.mainPosition.get_posY();
		this.grindersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDERS_DATA");
		this.grindsData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDS_DATA");
		this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
		this.howerItemPanel.reset();
		this.gameState.updateItemsAfterLoadMap();
		this.addNewItem();
		this.enableItemAutomation();
	}
	,gamePause: function(_val) {
		if(_val == null) {
			_val = true;
		}
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var this1 = this.itemsHolder;
			var key = this.grindersData[i].get_name();
			var gi = this1.h[key];
			if(gi != null) {
				if(_val) {
					gi.pause();
				} else if(gi.get_isAction()) {
					gi.play();
				} else {
					this.checkAutomation(gi);
				}
			}
		}
	}
	,gameContinue: function() {
		this.gamePause(false);
	}
	,checkDependencies: function(_data) {
		var _g = 0;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.grindsData.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(_data[i] == this.grindsData[j].get_name()) {
					var dependencyArr = this.grindsData[j].get_dependency().split(",");
					var _g4 = 0;
					var _g5 = dependencyArr.length;
					while(_g4 < _g5) {
						var n = _g4++;
						if(dependencyArr[n] == "hand") {
							return true;
						} else {
							var numIng = this.inventoryData.getData(dependencyArr[n]);
							if(numIng != null && numIng != 0) {
								return true;
							}
						}
					}
				}
			}
		}
		return false;
	}
	,checkEnabledItems: function() {
		var item;
		var h = this.itemsHolder.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			item = this.itemsHolder.h[key];
			var _g = 0;
			var _g1 = item.get_generates().length;
			while(_g < _g1) {
				var i = _g++;
				var gd = this.getGrindsData(item.get_generates()[i]);
				if(gd == null) {
					continue;
				}
				var dependencyArr = gd.get_dependency().split(",");
				item.setEnebledItems(item.get_generates()[i],this.enabledItemAccordingkey(dependencyArr));
			}
		}
	}
	,enabledItemAccordingkey: function(_data) {
		var _g = 0;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			if(_data[i] == "hand") {
				return true;
			}
			var numIng = this.inventoryData.getData(_data[i]);
			if(numIng != null && numIng != 0) {
				return true;
			}
		}
		return false;
	}
	,getGrindsData: function(_id) {
		var _g = 0;
		var _g1 = this.grindsData.length;
		while(_g < _g1) {
			var i = _g++;
			if(_id == this.grindsData[i].get_name()) {
				return this.grindsData[i];
			}
		}
		return null;
	}
	,updateGrindMenu: function(_action,_automateName) {
		if(_automateName == null) {
			_automateName = "";
		}
		var gItem = null;
		this.checkEnabledItems();
		if(_action == "GRIND_AUTOMATE") {
			if(_automateName != "") {
				this.setAutomated(_automateName);
			}
		} else if(_action == "GRIND_DEAUTOMATE") {
			if(_automateName != "") {
				this.setDeautomated(_automateName);
			}
		} else if(_action == "SHOW_GRIND") {
			this.addNewItem(true,_automateName);
		} else if(_action == "HIDE_GRIND") {
			this.hideGrind(_automateName);
		} else if(_action != "STOP_GRIND") {
			if(_action == "GRIND_ACTION") {
				gItem = this.addNewItem();
			}
		}
		if(gItem != null) {
			this.saveGame(gItem.get_ID(),gItem.get_currentState(),gItem.bttIconName,gItem.get_isAutomate(),_automateName,gItem.get_name());
		}
	}
	,setAutomated: function(_name) {
		var nArray = _name.split("=");
		var gi = this.itemsHolder.h[nArray[0]];
		if(gi == null) {
			this.addNewItem(true,_name);
			gi = this.itemsHolder.h[nArray[0]];
		}
		if(gi == null) {
			return;
		}
		if(!gi.get_isAutomate()) {
			gi.set_autoDependency(nArray[1]);
			gi.set_isAutomate(true);
			gi.set_isAction(true);
			gi.set_automatorCount(gi.get_automatorCount() + 1);
			if(gi.get_visible()) {
				this.onGrindItem(gi);
			}
			if(!com_coffeebreak_GameProperties.TEST_TIME) {
				this.saveGame(gi.get_ID(),gi.get_currentState(),gi.bttIconName,gi.get_isAutomate(),_name,gi.get_name());
			}
		}
		if(com_coffeebreak_GameProperties.TEST_TIME) {
			var index = this.findTestIndex(gi.get_ID());
			var ggd = this.gameState.getGrinderByGrindId(gi.get_ID(),index);
			gi.updateBttIcon(this.getGrindsData(ggd.get_name()).get_img(),"grindBttIcon",ggd.get_name());
			this.getTestData(this.getGrindsData(ggd.get_name()));
		}
	}
	,setDeautomated: function(_name) {
		var nArray = _name.split("=");
		var gi = this.itemsHolder.h[nArray[0]];
		if(!gi.get_isAction()) {
			gi.set_isAutomate(false);
			gi.set_isAction(false);
			gi.removeActionIcon();
			gi.set_automatorCount(gi.get_automatorCount() - 1);
		} else {
			gi.set_isAutomate(false);
		}
		if(gi != null) {
			this.saveGame(gi.get_ID(),gi.get_currentState(),gi.bttIconName,gi.get_isAutomate(),_name,gi.get_name());
		}
	}
	,hideGrind: function(_name) {
		var gi = this.itemsHolder.h[_name];
		if(gi != null) {
			gi.set_visible(false);
		}
	}
	,onGrindAction: function(_id) {
		if(com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			this.pausedId = _id;
			return;
		}
		this.pausedId = -1;
		var item = this.currentItemMap.h[_id];
		this.currentAnswer = this.currentAnswerMap.h[_id];
		var aItem = new com_coffeebreak_data_AchItem();
		aItem.txt = this.currentAnswer.get_achievement();
		aItem.img = this.currentAnswer.get_img();
		if(this.currentAnswer.get_mergeArray().length > 0) {
			var dA = this.currentAnswer.get_drops().split("=");
			var allDrops = 0;
			var val;
			var _g = 0;
			var _g1 = this.currentAnswer.get_mergeArray().length;
			while(_g < _g1) {
				var n = _g++;
				val = this.inventoryData.getData(this.currentAnswer.get_mergeArray()[n]);
				if(val != null) {
					allDrops += val;
				}
			}
			this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + (allDrops == null ? "null" : "" + allDrops));
		} else {
			var numVillagers = this.checkWillager(this.currentAnswer.get_dependency());
			var dA = this.currentAnswer.get_drops().split("=");
			if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Chasm Mine") {
				if(dA[0] == "zombie pigman" || dA[0] == "ghast") {
					this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + parseFloat(dA[1]) * this.inventoryData.getData("iron trap"));
				} else if(item.get_name() != "nether") {
					this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + parseFloat(dA[1]) * numVillagers * Math.max(item.get_automatorCount(),1));
				} else {
					this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + parseFloat(dA[1]) * this.inventoryData.getData("pigman worker"));
				}
			} else if(item.get_name() != "nether") {
				this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + parseFloat(dA[1]) * numVillagers * Math.max(item.get_automatorCount(),1));
			} else {
				this.currentAnswer.set_dropsForUpdate(dA[0] + "=" + parseFloat(dA[1]) * this.inventoryData.getData("pigman worker"));
			}
		}
		this.get_grindSignal().dispatch(this.currentAnswer.get_dropsForUpdate(),aItem);
		var index = this.gameState.displayRandomGrind(_id,this.currentItemMap.h[_id].enebledItems);
		if(!item.get_isReminder()) {
			index = this.gameState.displayRandomGrind(_id,this.currentItemMap.h[_id].enebledItems);
			this.setRandomReminder();
		} else if(item.get_isAutomate()) {
			index = this.gameState.displayRandomGrind(_id,this.currentItemMap.h[_id].enebledItems,false);
		} else {
			index = this.gameState.displayRandomGrind(_id,this.currentItemMap.h[_id].enebledItems,true);
		}
		if(com_coffeebreak_GameProperties.TEST_TIME) {
			index = this.findTestIndex(item.get_ID());
		}
		if(index == -1) {
			item.setButtonVisible(false);
			this.saveGame(item.get_ID(),"",item.bttIconName,item.get_isAutomate(),item.get_name() + "=" + item.get_autoDependency(),item.get_name());
		} else {
			if(!item.btt.get_visible()) {
				item.setButtonVisible(true);
			}
			var ggd = this.gameState.getGrinderByGrindId(_id,index);
			item.updateBttIcon(this.getGrindsData(ggd.get_name()).get_img(),"grindBttIcon",ggd.get_name());
			if(!com_coffeebreak_GameProperties.TEST_TIME) {
				this.saveGame(item.get_ID(),item.get_currentState(),item.bttIconName,item.get_isAutomate(),item.get_name() + "=" + item.get_autoDependency(),item.get_name());
			}
		}
		if(!com_coffeebreak_GameProperties.TEST_TIME) {
			com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
		}
		this.checkAutomation(item);
	}
	,onGrindItem: function(_item) {
		if(_item == null) {
			return;
		}
		this.currentActionItem = _item;
		var this1 = this.currentItemMap;
		var key = _item.get_ID();
		this1.h[key] = _item;
		this.currentAnswer = this.findBestTool(_item.get_currentState());
		var this1 = this.currentAnswerMap;
		var key = _item.get_ID();
		this1.h[key] = this.currentAnswer;
		if(this.isPotionSpeed) {
			this.currentAnswer.set_actionTime(com_coffeebreak_GameProperties.GRIND_SPEED / 10000);
		}
		if(this.currentAnswer != null && this.currentAnswer.get_actionIcon() != null) {
			_item.doAction(this.currentAnswer.get_actionIcon(),this.currentAnswer.get_actionTime(),this.currentAnswer.get_soundId());
		} else {
			haxe_Log.trace("::::::: ERROR ::::::::::::::::::::" + Std.string(this),{ fileName : "src/com/coffeebreak/components/GrindMenu.hx", lineNumber : 1233, className : "com.coffeebreak.components.GrindMenu", methodName : "onGrindItem", customParams : [887]});
		}
		if(this.potionSpeedTime > 0) {
			this.potionSpeedTime--;
		} else {
			if(this.isPotionSpeed) {
				this.potionSpeedTimer.stop();
				this.potionSpeedTimer.reset();
			}
			this.isPotionSpeed = false;
		}
	}
	,setPotionSpeed: function() {
		if(!this.isPotionSpeed) {
			this.isPotionSpeed = true;
			this.potionSpeedTime = com_coffeebreak_GameProperties.GRIND_SPEED / 2 | 0;
			this.potionSpeedTimer.start();
		}
	}
	,stopGrindItem: function(_name) {
		var gItem = this.itemsHolder.h[_name];
		gItem.stop();
		gItem.set_visible(false);
	}
	,findBestTool: function(_name) {
		var score = 100;
		var bestItem = "";
		var bestIcon = "";
		var soundID = "";
		var grindIndex = -1;
		var dep;
		var time = [];
		var _g = 0;
		var _g1 = this.grindsData.length;
		while(_g < _g1) {
			var i = _g++;
			if(_name == this.grindsData[i].get_name()) {
				dep = this.grindsData[i].get_dependency().split(",");
				time = this.grindsData[i].get_timeToBreak().split(",");
				var _g2 = 0;
				var _g3 = dep.length;
				while(_g2 < _g3) {
					var j = _g2++;
					if(dep[j] == "hand") {
						bestItem = "hand";
						bestIcon = "hand.png";
						score = parseFloat(time[0]);
						grindIndex = 1;
						soundID = "hand";
						continue;
					}
					var val = this.inventoryData.getData(dep[j]);
					if(val != null && val > 0) {
						if(parseFloat(time[j]) < score) {
							score = parseFloat(time[j]);
							bestItem = dep[j];
							var craftData = this.gameState.findImageAccordingCraftersData(bestItem);
							if(craftData != null) {
								bestIcon = craftData.get_image();
								soundID = craftData.get_soundPrefix();
								grindIndex = i;
							}
						}
					}
				}
			}
		}
		if(grindIndex != -1) {
			this.grindsData[grindIndex].set_actionIcon(bestIcon);
			this.grindsData[grindIndex].set_actionTime(score);
			this.grindsData[grindIndex].set_soundId(soundID);
		}
		if(com_coffeebreak_GameProperties.TEST_TIME) {
			var _g = 0;
			var _g1 = this.grindsData.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.grindsData[i].get_name() == this.testData.get_grinders()) {
					dep = this.grindsData[i].get_dependency().split(",");
					var _g2 = 0;
					var _g3 = dep.length;
					while(_g2 < _g3) {
						var j = _g2++;
						if(dep[j] == this.testData.get_tool()) {
							bestItem = this.testData.get_tool();
							grindIndex = dep.indexOf(this.testData.get_tool());
							score = parseFloat(time[grindIndex]);
							var craftData = this.gameState.findImageAccordingCraftersData(bestItem);
							bestIcon = craftData.get_image();
							soundID = craftData.get_soundPrefix();
						}
					}
				}
			}
			this.grindsData[grindIndex].set_actionIcon(bestIcon);
			this.grindsData[grindIndex].set_actionTime(score);
			this.grindsData[grindIndex].set_soundId(soundID);
		}
		return this.grindsData[grindIndex];
	}
	,setRandomReminder: function() {
		var index;
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.currentItemMap.h[i];
			if(item == null) {
				continue;
			}
			if(item.get_isAutomate()) {
				continue;
			}
			if(item.get_visible() && this.grindersData[i].get_hasReminder()) {
				index = this.gameState.displayRandomGrind(i,this.currentItemMap.h[i].enebledItems,true);
				if(index != -1) {
					if(item.btt.get_visible() == false) {
						var ggd = this.gameState.getGrinderByGrindId(i,index);
						var numIng = this.inventoryData.getData(ggd.get_name());
						var this1 = item.enebledItems;
						var key = ggd.get_name();
						if(this1.h[key]) {
							item.setButtonVisible(true);
							item.updateBttIcon(this.getGrindsData(ggd.get_name()).get_img(),"grindBttIcon",ggd.get_name());
						}
					}
				}
			}
		}
	}
	,checkAutomation: function(item,_shouldCheckDependency) {
		if(_shouldCheckDependency == null) {
			_shouldCheckDependency = true;
		}
		var _gthis = this;
		if(item.get_isAutomate() && item.get_visible()) {
			var _shouldCheckDependency1 = _shouldCheckDependency;
			openfl_Lib.setTimeout(function() {
				item.set_isAction(true);
				_gthis.onGrindItem(item);
			},100);
		}
	}
	,checkWillager: function(_dependency) {
		var dArray = _dependency.split(",");
		var numVillagers;
		var item;
		var _g = 0;
		var _g1 = dArray.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.craftersData.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(this.craftersData[j].get_name() == dArray[i]) {
					item = this.craftersData[j];
					if(item.get_type() == "villager") {
						numVillagers = this.inventoryData.getData(dArray[i]);
						if(numVillagers != null && numVillagers > 0) {
							return numVillagers;
						}
					}
				}
			}
		}
		return 1;
	}
	,saveGame: function(_menuId,_currLabel,_img,_isAuto,_automateName,_grinderName) {
		if(_automateName == null) {
			_automateName = "";
		}
		if(_isAuto == null) {
			_isAuto = false;
		}
		this.dataCollector.setGrindMenuData(_menuId,_currLabel,_img,_isAuto,_automateName,_grinderName);
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
	}
	,onMouseClick: function(e) {
		this.onMouseOut(e);
	}
	,onMouseMove: function(e) {
		this.howerItemPanel.set_x(this.get_mouseX() + this.mouseOffset);
		this.howerItemPanel.set_y(this.get_mouseY() + this.mouseOffset);
	}
	,onMouseOut: function(e) {
		if(this.tm != null) {
			openfl_Lib.clearTimeout(this.tm);
		}
		this.howerItemPanel.hidePanel();
	}
	,onMouseOver: function(e) {
		var _gthis = this;
		this.howerItemPanel.set_x(this.get_mouseX() + this.mouseOffset);
		this.howerItemPanel.set_y(this.get_mouseY() + this.mouseOffset);
		this.tm = openfl_Lib.setTimeout(function() {
			openfl_Lib.clearTimeout(_gthis.tm);
			_gthis.tm = null;
			_gthis.howerItemPanel.showGrindPanel((js_Boot.__cast(e.currentTarget , com_coffeebreak_components_GrindItem)).get_generates(),_gthis.grindsData);
		},300);
	}
	,get_grindSignal: function() {
		return this.grindSignal;
	}
	,set_grindSignal: function(value) {
		return this.grindSignal = value;
	}
	,stopAutomation: function() {
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.currentItemMap.h[i];
			if(item == null) {
				continue;
			}
			if(item.get_isAutomate()) {
				item.set_isAutomate(false);
				item.set_isAction(false);
			}
		}
	}
	,getGrinders: function() {
		var tmpArray = [];
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.currentItemMap.h[i];
			if(item == null) {
				continue;
			}
			tmpArray.push(item.get_name());
		}
		return tmpArray;
	}
	,getGrindersItems: function(_grinderName) {
		var tmpArray = [];
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.currentItemMap.h[i];
			if(item == null) {
				continue;
			}
			if(item.get_name() == _grinderName) {
				return item.get_generates();
			}
		}
		return tmpArray;
	}
	,getTestGrindsData: function(_name) {
		var tmpArray = [];
		var _g = 0;
		var _g1 = this.grindsData.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.grindsData[i].get_name() == _name) {
				return this.grindsData[i].get_dependency().split(",");
			}
		}
		return tmpArray;
	}
	,doTest: function(_data) {
		com_coffeebreak_GameProperties.TEST_TIME = true;
		this.testData = _data;
		this.inventoryData.setData(this.testData.get_grinds(),0);
		this.setAutomated(_data.get_grinders());
	}
	,stopTest: function() {
		com_coffeebreak_GameProperties.TEST_TIME = false;
		this.inventoryData.setData(this.testData.get_grinds(),this.inventoryData.getData(this.testData.get_grinds()) + 1);
		this.stopAutomation();
	}
	,findTestIndex: function(_id) {
		var _data = this.grindersData[_id];
		var generates = _data.get_generatesArray();
		return generates.indexOf(this.testData.get_grinds());
	}
	,getCraftersNum: function() {
		return this.inventoryData.getData(this.testData.get_grinds());
	}
	,getTestData: function(_data) {
		if(_data != null) {
			var index = _data.get_dependency().split(",").indexOf(this.testData.get_tool());
			this.testString = "";
			this.testString += "TOOL: " + this.testData.get_tool() + "\n";
			this.testBreakTime = _data.get_timeToBreak().split(",")[index];
			this.testString += "ACTION TIME: " + this.testBreakTime + "\n";
			this.testString += "DROPS: " + _data.get_drops() + "\n";
		}
		return this.testString;
	}
	,calculateEstimatedDrops: function(_time) {
		var result = _time / parseFloat(this.testBreakTime) | 0;
		return result;
	}
	,setGrinderInvisible: function(_name,_visible) {
		var gi = this.itemsHolder.h[_name];
		if(gi != null) {
			if(_visible == "false") {
				gi.set_visible(false);
			} else {
				gi.set_visible(true);
			}
		}
	}
	,__class__: com_coffeebreak_components_GrindMenu
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_grindSignal:"set_grindSignal",get_grindSignal:"get_grindSignal"})
});
var com_coffeebreak_components_MainItemsGrid = function() {
	this.yGap = 6;
	this.rPosY = 6;
	this.rPosX = 6;
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_craftedSignal(new msignal_Signal2());
	this.itemsHolder = new openfl_display_Sprite();
	this.inventoryItemsHolder = new openfl_display_Sprite();
	this.scrollContainer = new feathers_controls_ScrollContainer();
	this.scrollContainer.set_backgroundSkin(null);
	this.cLabel = com_coffeebreak_utils_TextUtils.createText("craftLabel",null,"craftLabel");
	this.cLabel.set_embedFonts(true);
	this.addChild(this.cLabel);
	this.cLabel1 = com_coffeebreak_utils_TextUtils.createText("inventoryLabel",null,"invLabel");
	this.cLabel1.set_embedFonts(true);
	this.addChild(this.cLabel1);
	this.cLabel1.set_visible(false);
	this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
	this.isMouseDown = false;
	this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
	this.settingsScreen = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("SETTINGS");
	this.baseGameSettings = js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS") , com_coffeebreak_data_BaseGameSettings);
	this.gameState = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GAME_STATE");
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
	this.itemsMap = new haxe_ds_StringMap();
	this.allItems = [];
	this.inventoryMap = new haxe_ds_StringMap();
	this.musicStartedTime = 0;
	this.shouldUpdateItemsHolder = true;
	this.autoCrafters = [];
	com_coffeebreak_CoffeeConstants.STAGE.addEventListener("mouseDown",$bind(this,this.onMouseDown));
	com_coffeebreak_CoffeeConstants.STAGE.addEventListener("mouseUp",$bind(this,this.onMouseUp));
};
$hxClasses["com.coffeebreak.components.MainItemsGrid"] = com_coffeebreak_components_MainItemsGrid;
com_coffeebreak_components_MainItemsGrid.__name__ = "com.coffeebreak.components.MainItemsGrid";
com_coffeebreak_components_MainItemsGrid.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_MainItemsGrid.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	createLayout: function(_val,_shouldUpdateSavedData) {
		if(_shouldUpdateSavedData == null) {
			_shouldUpdateSavedData = true;
		}
		this.createAllItems();
		if(this.gridBcg != null) {
			this.gridBcg.get_graphics().clear();
			if(this.gridBcg.parent != null) {
				this.gridBcg.parent.removeChild(this.gridBcg);
			}
		}
		if(this.gridBcg1 != null) {
			this.gridBcg1.get_graphics().clear();
			if(this.gridBcg1.parent != null) {
				this.gridBcg1.parent.removeChild(this.gridBcg1);
			}
		}
		this.menuType = 1;
		if(this.itemsHolder.get_numChildren() > 0) {
			while(this.itemsHolder.get_numChildren() > 0) {
				var item = js_Boot.__cast(this.itemsHolder.getChildAt(0) , com_coffeebreak_components_MenuButton);
				item.parent.removeChild(item);
			}
		}
		if(this.inventoryItemsHolder.get_numChildren() > 0) {
			while(this.inventoryItemsHolder.get_numChildren() > 0) {
				var item = js_Boot.__cast(this.inventoryItemsHolder.getChildAt(0) , com_coffeebreak_components_MenuButton);
				item.parent.removeChild(item);
			}
		}
		if(this.itemsHolder.parent != null) {
			this.itemsHolder.parent.removeChild(this.itemsHolder);
		}
		if(this.scrollContainer.parent != null) {
			this.scrollContainer.parent.removeChild(this.scrollContainer);
		}
		if(this.inventoryItemsHolder.parent != null) {
			this.inventoryItemsHolder.parent.removeChild(this.inventoryItemsHolder);
		}
		if(this.inventoryScrollContainer != null) {
			if(this.inventoryScrollContainer.parent != null) {
				this.inventoryScrollContainer.parent.removeChild(this.inventoryScrollContainer);
			}
		}
		this.scrollContainer = new feathers_controls_ScrollContainer();
		var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("craftBox");
		this.scrollContainer.set_x(pd.get_posX());
		this.scrollContainer.set_y(pd.get_posY());
		this.scrollContainer.set_explicitHeight(pd.get_height() - 5);
		var pd1 = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("craftBox");
		var pd2 = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("boxStart");
		var posX = 6;
		var posY = 6;
		this.set_rPosX(6);
		this.set_rPosY(6);
		var mb = null;
		var counter = 0;
		var lCounter = 0;
		var firstCreation = true;
		var len = this.allItems.length;
		var numItems;
		if(this.allItems.length > 0) {
			len = this.allItems.length;
			firstCreation = false;
		} else {
			len = this.craftersData.length;
		}
		if(!_val) {
			this.menuType = 2;
			this.inventoryScrollContainer = new feathers_controls_ScrollContainer();
			this.cLabel1.set_visible(true);
			this.scrollContainer.set_explicitWidth(pd.get_width() / 2 + 9);
			this.inventoryScrollContainer.set_explicitWidth(pd.get_width() / 2 + 9);
			this.gridBcg = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width() / 2,pd.get_height(),0);
			this.gridBcg.set_alpha(.5);
			this.gridBcg.set_x(pd.get_posX());
			this.gridBcg.set_y(pd.get_posY());
			this.addChild(this.gridBcg);
			this.gridBcg1 = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width() / 2,pd.get_height(),0);
			this.gridBcg1.set_x(this.gridBcg.get_x() + this.gridBcg.get_width() + 10);
			this.gridBcg1.set_y(pd.get_posY());
			this.addChild(this.gridBcg1);
			this.addChild(this.scrollContainer);
			this.inventoryScrollContainer.set_x(this.gridBcg1.get_x());
			this.inventoryScrollContainer.set_y(this.gridBcg1.get_y());
			this.inventoryScrollContainer.set_explicitHeight(pd.get_height() - 3);
			this.inventoryScrollContainer.set_scrollRect(new openfl_geom_Rectangle(0,0,pd.get_width(),pd.get_height() + 15));
			this.inventoryScrollContainer.addChild(this.inventoryItemsHolder);
			this.addChild(this.inventoryScrollContainer);
			var clone;
			var lCount = 0;
			this.rCount = 0;
			var _g = 0;
			var _g1 = len;
			while(_g < _g1) {
				var i = _g++;
				mb = this.allItems[i];
				if(mb.cData.get_type() == "grind") {
					numItems = this.inventoryData.getData(mb.cData.get_name());
					if(numItems != null && numItems > 0) {
						clone = this.cloneItem(mb);
						mb.setTextInvisible();
						clone.updateInfoTxt(mb.numItems | 0);
						this.addInventoryItem(clone);
					}
				} else {
					mb.set_x(posX);
					mb.set_y(posY);
					this.scrollContainer.addChild(mb);
					numItems = this.inventoryData.getData(mb.cData.get_name());
					if(numItems > 0 && !this.checkIfExistInInbventoryMenu(mb)) {
						clone = this.cloneItem(mb);
						mb.setTextInvisible();
						clone.updateInfoTxt(numItems | 0);
						this.addInventoryItem(clone);
					}
					this.refreshCraftersData(mb);
					posX += mb.get_width() + 6;
					++lCount;
					if(lCount == 4) {
						posY += mb.get_height() + 6;
						posX = 6;
						lCount = 0;
					}
				}
				++counter;
			}
			if(com_coffeebreak_GameProperties.IS_TUTORIAL) {
				this.scrollContainer.set_visible(false);
				this.inventoryScrollContainer.set_visible(false);
				this.gridBcg.set_visible(false);
				this.gridBcg1.set_visible(false);
				this.cLabel.set_visible(false);
				this.cLabel1.set_visible(false);
			}
		} else {
			this.cLabel1.set_visible(false);
			this.scrollContainer.set_explicitWidth(pd.get_width() + 5);
			this.gridBcg = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),0);
			this.gridBcg.set_x(pd.get_posX());
			this.gridBcg.set_y(pd.get_posY());
			this.addChild(this.gridBcg);
			this.addChild(this.scrollContainer);
			var _g = 0;
			var _g1 = this.allItems.length;
			while(_g < _g1) {
				var i = _g++;
				mb = this.allItems[i];
				mb.set_x(posX);
				mb.set_y(posY);
				this.scrollContainer.addChild(mb);
				this.refreshCraftersData(mb);
				posX += mb.get_width() + 6;
				++counter;
				++lCounter;
				if(lCounter == 8) {
					posY += mb.get_height() + 6;
					posX = 6;
					lCounter = 0;
				}
			}
		}
		this.shouldUpdateItemsHolder = false;
		if(mb != null) {
			this.scrollContainer.set_explicitHeight(mb.get_height() * 9 + this.yGap * 10);
		}
		if(this.inventoryScrollContainer != null) {
			this.inventoryScrollContainer.set_explicitHeight(this.scrollContainer.get_explicitHeight());
		}
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			var num = this.inventoryData.getData(this.allItems[i].cData.get_name());
			if(this.allItems[i].cData.get_type() == "button" || this.allItems[i].cData.get_type() == "trade") {
				this.updateCraftersData(this.allItems[i].cData.get_name(),num == null ? "null" : "" + num,true);
			} else if(num != null && num > 0) {
				this.updateCraftersData(this.allItems[i].cData.get_name(),num == null ? "null" : "" + num,true);
			}
		}
		if(_shouldUpdateSavedData) {
			var dCollector = js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector);
			var craftName;
			var delay;
			var _g = 0;
			var _g1 = dCollector.get_autocrafters().length;
			while(_g < _g1) {
				var i = _g++;
				craftName = dCollector.get_autocrafters()[i];
				delay = parseFloat(dCollector.get_autoDelay()[i]);
				var aCrafter = new com_coffeebreak_components_AutoCrafter(delay);
				aCrafter.set_item(this.allItems[this.itemsMap.h[craftName]]);
				if(aCrafter.get_item() != null) {
					aCrafter.get_item().isAutocraft = true;
					aCrafter.addEventListener("timer",$bind(this,this.onAutoCrafterTimer));
					this.autoCrafters.push(aCrafter);
					aCrafter.start();
				}
			}
		}
		var _g = 0;
		var _g1 = this.gameState.get_autocraftItems().length;
		while(_g < _g1) {
			var i = _g++;
			var item = this.allItems;
			var this1 = this.itemsMap;
			var key = this.gameState.get_autocraftItems()[i];
			var item1 = item[this1.h[key]];
			if(item1 != null) {
				this.checkOnComplete(item1);
			}
		}
	}
	,createAllItems: function() {
		var mb;
		var _g = 0;
		var _g1 = this.craftersData.length;
		while(_g < _g1) {
			var i = _g++;
			mb = this.createMenuItem(this.craftersData[i]);
			this.allItems.push(mb);
			var this1 = this.itemsMap;
			var key = this.craftersData[i].get_name();
			if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
				var this2 = this.itemsMap;
				var key1 = this.craftersData[i].get_name();
				this2.h[key1] = i;
			}
		}
	}
	,createMenuItem: function(_cData) {
		var mb = new com_coffeebreak_components_MenuButton("itemHandle_","");
		mb.cData = _cData;
		if(_cData.get_image() != "") {
			mb.setIcon();
			mb.addEventListener("mouseOver",$bind(this,this.onMouseOver));
			mb.addEventListener("mouseOut",$bind(this,this.onMouseOut));
			mb.addEventListener("mouseMove",$bind(this,this.onMouseMove));
			mb.addEventListener("releaseOutside",$bind(this,this.onMouseOut));
			mb.addEventListener("click",$bind(this,this.onCrafterClick));
		}
		var ingrediens = _cData.get_ingrediens().split(",");
		if(ingrediens.length == 1) {
			var tmpArray = ingrediens[0].split("=");
			if(tmpArray[0] == "nothing" && _cData.get_type() != "button" && _cData.get_type() != "trade") {
				mb.isInventory = true;
			}
		}
		return mb;
	}
	,checkIfExistInInbventoryMenu: function(_item) {
		var _g = 0;
		var _g1 = this.inventoryItemsHolder.get_numChildren();
		while(_g < _g1) {
			var i = _g++;
			var child = this.inventoryItemsHolder.getChildAt(i);
			if(_item.cData.get_name() == child.cData.get_name()) {
				return true;
			}
		}
		return false;
	}
	,resetGrid: function() {
		this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
		this.allItems = [];
		this.howerItemPanel.reset();
		this.createLayout(this.menuType == 1,false);
	}
	,addInventoryItem: function(_item) {
		_item.set_x(this.get_rPosX());
		_item.set_y(this.get_rPosY());
		this.inventoryItemsHolder.addChild(_item);
		this.set_rPosX(this.get_rPosX() + (_item.get_width() + 6));
		this.rCount++;
		if(this.rCount == 4) {
			this.set_rPosY(this.get_rPosY() + (_item.get_height() + 6));
			this.set_rPosX(6);
			this.rCount = 0;
		}
		var this1 = this.inventoryMap;
		var key = _item.cData.get_name();
		if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
			var this1 = this.inventoryMap;
			var key = _item.cData.get_name();
			this1.h[key] = _item;
		}
	}
	,updateInventoryMenu: function() {
		var buffer = [];
		if(this.inventoryItemsHolder.get_numChildren() > 0) {
			while(this.inventoryItemsHolder.get_numChildren() > 0) {
				var item = this.inventoryItemsHolder.getChildAt(0);
				item.parent.removeChild(item);
				item.updateInfoTxt(this.inventoryData.getData(item.cData.get_name()));
				if(!item.isInventory && this.inventoryData.getData(item.cData.get_name()) > 0) {
					buffer.push(item);
				} else if(this.inventoryData.getData(item.cData.get_name()) > 0) {
					buffer.push(item);
				}
			}
		}
		this.inventoryMap = new haxe_ds_StringMap();
		this.set_rPosX(6);
		this.set_rPosY(6);
		var count = 0;
		var _g = 0;
		var _g1 = buffer.length;
		while(_g < _g1) {
			var i = _g++;
			var tmp = this.get_rPosX();
			buffer[i].set_x(tmp);
			var tmp1 = this.get_rPosY();
			buffer[i].set_y(tmp1);
			this.inventoryItemsHolder.addChild(buffer[i]);
			var this1 = this.inventoryMap;
			var key = buffer[i].cData.get_name();
			this1.h[key] = buffer[i];
			this.set_rPosX(this.get_rPosX() + (buffer[i].get_width() + 6));
			++count;
			if(count == 4) {
				this.set_rPosY(this.get_rPosY() + (buffer[i].get_height() + 6));
				this.set_rPosX(6);
				count = 0;
			}
		}
	}
	,cloneItem: function(_item) {
		var mb = new com_coffeebreak_components_MenuButton("itemHandle_","");
		mb.cData = _item.cData;
		mb.setIcon();
		return mb;
	}
	,onCrafterClick: function(e) {
		this.playMusic();
		var targetItem = null;
		if(e != null) {
			targetItem = js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MenuButton);
		}
		if(targetItem == null || !targetItem.isClickable) {
			return;
		}
		if(targetItem.cData.get_type() == "button" || targetItem.cData.get_type() == "trade") {
			return;
		}
		if(targetItem.cData.get_onComplete().indexOf("markMap") != -1 && targetItem.numItems != 0) {
			return;
		}
		if(targetItem.cData.get_soundPrefix() != null && targetItem.cData.get_soundPrefix() != "none" && targetItem.cData.get_soundPrefix() != "") {
			if(targetItem.cData.get_soundPrefix() != "explosion") {
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playSound(targetItem.cData.get_soundPrefix() + Std.string(Math.round(Math.random() * 5) + 1) + com_coffeebreak_CoffeeConstants.SOUND_SUFIX);
			} else {
				com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playSound(targetItem.cData.get_soundPrefix() + com_coffeebreak_CoffeeConstants.SOUND_SUFIX);
			}
		}
		var updateNum = Std.parseInt(targetItem.cData.get_craftedItems().split("=")[1]);
		if(targetItem.cData.get_achievement() != "nothing") {
			this.get_craftedSignal().dispatch("ACH",targetItem.cData.get_achievement() + "=" + targetItem.cData.get_image());
		}
		if(this.menuType != 2) {
			targetItem.updateItem(updateNum);
		}
		var ingredients = targetItem.cData.get_ingredientsArray();
		var tmpArray;
		var decreaseNum = 0;
		var ingredName;
		var numIng;
		var mb;
		var clone = null;
		var _g = 0;
		var _g1 = ingredients.length;
		while(_g < _g1) {
			var i = _g++;
			tmpArray = ingredients[i].split("=");
			ingredName = tmpArray[0];
			decreaseNum = Std.parseInt(tmpArray[1]);
			if(ingredName == "contractor" || ingredName == "ship" || ingredName == "armada") {
				continue;
			}
			numIng = Math.round(this.inventoryData.getData(tmpArray[0]));
			if(numIng != null) {
				if(numIng >= decreaseNum) {
					numIng -= decreaseNum;
					this.inventoryData.setData(ingredName,numIng);
					if(decreaseNum > numIng) {
						if(this.menuType != 1) {
							var this1 = this.inventoryMap;
							var key = targetItem.cData.get_name();
							if(!Object.prototype.hasOwnProperty.call(this1.h,key)) {
								clone = this.cloneItem(targetItem);
								clone.updateItem(updateNum);
								this.addInventoryItem(clone);
							} else {
								var this2 = this.inventoryMap;
								var key1 = targetItem.cData.get_name();
								clone = this2.h[key1];
								clone.updateItem(updateNum);
							}
						}
					} else if(this.menuType != 1) {
						var this3 = this.inventoryMap;
						var key2 = targetItem.cData.get_name();
						if(!Object.prototype.hasOwnProperty.call(this3.h,key2)) {
							clone = this.cloneItem(targetItem);
							clone.updateItem(updateNum);
							this.addInventoryItem(clone);
						} else {
							var this4 = this.inventoryMap;
							var key3 = targetItem.cData.get_name();
							clone = this4.h[key3];
						}
					}
					this.updateIngrediensDecrease(ingredName,numIng);
				}
			}
		}
		var onCompleteA = targetItem.cData.get_onCompleteArray();
		var automateName = "";
		var deautomateName = "";
		var increaseName = "";
		var decreaseName = "";
		var _g = 0;
		var _g1 = onCompleteA.length;
		while(_g < _g1) {
			var i = _g++;
			var str;
			if(onCompleteA[i] == "nothing") {
				continue;
			} else {
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "automate") {
					automateName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
				}
				if(str == "increase") {
					increaseName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
					var gd = this.gameState.getGrindDataItem(increaseName);
					var shouldUpdate = this.checkRequiredItems(gd.get_dependency().split(","));
					if(shouldUpdate) {
						var dropsArray = gd.get_drops().split(",");
						var _g2 = 0;
						var _g3 = dropsArray.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var tmpArray1 = dropsArray[i1].split("=");
							this.updateCraftersData(tmpArray1[0],tmpArray1[1]);
						}
					}
				}
				if(str == "decrease") {
					decreaseName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
					var gd1 = this.gameState.getGrindDataItem(decreaseName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,10);
				if(str == "deautomate") {
					deautomateName = HxOverrides.substr(onCompleteA[i],11,onCompleteA[i].length);
				}
				str = HxOverrides.substr(onCompleteA[i],0,9);
				if(str == "autocraft") {
					var delay = 1500;
					var stArray;
					var craftName;
					if(onCompleteA[i].indexOf("=") != -1) {
						stArray = HxOverrides.substr(onCompleteA[i],10,onCompleteA[i].length).split("=");
						delay = parseFloat(stArray[1]) * 1000;
						craftName = stArray[0];
					} else {
						craftName = HxOverrides.substr(onCompleteA[i],10,onCompleteA[i].length);
					}
					(js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).saveAutoCrafters(craftName,delay == null ? "null" : "" + delay);
					com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
					var aCrafter = new com_coffeebreak_components_AutoCrafter(delay);
					aCrafter.set_item(this.allItems[this.itemsMap.h[craftName]]);
					aCrafter.get_item().isAutocraft = true;
					aCrafter.addEventListener("timer",$bind(this,this.onAutoCrafterTimer));
					this.autoCrafters.push(aCrafter);
					aCrafter.start();
				}
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "deautocraft") {
					var deautocraftName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					if(this.autoCrafters.length > 0) {
						this.deautocraft(deautocraftName);
					}
				}
				str = HxOverrides.substr(onCompleteA[i],0,9);
				if(str == "mapActive") {
					this.get_craftedSignal().dispatch("MAP_ACTIVE",com_coffeebreak_GameProperties.STARTING_MAP_MARKER);
				}
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "beatGame") {
					this.get_craftedSignal().dispatch("GAME_END",null);
				}
				str = HxOverrides.substr(onCompleteA[i],0,7);
				if(str == "markMap") {
					var mapData = HxOverrides.substr(onCompleteA[i],8,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("NEW_MAP",mapData);
				}
				str = HxOverrides.substr(onCompleteA[i],0,12);
				if(str == "beatLocation") {
					this.get_craftedSignal().dispatch("BEAT_LOCATION","");
				}
				str = HxOverrides.substr(onCompleteA[i],0,4);
				if(str == "drop") {
					str = HxOverrides.substr(onCompleteA[i],5,onCompleteA[i].length);
					var dropArray = str.split("-");
					var tmpArr;
					var _g4 = 0;
					var _g5 = dropArray.length;
					while(_g4 < _g5) {
						var n = _g4++;
						tmpArr = dropArray[n].split("=");
						this.updateCraftersData(tmpArr[0],tmpArr[1]);
					}
				}
				str = HxOverrides.substr(onCompleteA[i],0,5);
				if(str == "speed") {
					com_coffeebreak_GameProperties.GRIND_SPEED = Std.parseInt(HxOverrides.substr(onCompleteA[i],6,onCompleteA[i].length));
					this.get_craftedSignal().dispatch("SPEED_POTION","");
				}
				str = HxOverrides.substr(onCompleteA[i],0,7);
				if(str == "explode") {
					str = HxOverrides.substr(onCompleteA[i],8,onCompleteA[i].length);
					var explodeItem = this.allItems[this.itemsMap.h[str]];
					if(explodeItem != null) {
						var p = new openfl_geom_Point(explodeItem.get_x(),explodeItem.get_y());
						p.x += this.scrollContainer.get_x();
						p.y += this.scrollContainer.get_y();
						p.x += Math.random() * explodeItem.get_width();
						p.y += Math.random() * explodeItem.get_height();
						this.pe.detonateExplosion(p.x,p.y);
					}
				}
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "showGrinder") {
					var grindName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("SHOW_GRIND",grindName);
				}
				var hideGrindName;
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "hideGrinder") {
					var hideGrindName1 = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("HIDE_GRIND",hideGrindName1);
				}
				str = HxOverrides.substr(onCompleteA[i],0,12);
				if(str == "startGrinder") {
					hideGrindName = HxOverrides.substr(onCompleteA[i],13,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("START_GRIND",hideGrindName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "stopGrinder") {
					hideGrindName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("STOP_GRIND",hideGrindName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "purchase") {
					this.get_craftedSignal().dispatch("PURCHASE");
					return;
				}
			}
		}
		if(automateName != "") {
			automateName += "=" + targetItem.cData.get_name();
		}
		var _g = 0;
		var _g1 = this.updateData.length;
		while(_g < _g1) {
			var j = _g++;
			ingredients = this.updateData[j].get_ingredientsArray();
			var _g2 = 0;
			var _g3 = ingredients.length;
			while(_g2 < _g3) {
				var n = _g2++;
				tmpArray = ingredients[n].split("=");
				ingredName = tmpArray[0];
				decreaseNum = Std.parseInt(tmpArray[1]);
				numIng = this.inventoryData.getData(ingredName);
				if(decreaseNum > numIng) {
					var mb1 = this.allItems;
					var this1 = this.itemsMap;
					var key = this.updateData[j].get_name();
					mb = mb1[this1.h[key]];
					mb.setToDisabledState();
				}
			}
		}
		this.inventoryData.setData(targetItem.cData.get_name(),this.inventoryData.getData(targetItem.cData.get_name()) + updateNum);
		this.updateSameNameItems(targetItem.cData.get_name(),targetItem.cData.get_ID());
		this.updateReladetItems(targetItem.cData.get_name());
		if(this.menuType == 2) {
			this.updateInventoryMenu();
		}
		if(automateName != "") {
			this.get_craftedSignal().dispatch("GRIND_AUTOMATE",automateName);
		} else if(deautomateName != "") {
			this.get_craftedSignal().dispatch("GRIND_DEAUTOMATE",deautomateName);
		} else {
			this.get_craftedSignal().dispatch("GRIND_ACTION","");
		}
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
	}
	,playMusic: function() {
		if(com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			return;
		}
		if(this.settingsScreen == null) {
			this.settingsScreen = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("SETTINGS");
		}
		if(new Date().getTime() - this.musicStartedTime < this.settingsScreen.getSoundsDelay()) {
			return;
		}
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_musicCompleteSignal().add($bind(this,this.onMusicComplete));
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.playMusic(this.baseGameSettings.musicID + ".ogg",this.baseGameSettings.get_musicVolume(),1,true);
		this.musicStartedTime = new Date().getTime();
	}
	,onMusicComplete: function(e) {
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_musicCompleteSignal().remove($bind(this,this.onMusicComplete));
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.stopMusic(this.baseGameSettings.musicID + ".ogg");
	}
	,onAutoCrafterTimer: function(event) {
		if(com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			return;
		}
		var crafter = (js_Boot.__cast(event.target , com_coffeebreak_components_AutoCrafter)).get_item();
		var shouldUpdate = this.checkIngredientsValue(crafter.cData);
		if(shouldUpdate) {
			crafter.dispatchEvent(new openfl_events_Event("click",true,true));
		}
	}
	,deautocraft: function(_name) {
		var _g = 0;
		var _g1 = this.autoCrafters.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.autoCrafters[i].get_item().cData.get_name() == _name) {
				this.autoCrafters[i].stop();
				this.autoCrafters[i].removeEventListener("timer",$bind(this,this.onAutoCrafterTimer));
			}
		}
	}
	,updateCraftersData: function(_name,_num,_fromSave) {
		if(_fromSave == null) {
			_fromSave = false;
		}
		var curVal;
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.allItems[i].cData.get_name() == _name) {
				var item = this.allItems[i];
				curVal = this.inventoryData.getData(_name);
				if(curVal != null && !_fromSave) {
					curVal += parseFloat(_num);
				} else {
					curVal = parseFloat(_num);
				}
				this.inventoryData.setData(_name,curVal);
				if(this.menuType != 2) {
					this.allItems[i].numItems = curVal | 0;
					this.allItems[i].updateInfoTxt(curVal | 0);
				}
				if(this.menuType == 2) {
					var this1 = this.inventoryMap;
					var key = this.allItems[i].cData.get_name();
					if(this1.h[key] == null && this.allItems[i].isInventory) {
						this.addInventoryItem(this.allItems[i]);
					}
				}
				if(this.allItems[i].cData.get_type() == "button") {
					if(this.checkRequiredItems(this.allItems[i].cData.get_requiredItemArray())) {
						this.allItems[i].setItemActive();
					}
				} else if(this.allItems[i].cData.get_type() == "trade") {
					if(this.checkIngredientsValue(this.allItems[i].cData)) {
						this.allItems[i].setItemActive();
					}
				}
				this.updateData = this.checkRelatedItems(_name);
				var _g2 = 0;
				var _g3 = this.updateData.length;
				while(_g2 < _g3) {
					var j = _g2++;
					if(this.updateData[j] != null) {
						this.allItems[this.updateData[j].get_itemKey()].setItemActive();
					}
				}
				if(!_fromSave) {
					this.checkOnComplete(this.allItems[i]);
				}
			}
		}
		if(this.menuType == 2) {
			var _g = 0;
			var _g1 = this.inventoryItemsHolder.get_numChildren();
			while(_g < _g1) {
				var i = _g++;
				var item = js_Boot.__cast(this.inventoryItemsHolder.getChildAt(i) , com_coffeebreak_components_MenuButton);
				if(item.cData.get_name() == _name) {
					curVal = this.inventoryData.getData(_name);
					item.numItems = curVal | 0;
					item.updateInfoTxt(curVal | 0);
				}
			}
		}
	}
	,checkOnComplete: function(targetItem) {
		var onCompleteA = targetItem.cData.get_onCompleteArray();
		var automateName = "";
		var deautomateName = "";
		var increaseName = "";
		var decreaseName = "";
		var _g = 0;
		var _g1 = onCompleteA.length;
		while(_g < _g1) {
			var i = _g++;
			var str;
			if(onCompleteA[i] == "nothing") {
				continue;
			} else {
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "automate") {
					automateName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
				}
				if(str == "increase") {
					increaseName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
					var gd = this.gameState.getGrindDataItem(increaseName);
					var shouldUpdate = this.checkRequiredItems(gd.get_dependency().split(","));
					if(shouldUpdate) {
						var dropsArray = gd.get_drops().split(",");
						var _g2 = 0;
						var _g3 = dropsArray.length;
						while(_g2 < _g3) {
							var i1 = _g2++;
							var tmpArray = dropsArray[i1].split("=");
							this.updateCraftersData(tmpArray[0],tmpArray[1]);
						}
					}
				}
				if(str == "decrease") {
					decreaseName = HxOverrides.substr(onCompleteA[i],9,onCompleteA[i].length);
					var gd1 = this.gameState.getGrindDataItem(decreaseName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,10);
				if(str == "deautomate") {
					deautomateName = HxOverrides.substr(onCompleteA[i],11,onCompleteA[i].length);
				}
				str = HxOverrides.substr(onCompleteA[i],0,9);
				if(str == "autocraft") {
					var delay = 1500;
					var stArray;
					var craftName;
					if(onCompleteA[i].indexOf("=") != -1) {
						stArray = HxOverrides.substr(onCompleteA[i],10,onCompleteA[i].length).split("=");
						delay = parseFloat(stArray[1]) * 1000;
						craftName = stArray[0];
					} else {
						craftName = HxOverrides.substr(onCompleteA[i],10,onCompleteA[i].length);
					}
					(js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).saveAutoCrafters(craftName,delay == null ? "null" : "" + delay);
					com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
					var aCrafter = new com_coffeebreak_components_AutoCrafter(delay);
					aCrafter.set_item(this.allItems[this.itemsMap.h[craftName]]);
					aCrafter.get_item().isAutocraft = true;
					aCrafter.addEventListener("timer",$bind(this,this.onAutoCrafterTimer));
					this.autoCrafters.push(aCrafter);
					aCrafter.start();
				}
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "deautocraft") {
					var deautocraftName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					if(this.autoCrafters.length > 0) {
						this.deautocraft(deautocraftName);
					}
				}
				str = HxOverrides.substr(onCompleteA[i],0,9);
				if(str == "mapActive") {
					this.get_craftedSignal().dispatch("MAP_ACTIVE",com_coffeebreak_GameProperties.STARTING_MAP_MARKER);
				}
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "beatGame") {
					this.get_craftedSignal().dispatch("GAME_END",null);
				}
				str = HxOverrides.substr(onCompleteA[i],0,7);
				if(str == "markMap") {
					var mapData = HxOverrides.substr(onCompleteA[i],8,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("NEW_MAP",mapData);
				}
				str = HxOverrides.substr(onCompleteA[i],0,12);
				if(str == "beatLocation") {
					this.get_craftedSignal().dispatch("BEAT_LOCATION","");
				}
				str = HxOverrides.substr(onCompleteA[i],0,4);
				var tmp = str == "drop";
				str = HxOverrides.substr(onCompleteA[i],0,5);
				var tmp1 = str == "speed";
				str = HxOverrides.substr(onCompleteA[i],0,7);
				var tmp2 = str == "explode";
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "showGrinder") {
					var grindName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("SHOW_GRIND",grindName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,11);
				if(str == "hideGrinder") {
					var hideGrindName = HxOverrides.substr(onCompleteA[i],12,onCompleteA[i].length);
					this.get_craftedSignal().dispatch("HIDE_GRIND",hideGrindName);
				}
				str = HxOverrides.substr(onCompleteA[i],0,8);
				if(str == "purchase") {
					this.get_craftedSignal().dispatch("PURCHASE");
					return;
				}
			}
		}
		if(automateName != "") {
			automateName += "=" + targetItem.cData.get_name();
		}
		if(automateName != "") {
			this.get_craftedSignal().dispatch("GRIND_AUTOMATE",automateName);
		} else if(deautomateName != "") {
			this.get_craftedSignal().dispatch("GRIND_DEAUTOMATE",deautomateName);
		}
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
	}
	,refreshCraftersData: function(_item) {
		var curVal = this.inventoryData.getData(_item.cData.get_name());
		if(curVal != null && curVal > 0) {
			if(this.menuType != 2) {
				_item.numItems = curVal | 0;
				_item.updateInfoTxt(curVal | 0);
			}
			var ingr = _item.cData.get_ingrediens().split(",");
			var localScore = 0;
			var globalScore = 0;
			var _g = 0;
			var _g1 = ingr.length;
			while(_g < _g1) {
				var i = _g++;
				var tmpArray = ingr[i].split("=");
				localScore += Std.parseInt(tmpArray[1]);
				globalScore += this.inventoryData.getData(tmpArray[0]);
			}
			if(globalScore >= localScore && localScore != 0) {
				_item.setItemActive();
			}
		}
	}
	,checkRelatedItems: function(_key) {
		var returnArray = [];
		var tmpArray = [];
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.allItems[i].cData.get_ingredientsArray().length;
			while(_g2 < _g3) {
				var j = _g2++;
				tmpArray = this.allItems[i].cData.get_ingredientsArray()[j].split("=");
				if(tmpArray[0] == _key) {
					if(Std.parseInt(tmpArray[1]) <= this.inventoryData.getData(_key)) {
						if(this.checkOtherItems(this.allItems[i].cData.get_ingredientsArray(),_key)) {
							var _g4 = 0;
							var _g5 = this.allItems[i].cData.get_requiredItemArray().length;
							while(_g4 < _g5) {
								var n = _g4++;
								if(this.allItems[i].cData.get_type() != "grind") {
									if(this.checkRequiredItems(this.allItems[i].cData.get_requiredItemArray())) {
										this.allItems[i].cData.set_itemKey(i);
										returnArray.push(this.allItems[i].cData);
									}
								}
							}
						}
					}
				}
			}
		}
		return returnArray;
	}
	,checkOtherItems: function(_data,_exception) {
		var tmpArray = [];
		var _g = 0;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			tmpArray = _data[i].split("=");
			if(tmpArray[0] != _exception) {
				if(this.inventoryData.getData(tmpArray[0]) == null || this.inventoryData.getData(tmpArray[0]) < Std.parseInt(tmpArray[1])) {
					return false;
				}
			}
		}
		return true;
	}
	,checkRequiredItems: function(_data) {
		var exist = false;
		var _g = 0;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			if(_data[i] == "nothing") {
				return true;
			}
			if(this.inventoryData.getData(_data[i]) != null && this.inventoryData.getData(_data[i]) != 0) {
				return true;
			} else {
				exist = false;
			}
		}
		return exist;
	}
	,updateReladetItems: function(_name) {
		var mb;
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			var data = this.allItems[i].cData;
			if(data.get_type() == "grind" && data.get_ingrediens().indexOf("nothing") != -1) {
				continue;
			}
			if(data.get_type() == "") {
				var cArra = data.get_craftedItems().split("=");
				if(parseFloat(cArra[1]) == 0 && data.get_onComplete() == "nothing") {
					continue;
				}
			}
			mb = this.allItems[i];
			if(this.checkIngredientsValue(data)) {
				mb.setItemActive();
			} else {
				mb.setToDisabledState();
			}
		}
	}
	,checkIngredientsValue: function(_data) {
		var tmpArray;
		var numItems;
		var _g = 0;
		var _g1 = _data.get_ingredientsArray().length;
		while(_g < _g1) {
			var j = _g++;
			tmpArray = _data.get_ingredientsArray()[j].split("=");
			if(tmpArray[0] != "nothing") {
				numItems = this.inventoryData.getData(tmpArray[0]);
				if(numItems == null || numItems == 0 || numItems < Std.parseInt(tmpArray[1])) {
					return false;
				}
			} else {
				var tmp = tmpArray[0] == "nothing";
			}
		}
		return this.checkRequiredItems(_data.get_requiredItemArray());
	}
	,updateSameNameItems: function(_name,_exception) {
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.allItems[i].cData.get_name() == _name && this.allItems[i].cData.get_ID() != _exception) {
				this.allItems[i].updateInfoTxt(this.inventoryData.getData(_name));
			}
		}
	}
	,updateIngrediensDecrease: function(_ingridientName,_ingValue) {
		var _g = 0;
		var _g1 = this.allItems.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.allItems[i].cData.get_name() == _ingridientName) {
				if(this.menuType != 2) {
					this.allItems[i].updateInfoTxt(_ingValue);
				}
			}
		}
	}
	,showRelated: function(_item) {
		this.showedRelatedArray = [];
		var _g = 0;
		var _g1 = _item.cData.get_requiredItemArray().length;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = this.allItems.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(_item.cData.get_requiredItemArray()[i] == "nothing") {
					continue;
				}
				if(_item.cData.get_requiredItemArray()[i] == this.allItems[j].cData.get_name()) {
					if(this.inventoryData.getData(_item.cData.get_requiredItemArray()[i]) == null) {
						if(this.inventoryData.getData(_item.cData.get_requiredItemArray()[i]) <= 0) {
							this.allItems[j].showRed(true);
							this.showedRelatedArray.push(this.allItems[j]);
						}
					}
				}
			}
		}
		var _g = 0;
		var _g1 = _item.cData.get_ingredientsArray().length;
		while(_g < _g1) {
			var i = _g++;
			var tmpArray = _item.cData.get_ingredientsArray()[i].split("=");
			var _g2 = 0;
			var _g3 = this.allItems.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(tmpArray[0] == this.allItems[j].cData.get_name()) {
					if(this.inventoryData.getData(tmpArray[0]) == null) {
						this.allItems[j].showRed(true);
						this.showedRelatedArray.push(this.allItems[j]);
					} else if(this.inventoryData.getData(tmpArray[0]) < Std.parseInt(tmpArray[1])) {
						this.allItems[j].showRed(true);
						this.showedRelatedArray.push(this.allItems[j]);
					}
				}
			}
		}
	}
	,hideRelated: function() {
		if(this.showedRelatedArray == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.showedRelatedArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.showedRelatedArray[i].showRed(false);
		}
	}
	,onMouseUp: function(e) {
		this.isMouseDown = false;
	}
	,onMouseDown: function(e) {
		this.isMouseDown = true;
		if(this.tm != null) {
			openfl_Lib.clearTimeout(this.tm);
		}
		this.howerItemPanel.hidePanel();
	}
	,onMouseMove: function(e) {
		this.alignPanel(js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MenuButton));
	}
	,onMouseOut: function(e) {
		if(this.isMouseDown) {
			return;
		}
		if(this.tm != null) {
			openfl_Lib.clearTimeout(this.tm);
		}
		this.hideRelated();
		this.howerItemPanel.hidePanel();
	}
	,onMouseOver: function(e) {
		var _gthis = this;
		if(this.tm != null) {
			this.hideRelated();
			openfl_Lib.clearTimeout(this.tm);
		}
		if(this.isMouseDown) {
			return;
		}
		this.tm = openfl_Lib.setTimeout(function() {
			openfl_Lib.clearTimeout(_gthis.tm);
			_gthis.tm = null;
			_gthis.showRelated(js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MenuButton));
			_gthis.howerItemPanel.showPanel(e.currentTarget);
		},750);
		this.alignPanel(js_Boot.__cast(e.currentTarget , com_coffeebreak_components_MenuButton));
	}
	,alignPanel: function(_item) {
		var pt = new openfl_geom_Point(_item.get_x(),_item.get_y());
		pt.x += this.scrollContainer.get_x() + 5;
		pt.y += this.scrollContainer.get_y() + 5;
		if(this.get_mouseX() > pt.x + _item.get_width() / 2) {
			this.howerItemPanel.set_x(pt.x + _item.get_width());
		}
		if(this.get_mouseX() < pt.x + _item.get_width() / 2) {
			this.howerItemPanel.set_x(pt.x - this.howerItemPanel.get_width());
		}
		this.howerItemPanel.set_y(this.get_mouseY() - _item.get_height() / 2);
		if(this.get_mouseY() <= pt.y + 15) {
			this.howerItemPanel.set_x(this.get_mouseX() - this.howerItemPanel.get_width() / 2);
			this.howerItemPanel.set_y(this.get_mouseY() - (this.howerItemPanel.get_height() + 20));
		} else if(this.get_mouseY() >= pt.y + _item.get_height() - 15) {
			this.howerItemPanel.set_x(this.get_mouseX() - this.howerItemPanel.get_width() / 2);
			this.howerItemPanel.set_y(this.get_mouseY() + _item.get_height() - 20);
		}
	}
	,updateTutorial: function(_val) {
		if(_val == 4) {
			this.gridBcg1.set_visible(true);
			this.cLabel1.set_visible(true);
			this.updateInventoryMenu();
			this.inventoryScrollContainer.set_visible(true);
		} else if(_val == 5) {
			this.gridBcg.set_visible(true);
			this.cLabel.set_visible(true);
			this.tutorItem = this.allItems[this.itemsMap.h["planks"]];
			this.tutorItem.bufferPt.setTo(this.tutorItem.get_x(),this.tutorItem.get_y());
			this.tutorItem.set_x(this.gridBcg.get_x() + 6);
			this.tutorItem.set_y(this.gridBcg.get_y() + 6);
			this.addChild(this.tutorItem);
		} else if(_val == 7) {
			this.tutorItem.set_x(this.tutorItem.bufferPt.x);
			this.tutorItem.set_y(this.tutorItem.bufferPt.y);
			this.scrollContainer.addChild(this.tutorItem);
			this.scrollContainer.set_visible(true);
			this.tutorItem = null;
		}
	}
	,get_craftedSignal: function() {
		return this.craftedSignal;
	}
	,set_craftedSignal: function(value) {
		return this.craftedSignal = value;
	}
	,get_rPosX: function() {
		return this.rPosX;
	}
	,set_rPosX: function(value) {
		return this.rPosX = value;
	}
	,get_rPosY: function() {
		return this.rPosY;
	}
	,set_rPosY: function(value) {
		return this.rPosY = value;
	}
	,__class__: com_coffeebreak_components_MainItemsGrid
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_rPosY:"set_rPosY",get_rPosY:"get_rPosY",set_rPosX:"set_rPosX",get_rPosX:"get_rPosX",set_craftedSignal:"set_craftedSignal",get_craftedSignal:"get_craftedSignal"})
});
var com_coffeebreak_components_MainMenu = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_menuSignal(new msignal_Signal1());
};
$hxClasses["com.coffeebreak.components.MainMenu"] = com_coffeebreak_components_MainMenu;
com_coffeebreak_components_MainMenu.__name__ = "com.coffeebreak.components.MainMenu";
com_coffeebreak_components_MainMenu.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_components_MainMenu.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		var buttons = ["pauseBtt","settingsBtt","fullScrnBtt"];
		var icons = ["iconPause.png","iconSettings.png","iconDesktop.png"];
		var _g = 0;
		var _g1 = buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var btt = new com_coffeebreak_components_MenuButton("smallBtt.png",buttons[i]);
			btt.addIcon(icons[i]);
			if(btt.numTxt != null) {
				btt.numTxt.parent.removeChild(btt.numTxt);
			}
			this.addChild(btt);
			this.addButton(btt);
		}
	}
	,onClick: function(e) {
		com_coffeebreak_core_BaseScreen.prototype.onClick.call(this,e);
		haxe_Log.trace("CLICK " + this.get_targetItem().get_name(),{ fileName : "src/com/coffeebreak/components/MainMenu.hx", lineNumber : 47, className : "com.coffeebreak.components.MainMenu", methodName : "onClick"});
		if(this.get_targetItem().get_name() == "fullScrnBtt") {
			if(com_coffeebreak_CoffeeConstants.STAGE.get_displayState() == 2) {
				com_coffeebreak_CoffeeConstants.STAGE.set_displayState(1);
				(js_Boot.__cast(this.get_targetItem() , com_coffeebreak_components_MenuButton)).addIcon("iconContract.png");
			} else {
				com_coffeebreak_CoffeeConstants.STAGE.set_displayState(2);
				(js_Boot.__cast(this.get_targetItem() , com_coffeebreak_components_MenuButton)).addIcon("iconDesktop.png");
			}
			return;
		}
		this.get_menuSignal().dispatch(this.get_targetItem().get_name());
	}
	,get_menuSignal: function() {
		return this.menuSignal;
	}
	,set_menuSignal: function(value) {
		return this.menuSignal = value;
	}
	,__class__: com_coffeebreak_components_MainMenu
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_menuSignal:"set_menuSignal",get_menuSignal:"get_menuSignal"})
});
var com_coffeebreak_components_MapMarker = function() {
	openfl_display_Sprite.call(this);
	this.createMarker();
	this.set_showHighlight(false);
	this.set_isCompleted(false);
};
$hxClasses["com.coffeebreak.components.MapMarker"] = com_coffeebreak_components_MapMarker;
com_coffeebreak_components_MapMarker.__name__ = "com.coffeebreak.components.MapMarker";
com_coffeebreak_components_MapMarker.__super__ = openfl_display_Sprite;
com_coffeebreak_components_MapMarker.prototype = $extend(openfl_display_Sprite.prototype,{
	createMarker: function() {
		this.imgArray = [];
		var imgs = ["mapMarker.png","mapMarkerHighlight.png","mapMarkerShadow.png","mapMarkerCheck.png"];
		var _g = 0;
		var _g1 = imgs.length;
		while(_g < _g1) {
			var i = _g++;
			var gi = new com_coffeebreak_core_GameItem(imgs[i],"mapItem" + (i + 1));
			this.addChild(gi);
			if(i == 1 || i == 3) {
				gi.set_visible(false);
			}
			this.imgArray.push(gi);
		}
	}
	,setDisabledState: function() {
		this.stopBlinking();
		var _g = 0;
		var _g1 = this.imgArray.length;
		while(_g < _g1) {
			var i = _g++;
			this.imgArray[1].set_visible(false);
		}
		this.imgArray[3].set_visible(true);
	}
	,blinkContinuous: function() {
		this.stopBlinking();
		this.blinkTimer = new openfl_utils_Timer(500);
		this.blinkTimer.addEventListener("timer",$bind(this,this.onBlinkTimer));
		this.set_showHighlight(true);
		this.blinkTimer.start();
	}
	,onBlinkTimer: function(event) {
		this.set_showHighlight(!this.get_showHighlight());
	}
	,stopBlinking: function() {
		if(this.blinkTimer == null) {
			return;
		}
		this.blinkTimer.stop();
		this.blinkTimer.removeEventListener("timer",$bind(this,this.onBlinkTimer));
		this.set_showHighlight(false);
	}
	,flashThrice: function() {
		this.flashTimer = new openfl_utils_Timer(125,6);
		this.flashTimer.addEventListener("timer",$bind(this,this.onFlashTimer));
		this.flashTimer.addEventListener("timerComplete",$bind(this,this.onFlashTimerComplete));
		this.set_showHighlight(true);
		this.flashTimer.start();
	}
	,onFlashTimer: function(event) {
		this.set_showHighlight(!this.get_showHighlight());
	}
	,onFlashTimerComplete: function(event) {
		this.flashTimer.stop();
		this.flashTimer.removeEventListener("timer",$bind(this,this.onFlashTimer));
		this.flashTimer.removeEventListener("timerComplete",$bind(this,this.onFlashTimerComplete));
		this.set_showHighlight(false);
	}
	,highlight: function(_val) {
		if(this.imgArray.length > 0) {
			if(_val == 0) {
				this.imgArray[1].set_visible(false);
			} else {
				this.imgArray[1].set_visible(true);
			}
		}
	}
	,get_data: function() {
		return this.data;
	}
	,set_data: function(value) {
		var a = value.split(",");
		this.set_markerName(a[0]);
		this.set_mapX(parseFloat(a[1]));
		this.set_mapY(parseFloat(a[2]));
		if(a.length >= 4) {
			if(a[3] == "true") {
				this.set_isCompleted(true);
			} else {
				this.set_isCompleted(false);
			}
		}
		return this.data = value;
	}
	,get_markerName: function() {
		return this.markerName;
	}
	,set_markerName: function(value) {
		return this.markerName = value;
	}
	,get_isCompleted: function() {
		return this.isCompleted;
	}
	,set_isCompleted: function(value) {
		return this.isCompleted = value;
	}
	,get_mapX: function() {
		return this.mapX;
	}
	,set_mapX: function(value) {
		return this.mapX = value;
	}
	,get_mapY: function() {
		return this.mapY;
	}
	,set_mapY: function(value) {
		return this.mapY = value;
	}
	,get_showHighlight: function() {
		return this.showHighlight;
	}
	,set_showHighlight: function(value) {
		this.highlight(com_coffeebreak_utils_ConvertorUtils.boolToInt(value));
		return this.showHighlight = value;
	}
	,get_ID: function() {
		return this.ID;
	}
	,set_ID: function(value) {
		return this.ID = value;
	}
	,__class__: com_coffeebreak_components_MapMarker
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_showHighlight:"set_showHighlight",get_showHighlight:"get_showHighlight",set_mapY:"set_mapY",get_mapY:"get_mapY",set_mapX:"set_mapX",get_mapX:"get_mapX",set_isCompleted:"set_isCompleted",get_isCompleted:"get_isCompleted",set_markerName:"set_markerName",get_markerName:"get_markerName",set_data:"set_data",get_data:"get_data",set_ID:"set_ID",get_ID:"get_ID"})
});
var com_coffeebreak_components_PopupTxt = function() {
	openfl_display_Sprite.call(this);
	this.tf = com_coffeebreak_utils_TextUtils.createText("popupTxt","10");
	this.tf.set_autoSize(1);
	this.tf.set_x(0);
	this.tf.set_y(0);
	this.addChild(this.tf);
	this.drawBcg();
};
$hxClasses["com.coffeebreak.components.PopupTxt"] = com_coffeebreak_components_PopupTxt;
com_coffeebreak_components_PopupTxt.__name__ = "com.coffeebreak.components.PopupTxt";
com_coffeebreak_components_PopupTxt.__super__ = openfl_display_Sprite;
com_coffeebreak_components_PopupTxt.prototype = $extend(openfl_display_Sprite.prototype,{
	update: function(_value) {
		this.tf.set_text(_value);
		this.drawBcg();
	}
	,drawBcg: function() {
		this.get_graphics().clear();
		this.get_graphics().beginFill(0);
		this.get_graphics().drawRect(0,0,this.tf.get_width(),this.tf.get_height());
		this.get_graphics().endFill();
	}
	,__class__: com_coffeebreak_components_PopupTxt
});
var com_coffeebreak_components_MarkerTooltip = function() {
	com_coffeebreak_components_PopupTxt.call(this);
	this.tf.set_textColor(0);
};
$hxClasses["com.coffeebreak.components.MarkerTooltip"] = com_coffeebreak_components_MarkerTooltip;
com_coffeebreak_components_MarkerTooltip.__name__ = "com.coffeebreak.components.MarkerTooltip";
com_coffeebreak_components_MarkerTooltip.__super__ = com_coffeebreak_components_PopupTxt;
com_coffeebreak_components_MarkerTooltip.prototype = $extend(com_coffeebreak_components_PopupTxt.prototype,{
	drawBcg: function() {
		this.get_graphics().clear();
		this.get_graphics().beginFill(11579568);
		this.get_graphics().lineStyle(1,7105644);
		this.get_graphics().drawRect(0,0,this.tf.get_width(),this.tf.get_height());
		this.get_graphics().endFill();
	}
	,__class__: com_coffeebreak_components_MarkerTooltip
});
var com_coffeebreak_core_CoffeeButton = function(itemName,_positionName,_scaleName) {
	this.enableMouseOver = false;
	this.buttonStateHolder = [];
	this.bitmapsHolder = new openfl_display_Sprite();
	com_coffeebreak_core_GameItem.call(this,itemName,_positionName,_scaleName);
};
$hxClasses["com.coffeebreak.core.CoffeeButton"] = com_coffeebreak_core_CoffeeButton;
com_coffeebreak_core_CoffeeButton.__name__ = "com.coffeebreak.core.CoffeeButton";
com_coffeebreak_core_CoffeeButton.__super__ = com_coffeebreak_core_GameItem;
com_coffeebreak_core_CoffeeButton.prototype = $extend(com_coffeebreak_core_GameItem.prototype,{
	init: function(_itemName,_positionName,_scaleName) {
		this.mouseChildren = false;
		var bmd = null;
		var i = 1;
		if(com_coffeebreak_CoffeeConstants.USE_IMG_FROM_TEXTURE) {
			var ob = com_coffeebreak_CoffeeConstants.LOADER_MANAGER.getSequenceImage(_itemName);
			if(ob.get_bmpArray().length > 0) {
				this.set_rect(ob.get_rect());
				this.bmpSource = new openfl_display_Bitmap(ob.get_bmpArray()[0]);
				this.buttonStateHolder = ob.get_bmpArray();
			} else {
				if(_itemName.indexOf(".png") != -1 || _itemName.indexOf(".jpg") != -1) {
					if(openfl_utils_Assets.exists(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName)) {
						this.bmpSource = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName));
					}
				} else {
					while(openfl_utils_Assets.exists(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i))) == true) {
						bmd = openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i)));
						this.buttonStateHolder.push(bmd);
						++i;
					}
					if(this.bmpSource == null) {
						this.bmpSource = new openfl_display_Bitmap(this.buttonStateHolder[0]);
					}
				}
				if(this.bmpSource != null) {
					this.set_rect(this.bmpSource.getRect(this));
				}
			}
		} else {
			if(_itemName.indexOf(".png") != -1 || _itemName.indexOf(".jpg") != -1) {
				this.bmpSource = new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName));
			} else {
				while(openfl_utils_Assets.exists(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i))) == true) {
					bmd = openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i)));
					this.buttonStateHolder.push(bmd);
					++i;
				}
				if(this.bmpSource == null) {
					this.bmpSource = new openfl_display_Bitmap(this.buttonStateHolder[0]);
				}
			}
			if(this.bmpSource != null) {
				this.set_rect(this.bmpSource.getRect(this));
			}
		}
		if(this.bmpSource == null) {
			throw haxe_Exception.thrown(new openfl_errors_Error("NO bitmap from source: " + _itemName));
		}
		this.bmpSource.smoothing = true;
		this.addChild(this.bmpSource);
		if(_positionName != null) {
			this.position.setItemScale(this.bmpSource,_positionName,this.get_rect());
			this.position.setItemXY(this,_positionName,this.get_rect());
		}
		if(_scaleName != null) {
			this.position.setItemScale(this.bmpSource,_scaleName,this.get_rect());
		}
		this.regPoint = this.position.getRegistrationPoint(_positionName);
		if(this.regPoint != "topleft" && this.regPoint != null) {
			this.pivotPointCenter(this.bmpSource);
		}
		if(this.buttonStateHolder.length > 0) {
			this.addMouseListeners();
		}
		this.mouseState = false;
	}
	,pivotPointCenter: function(_source) {
		var i = 0;
		var mat = _source.get_transform().get_matrix();
		mat.translate(_source.get_width() / 2 * -1,_source.get_height() / 2 * -1);
		_source.get_transform().set_matrix(mat);
		++i;
	}
	,addMouseListeners: function() {
		this.addEventListener("mouseDown",$bind(this,this.onMouseDown));
		this.addEventListener("mouseUp",$bind(this,this.onMouseUp));
		this.addEventListener("mouseOver",$bind(this,this.onMouseOver));
		this.addEventListener("mouseOut",$bind(this,this.onMouseOut));
		this.addEventListener("releaseOutside",$bind(this,this.onMouseOut));
	}
	,onMouseUp: function(e) {
		this.mouseState = false;
		if(this.bmpSource != null) {
			this.bmpSource.set_bitmapData(this.buttonStateHolder[0]);
			this.bmpSource.smoothing = true;
		}
	}
	,onMouseDown: function(e) {
		this.mouseState = true;
		if(this.bmpSource != null) {
			this.bmpSource.set_bitmapData(this.buttonStateHolder[1]);
			this.bmpSource.smoothing = true;
		}
	}
	,onMouseOver: function(e) {
		if(this.enableMouseOver) {
			this.onMouseDown(e);
		}
	}
	,onMouseOut: function(e) {
		if(this.enableMouseOver) {
			this.onMouseUp(e);
		}
	}
	,initButtonText: function(_positionID,_text,_langKey) {
		this.set_tf(new com_coffeebreak_core_CoffeeTextField());
		this.get_tf().init(_positionID);
		this.updateText(_text,_langKey);
		this.get_tf().set_autoSize(2);
		this.get_tf().set_selectable(false);
		this.addChild(this.get_tf());
		if(this.regPoint == "center") {
			this.get_tf().set_autoSize(0);
			this.get_tf().set_x(-this.get_tf().get_width() / 2);
			this.get_tf().set_y(-this.get_tf().get_height() / 2);
		}
	}
	,updateText: function(_value,_langKey) {
		this.get_tf().setText(_value,_langKey);
		com_coffeebreak_utils_TextFormatUtils.fitTextToTextField(this.get_tf());
	}
	,updateLabel: function(_value,_labelId) {
		if(_labelId == null) {
			_labelId = -1;
		}
		this.get_tf().set_text(_value);
		com_coffeebreak_utils_TextFormatUtils.fitTextToTextField(this.get_tf());
	}
	,alignTextWithSkin: function() {
		this.get_tf().set_autoSize(0);
		this.get_tf().set_x(this.bmpSource.get_x() + (this.bmpSource.get_width() / 2 - this.get_tf().get_width() / 2));
		this.get_tf().set_y(this.bmpSource.get_y() + (this.bmpSource.get_height() / 2 - this.get_tf().get_height() / 2));
	}
	,convertCounterToString: function(_counter) {
		if(_counter < 10) {
			return Std.string("00" + _counter + ".png");
		}
		if(_counter >= 10 && _counter < 100) {
			return Std.string("0" + _counter + ".png");
		}
		return "";
	}
	,get_tf: function() {
		return this.tf;
	}
	,set_tf: function(value) {
		return this.tf = value;
	}
	,__class__: com_coffeebreak_core_CoffeeButton
	,__properties__: $extend(com_coffeebreak_core_GameItem.prototype.__properties__,{set_tf:"set_tf",get_tf:"get_tf"})
});
var com_coffeebreak_components_MenuButton = function(itemName,_positionName,_scaleName) {
	this.numItems = 0;
	com_coffeebreak_core_CoffeeButton.call(this,itemName,_positionName,_scaleName);
	this.redBcg = com_coffeebreak_utils_SimplePrimitive.createRect(this.bmpSource.get_width() - 3,this.bmpSource.get_height() - 3,16711680);
	this.addChild(this.redBcg);
	this.alignCenter(this.redBcg);
	this.redBcg.set_visible(false);
	this.iconHolder = new openfl_display_Sprite();
	this.addChild(this.iconHolder);
	this.numTxt = com_coffeebreak_utils_TextUtils.createText("itemHandleTxt","");
	this.numTxt.set_autoSize(3);
	this.addChild(this.numTxt);
	this.bufferPt = new openfl_geom_Point();
	this.isInventory = false;
	this.isAutocraft = false;
	this.isClickable = false;
};
$hxClasses["com.coffeebreak.components.MenuButton"] = com_coffeebreak_components_MenuButton;
com_coffeebreak_components_MenuButton.__name__ = "com.coffeebreak.components.MenuButton";
com_coffeebreak_components_MenuButton.__super__ = com_coffeebreak_core_CoffeeButton;
com_coffeebreak_components_MenuButton.prototype = $extend(com_coffeebreak_core_CoffeeButton.prototype,{
	setItemActive: function() {
		if(this.bmpSource != null && !this.isInventory) {
			this.isClickable = true;
			this.bmpSource.set_bitmapData(this.buttonStateHolder[1]);
			this.bmpSource.smoothing = true;
		}
	}
	,setToDisabledState: function() {
		if(this.bmpSource != null) {
			this.bmpSource.set_bitmapData(this.buttonStateHolder[0]);
			this.bmpSource.smoothing = true;
		}
		this.isClickable = false;
	}
	,updateItem: function(_num,_shuldTurnOff) {
		if(_shuldTurnOff == null) {
			_shuldTurnOff = true;
		}
		if(_shuldTurnOff) {
			this.setToDisabledState();
		}
		this.numItems += _num;
		this.numTxt.set_text(Std.string(this.numItems));
	}
	,updateInfoTxt: function(_num) {
		if(_num == 0) {
			this.numTxt.set_text("");
		} else {
			this.numTxt.set_text(_num == null ? "null" : "" + _num);
		}
		this.numItems = _num;
	}
	,setTextInvisible: function() {
		this.numTxt.set_text("");
	}
	,setIcon: function() {
		if(this.cData != null) {
			this.addIcon(this.cData.get_image());
		}
	}
	,addIcon: function(_iconName,_iconPosition) {
		if(_iconPosition == null) {
			_iconPosition = "";
		}
		if(this.icon != null) {
			this.icon.parent.removeChild(this.icon);
		}
		this.icon = new com_coffeebreak_core_GameItem(_iconName,_iconPosition);
		this.iconHolder.addChild(this.icon);
		if(_iconName.indexOf("dragon") != -1) {
			this.addChild(new com_coffeebreak_core_GameItem("disintegrate.png",""));
		}
		if(this.cData != null) {
			if(this.cData.get_onComplete().indexOf("navigateToUrl") != -1) {
				this.addChild(new com_coffeebreak_core_GameItem("export.png",""));
			}
			if(this.cData.get_type() == "melter") {
				this.addChild(new com_coffeebreak_core_GameItem("disintegrate.png",""));
			}
			if(this.cData.get_type() == "trade") {
				this.addChild(new com_coffeebreak_core_GameItem("trade.png",""));
			}
		}
		this.alignCenter(this.icon);
	}
	,addTopText: function() {
		this.blackTxt = com_coffeebreak_utils_TextUtils.createText("bigBlackTxt","");
		this.blackTxt.set_multiline(true);
		this.blackTxt.set_wordWrap(true);
		this.blackTxt.set_autoSize(0);
		this.addChild(this.blackTxt);
	}
	,showRed: function(_visible) {
		this.redBcg.set_visible(_visible);
	}
	,alignCenter: function(_item) {
		_item.set_x(this.bmpSource.get_width() / 2 - _item.get_width() / 2);
		_item.set_y(this.bmpSource.get_height() / 2 - _item.get_height() / 2);
	}
	,onMouseDown: function(e) {
	}
	,onMouseUp: function(e) {
	}
	,__class__: com_coffeebreak_components_MenuButton
});
var com_coffeebreak_components_PanelButton = function(itemName,_positionName,_scaleName) {
	com_coffeebreak_core_CoffeeButton.call(this,itemName,_positionName,_scaleName);
};
$hxClasses["com.coffeebreak.components.PanelButton"] = com_coffeebreak_components_PanelButton;
com_coffeebreak_components_PanelButton.__name__ = "com.coffeebreak.components.PanelButton";
com_coffeebreak_components_PanelButton.__super__ = com_coffeebreak_core_CoffeeButton;
com_coffeebreak_components_PanelButton.prototype = $extend(com_coffeebreak_core_CoffeeButton.prototype,{
	updateText: function(_value,_langKey) {
		this.get_tf().setText(_value,_langKey);
		this.alignTextWithSkin();
		if(this.bmpSource.get_width() < this.get_tf().get_width()) {
			this.bmpSource.set_width(this.get_tf().get_width() + 10);
			this.bmpSource.set_x(this.get_tf().get_x() - 5);
		}
	}
	,setButtonColor: function(_color) {
		if(_color == null) {
			_color = 16711680;
		}
		var ct = new openfl_geom_ColorTransform();
		ct.set_color(_color);
		this.bmpSource.get_transform().set_colorTransform(ct);
	}
	,updateLabel: function(_value,_labelId) {
		if(_labelId == null) {
			_labelId = -1;
		}
		this.get_tf().set_text(_value);
	}
	,alignTextWithSkin: function() {
		com_coffeebreak_core_CoffeeButton.prototype.alignTextWithSkin.call(this);
	}
	,__class__: com_coffeebreak_components_PanelButton
});
var com_coffeebreak_components_SwitchButton = function(itemName,_positionName,_scaleName) {
	this.overTextColor = 16711680;
	this.baseTextColor = 16777215;
	com_coffeebreak_components_MenuButton.call(this,itemName,_positionName,_scaleName);
	this.enableMouseOver = true;
};
$hxClasses["com.coffeebreak.components.SwitchButton"] = com_coffeebreak_components_SwitchButton;
com_coffeebreak_components_SwitchButton.__name__ = "com.coffeebreak.components.SwitchButton";
com_coffeebreak_components_SwitchButton.__super__ = com_coffeebreak_components_MenuButton;
com_coffeebreak_components_SwitchButton.prototype = $extend(com_coffeebreak_components_MenuButton.prototype,{
	switchState: function() {
		if(this.mouseState) {
			this.mouseState = false;
			if(this.bmpSource != null) {
				this.bmpSource.set_bitmapData(this.buttonStateHolder[0]);
				this.bmpSource.smoothing = true;
			}
		} else {
			this.onMouseDown();
		}
	}
	,onMouseUp: function(e) {
		if(!this.get_autoSwitch()) {
			return;
		}
	}
	,onMouseDown: function(e) {
		if(!this.get_autoSwitch() && e != null) {
			return;
		}
		this.mouseState = true;
		if(this.bmpSource != null) {
			this.bmpSource.set_bitmapData(this.buttonStateHolder[1]);
			this.bmpSource.smoothing = true;
		}
	}
	,onMouseOver: function(e) {
		if(this.get_tf() != null) {
			this.get_tf().set_textColor(this.overTextColor);
		}
	}
	,onMouseOut: function(e) {
		if(this.get_tf() != null) {
			this.get_tf().set_textColor(this.baseTextColor);
		}
	}
	,get_autoSwitch: function() {
		return this.autoSwitch;
	}
	,set_autoSwitch: function(value) {
		return this.autoSwitch = value;
	}
	,__class__: com_coffeebreak_components_SwitchButton
	,__properties__: $extend(com_coffeebreak_components_MenuButton.prototype.__properties__,{set_autoSwitch:"set_autoSwitch",get_autoSwitch:"get_autoSwitch"})
});
var com_coffeebreak_controls_BaseAlertScreen = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_screenName("AlertScreen");
	this.alertSignal = new msignal_Signal1();
	this.shadow = new openfl_display_Sprite();
	this.shadow.get_graphics().beginFill(0,1);
	this.shadow.get_graphics().drawRect(0,0,com_coffeebreak_CoffeeConstants.BASE_WIDTH,com_coffeebreak_CoffeeConstants.BASE_HEIGHT);
	this.shadow.get_graphics().endFill();
	this.addChild(this.shadow);
	this.shadow.set_visible(false);
};
$hxClasses["com.coffeebreak.controls.BaseAlertScreen"] = com_coffeebreak_controls_BaseAlertScreen;
com_coffeebreak_controls_BaseAlertScreen.__name__ = "com.coffeebreak.controls.BaseAlertScreen";
com_coffeebreak_controls_BaseAlertScreen.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_controls_BaseAlertScreen.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		this.get_sceneCreator().createSceneFromItems([this.get_screenName(),["panelSkin.png","panel_box",com_coffeebreak_data_ItemTypes.GameItem],["greenBttSkin_","yesBtt",com_coffeebreak_data_ItemTypes.Button],["greenBttSkin_","noBtt",com_coffeebreak_data_ItemTypes.Button],["greenBttSkin_","okBtt",com_coffeebreak_data_ItemTypes.Button],["closeBtt.png","closeBtt",com_coffeebreak_data_ItemTypes.Button]]);
		this.addChild(this.get_sceneCreator().getScene(this.get_screenName()));
		this.panel = js_Boot.__cast(this.get_sceneCreator().getElementByID(this.get_screenName(),"panel_box") , com_coffeebreak_core_GameItem);
		this.createAlertText("panelTopLabel","panelMsgTf",this.panel);
		this.panel.set_scaleX(this.panel.set_scaleY(0.1));
		this.panel.set_visible(false);
		this.buttonsArray = [];
		var buttons = ["yesBtt","noBtt","okBtt","closeBtt"];
		var bNames = ["YES","NO","OK",""];
		var _g = 0;
		var _g1 = buttons.length;
		while(_g < _g1) {
			var i = _g++;
			var btt = js_Boot.__cast(this.panel.getChildByName(buttons[i]) , com_coffeebreak_core_CoffeeButton);
			if(bNames[i] != "") {
				btt.initButtonText("bttTf",bNames[i]);
			}
			this.addButton(btt);
			if(buttons[i] != "closeBtt") {
				this.buttonsArray.push(btt);
			}
		}
		this.switchableButtons = true;
	}
	,createAlertText: function(_topLabel,_msgLabel,_holder) {
		this.bigLabel = com_coffeebreak_utils_TextUtils.createText(_topLabel,"hallo");
		_holder.addChild(this.bigLabel);
		this.msgTf = com_coffeebreak_utils_TextUtils.createText(_msgLabel,"hallo msg");
		this.msgTf.set_autoSize(1);
		this.msgTf.set_multiline(true);
		this.msgTf.set_wordWrap(true);
		_holder.addChild(this.msgTf);
	}
	,onClick: function(evt) {
		com_coffeebreak_core_BaseScreen.prototype.onClick.call(this,evt);
	}
	,get_alertSignal: function() {
		return this.alertSignal;
	}
	,__class__: com_coffeebreak_controls_BaseAlertScreen
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{get_alertSignal:"get_alertSignal"})
});
var com_coffeebreak_components_TutorPanel = function() {
	com_coffeebreak_controls_BaseAlertScreen.call(this);
	this.alertSignal = new msignal_Signal1();
	this.holder = new openfl_display_Sprite();
	this.addChild(this.holder);
	this.panel = new com_coffeebreak_core_GameItem("tutorPanel.png","tutorPanel_box");
	this.panel.set_x(0);
	this.panel.set_y(0);
	this.holder.addChild(this.panel);
	this.panelHalfVal = this.panel.get_height() / 2;
	this.arrow = new com_coffeebreak_core_GameItem("callOut.png");
	this.arrow.set_y(this.holder.get_height() / 2 - this.arrow.get_height() / 2);
	this.addChild(this.arrow);
	this.mainTxt = com_coffeebreak_utils_TextUtils.createText("tutorTxt",null,"pauseL");
	this.mainTxt.set_multiline(true);
	this.mainTxt.set_wordWrap(true);
	this.mainTxt.set_autoSize(0);
	this.mainTxt.set_embedFonts(true);
	this.holder.addChild(this.mainTxt);
	this.btt = new com_coffeebreak_core_CoffeeButton("panelBtt_","tutorBtt");
	this.btt.initButtonText("panelBttTxt",null,"next");
	this.btt.set_ID(1);
	this.addButton(this.btt);
	this.holder.addChild(this.btt);
	this.btt.set_visible(false);
};
$hxClasses["com.coffeebreak.components.TutorPanel"] = com_coffeebreak_components_TutorPanel;
com_coffeebreak_components_TutorPanel.__name__ = "com.coffeebreak.components.TutorPanel";
com_coffeebreak_components_TutorPanel.__super__ = com_coffeebreak_controls_BaseAlertScreen;
com_coffeebreak_components_TutorPanel.prototype = $extend(com_coffeebreak_controls_BaseAlertScreen.prototype,{
	setPanel: function(_x,_y,_dir) {
		if(_dir == 1) {
			this.holder.set_x(_x + this.arrow.get_width());
		} else {
			this.holder.set_x(_x - this.arrow.get_width());
		}
		this.holder.set_y(_y);
	}
	,setArrow: function(_val) {
		if(_val == 1) {
			if(this.arrow.get_scaleX() == -1) {
				var mat = new openfl_geom_Matrix();
				this.arrow.get_transform().set_matrix(mat);
			}
			this.arrow.set_x(this.holder.get_x() - (this.arrow.get_width() - 5));
		} else if(_val == 2) {
			var mat = new openfl_geom_Matrix();
			mat.scale(-1,1);
			mat.translate(300,0);
			this.arrow.get_transform().set_matrix(mat);
			this.arrow.set_x(this.holder.get_x() + this.panel.get_width() + (this.arrow.get_width() - 5));
		} else {
			this.arrow.set_visible(false);
		}
		this.arrow.set_y(this.holder.get_y() + this.panelHalfVal - this.arrow.get_height() / 2);
	}
	,updateText: function(_val) {
		this.mainTxt.set_text(_val);
		this.mainTxt.set_y(this.holder.get_height() / 2 - this.mainTxt.get_height() / 2);
	}
	,updateButton: function(_text,_ID) {
		this.btt.set_ID(_ID);
		this.btt.get_tf().set_text(_text);
	}
	,geButton: function() {
		return this.btt;
	}
	,onClick: function(e) {
		com_coffeebreak_controls_BaseAlertScreen.prototype.onClick.call(this,e);
		this.get_alertSignal().dispatch((js_Boot.__cast(this.get_targetItem() , com_coffeebreak_core_CoffeeButton)).get_ID());
	}
	,__class__: com_coffeebreak_components_TutorPanel
});
var com_coffeebreak_components_particles_Emitter = function(length) {
	if(length == null) {
		length = 50;
	}
	this.gravity = 1.2;
	this.currentLength = 0;
	this.length = 50;
	this.isActive = false;
	this.startFadeAt = 3;
	this.particlesLifespan = 10;
	this.startingVelocity = 7;
	this.particlesAlpha = 1;
	this.colors = [0];
	this.length = length;
	this.particles = [];
	this.setUpParticles();
};
$hxClasses["com.coffeebreak.components.particles.Emitter"] = com_coffeebreak_components_particles_Emitter;
com_coffeebreak_components_particles_Emitter.__name__ = "com.coffeebreak.components.particles.Emitter";
com_coffeebreak_components_particles_Emitter.prototype = {
	emit: function(x,y) {
		this.currentLength = this.length;
		this.isActive = true;
		var particle;
		var angle;
		var velocity;
		if(this.particles.length != this.currentLength) {
			this.setUpParticles();
		}
		var _g = 0;
		var _g1 = this.currentLength;
		while(_g < _g1) {
			var i = _g++;
			particle = this.particles[i];
			particle.x = x;
			particle.y = y;
			angle = Math.random() * 2 * Math.PI;
			velocity = Math.random() * this.startingVelocity;
			particle.velocityX = Math.sin(angle) * velocity;
			particle.velocityY = Math.cos(angle) * velocity;
			particle.color = this.colors[Math.random() * this.colors.length | 0];
		}
		this.particlesAlpha = 1;
		this._particlesLifespan = this.particlesLifespan;
		this.particlesAge = 0;
		this._startFadeAt = this.startFadeAt;
	}
	,tick: function() {
		var particle;
		var _g = 0;
		var _g1 = this.currentLength;
		while(_g < _g1) {
			var i = _g++;
			particle = this.particles[i];
			particle.x += particle.velocityX;
			particle.y += particle.velocityY + this.gravity * this.particlesAge;
		}
		this._particlesLifespan--;
		if(this._particlesLifespan < this._startFadeAt) {
			this.particlesAlpha = this._particlesLifespan / this._startFadeAt;
		}
		this.particlesAge++;
		if(this._particlesLifespan < 0) {
			this.isActive = false;
		}
	}
	,setUpParticles: function() {
		var _g = 0;
		var _g1 = this.particles.length;
		while(_g < _g1) {
			var i = _g++;
			this.particles.shift();
		}
		var particle;
		var _g = 0;
		var _g1 = this.currentLength;
		while(_g < _g1) {
			var i = _g++;
			particle = new com_coffeebreak_components_particles_Particle();
			this.particles.push(particle);
		}
	}
	,updateParticleLenght: function(_val) {
		this.length = _val;
		this.setUpParticles();
	}
	,__class__: com_coffeebreak_components_particles_Emitter
};
var com_coffeebreak_components_particles_Particle = function() {
	this.size = 3;
	this.color = 0;
};
$hxClasses["com.coffeebreak.components.particles.Particle"] = com_coffeebreak_components_particles_Particle;
com_coffeebreak_components_particles_Particle.__name__ = "com.coffeebreak.components.particles.Particle";
com_coffeebreak_components_particles_Particle.prototype = {
	__class__: com_coffeebreak_components_particles_Particle
};
var com_coffeebreak_components_particles_ParticleEffect = function() {
	this.FPS = 3;
	this.achievementEmitters = [];
	this.grindEmitters = [];
	this.isPaused = false;
	openfl_display_Sprite.call(this);
	this.isPaused = true;
	this.particleColors = new haxe_ds_StringMap();
	this.fpsCounter = 0;
	this.set_particlesPerGrindEmitter(50);
	this.set_particlesPerAchievementEmitter(this.get_particlesPerGrindEmitter() * 2);
	this.addEventListener("enterFrame",$bind(this,this.onEnterFrame));
};
$hxClasses["com.coffeebreak.components.particles.ParticleEffect"] = com_coffeebreak_components_particles_ParticleEffect;
com_coffeebreak_components_particles_ParticleEffect.__name__ = "com.coffeebreak.components.particles.ParticleEffect";
com_coffeebreak_components_particles_ParticleEffect.__super__ = openfl_display_Sprite;
com_coffeebreak_components_particles_ParticleEffect.prototype = $extend(openfl_display_Sprite.prototype,{
	setupGrindParticleEffect: function(grind) {
		var bitmapData = openfl_utils_Assets.getBitmapData("img/" + grind.bttIconName);
		var _color;
		var colorArray = [];
		var _g = 0;
		var _g1 = bitmapData.width;
		while(_g < _g1) {
			var i = _g++;
			var _g2 = 0;
			var _g3 = bitmapData.height;
			while(_g2 < _g3) {
				var j = _g2++;
				_color = bitmapData.getPixel(i,j);
				colorArray.push(_color);
			}
		}
		var this1 = this.particleColors;
		var key = grind.get_name();
		this1.h[key] = colorArray;
		var grindEmitter = this.getAvailableGrindEmitter();
		grindEmitter.colors = colorArray;
	}
	,emitGrindParticles: function(_x,_y) {
		var grindEmitter = this.getAvailableGrindEmitter();
		grindEmitter.emit(_x,_y);
		this.isPaused = false;
	}
	,emitAchievementParticles: function(_x,_y) {
		var achievementEmitter = this.getAvailableAchievementEmitter();
		achievementEmitter.emit(_x,_y);
		this.isPaused = false;
	}
	,emitMessageParticles: function(_x,_y) {
		var achievementEmitter = this.getAvailableAchievementEmitter();
		achievementEmitter.colors = [8388863,5112063];
		achievementEmitter.emit(_x,_y);
		achievementEmitter.colors = [16766720,16766720,16766720,16766720,16776960,16776960,16777088];
		this.isPaused = false;
	}
	,detonateExplosion: function(_x,_y) {
		var achievementEmitter = this.getAvailableAchievementEmitter();
		achievementEmitter.colors = [16711680,16744448,16744448,16776960];
		achievementEmitter.emit(_x,_y);
		achievementEmitter.colors = [16766720,16766720,16766720,16766720,16776960,16776960,16777088];
	}
	,getAvailableGrindEmitter: function() {
		var grindEmitter = null;
		var _g = 0;
		var _g1 = this.grindEmitters.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.grindEmitters[i].isActive == false) {
				grindEmitter = this.grindEmitters[i];
			}
		}
		if(grindEmitter == null) {
			grindEmitter = new com_coffeebreak_components_particles_Emitter(this.get_particlesPerGrindEmitter());
			grindEmitter.gravity = .6;
			grindEmitter.startingVelocity = 5;
			this.grindEmitters.push(grindEmitter);
		}
		return grindEmitter;
	}
	,getAvailableAchievementEmitter: function() {
		var achievementEmitter = null;
		var _g = 0;
		var _g1 = this.achievementEmitters.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.achievementEmitters[i].isActive == false) {
				achievementEmitter = this.achievementEmitters[i];
			}
		}
		if(achievementEmitter == null) {
			achievementEmitter = new com_coffeebreak_components_particles_Emitter(this.get_particlesPerAchievementEmitter());
			achievementEmitter.colors = [16766720,16766720,16766720,16766720,16776960,16776960,16777088];
			achievementEmitter.gravity = .06;
			achievementEmitter.startingVelocity = 4;
			achievementEmitter.particlesLifespan = 80;
			achievementEmitter.startFadeAt = 40;
			this.achievementEmitters.push(achievementEmitter);
		}
		return achievementEmitter;
	}
	,onEnterFrame: function(e) {
		if(this.isPaused) {
			return;
		}
		if(this.fpsCounter == this.FPS) {
			var emitter;
			var particle;
			var g = this.get_graphics();
			g.clear();
			var _g = 0;
			var _g1 = this.grindEmitters.length;
			while(_g < _g1) {
				var i = _g++;
				emitter = this.grindEmitters[i];
				if(emitter.isActive) {
					emitter.tick();
					var _g2 = 0;
					var _g3 = emitter.particles.length;
					while(_g2 < _g3) {
						var j = _g2++;
						particle = emitter.particles[j];
						g.beginFill(particle.color,emitter.particlesAlpha);
						g.drawRect(particle.x,particle.y,particle.size,particle.size);
					}
				}
			}
			var _g = 0;
			var _g1 = this.achievementEmitters.length;
			while(_g < _g1) {
				var i = _g++;
				emitter = this.achievementEmitters[i];
				if(emitter.isActive) {
					emitter.tick();
					var _g2 = 0;
					var _g3 = emitter.particles.length;
					while(_g2 < _g3) {
						var j = _g2++;
						particle = emitter.particles[j];
						g.beginFill(particle.color,emitter.particlesAlpha);
						g.drawRect(particle.x,particle.y,particle.size,particle.size);
					}
				}
			}
			g.endFill();
			this.fpsCounter = 0;
		}
		this.fpsCounter++;
	}
	,get_particlesPerGrindEmitter: function() {
		return this.particlesPerGrindEmitter;
	}
	,set_particlesPerGrindEmitter: function(value) {
		var _g = 0;
		var _g1 = this.grindEmitters.length;
		while(_g < _g1) {
			var i = _g++;
			this.grindEmitters[i].length = value;
			this.grindEmitters[i].updateParticleLenght(value);
		}
		return this.particlesPerGrindEmitter = value;
	}
	,get_particlesPerAchievementEmitter: function() {
		return this.particlesPerAchievementEmitter;
	}
	,set_particlesPerAchievementEmitter: function(value) {
		var _g = 0;
		var _g1 = this.achievementEmitters.length;
		while(_g < _g1) {
			var i = _g++;
			this.achievementEmitters[i].length = value;
			this.achievementEmitters[i].updateParticleLenght(value);
		}
		return this.particlesPerAchievementEmitter = value;
	}
	,__class__: com_coffeebreak_components_particles_ParticleEffect
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_particlesPerAchievementEmitter:"set_particlesPerAchievementEmitter",get_particlesPerAchievementEmitter:"get_particlesPerAchievementEmitter",set_particlesPerGrindEmitter:"set_particlesPerGrindEmitter",get_particlesPerGrindEmitter:"get_particlesPerGrindEmitter"})
});
var com_coffeebreak_core_CacheManager = function() {
	this.fontDictionary = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.core.CacheManager"] = com_coffeebreak_core_CacheManager;
com_coffeebreak_core_CacheManager.__name__ = "com.coffeebreak.core.CacheManager";
com_coffeebreak_core_CacheManager.prototype = {
	setFontSize: function(_key,_value) {
		this.fontDictionary.h[_key] = _value;
	}
	,getFontSize: function(_key) {
		if(this.fontDictionary.h[_key] != null) {
			return this.fontDictionary.h[_key];
		}
		return -1;
	}
	,__class__: com_coffeebreak_core_CacheManager
};
var com_coffeebreak_core_CoffeeItemFactory = function() { };
$hxClasses["com.coffeebreak.core.CoffeeItemFactory"] = com_coffeebreak_core_CoffeeItemFactory;
com_coffeebreak_core_CoffeeItemFactory.__name__ = "com.coffeebreak.core.CoffeeItemFactory";
com_coffeebreak_core_CoffeeItemFactory.createGameItem = function(_img,_position) {
	if(com_coffeebreak_core_CoffeeItemFactory.VERBOSE) {
		haxe_Log.trace("ITEM NAME: " + _img,{ fileName : "com/coffeebreak/core/CoffeeItemFactory.hx", lineNumber : 22, className : "com.coffeebreak.core.CoffeeItemFactory", methodName : "createGameItem"});
	}
	return new com_coffeebreak_core_GameItem(_img,_position);
};
com_coffeebreak_core_CoffeeItemFactory.createMovieClipItem = function(_img,_position) {
	return new com_coffeebreak_core_CoffeeMovieClip(_img,_position);
};
com_coffeebreak_core_CoffeeItemFactory.createButtonItem = function(_img,_position) {
	return new com_coffeebreak_core_CoffeeButton(_img,_position);
};
com_coffeebreak_core_CoffeeItemFactory.createCoffeeText = function(_position) {
	var tf = new com_coffeebreak_core_CoffeeTextField();
	tf.init(_position);
	return tf;
};
com_coffeebreak_core_CoffeeItemFactory.createCustomItem = function(itemData) {
	var name = itemData.get_itemType();
	var item = Type.createInstance($hxClasses[name],[itemData.get_graphicName(),itemData.get_positionName()]);
	return item;
};
var com_coffeebreak_core_IAnimatable = function() { };
$hxClasses["com.coffeebreak.core.IAnimatable"] = com_coffeebreak_core_IAnimatable;
com_coffeebreak_core_IAnimatable.__name__ = "com.coffeebreak.core.IAnimatable";
com_coffeebreak_core_IAnimatable.__isInterface__ = true;
var com_coffeebreak_core_CoffeeMovieClip = function(itemName,_positionName,_scaleName,_proportion) {
	if(_proportion == null) {
		_proportion = false;
	}
	this.rangeFPS = 1;
	this.fps = 60;
	this.animationID = itemName;
	this.animationSignal = new msignal_Signal1();
	this.animationDoneSignal = new msignal_Signal1();
	this.set_frames([]);
	if(com_coffeebreak_CoffeeConstants.ANIMATION_TYPE == com_coffeebreak_data_AnimationTypes.TIMER) {
		this.timer = new openfl_utils_Timer(1000 / this.get_fps());
		this.timer.addEventListener("timer",$bind(this,this.onEnterFrame));
	}
	this.customFPS = 1;
	this.customFrameCounter = 0;
	this.set_playOnce(false);
	this.set_isReverse(false);
	this.isRangePlay = false;
	this.set_manualRemoveFromRenderer(false);
	com_coffeebreak_core_GameItem.call(this,itemName,_positionName,_scaleName);
};
$hxClasses["com.coffeebreak.core.CoffeeMovieClip"] = com_coffeebreak_core_CoffeeMovieClip;
com_coffeebreak_core_CoffeeMovieClip.__name__ = "com.coffeebreak.core.CoffeeMovieClip";
com_coffeebreak_core_CoffeeMovieClip.__interfaces__ = [com_coffeebreak_core_IAnimatable];
com_coffeebreak_core_CoffeeMovieClip.__super__ = com_coffeebreak_core_GameItem;
com_coffeebreak_core_CoffeeMovieClip.prototype = $extend(com_coffeebreak_core_GameItem.prototype,{
	init: function(_itemName,_positionName,_scaleName) {
		this.bmpSource = new openfl_display_Bitmap();
		this.bmpSource.smoothing = true;
		this.addChild(this.bmpSource);
		var bmd = null;
		var i = 1;
		if(com_coffeebreak_CoffeeConstants.USE_IMG_FROM_TEXTURE) {
			var ob = com_coffeebreak_CoffeeConstants.LOADER_MANAGER.getSequenceImage(_itemName);
			if(ob.get_bmpArray().length > 0) {
				this.set_frames(ob.get_bmpArray());
				this.set_rect(ob.get_rect());
				this.setFirstFrame();
				this.set_nextFrame(0);
			} else {
				while(openfl_utils_Assets.exists(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i))) == true) {
					bmd = openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName + this.convertCounterToString(i));
					this.get_frames().push(bmd);
					++i;
				}
				if(this.get_frames().length == 0) {
					var ob = com_coffeebreak_CoffeeConstants.LOADER_MANAGER.getImage(_itemName);
					if(ob != null) {
						bmd = ob.get_bmp().get_bitmapData();
						this.get_frames().push(bmd);
					}
				}
				if(this.bmpSource != null) {
					this.setFirstFrame();
					this.set_nextFrame(0);
					this.set_rect(this.bmpSource.getRect(this));
				}
			}
		} else {
			while(openfl_utils_Assets.exists(com_coffeebreak_CoffeeConstants.IMG_PATH + (_itemName + this.convertCounterToString(i))) == true) {
				bmd = openfl_utils_Assets.getBitmapData(com_coffeebreak_CoffeeConstants.IMG_PATH + _itemName + this.convertCounterToString(i));
				this.get_frames().push(bmd);
				++i;
			}
			this.setFirstFrame();
			this.set_nextFrame(0);
			if(bmd != null) {
				this.set_rect(bmd.rect);
			}
		}
		if(_positionName != null) {
			this.position.setItemScale(this.bmpSource,_positionName,this.get_rect());
			this.position.setItemXY(this,_positionName,this.get_rect());
		}
		if(_scaleName != null) {
			this.position.setItemScale(this.bmpSource,_scaleName,this.get_rect());
		}
		var regPoint = this.position.getRegistrationPoint(_positionName);
		if(regPoint == null) {
			regPoint = this.position.getRegistrationPoint(_scaleName);
		}
		if(regPoint != "topleft") {
			this.pivotPointCenter(this.bmpSource);
		}
		this.totalFrames = this.get_frames().length - 1;
		this.set_originWidth(this.get_width());
		this.set_originHeight(this.get_height());
	}
	,onEnterFrame: function(e) {
		if(this.isRangePlay) {
			if(this.customFrameCounter != this.rangeFPS) {
				this.customFrameCounter++;
				return;
			} else {
				this.customFrameCounter = 0;
			}
			this.set_nextFrame(this.get_nextFrame() + 1);
			if(this.get_nextFrame() < this.rangeArray.length) {
				this.bmpSource.set_bitmapData(this.get_frames()[this.rangeArray[this.get_nextFrame() - 1]]);
				this.bmpSource.smoothing = true;
				this.set_currentFrame(this.get_nextFrame());
			} else {
				if(this.rangeRepeateTime != -1) {
					this.rangeRepeatCounter++;
				}
				this.set_nextFrame(0);
				this.customFrameCounter = this.rangeFPS;
				if(this.rangeRepeatCounter == this.rangeRepeateTime) {
					this.stop();
					this.isRangePlay = false;
					this.onMovieCompleted();
				}
			}
			return;
		}
		if(this.customFPS != 1) {
			if(this.customFrameCounter != this.customFPS) {
				this.customFrameCounter++;
				return;
			} else {
				this.customFrameCounter = 0;
			}
		}
		if(this.get_isReverse() == false) {
			this.set_nextFrame(this.get_nextFrame() + 1);
			if(this.get_nextFrame() < this.get_frames().length) {
				this.bmpSource.set_bitmapData(this.get_frames()[this.get_nextFrame()]);
				this.bmpSource.smoothing = true;
				this.set_currentFrame(this.get_nextFrame());
			} else {
				this.set_nextFrame(-1);
				this.onMovieCompleted();
				if(this.get_playOnce() == true) {
					this.stop();
				}
			}
		} else {
			this.set_nextFrame(this.get_nextFrame() - 1);
			if(this.get_nextFrame() > -1) {
				this.bmpSource.set_bitmapData(this.get_frames()[this.get_nextFrame()]);
				this.bmpSource.smoothing = true;
				this.set_currentFrame(this.get_nextFrame());
			} else {
				this.onMovieCompleted();
				if(this.get_playOnce() == true) {
					this.stop();
				}
			}
		}
	}
	,onMovieCompleted: function() {
		this.get_animationSignal().dispatch(com_coffeebreak_core_CoffeeMovieClip.ANIMATION_DONE);
		this.get_animationDoneSignal().dispatch(this);
	}
	,stop: function() {
		this.set_isAnimatable(false);
		if(com_coffeebreak_CoffeeConstants.ANIMATION_TYPE == com_coffeebreak_data_AnimationTypes.TIMER) {
			this.timer.stop();
		}
	}
	,setFirstFrame: function() {
		this.bmpSource.set_bitmapData(this.get_frames()[0]);
		this.bmpSource.smoothing = true;
		this.set_currentFrame(1);
	}
	,convertCounterToString: function(_counter) {
		if(_counter < 10) {
			return Std.string("00" + _counter + ".png");
		}
		if(_counter >= 10 && _counter < 100) {
			return Std.string("0" + _counter + ".png");
		}
		if(_counter >= 100) {
			return Std.string("0" + _counter + ".png");
		}
		return "";
	}
	,get_frames: function() {
		return this.frames;
	}
	,set_frames: function(value) {
		return this.frames = value;
	}
	,set_currentFrame: function(value) {
		return this.currentFrame = value;
	}
	,get_nextFrame: function() {
		return this.nextFrame;
	}
	,set_nextFrame: function(value) {
		return this.nextFrame = value;
	}
	,get_fps: function() {
		return this.fps;
	}
	,get_animationSignal: function() {
		return this.animationSignal;
	}
	,get_animationDoneSignal: function() {
		return this.animationDoneSignal;
	}
	,set_isAnimatable: function(value) {
		return this.isAnimatable = value;
	}
	,get_playOnce: function() {
		return this.playOnce;
	}
	,set_playOnce: function(value) {
		return this.playOnce = value;
	}
	,get_isReverse: function() {
		return this.isReverse;
	}
	,set_isReverse: function(value) {
		return this.isReverse = value;
	}
	,set_manualRemoveFromRenderer: function(value) {
		return this.manualRemoveFromRenderer = value;
	}
	,__class__: com_coffeebreak_core_CoffeeMovieClip
	,__properties__: $extend(com_coffeebreak_core_GameItem.prototype.__properties__,{set_manualRemoveFromRenderer:"set_manualRemoveFromRenderer",set_isReverse:"set_isReverse",get_isReverse:"get_isReverse",set_playOnce:"set_playOnce",get_playOnce:"get_playOnce",set_isAnimatable:"set_isAnimatable",get_fps:"get_fps",set_currentFrame:"set_currentFrame",set_nextFrame:"set_nextFrame",get_nextFrame:"get_nextFrame",set_frames:"set_frames",get_frames:"get_frames",get_animationDoneSignal:"get_animationDoneSignal",get_animationSignal:"get_animationSignal"})
});
var openfl_text_TextField = function() {
	this.__forceCachedBitmapUpdate = false;
	this.__renderedOnCanvasWhileOnDOM = false;
	this.__mouseScrollVCounter = 0;
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 7;
	this.__caretIndex = -1;
	this.__displayAsPassword = false;
	this.__graphics = new openfl_display_Graphics(this);
	this.__textEngine = new openfl_text__$internal_TextEngine(this);
	this.__layoutDirty = true;
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__mouseWheelEnabled = true;
	this.__text = "";
	this.doubleClickEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
	this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
	this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
	this.addEventListener("keyDown",$bind(this,this.this_onKeyDown));
	this.addEventListener("mouseWheel",$bind(this,this.this_onMouseWheel));
	this.addEventListener("doubleClick",$bind(this,this.this_onDoubleClick));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = "openfl.text.TextField";
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return null;
		}
		var rect = new openfl_geom_Rectangle();
		if(this.__getCharBoundaries(charIndex,rect)) {
			return rect;
		} else {
			return null;
		}
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.startIndex <= charIndex && group1.endIndex >= charIndex) {
				return group1.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group1.startIndex;
				}
			} else if(group1.lineIndex == lineIndex + 1) {
				endIndex = group1.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents.get(lineIndex);
		var descender = this.__textEngine.lineDescents.get(lineIndex);
		var leading = this.__textEngine.lineLeadings.get(lineIndex);
		var lineHeight = this.__textEngine.lineHeights.get(lineIndex);
		var lineWidth = this.__textEngine.lineWidths.get(lineIndex);
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.lineIndex == lineIndex) {
				return group1.startIndex;
			}
		}
		return 0;
	}
	,replaceSelectedText: function(value) {
		this.__replaceSelectedText(value,false);
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		this.__replaceText(beginIndex,endIndex,newText,false);
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
		this.__updateScrollV();
		this.__updateScrollH();
		if(this.stage != null && this.stage.get_focus() == this) {
			this.__stopCursorTimer();
			this.__startCursorTimer();
		}
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = -1;
		}
		if(beginIndex == null) {
			beginIndex = -1;
		}
		var max = this.get_text().length;
		var range;
		if(beginIndex == -1) {
			if(endIndex == -1) {
				endIndex = max;
			}
			beginIndex = 0;
		} else if(endIndex == -1) {
			endIndex = beginIndex + 1;
		}
		if(beginIndex == endIndex) {
			return;
		}
		if(beginIndex < 0 || endIndex <= 0 || endIndex < beginIndex || beginIndex >= max || endIndex > max) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError());
		}
		if(beginIndex == 0 && endIndex == max) {
			this.__textEngine.textFormatRanges.set_length(1);
			range = this.__textEngine.textFormatRanges.get(0);
			range.start = 0;
			range.end = max;
			range.format.__merge(format);
		} else {
			var index = 0;
			var newRange;
			while(index < this.__textEngine.textFormatRanges.get_length()) {
				range = this.__textEngine.textFormatRanges.get(index);
				if(range.end <= beginIndex) {
					++index;
				} else if(range.start >= endIndex) {
					break;
				} else if(range.start <= beginIndex && range.end >= endIndex) {
					if(range.start == beginIndex && range.end == endIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						break;
					} else if(range.start == beginIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index,newRange);
						range.start = endIndex;
						index += 2;
					} else if(range.end == endIndex) {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						range.end = beginIndex;
						break;
					} else {
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
						newRange.format.__merge(format);
						this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
						newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),endIndex,range.end);
						this.__textEngine.textFormatRanges.insertAt(index + 2,newRange);
						range.end = beginIndex;
						break;
					}
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					if(range.start == beginIndex) {
						range.format = range.format.clone();
						range.format.__merge(format);
						range.end = endIndex;
					} else {
						this.__textEngine.textFormatRanges.removeAt(index);
					}
				} else if(range.start > beginIndex && range.end > beginIndex) {
					range.start = endIndex;
					break;
				} else if(range.start < beginIndex && range.end <= endIndex) {
					newRange = new openfl_text__$internal_TextFormatRange(range.format.clone(),beginIndex,endIndex);
					newRange.format.__merge(format);
					this.__textEngine.textFormatRanges.insertAt(index + 1,newRange);
					range.end = beginIndex;
					index += 2;
				} else {
					++index;
					lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 1562, className : "openfl.text.TextField", methodName : "setTextFormat"});
				}
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__allowMouseFocus: function() {
		if(!(this.__textEngine.type == 1 || this.get_tabEnabled())) {
			return this.get_selectable();
		} else {
			return true;
		}
	}
	,__caretBeginningOfLine: function() {
		this.__caretIndex = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
	}
	,__caretBeginningOfNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1);
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretBeginningOfPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			var index = this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex));
			if(this.__caretIndex == index) {
				this.__caretIndex = this.getLineOffset(lineIndex - 1);
			} else {
				this.__caretIndex = index;
			}
		}
	}
	,__caretEndOfLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.getLineOffset(lineIndex + 1) - 1;
		} else {
			this.__caretIndex = this.__text.length;
		}
	}
	,__caretNextCharacter: function() {
		if(this.__caretIndex < this.__text.length) {
			this.__caretIndex++;
		}
	}
	,__caretNextLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex < this.__textEngine.numLines - 1) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex + 1);
		}
	}
	,__caretPreviousCharacter: function() {
		if(this.__caretIndex > 0) {
			this.__caretIndex--;
		}
	}
	,__caretPreviousLine: function() {
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex > 0) {
			this.__caretIndex = this.__getCharIndexOnDifferentLine(this.get_caretIndex(),lineIndex - 1);
		}
	}
	,__disableInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__dispatch: function(event) {
		if(event.eventPhase == 2 && event.type == "mouseUp") {
			var event1 = event;
			var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
			if(group != null) {
				var url = group.format.url;
				if(url != null && url != "") {
					if(StringTools.startsWith(url,"event:")) {
						this.dispatchEvent(new openfl_events_TextEvent("link",false,false,HxOverrides.substr(url,6,null)));
					} else {
						openfl_Lib.getURL(new openfl_net_URLRequest(url));
					}
				}
			}
		}
		return openfl_display_InteractiveObject.prototype.__dispatch.call(this,event);
	}
	,__enableInput: function() {
		if(this.stage != null) {
			this.stage.window.__backend.setTextInputEnabled(true);
			if(!this.__inputEnabled) {
				this.stage.window.__backend.setTextInputEnabled(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.copyFrom(this.__textEngine.bounds);
		matrix.tx += this.__offsetX;
		matrix.ty += this.__offsetY;
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getCharBoundaries: function(charIndex,rect) {
		if(charIndex < 0 || charIndex > this.__text.length - 1) {
			return false;
		}
		this.__updateLayout();
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex < group1.endIndex) {
				try {
					var x = group1.offsetX;
					var _g = 0;
					var _g1 = charIndex - group1.startIndex;
					while(_g < _g1) {
						var i = _g++;
						x += group1.positions[i];
					}
					var lastPosition = group1.positions[charIndex - group1.startIndex];
					rect.setTo(x,group1.offsetY,lastPosition,group1.ascent + group1.descent);
					return true;
				} catch( _g2 ) {
					haxe_NativeStackTrace.lastError = _g2;
				}
			}
		}
		return false;
	}
	,__getCharIndexOnDifferentLine: function(charIndex,lineIndex) {
		if(charIndex < 0 || charIndex > this.__text.length) {
			return -1;
		}
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var x = null;
		var y = null;
		var group = this.__textEngine.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(charIndex >= group1.startIndex && charIndex <= group1.endIndex) {
				x = group1.offsetX;
				var _g = 0;
				var _g1 = charIndex - group1.startIndex;
				while(_g < _g1) {
					var i = _g++;
					x += group1.positions[i];
				}
				if(y != null) {
					return this.__getPosition(x,y);
				}
			}
			if(group1.lineIndex == lineIndex) {
				y = group1.offsetY + group1.height / 2;
				var _g2 = 0;
				var _g3 = this.get_scrollV() - 1;
				while(_g2 < _g3) {
					var i1 = _g2++;
					y -= this.__textEngine.lineHeights.get(i1);
				}
				if(x != null) {
					return this.__getPosition(x,y);
				}
			}
		}
		return -1;
	}
	,__getCursor: function() {
		var group = this.__getGroup(this.get_mouseX(),this.get_mouseY(),true);
		if(group != null && group.format.url != "") {
			return "button";
		} else if(this.__textEngine.selectable) {
			return "ibeam";
		}
		return null;
	}
	,__getGroup: function(x,y,precise) {
		if(precise == null) {
			precise = false;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g = 0;
		var _g1 = this.get_scrollV() - 1;
		while(_g < _g1) {
			var i = _g++;
			y += this.__textEngine.lineHeights.get(i);
		}
		if(!precise && y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.__textEngine.layoutGroups.get(i);
			if(i < this.__textEngine.layoutGroups.get_length() - 1) {
				nextGroup = this.__textEngine.layoutGroups.get(i + 1);
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || !precise && nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || !precise && (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					return group;
				}
			}
		}
		return null;
	}
	,__getPosition: function(x,y) {
		var group = this.__getGroup(x,y);
		if(group == null) {
			return this.__text.length;
		}
		var advance = 0.0;
		var _g = 0;
		var _g1 = group.positions.length;
		while(_g < _g1) {
			var i = _g++;
			advance += group.positions[i];
			if(x <= group.offsetX + advance) {
				if(x <= group.offsetX + (advance - group.positions[i]) + group.positions[i] / 2) {
					return group.startIndex + i;
				} else if(group.startIndex + i < group.endIndex) {
					return group.startIndex + i + 1;
				} else {
					return group.endIndex;
				}
			}
		}
		return group.endIndex;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getRenderTransform();
		this.__updateLayout();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(this.__textEngine.bounds.contains(px,py)) {
			return true;
		}
		return false;
	}
	,__replaceSelectedText: function(value,restrict) {
		if(restrict == null) {
			restrict = true;
		}
		if(value == null) {
			value = "";
		}
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		var endIndex = this.__caretIndex > this.__selectionIndex ? this.__caretIndex : this.__selectionIndex;
		if(startIndex == endIndex && this.__textEngine.maxChars > 0 && this.__text.length == this.__textEngine.maxChars) {
			return;
		}
		if(startIndex > this.__text.length) {
			startIndex = this.__text.length;
		}
		if(endIndex > this.__text.length) {
			endIndex = this.__text.length;
		}
		if(endIndex < startIndex) {
			var cache = endIndex;
			endIndex = startIndex;
			startIndex = cache;
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		this.__replaceText(startIndex,endIndex,value,restrict);
	}
	,__replaceText: function(beginIndex,endIndex,newText,restrict) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__text.length || newText == null) {
			return;
		}
		if(restrict) {
			newText = this.__textEngine.restrictText(newText);
			if(this.__textEngine.maxChars > 0) {
				var removeLength = endIndex - beginIndex;
				var maxLength = this.__textEngine.maxChars - this.__text.length + removeLength;
				if(maxLength <= 0) {
					newText = "";
				} else if(maxLength < newText.length) {
					newText = HxOverrides.substr(newText,0,maxLength);
				}
			}
		}
		this.__updateText(this.__text.substring(0,beginIndex) + newText + this.__text.substring(endIndex));
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.get_length()) {
			range = this.__textEngine.textFormatRanges.get(i);
			if(beginIndex == endIndex) {
				if(range.start == range.end) {
					if(range.start != 0) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/TextField.hx", lineNumber : 2051, className : "openfl.text.TextField", methodName : "__replaceText"});
					} else {
						range.end += offset;
					}
				} else if(range.end >= beginIndex) {
					if(range.start >= beginIndex) {
						range.start += offset;
						range.end += offset;
					} else if(range.start < beginIndex && range.end >= endIndex) {
						range.end += offset;
					}
				}
			} else if(range.end > beginIndex) {
				if(range.start > endIndex) {
					range.start += offset;
					range.end += offset;
				} else if(range.start <= beginIndex && range.end > endIndex) {
					range.end += offset;
				} else if(range.start >= beginIndex && range.end <= endIndex) {
					this.__textEngine.textFormatRanges.splice(i--,1);
				} else if(range.end > endIndex && range.start > beginIndex && range.start <= endIndex) {
					range.start = beginIndex;
					range.end += offset;
				} else if(range.start < beginIndex && range.end > beginIndex && range.end <= endIndex) {
					range.end = beginIndex;
				}
			}
			++i;
		}
		if(this.__textEngine.textFormatRanges.get_length() == 0) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,newText.length));
		} else if(beginIndex == endIndex && this.__textEngine.textFormatRanges.get(0).start > 0) {
			this.__textEngine.textFormatRanges.unshift(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),0,this.__textEngine.textFormatRanges.get(0).start));
		} else if(beginIndex != endIndex && this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end < this.__text.length) {
			this.__textEngine.textFormatRanges.push(new openfl_text__$internal_TextFormatRange(this.get_defaultTextFormat().clone(),this.__textEngine.textFormatRanges.get(this.__textEngine.textFormatRanges.get_length() - 1).end,this.__text.length));
		}
		this.__selectionIndex = this.__caretIndex = beginIndex + newText.length;
		this.__dirty = true;
		this.__layoutDirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
	}
	,__startCursorTimer: function() {
		if(this.get_type() == 1) {
			this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
			this.__showCursor = !this.__showCursor;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		var enableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(enableInput) {
			this.__enableInput();
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__stopTextInput: function() {
		var disableInput = openfl_display_DisplayObject.__supportDOM ? this.__renderedOnCanvasWhileOnDOM : true;
		if(disableInput) {
			this.__disableInput();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			var cacheWidth = this.__textEngine.width;
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						this.set_x(this.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						this.set_x(this.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
			this.setSelection(this.__selectionIndex,this.__caretIndex);
		}
	}
	,__updateScrollH: function() {
		this.__updateLayout();
		if(this.get_textWidth() <= this.get_width() - 4) {
			this.set_scrollH(0);
			return;
		}
		var tempScrollH = this.get_scrollH();
		if(this.__caretIndex == 0 || this.getLineOffset(this.getLineIndexOfChar(this.__caretIndex)) == this.__caretIndex) {
			tempScrollH = 0;
		} else {
			var caret = openfl_geom_Rectangle.__pool.get();
			var written = false;
			if(this.__caretIndex < this.__text.length) {
				written = this.__getCharBoundaries(this.__caretIndex,caret);
			}
			if(!written) {
				this.__getCharBoundaries(this.__caretIndex - 1,caret);
				caret.x += caret.width;
			}
			while(caret.x < tempScrollH && tempScrollH > 0) tempScrollH -= 24;
			while(caret.x > tempScrollH + this.get_width() - 4) tempScrollH += 24;
			openfl_geom_Rectangle.__pool.release(caret);
		}
		if(tempScrollH > 0 && this.get_type() != 1) {
			var lineLength = this.getLineLength(this.getLineIndexOfChar(this.__caretIndex));
			if(this.get_scrollH() + this.get_width() - 4 > lineLength) {
				this.set_scrollH(Math.ceil(lineLength - this.get_width() + 4));
			}
		}
		if(tempScrollH < 0) {
			this.set_scrollH(0);
		} else if(tempScrollH > this.get_maxScrollH()) {
			this.set_scrollH(this.get_maxScrollH());
		} else {
			this.set_scrollH(tempScrollH);
		}
	}
	,__updateScrollV: function() {
		this.__updateLayout();
		if(this.get_textHeight() <= this.get_height() - 4) {
			this.set_scrollV(1);
			return;
		}
		var lineIndex = this.getLineIndexOfChar(this.__caretIndex);
		if(lineIndex == -1 && this.__caretIndex > 0) {
			lineIndex = this.getLineIndexOfChar(this.__caretIndex - 1) + 1;
		}
		if(lineIndex + 1 < this.get_scrollV()) {
			this.set_scrollV(lineIndex + 1);
		} else if(lineIndex + 1 > this.get_bottomScrollV()) {
			var i = lineIndex;
			var tempHeight = 0.0;
			while(i >= 0) if(tempHeight + this.__textEngine.lineHeights.get(i) <= this.get_height() - 4) {
				tempHeight += this.__textEngine.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			this.set_scrollV(i + 2);
		} else {
			this.set_scrollV(this.get_scrollV());
		}
	}
	,__updateMouseDrag: function() {
		if(this.get_mouseX() > this.get_width() - 1) {
			this.set_scrollH(this.get_scrollH() + (Math.max(Math.min((this.get_mouseX() - this.get_width()) * .1,10),1) | 0));
		} else if(this.get_mouseX() < 1) {
			this.set_scrollH(this.get_scrollH() - (Math.max(Math.min(this.get_mouseX() * -.1,10),1) | 0));
		}
		this.__mouseScrollVCounter++;
		if(this.__mouseScrollVCounter > this.stage.get_frameRate() / 10) {
			if(this.get_mouseY() > this.get_height() - 2) {
				this.set_scrollV(this.get_scrollV() + (Math.max(Math.min((this.get_mouseY() - this.get_height()) * .03,5),1) | 0));
			} else if(this.get_mouseY() < 2) {
				this.set_scrollV(this.get_scrollV() - (Math.max(Math.min(this.get_mouseY() * -.03,5),1) | 0));
			}
			this.__mouseScrollVCounter = 0;
		}
		this.stage_onMouseMove(null);
	}
	,__updateText: function(value) {
		if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
			this.__forceCachedBitmapUpdate = this.__text != value;
		}
		this.__textEngine.set_text(value);
		this.__text = this.__textEngine.text;
		if(this.__text.length < this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex = this.__text.length;
		}
		if(!this.__displayAsPassword || openfl_display_DisplayObject.__supportDOM && !this.__renderedOnCanvasWhileOnDOM) {
			this.__textEngine.set_text(this.__text);
		} else {
			var length = this.get_text().length;
			var mask = "";
			var _g = 0;
			var _g1 = length;
			while(_g < _g1) {
				var i = _g++;
				mask += "*";
			}
			this.__textEngine.set_text(mask);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		var _this = this.__renderTransform;
		var px = this.__offsetX;
		var py = this.__offsetY;
		_this.tx = px * _this.a + py * _this.c + _this.tx;
		_this.ty = px * _this.b + py * _this.d + _this.ty;
	}
	,set_antiAliasType: function(value) {
		var tmp = value != this.__textEngine.antiAliasType;
		return this.__textEngine.antiAliasType = value;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.autoSize = value;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.background = value;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.backgroundColor = value;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.border = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_bottomScrollV();
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__displayAsPassword = value;
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		if(value != this.__textEngine.height) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.height = value;
		}
		return this.__textEngine.height * Math.abs(this.get_scaleY());
	}
	,get_htmlText: function() {
		if(this.__isHTML) {
			return this.__rawHtmlText;
		} else {
			return this.__text;
		}
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__isHTML = true;
		this.__rawHtmlText = value;
		value = openfl_text__$internal_HTMLParser.parse(value,this.__textFormat,this.__textEngine.textFormatRanges);
		if(openfl_display_DisplayObject.__supportDOM) {
			if(this.__textEngine.textFormatRanges.get_length() > 1) {
				this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
			}
			var range = this.__textEngine.textFormatRanges.get(0);
			range.format = this.__textFormat;
			range.start = 0;
			if(this.__renderedOnCanvasWhileOnDOM) {
				range.end = value.length;
				this.__updateText(value);
			} else {
				range.end = this.__rawHtmlText.length;
				this.__updateText(this.__rawHtmlText);
			}
		} else {
			this.__updateText(value);
		}
		this.__selectionIndex = this.__caretIndex = this.get_length();
		return value;
	}
	,get_length: function() {
		if(this.__text != null) {
			return this.__text.length;
		}
		return 0;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__textEngine.maxChars = value;
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.get_maxScrollV();
	}
	,get_mouseWheelEnabled: function() {
		return this.__mouseWheelEnabled;
	}
	,set_mouseWheelEnabled: function(value) {
		return this.__mouseWheelEnabled = value;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
			this.__updateText(this.__text);
			this.__updateScrollH();
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,set_restrict: function(value) {
		if(this.__textEngine.restrict != value) {
			this.__textEngine.set_restrict(value);
			this.__updateText(this.__text);
		}
		return value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		this.__updateLayout();
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.scrollH = value;
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.scrollH;
	}
	,get_scrollV: function() {
		return this.__textEngine.get_scrollV();
	}
	,set_scrollV: function(value) {
		this.__updateLayout();
		if(value > 0 && value != this.__textEngine.get_scrollV()) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.set_scrollV(value);
			this.dispatchEvent(new openfl_events_Event("scroll"));
		}
		return this.__textEngine.get_scrollV();
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_tabEnabled: function() {
		if(this.__tabEnabled == null) {
			return this.__textEngine.type == 1;
		} else {
			return this.__tabEnabled;
		}
	}
	,get_text: function() {
		return this.__text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.get_length() > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.get_length() - 1);
		}
		var utfValue = value;
		var range = this.__textEngine.textFormatRanges.get(0);
		range.format = this.__textFormat;
		range.start = 0;
		range.end = utfValue.length;
		this.__isHTML = false;
		this.__updateText(value);
		this.__selectionIndex = this.__caretIndex = 0;
		return value;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		var range = this.__textEngine.textFormatRanges.iterator();
		while(range.hasNext()) {
			var range1 = range.next();
			range1.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
				this.__textEngine.__useIntAdvances = true;
			} else {
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
				this.__textEngine.__useIntAdvances = null;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		if(value != this.__textEngine.width) {
			this.__setTransformDirty();
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
			this.__textEngine.width = value;
		}
		return this.__textEngine.width * Math.abs(this.__scaleX);
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		return this.__textEngine.wordWrap = value;
	}
	,get_x: function() {
		return this.__transform.tx + this.__offsetX;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx + this.__offsetX) {
			this.__setTransformDirty();
		}
		return this.__transform.tx = value - this.__offsetX;
	}
	,get_y: function() {
		return this.__transform.ty + this.__offsetY;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty + this.__offsetY) {
			this.__setTransformDirty();
		}
		return this.__transform.ty = value - this.__offsetY;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.get_selectable() && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				var setDirty = true;
				if(openfl_display_DisplayObject.__supportDOM) {
					if(this.__renderedOnCanvasWhileOnDOM) {
						this.__forceCachedBitmapUpdate = true;
					}
					setDirty = false;
				}
				if(setDirty) {
					this.__dirty = true;
					if(!this.__renderDirty) {
						this.__renderDirty = true;
						this.__setParentRenderDirty();
					}
				}
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var upPos = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
			var leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			var rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
				if(openfl_display_DisplayObject.__supportDOM && this.__renderedOnCanvasWhileOnDOM) {
					this.__forceCachedBitmapUpdate = true;
				}
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onEnterFrame: function(e) {
		this.__updateMouseDrag();
	}
	,this_onFocusIn: function(event) {
		if(this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopCursorTimer();
		if(event.relatedObject == null || !((event.relatedObject) instanceof openfl_text_TextField)) {
			this.__stopTextInput();
		} else {
			if(this.stage != null) {
				this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
				this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			}
			this.__inputEnabled = false;
		}
		if(this.__selectionIndex != this.__caretIndex) {
			this.__selectionIndex = this.__caretIndex;
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,this_onKeyDown: function(event) {
		if(this.get_selectable() && this.get_type() != 1 && event.keyCode == 67 && (event.commandKey || event.ctrlKey)) {
			if(this.__caretIndex != this.__selectionIndex) {
				lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
			}
		}
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable() && this.get_type() != 1) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX() + this.get_scrollH(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		if(!openfl_display_DisplayObject.__supportDOM) {
			this.__dirty = true;
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.stage.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,this_onMouseWheel: function(event) {
		if(this.get_mouseWheelEnabled()) {
			this.set_scrollV(this.get_scrollV() - event.delta);
		}
	}
	,this_onDoubleClick: function(event) {
		if(this.get_selectable()) {
			this.__updateLayout();
			var delimiters = ["\n",".","!","?",","," ",";",":","(",")","-","_","/"];
			var txtStr = this.__text;
			var leftPos = -1;
			var rightPos = txtStr.length;
			var pos = 0;
			var startPos = Math.max(this.__caretIndex,1) | 0;
			if(txtStr.length > 0 && this.__caretIndex >= 0 && rightPos >= this.__caretIndex) {
				var _g = 0;
				while(_g < delimiters.length) {
					var c = delimiters[_g];
					++_g;
					pos = txtStr.lastIndexOf(c,startPos - 1);
					if(pos > leftPos) {
						leftPos = pos + 1;
					}
					pos = txtStr.indexOf(c,startPos);
					if(pos < rightPos && pos != -1) {
						rightPos = pos;
					}
				}
				if(leftPos != rightPos) {
					this.setSelection(leftPos,rightPos);
					var setDirty = true;
					if(openfl_display_DisplayObject.__supportDOM) {
						if(this.__renderedOnCanvasWhileOnDOM) {
							this.__forceCachedBitmapUpdate = true;
						}
						setDirty = false;
					}
					if(setDirty) {
						this.__dirty = true;
						if(!this.__renderDirty) {
							this.__renderDirty = true;
							this.__setParentRenderDirty();
						}
					}
				}
			}
		}
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 97:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.setSelection(0,this.__text.length);
				}
			}
			break;
		case 99:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
				}
			}
			break;
		case 120:
			if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
				if(this.__caretIndex != this.__selectionIndex) {
					lime_system_Clipboard.set_text(this.__text.substring(this.__caretIndex,this.__selectionIndex));
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		case 1073741898:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretBeginningOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741901:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretEndOfLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741903:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfNextLine();
				} else {
					this.__caretNextCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741904:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretBeginningOfPreviousLine();
				} else {
					this.__caretPreviousCharacter();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741905:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = this.__text.length;
				} else {
					this.__caretNextLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 1073741906:
			if(this.get_selectable()) {
				if(lime_ui_KeyModifier.get_metaKey(modifier) || lime_ui_KeyModifier.get_ctrlKey(modifier)) {
					this.__caretIndex = 0;
				} else {
					this.__caretPreviousLine();
				}
				if(!lime_ui_KeyModifier.get_shiftKey(modifier)) {
					this.__selectionIndex = this.__caretIndex;
				}
				this.setSelection(this.__selectionIndex,this.__caretIndex);
			}
			break;
		case 13:case 1073741912:
			if(this.__textEngine.multiline) {
				var te = new openfl_events_TextEvent("textInput",true,true,"\n");
				this.dispatchEvent(te);
				if(!te.isDefaultPrevented()) {
					this.__replaceSelectedText("\n",true);
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			} else {
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.__replaceSelectedText(value,true);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_textColor:"set_textColor",set_restrict:"set_restrict",set_maxChars:"set_maxChars",set_border:"set_border",set_backgroundColor:"set_backgroundColor",set_background:"set_background",set_autoSize:"set_autoSize",set_antiAliasType:"set_antiAliasType",set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_text:"set_text",get_text:"get_text",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",set_mouseWheelEnabled:"set_mouseWheelEnabled",get_mouseWheelEnabled:"get_mouseWheelEnabled",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV"})
});
var com_coffeebreak_core_CoffeeTextField = function() {
	openfl_text_TextField.call(this);
	this.position = com_coffeebreak_CoffeeConstants.POSITION_MANAGER;
};
$hxClasses["com.coffeebreak.core.CoffeeTextField"] = com_coffeebreak_core_CoffeeTextField;
com_coffeebreak_core_CoffeeTextField.__name__ = "com.coffeebreak.core.CoffeeTextField";
com_coffeebreak_core_CoffeeTextField.__super__ = openfl_text_TextField;
com_coffeebreak_core_CoffeeTextField.prototype = $extend(openfl_text_TextField.prototype,{
	init: function(_positionName) {
		this.set_name(_positionName);
		if(_positionName == "") {
			return;
		}
		this.position.setTextPosition(this,_positionName);
		this.setFormat(_positionName);
		this.set_antiAliasType(0);
	}
	,setFormat: function(_formatName) {
		this.position.setTextProperties(this,_formatName);
	}
	,fontSize: function(_size) {
		var tf = this.get_defaultTextFormat();
		tf.size = _size;
		this.setTextFormat(tf);
	}
	,setText: function(_value,_langKey) {
		if(_value != null) {
			this.set_text(_value);
		} else {
			com_coffeebreak_CoffeeConstants.LANGUAGE_UPDATER.addToLanguageMap(_langKey,this);
			this.set_text(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString(_langKey));
		}
	}
	,__class__: com_coffeebreak_core_CoffeeTextField
});
var com_coffeebreak_core_ItemCreatorData = function() {
};
$hxClasses["com.coffeebreak.core.ItemCreatorData"] = com_coffeebreak_core_ItemCreatorData;
com_coffeebreak_core_ItemCreatorData.__name__ = "com.coffeebreak.core.ItemCreatorData";
com_coffeebreak_core_ItemCreatorData.prototype = {
	get_itemType: function() {
		return this.itemType;
	}
	,set_itemType: function(value) {
		return this.itemType = value;
	}
	,get_graphicName: function() {
		return this.graphicName;
	}
	,set_graphicName: function(value) {
		return this.graphicName = value;
	}
	,get_positionName: function() {
		return this.positionName;
	}
	,set_positionName: function(value) {
		return this.positionName = value;
	}
	,__class__: com_coffeebreak_core_ItemCreatorData
	,__properties__: {set_positionName:"set_positionName",get_positionName:"get_positionName",set_graphicName:"set_graphicName",get_graphicName:"get_graphicName",set_itemType:"set_itemType",get_itemType:"get_itemType"}
};
var com_coffeebreak_core_SceneCreator = function() {
	this.scenesHolder = new haxe_ds_StringMap();
	this.layersHolder = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.core.SceneCreator"] = com_coffeebreak_core_SceneCreator;
com_coffeebreak_core_SceneCreator.__name__ = "com.coffeebreak.core.SceneCreator";
com_coffeebreak_core_SceneCreator.prototype = {
	createSceneFromItems: function(_data,_scene) {
		var itemData = new com_coffeebreak_core_ItemCreatorData();
		var scene = null;
		if(_scene == null) {
			scene = new com_coffeebreak_core_BaseScreen();
		} else {
			scene = _scene;
		}
		haxe_Log.trace("SN:" + Std.string(scene),{ fileName : "com/coffeebreak/core/SceneCreator.hx", lineNumber : 65, className : "com.coffeebreak.core.SceneCreator", methodName : "createSceneFromItems"});
		var _g = 1;
		var _g1 = _data.length;
		while(_g < _g1) {
			var i = _g++;
			var currData = _data[i];
			currData[1] = this.nameConversion(currData[1]);
			itemData.set_graphicName(currData[0]);
			itemData.set_positionName(currData[1]);
			if(currData[2] != null) {
				itemData.set_itemType(currData[2]);
			} else {
				itemData.set_itemType(com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemType(currData[1]));
			}
			var item = this.createItem(itemData);
			if(com_coffeebreak_CoffeeConstants.POSITION_MANAGER.checkHasItemBox(currData[1]) == true) {
				var parentItem = js_Boot.__cast(scene.getChildByName(com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getParentBoxName(currData[1])) , com_coffeebreak_core_GameItem);
				parentItem.addChild(item);
			} else {
				scene.addChild(item);
			}
		}
		this.scenesHolder.h[_data[0]] = scene;
	}
	,createItem: function(_itemData) {
		var item = null;
		_itemData.set_itemType(Std.string(_itemData.get_itemType()));
		switch(_itemData.get_itemType()) {
		case "Button":
			item = com_coffeebreak_core_CoffeeItemFactory.createButtonItem(_itemData.get_graphicName(),_itemData.get_positionName());
			break;
		case "GameItem":
			item = com_coffeebreak_core_CoffeeItemFactory.createGameItem(_itemData.get_graphicName(),_itemData.get_positionName());
			break;
		case "MovieClip":
			item = com_coffeebreak_core_CoffeeItemFactory.createMovieClipItem(_itemData.get_graphicName(),_itemData.get_positionName());
			break;
		case "TextField":
			item = js_Boot.__cast(com_coffeebreak_core_CoffeeItemFactory.createCoffeeText(_itemData.get_positionName()) , com_coffeebreak_core_GameItem);
			break;
		default:
			item = com_coffeebreak_core_CoffeeItemFactory.createCustomItem(_itemData);
		}
		return item;
	}
	,nameConversion: function(_name) {
		if(_name.indexOf("_box") != -1) {
			_name = com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversionWithBox(_name);
		} else {
			_name = com_coffeebreak_CoffeeConstants.NAME_CONVERTER.nameConversion(_name);
		}
		return _name;
	}
	,getElementByID: function(_sceneID,_elementId,_specialName) {
		if(_specialName == null) {
			_specialName = false;
		}
		if(_specialName == false) {
			return this.getScene(_sceneID).getChildByName(_elementId);
		} else {
			return this.getScene(_sceneID).getChildByName(this.nameConversion(_elementId));
		}
	}
	,getScene: function(_id) {
		return this.scenesHolder.h[_id];
	}
	,getFromLayer: function(_id) {
		if(Object.prototype.hasOwnProperty.call(this.layersHolder.h,_id) == true) {
			return this.layersHolder.h[_id];
		}
		return null;
	}
	,removeFromSceneHolder: function(_id) {
		if(Object.prototype.hasOwnProperty.call(this.scenesHolder.h,_id) == true) {
			var _this = this.scenesHolder;
			if(Object.prototype.hasOwnProperty.call(_this.h,_id)) {
				delete(_this.h[_id]);
			}
		}
	}
	,destroyLayers: function() {
		var h = this.layersHolder.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var _this = this.layersHolder;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
	}
	,__class__: com_coffeebreak_core_SceneCreator
};
var com_coffeebreak_core_ShadowLayer = function(_color,_alpha,_width,_height) {
	openfl_display_Sprite.call(this);
	this.get_graphics().clear();
	this.get_graphics().beginFill(_color,_alpha);
	this.get_graphics().drawRect(0,0,_width,_height);
	this.get_graphics().endFill();
};
$hxClasses["com.coffeebreak.core.ShadowLayer"] = com_coffeebreak_core_ShadowLayer;
com_coffeebreak_core_ShadowLayer.__name__ = "com.coffeebreak.core.ShadowLayer";
com_coffeebreak_core_ShadowLayer.__super__ = openfl_display_Sprite;
com_coffeebreak_core_ShadowLayer.prototype = $extend(openfl_display_Sprite.prototype,{
	show: function(_showTime) {
		if(_showTime == null) {
			_showTime = .3;
		}
		this.set_visible(true);
		motion_Actuate.tween(this,_showTime,{ alpha : 1});
	}
	,hide: function(_showTime) {
		if(_showTime == null) {
			_showTime = .3;
		}
		motion_Actuate.tween(this,_showTime,{ alpha : 0}).onComplete($bind(this,this.setInvisible));
	}
	,setInvisible: function() {
		this.set_visible(false);
	}
	,__class__: com_coffeebreak_core_ShadowLayer
});
var com_coffeebreak_data_AchItem = function() {
};
$hxClasses["com.coffeebreak.data.AchItem"] = com_coffeebreak_data_AchItem;
com_coffeebreak_data_AchItem.__name__ = "com.coffeebreak.data.AchItem";
com_coffeebreak_data_AchItem.prototype = {
	__class__: com_coffeebreak_data_AchItem
};
var com_coffeebreak_data_AchievementData = function() {
	this.achData = new haxe_ds_IntMap();
};
$hxClasses["com.coffeebreak.data.AchievementData"] = com_coffeebreak_data_AchievementData;
com_coffeebreak_data_AchievementData.__name__ = "com.coffeebreak.data.AchievementData";
com_coffeebreak_data_AchievementData.prototype = {
	setAchievement: function(_key,_data) {
		if(!this.achData.h.hasOwnProperty(_key)) {
			this.achData.h[_key] = _data;
		}
	}
	,checkAchievement: function(_key) {
		var key = this.achData.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			if(this.achData.h[key1].txt == _key) {
				return true;
			}
		}
		return false;
	}
	,reset: function() {
		this.achData = new haxe_ds_IntMap();
	}
	,__class__: com_coffeebreak_data_AchievementData
};
var com_coffeebreak_data_AlertTypes = $hxEnums["com.coffeebreak.data.AlertTypes"] = { __ename__:"com.coffeebreak.data.AlertTypes",__constructs__:null
	,START: {_hx_name:"START",_hx_index:0,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,PAUSE: {_hx_name:"PAUSE",_hx_index:1,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,SETTINGS: {_hx_name:"SETTINGS",_hx_index:2,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,WIN: {_hx_name:"WIN",_hx_index:3,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,END: {_hx_name:"END",_hx_index:4,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,MSG: {_hx_name:"MSG",_hx_index:5,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,GOTO: {_hx_name:"GOTO",_hx_index:6,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
	,ALERT: {_hx_name:"ALERT",_hx_index:7,__enum__:"com.coffeebreak.data.AlertTypes",toString:$estr}
};
com_coffeebreak_data_AlertTypes.__constructs__ = [com_coffeebreak_data_AlertTypes.START,com_coffeebreak_data_AlertTypes.PAUSE,com_coffeebreak_data_AlertTypes.SETTINGS,com_coffeebreak_data_AlertTypes.WIN,com_coffeebreak_data_AlertTypes.END,com_coffeebreak_data_AlertTypes.MSG,com_coffeebreak_data_AlertTypes.GOTO,com_coffeebreak_data_AlertTypes.ALERT];
var com_coffeebreak_data_BaseGameSettings = function() {
	this.musicID = "1up";
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
};
$hxClasses["com.coffeebreak.data.BaseGameSettings"] = com_coffeebreak_data_BaseGameSettings;
com_coffeebreak_data_BaseGameSettings.__name__ = "com.coffeebreak.data.BaseGameSettings";
com_coffeebreak_data_BaseGameSettings.prototype = {
	setDefaultValues: function() {
		this.set_sfxVolume(.5);
		this.set_musicVolume(.5);
		this.set_particles(50);
		this.hideGrinds = false;
		this.set_mergeInventory(true);
		this.set_showErrors(false);
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_soundVolume(this.get_sfxVolume());
		this.setMusicVolume(this.get_musicVolume(),false);
	}
	,setValues: function(_data) {
		var fields = Reflect.fields(_data);
		var _g = 0;
		while(_g < fields.length) {
			var propertyName = fields[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this,propertyName)) {
				if(propertyName == "musicVolume") {
					this[propertyName] = parseFloat(Reflect.getProperty(_data,propertyName));
					this.setMusicVolume(parseFloat(Reflect.getProperty(_data,propertyName)),false);
				} else if(propertyName == "sfxVolume") {
					this[propertyName] = parseFloat(Reflect.getProperty(_data,propertyName));
					this.setSfxVolume(parseFloat(Reflect.getProperty(_data,propertyName)),false);
				} else if(propertyName == "particles") {
					haxe_Log.trace("PART: " + Std.string(Reflect.getProperty(_data,propertyName)),{ fileName : "src/com/coffeebreak/data/BaseGameSettings.hx", lineNumber : 77, className : "com.coffeebreak.data.BaseGameSettings", methodName : "setValues"});
					Reflect.setProperty(this,propertyName,Reflect.getProperty(_data,propertyName));
				} else if(propertyName == "mergeInventory") {
					this[propertyName] = com_coffeebreak_utils_ConvertorUtils.stringToBoolean(Std.string(Reflect.getProperty(_data,propertyName)));
				} else if(propertyName == "showErrors") {
					this[propertyName] = com_coffeebreak_utils_ConvertorUtils.stringToBoolean(Std.string(Reflect.getProperty(_data,propertyName)));
				}
			}
		}
	}
	,setSfxVolume: function(_value,_fromSlider) {
		if(_fromSlider == null) {
			_fromSlider = true;
		}
		if(_fromSlider) {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_soundVolume(_value / 100);
			this.set_sfxVolume(_value / 100);
		} else {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_soundVolume(_value);
			this.set_sfxVolume(_value);
		}
	}
	,setMusicVolume: function(_value,_fromSlider) {
		if(_fromSlider == null) {
			_fromSlider = true;
		}
		if(_fromSlider) {
			this.set_musicVolume(_value / 100);
		} else {
			this.set_musicVolume(_value);
		}
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.set_musicVolume(this.get_musicVolume());
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER.adjustMusicVolume(this.get_musicVolume(),this.musicID + ".ogg");
	}
	,setParticles: function(_value,_fromSlider) {
		if(_fromSlider == null) {
			_fromSlider = true;
		}
		if(_fromSlider) {
			this.set_particles(_value | 0);
		} else {
			this.set_particles(_value);
		}
	}
	,getSavingData: function() {
		var ob = { };
		var value = this.get_sfxVolume();
		Reflect.setProperty(ob,"sfxVolume",value);
		var value = this.get_musicVolume();
		Reflect.setProperty(ob,"musicVolume",value);
		var value = this.get_particles();
		Reflect.setProperty(ob,"particles",value);
		var value = this.get_showErrors();
		Reflect.setProperty(ob,"showErrors",value);
		var value = this.get_mergeInventory();
		Reflect.setProperty(ob,"mergeInventory",value);
		return ob;
	}
	,get_sfxVolume: function() {
		return this.sfxVolume;
	}
	,set_sfxVolume: function(value) {
		return this.sfxVolume = value;
	}
	,get_musicVolume: function() {
		return this.musicVolume;
	}
	,set_musicVolume: function(value) {
		return this.musicVolume = value;
	}
	,get_particles: function() {
		return this.particles;
	}
	,set_particles: function(value) {
		this.pe.set_particlesPerGrindEmitter(value);
		this.pe.set_particlesPerAchievementEmitter(this.pe.get_particlesPerGrindEmitter() * 2);
		return this.particles = value;
	}
	,get_mergeInventory: function() {
		return this.mergeInventory;
	}
	,set_mergeInventory: function(value) {
		return this.mergeInventory = value;
	}
	,get_showErrors: function() {
		return this.showErrors;
	}
	,set_showErrors: function(value) {
		return this.showErrors = value;
	}
	,__class__: com_coffeebreak_data_BaseGameSettings
	,__properties__: {set_showErrors:"set_showErrors",get_showErrors:"get_showErrors",set_mergeInventory:"set_mergeInventory",get_mergeInventory:"get_mergeInventory",set_particles:"set_particles",get_particles:"get_particles",set_musicVolume:"set_musicVolume",get_musicVolume:"get_musicVolume",set_sfxVolume:"set_sfxVolume",get_sfxVolume:"get_sfxVolume"}
};
var com_coffeebreak_data_CraftersData = function() {
	this.set_ingredientsArray([]);
	this.set_requiredItemArray([]);
	this.set_onCompleteArray([]);
	this.setDefault();
};
$hxClasses["com.coffeebreak.data.CraftersData"] = com_coffeebreak_data_CraftersData;
com_coffeebreak_data_CraftersData.__name__ = "com.coffeebreak.data.CraftersData";
com_coffeebreak_data_CraftersData.prototype = {
	setDefault: function() {
		this.set_ingrediens("");
		this.set_requiredItem("");
		this.set_craftedItems("");
		this.set_image("");
		this.set_soundPrefix("");
		this.set_type("");
		this.set_achievement("");
		this.set_onComplete("");
		this.set_tooltip("");
		this.set_name("");
		this.set_ID(0);
	}
	,setValues: function(_data) {
		var fields = Reflect.fields(_data);
		var _g = 0;
		while(_g < fields.length) {
			var propertyName = fields[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this,propertyName)) {
				Reflect.setProperty(this,propertyName,Reflect.getProperty(_data,propertyName));
			}
		}
		var tmpArray = this.get_craftedItems().split("=");
		this.set_name(tmpArray[0]);
		this.set_ingredientsArray(this.get_ingrediens().split(","));
		this.set_requiredItemArray(this.get_requiredItem().split(","));
		this.set_onCompleteArray(this.get_onComplete().split(","));
	}
	,get_ingrediens: function() {
		return this.ingrediens;
	}
	,set_ingrediens: function(value) {
		return this.ingrediens = value;
	}
	,get_requiredItem: function() {
		return this.requiredItem;
	}
	,set_requiredItem: function(value) {
		return this.requiredItem = value;
	}
	,get_craftedItems: function() {
		return this.craftedItems;
	}
	,set_craftedItems: function(value) {
		return this.craftedItems = value;
	}
	,get_image: function() {
		return this.image;
	}
	,set_image: function(value) {
		return this.image = value;
	}
	,get_soundPrefix: function() {
		return this.soundPrefix;
	}
	,set_soundPrefix: function(value) {
		return this.soundPrefix = value;
	}
	,get_type: function() {
		return this.type;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_achievement: function() {
		return this.achievement;
	}
	,set_achievement: function(value) {
		return this.achievement = value;
	}
	,get_onComplete: function() {
		return this.onComplete;
	}
	,set_onComplete: function(value) {
		return this.onComplete = value;
	}
	,get_tooltip: function() {
		return this.tooltip;
	}
	,set_tooltip: function(value) {
		return this.tooltip = value;
	}
	,get_ingredientsArray: function() {
		return this.ingredientsArray;
	}
	,set_ingredientsArray: function(value) {
		return this.ingredientsArray = value;
	}
	,get_requiredItemArray: function() {
		return this.requiredItemArray;
	}
	,set_requiredItemArray: function(value) {
		return this.requiredItemArray = value;
	}
	,get_onCompleteArray: function() {
		return this.onCompleteArray;
	}
	,set_onCompleteArray: function(value) {
		return this.onCompleteArray = value;
	}
	,get_name: function() {
		return this.name;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_itemKey: function() {
		return this.itemKey;
	}
	,set_itemKey: function(value) {
		return this.itemKey = value;
	}
	,get_ID: function() {
		return this.ID;
	}
	,set_ID: function(value) {
		return this.ID = value;
	}
	,__class__: com_coffeebreak_data_CraftersData
	,__properties__: {set_ID:"set_ID",get_ID:"get_ID",set_itemKey:"set_itemKey",get_itemKey:"get_itemKey",set_name:"set_name",get_name:"get_name",set_onCompleteArray:"set_onCompleteArray",get_onCompleteArray:"get_onCompleteArray",set_requiredItemArray:"set_requiredItemArray",get_requiredItemArray:"get_requiredItemArray",set_ingredientsArray:"set_ingredientsArray",get_ingredientsArray:"get_ingredientsArray",set_tooltip:"set_tooltip",get_tooltip:"get_tooltip",set_onComplete:"set_onComplete",get_onComplete:"get_onComplete",set_achievement:"set_achievement",get_achievement:"get_achievement",set_type:"set_type",get_type:"get_type",set_soundPrefix:"set_soundPrefix",get_soundPrefix:"get_soundPrefix",set_image:"set_image",get_image:"get_image",set_craftedItems:"set_craftedItems",get_craftedItems:"get_craftedItems",set_requiredItem:"set_requiredItem",get_requiredItem:"get_requiredItem",set_ingrediens:"set_ingrediens",get_ingrediens:"get_ingrediens"}
};
var com_coffeebreak_data_DataCollector = function() {
	this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
	this.achieveData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
	this.baseGameSettings = js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS") , com_coffeebreak_data_BaseGameSettings);
	this.grindMenuData = [];
	this.set_mapObj({ });
	this.autoCrftObj = { };
	this.autocrafters = [];
	this.autoDelay = [];
	var this1 = this.autoCrftObj;
	var value = this.get_autocrafters();
	Reflect.setProperty(this1,"actf",value);
	var this1 = this.autoCrftObj;
	var value = this.get_autoDelay();
	Reflect.setProperty(this1,"delay",value);
	this.markersArray = [];
	this.set_automationMap(new haxe_ds_StringMap());
	this.set_automationData([]);
};
$hxClasses["com.coffeebreak.data.DataCollector"] = com_coffeebreak_data_DataCollector;
com_coffeebreak_data_DataCollector.__name__ = "com.coffeebreak.data.DataCollector";
com_coffeebreak_data_DataCollector.prototype = {
	reset: function() {
		this.inventoryData.reset();
		this.achieveData.reset();
		this.grindMenuData = [];
		this.set_mapObj({ });
		this.autoCrftObj = { };
		this.autocrafters = [];
		this.set_automationData([]);
	}
	,getAllSaveData: function() {
		var saveData = { };
		var value = this.collectInventoryData();
		Reflect.setProperty(saveData,"inventory",value);
		var value = this.collectAchievementData();
		Reflect.setProperty(saveData,"achievement",value);
		var value = com_coffeebreak_GameProperties.CURRENT_MAP_NAME;
		Reflect.setProperty(saveData,"current_menu",value);
		var value = this.get_grindMenuData();
		Reflect.setProperty(saveData,"grindmenu",value);
		var value = this.baseGameSettings.getSavingData();
		Reflect.setProperty(saveData,"BGS",value);
		var value = this.get_mapObj();
		Reflect.setProperty(saveData,"MAP",value);
		var value = this.autoCrftObj;
		Reflect.setProperty(saveData,"ACF",value);
		var value = this.getAutomationData();
		Reflect.setProperty(saveData,"AUTO",value);
		return saveData;
	}
	,collectInventoryData: function() {
		var invOB = { };
		var h = this.inventoryData.inventMap.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var value = this.inventoryData.inventMap.h[key];
			Reflect.setProperty(invOB,key,value);
		}
		return invOB;
	}
	,collectAchievementData: function() {
		var invOB = { };
		var key = this.achieveData.achData.keys();
		while(key.hasNext()) {
			var key1 = key.next();
			var value = this.achieveData.achData.h[key1];
			Reflect.setProperty(invOB,key1 == null ? "null" : "" + key1,value);
		}
		return invOB;
	}
	,setGrindMenuData: function(_menuId,_currLabel,_img,_isAuto,_automateName,_grinderName) {
		if(_automateName == null) {
			_automateName = "";
		}
		if(_isAuto == null) {
			_isAuto = false;
		}
		var item = this.checkGrindMenu(_menuId);
		if(item != null) {
			item.grinder = _grinderName;
			item.ID = _menuId;
			item.img = _img;
			item.label = _currLabel;
			item.isAutomate = _isAuto;
			if(_automateName != "") {
				item.automateName = _automateName;
			}
		} else {
			item = new com_coffeebreak_data_GrindMenuItem();
			item.img = _img;
			item.grinder = _grinderName;
			item.ID = _menuId;
			item.label = _currLabel;
			item.isAutomate = _isAuto;
			if(_automateName != "") {
				item.automateName = _automateName;
			}
			this.get_grindMenuData().push(item);
		}
		if(_currLabel != "") {
			this.get_automationMap().h[_grinderName] = _isAuto;
		}
	}
	,updateAutomationData: function(_grinderName,_isAuto) {
		this.get_automationMap().h[_grinderName] = _isAuto;
	}
	,setMapData: function(_key,_data) {
		Reflect.setProperty(this.get_mapObj(),_key,_data);
	}
	,saveMap: function(_markers,_curLocation,_isActive,isOpenTravel,_isCollapsed,_beatLocation) {
		var value = _markers;
		Reflect.setProperty(this.get_mapObj(),"markers",value);
		var value = _isActive;
		Reflect.setProperty(this.get_mapObj(),"isActive",value);
		var value = _curLocation;
		Reflect.setProperty(this.get_mapObj(),"currentLocation",value);
		var value = isOpenTravel;
		Reflect.setProperty(this.get_mapObj(),"isOpenTravel",value);
		var value = _isCollapsed;
		Reflect.setProperty(this.get_mapObj(),"isCollapsed",value);
		var value = _beatLocation;
		Reflect.setProperty(this.get_mapObj(),"beatLocation",value);
	}
	,saveAutoCrafters: function(_id,_delay) {
		if(this.get_autocrafters().length > 0) {
			if(this.get_autocrafters().indexOf(_id) == -1) {
				this.get_autocrafters().push(_id);
				this.get_autoDelay().push(_delay);
			}
		} else {
			this.get_autocrafters().push(_id);
			this.get_autoDelay().push(_delay);
		}
	}
	,getAutomationData: function() {
		var tmpArray = [];
		var h = this.get_automationMap().h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			if(key != "undefined" && key != "null") {
				tmpArray.push(key + ":" + Std.string(this.get_automationMap().h[key]));
			}
		}
		return tmpArray;
	}
	,get_grindMenuData: function() {
		return this.grindMenuData;
	}
	,checkIsAutomated: function(_id) {
		var gmd = this.checkGrindMenu(_id);
		if(gmd != null) {
			return gmd.isAutomate;
		}
		return false;
	}
	,checkGrindMenu: function(_id) {
		var _g = 0;
		var _g1 = this.get_grindMenuData().length;
		while(_g < _g1) {
			var i = _g++;
			if(this.get_grindMenuData()[i].ID == _id) {
				return this.get_grindMenuData()[i];
			}
		}
		return null;
	}
	,get_mapObj: function() {
		return this.mapObj;
	}
	,get_autocrafters: function() {
		return this.autocrafters;
	}
	,get_autoDelay: function() {
		return this.autoDelay;
	}
	,set_mapObj: function(value) {
		return this.mapObj = value;
	}
	,get_automationMap: function() {
		return this.automationMap;
	}
	,set_automationMap: function(value) {
		return this.automationMap = value;
	}
	,get_automationData: function() {
		return this.automationData;
	}
	,set_automationData: function(value) {
		var _g = 0;
		var _g1 = value.length;
		while(_g < _g1) {
			var i = _g++;
			var val = value[i].split(":");
			haxe_Log.trace(val,{ fileName : "src/com/coffeebreak/data/DataCollector.hx", lineNumber : 292, className : "com.coffeebreak.data.DataCollector", methodName : "set_automationData"});
			if(val[0] != "undefined") {
				this.get_automationMap().h[val[0]] = val[1] == "true";
			}
		}
		var tmp = this.get_automationMap();
		haxe_Log.trace("MAP: " + (tmp == null ? "null" : haxe_ds_StringMap.stringify(tmp.h)),{ fileName : "src/com/coffeebreak/data/DataCollector.hx", lineNumber : 297, className : "com.coffeebreak.data.DataCollector", methodName : "set_automationData"});
		return this.automationData = value;
	}
	,__class__: com_coffeebreak_data_DataCollector
	,__properties__: {set_automationData:"set_automationData",get_automationData:"get_automationData",set_automationMap:"set_automationMap",get_automationMap:"get_automationMap",get_autoDelay:"get_autoDelay",get_autocrafters:"get_autocrafters",set_mapObj:"set_mapObj",get_mapObj:"get_mapObj",get_grindMenuData:"get_grindMenuData"}
};
var com_coffeebreak_data_GrindMenuItem = function() {
	this.automateName = "";
	this.isAutomate = false;
	this.img = "";
	this.grinder = "";
	this.label = "";
	this.ID = -1;
};
$hxClasses["com.coffeebreak.data.GrindMenuItem"] = com_coffeebreak_data_GrindMenuItem;
com_coffeebreak_data_GrindMenuItem.__name__ = "com.coffeebreak.data.GrindMenuItem";
com_coffeebreak_data_GrindMenuItem.prototype = {
	__class__: com_coffeebreak_data_GrindMenuItem
};
var com_coffeebreak_data_GameDataParser = function() {
	this.set_dataParserSignal(new msignal_Signal0());
	this.reset();
};
$hxClasses["com.coffeebreak.data.GameDataParser"] = com_coffeebreak_data_GameDataParser;
com_coffeebreak_data_GameDataParser.__name__ = "com.coffeebreak.data.GameDataParser";
com_coffeebreak_data_GameDataParser.prototype = {
	reset: function() {
		this.carftersData = [];
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("CRAFTERS_DATA",this.carftersData);
		this.grindsData = [];
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("GRINDS_DATA",this.grindsData);
		this.grindersData = [];
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("GRINDERS_DATA",this.grindersData);
		this.imagesData = new haxe_ds_StringMap();
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("IMAGES_DATA",this.imagesData);
	}
	,parseData: function(_data) {
		var idCounter = 0;
		var child = _data.elements();
		while(child.hasNext()) {
			var child1 = child.next();
			if(child1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
			}
			if(child1.nodeName == "crafters") {
				var subchild = child1.elements();
				while(subchild.hasNext()) {
					var subchild1 = subchild.next();
					var cd = new com_coffeebreak_data_CraftersData();
					var ob = { };
					var value = idCounter;
					Reflect.setProperty(ob,"ID",value);
					var attr = subchild1.attributes();
					while(attr.hasNext()) {
						var attr1 = attr.next();
						var value1 = Std.string(subchild1.get(attr1));
						Reflect.setProperty(ob,attr1,value1);
					}
					var cItems = Std.string(Reflect.getProperty(ob,"craftedItems")).split("=");
					if(!Object.prototype.hasOwnProperty.call(this.imagesData.h,cItems[0])) {
						var this1 = this.imagesData;
						var value2 = Reflect.getProperty(ob,"image");
						this1.h[cItems[0]] = value2;
					}
					cd.setValues(ob);
					++idCounter;
					this.carftersData.push(cd);
				}
			} else {
				if(child1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
				}
				if(child1.nodeName == "grinds") {
					var subchild2 = child1.elements();
					while(subchild2.hasNext()) {
						var subchild3 = subchild2.next();
						var cd1 = new com_coffeebreak_data_GrindsData();
						var ob1 = { };
						var attr2 = subchild3.attributes();
						while(attr2.hasNext()) {
							var attr3 = attr2.next();
							var value3 = Std.string(subchild3.get(attr3));
							Reflect.setProperty(ob1,attr3,value3);
						}
						cd1.setValues(ob1);
						this.grindsData.push(cd1);
					}
				} else {
					var subchild4 = child1.elements();
					while(subchild4.hasNext()) {
						var subchild5 = subchild4.next();
						var cd2 = new com_coffeebreak_data_GrindersData();
						var ob2 = { };
						var attr4 = subchild5.attributes();
						while(attr4.hasNext()) {
							var attr5 = attr4.next();
							var value4 = Std.string(subchild5.get(attr5));
							Reflect.setProperty(ob2,attr5,value4);
						}
						cd2.setValues(ob2);
						this.grindersData.push(cd2);
					}
				}
			}
		}
		this.dataParserSignal.dispatch();
	}
	,set_dataParserSignal: function(value) {
		return this.dataParserSignal = value;
	}
	,__class__: com_coffeebreak_data_GameDataParser
	,__properties__: {set_dataParserSignal:"set_dataParserSignal"}
};
var com_coffeebreak_data_GameState = function() {
	this.update();
};
$hxClasses["com.coffeebreak.data.GameState"] = com_coffeebreak_data_GameState;
com_coffeebreak_data_GameState.__name__ = "com.coffeebreak.data.GameState";
com_coffeebreak_data_GameState.prototype = {
	findImageAccordingCraftersData: function(_id) {
		var _g = 0;
		var _g1 = this.craftersData.length;
		while(_g < _g1) {
			var i = _g++;
			if(_id == this.craftersData[i].get_name()) {
				return this.craftersData[i];
			}
		}
		return null;
	}
	,setGrindPercentValues: function(_data) {
		var totalPercentage = 0;
		var hasRemainder = false;
		var remainder = 0;
		var generates = _data.get_generatesArray();
		var occurance = _data.get_occurance().split(",");
		var _g = 0;
		var _g1 = generates.length;
		while(_g < _g1) {
			var i = _g++;
			if(occurance[i] == "remainder" || occurance[i] == "nothing") {
				_data.set_hasReminder(true);
				hasRemainder = true;
			} else {
				totalPercentage += parseFloat(occurance[i]);
			}
		}
		if(hasRemainder && totalPercentage < 100) {
			remainder = 100 - totalPercentage;
		}
		totalPercentage += remainder;
		var multiplier = 100 / totalPercentage;
		totalPercentage = 0;
		var percent = 0;
		var _g = 0;
		var _g1 = generates.length;
		while(_g < _g1) {
			var i = _g++;
			if(occurance[i] == "remainder" || occurance[i] == "nothing") {
				percent = remainder;
			} else {
				percent = parseFloat(occurance[i]) * multiplier;
				totalPercentage += percent;
				_data.get_totalPercents().push((totalPercentage * 100 | 0) / 100);
			}
		}
	}
	,displayRandomGrind: function(_id,enebledItems,_negativeAllow) {
		if(_negativeAllow == null) {
			_negativeAllow = false;
		}
		var newRandomArray;
		var _data = this.grindersData[_id];
		var generates = _data.get_generatesArray();
		var occurance = _data.get_occurance().split(",");
		var r = Math.random() * 100;
		var index = -1;
		var length = generates.length;
		if(length > 0) {
			var _g = 0;
			var _g1 = generates.length;
			while(_g < _g1) {
				var i = _g++;
				if(occurance[i] == "remainder") {
					continue;
				}
				if(r <= _data.get_totalPercents()[i]) {
					if(enebledItems.h[generates[i]]) {
						index = i;
						break;
					}
				}
			}
		}
		if(!_negativeAllow && index == -1) {
			newRandomArray = com_coffeebreak_utils_ArrayUtil.deepCopy(generates);
			if(length > 0) {
				newRandomArray = com_coffeebreak_utils_ArrayUtil.randomizeArray(newRandomArray);
				var _g = 0;
				var _g1 = newRandomArray.length;
				while(_g < _g1) {
					var i = _g++;
					if(enebledItems.h[newRandomArray[i]]) {
						index = generates.indexOf(newRandomArray[i]);
						break;
					}
				}
			}
		}
		return index;
	}
	,getGrinderByGrindId: function(_id,_index) {
		var _data = this.grindersData[_id];
		var generates = _data.get_generatesArray();
		var ggd = new com_coffeebreak_data_GrindGenData();
		ggd.set_name(generates[_index]);
		ggd.set_percent(_data.get_totalPercents()[_index]);
		return ggd;
	}
	,getGrindDataItem: function(_name) {
		var _g = 0;
		var _g1 = this.grindsData.length;
		while(_g < _g1) {
			var i = _g++;
			if(_name == this.grindsData[i].get_name()) {
				return this.grindsData[i];
			}
		}
		return null;
	}
	,findGrindersIndexByName: function(_name) {
		var _g = 0;
		var _g1 = this.grindersData.length;
		while(_g < _g1) {
			var i = _g++;
			if(_name == this.grindersData[i].get_name()) {
				return i;
			}
		}
		return -1;
	}
	,updateItemsAfterLoadMap: function() {
		this.set_autocraftItems([]);
		var crafterNames = [];
		var val = 0;
		var crafterQuantities = [];
		if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Chasm Mine") {
			crafterNames = ["miner","hunter","woodsman","carpenter","smelter","priest","wizard","contractor"];
			val = 5;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > 2) {
					val = 1;
				}
				this.inventoryData.setData(crafterNames[i],val);
			}
			this.get_autocraftItems().push("smelter");
			this.get_autocraftItems().push("priest");
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Lost Mine") {
			crafterNames = ["woodsman","miner","hunter","carpenter"];
			val = 5;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(i == 3) {
					val = 1;
				} else {
					val = 5;
				}
				this.inventoryData.setData(crafterNames[i],val);
			}
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Apothecary School") {
			crafterNames = ["miner","hunter","woodsman","priest","wizard","contractor","carpenter","portal sleigh"];
			val = 5;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > 2) {
					val = 1;
				}
				this.inventoryData.setData(crafterNames[i],val);
			}
			this.get_autocraftItems().push("priest");
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Lie Bury") {
			crafterNames = ["woodsman","hunter","apothecary","carpenter","portal sleigh"];
			val = 1;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				this.inventoryData.setData(crafterNames[i],val);
			}
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Hogquartz") {
			crafterNames = ["miner","hunter","woodsman","wizard","priest","contractor","carpenter","portal sleigh"];
			val = 5;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				if(i > 3) {
					val = 1;
				}
				this.inventoryData.setData(crafterNames[i],val);
			}
			this.get_autocraftItems().push("priest");
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Obsidian Yards") {
			crafterNames = ["hogquartz","woodsman","miner","hunter","gold smith","gold soldier","gold knight","flying knight","ton of apples","mason","carpenter","trap","priest","portal sleigh","alchemist","sergeant","fletcher","ship"];
			crafterQuantities = [1,1,1,1,1,12,4,4,1,1,1,1,1,1,1,1,1,3];
			val = 5;
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				val = crafterQuantities[i];
				this.inventoryData.setData(crafterNames[i],val);
			}
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "Strongs Isle") {
			crafterNames = ["strongs isle","eyes of ender","apothecary","portal sleigh"];
			crafterQuantities = [1,1,1,1];
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				val = crafterQuantities[i];
				this.inventoryData.setData(crafterNames[i],val);
			}
			crafterNames = ["obsidian soldier"];
			var _g = 0;
			var _g1 = crafterNames.length;
			while(_g < _g1) {
				var i = _g++;
				this.inventoryData.setData(crafterNames[i],1);
			}
			this.inventoryData.setData("armada",1);
		} else if(com_coffeebreak_GameProperties.CURRENT_MAP_NAME == "TradingPost") {
			this.inventoryData.setData("emerald",0);
		}
	}
	,update: function() {
		this.grindsData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDS_DATA");
		this.craftersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("CRAFTERS_DATA");
		this.inventoryData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
		this.grindersData = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GRINDERS_DATA");
		this.currentGrindAction = this.grindsData[0].get_name();
		this.updateItemsAfterLoadMap();
	}
	,get_autocraftItems: function() {
		return this.autocraftItems;
	}
	,set_autocraftItems: function(value) {
		return this.autocraftItems = value;
	}
	,__class__: com_coffeebreak_data_GameState
	,__properties__: {set_autocraftItems:"set_autocraftItems",get_autocraftItems:"get_autocraftItems"}
};
var com_coffeebreak_managers_DataManager = function() {
	openfl_events_EventDispatcher.call(this);
	if(com_coffeebreak_CoffeeConstants.LOADER_MANAGER == null) {
		com_coffeebreak_CoffeeConstants.LOADER_MANAGER = new com_coffeebreak_managers_TextureLoaderManager();
	}
	if(com_coffeebreak_CoffeeConstants.SOUND_MANAGER == null) {
		com_coffeebreak_CoffeeConstants.SOUND_MANAGER = new com_coffeebreak_managers_SoundManager();
	}
	if(com_coffeebreak_CoffeeConstants.SETTINGS == null) {
		com_coffeebreak_CoffeeConstants.SETTINGS = new com_coffeebreak_data_SettingsParser();
	}
	if(com_coffeebreak_CoffeeConstants.LANGUAGE_UPDATER == null) {
		com_coffeebreak_CoffeeConstants.LANGUAGE_UPDATER = new com_coffeebreak_managers_LanguageUpdaterManager();
	}
};
$hxClasses["com.coffeebreak.managers.DataManager"] = com_coffeebreak_managers_DataManager;
com_coffeebreak_managers_DataManager.__name__ = "com.coffeebreak.managers.DataManager";
com_coffeebreak_managers_DataManager.__super__ = openfl_events_EventDispatcher;
com_coffeebreak_managers_DataManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	initData: function(_dataPath,_shouldParseSettings) {
		if(_shouldParseSettings == null) {
			_shouldParseSettings = true;
		}
		var xmlString = openfl_utils_Assets.getText(_dataPath);
		this.set_xmlData(Xml.parse(xmlString).firstElement());
		if(_shouldParseSettings) {
			(js_Boot.__cast(com_coffeebreak_CoffeeConstants.SETTINGS , com_coffeebreak_data_SettingsParser)).parse(this.get_xmlData());
		}
	}
	,initLocalisation: function(_dataPath) {
		com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER = new com_coffeebreak_managers_LanguageManager();
		com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.init(_dataPath);
	}
	,get_xmlData: function() {
		return this.xmlData;
	}
	,set_xmlData: function(value) {
		return this.xmlData = value;
	}
	,__class__: com_coffeebreak_managers_DataManager
	,__properties__: {set_xmlData:"set_xmlData",get_xmlData:"get_xmlData"}
});
var com_coffeebreak_data_GrindCraftData = function() {
	com_coffeebreak_managers_DataManager.call(this);
};
$hxClasses["com.coffeebreak.data.GrindCraftData"] = com_coffeebreak_data_GrindCraftData;
com_coffeebreak_data_GrindCraftData.__name__ = "com.coffeebreak.data.GrindCraftData";
com_coffeebreak_data_GrindCraftData.__super__ = com_coffeebreak_managers_DataManager;
com_coffeebreak_data_GrindCraftData.prototype = $extend(com_coffeebreak_managers_DataManager.prototype,{
	initData: function(_dataPath,_shouldParseSettings) {
		if(_shouldParseSettings == null) {
			_shouldParseSettings = true;
		}
		com_coffeebreak_managers_DataManager.prototype.initData.call(this,_dataPath);
		this.initLocalisation("data/languages/" + com_coffeebreak_GameProperties.CURRENT_LANGUAGE + ".xml");
		this.initPositions("data/data.xml","GrindCraft");
	}
	,initPositions: function(_dataPath,_gameName) {
		if(_gameName == null) {
			_gameName = "default";
		}
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER = new com_coffeebreak_managers_PositionManager();
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.addEventListener(com_coffeebreak_managers_PositionManager.DATA_PARSED,$bind(this,this.onPositionDataParsed));
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.set_dictionaryGameName(_gameName);
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.set_stageWidth(com_coffeebreak_CoffeeConstants.BASE_WIDTH);
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.set_stageHeight(com_coffeebreak_CoffeeConstants.BASE_HEIGHT);
		com_coffeebreak_CoffeeConstants.POSITION_MANAGER.init(_dataPath,_gameName);
	}
	,onPositionDataParsed: function(e) {
		this.dispatchEvent(new openfl_events_Event(com_coffeebreak_managers_DataManager.DATA_LOADED));
	}
	,__class__: com_coffeebreak_data_GrindCraftData
});
var com_coffeebreak_data_GrindGenData = function() {
	this.set_name("");
	this.set_percent(0);
};
$hxClasses["com.coffeebreak.data.GrindGenData"] = com_coffeebreak_data_GrindGenData;
com_coffeebreak_data_GrindGenData.__name__ = "com.coffeebreak.data.GrindGenData";
com_coffeebreak_data_GrindGenData.prototype = {
	get_name: function() {
		return this.name;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,set_percent: function(value) {
		return this.percent = value;
	}
	,__class__: com_coffeebreak_data_GrindGenData
	,__properties__: {set_percent:"set_percent",set_name:"set_name",get_name:"get_name"}
};
var com_coffeebreak_data_GrindersData = function() {
	this.setDefault();
};
$hxClasses["com.coffeebreak.data.GrindersData"] = com_coffeebreak_data_GrindersData;
com_coffeebreak_data_GrindersData.__name__ = "com.coffeebreak.data.GrindersData";
com_coffeebreak_data_GrindersData.prototype = {
	setValues: function(_data) {
		var fields = Reflect.fields(_data);
		var _g = 0;
		while(_g < fields.length) {
			var propertyName = fields[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this,propertyName)) {
				Reflect.setProperty(this,propertyName,Reflect.getProperty(_data,propertyName));
				if(propertyName == "generates") {
					var tmpArray = this.get_generates().split(",");
					var _g1 = 0;
					var _g2 = tmpArray.length;
					while(_g1 < _g2) {
						var i = _g1++;
						if(tmpArray[i].indexOf("=") != -1) {
							var a = tmpArray[i].split("=");
							this.get_generatesArray().push(a[0]);
							this.get_generateValues().push(a[1]);
						} else {
							this.get_generatesArray().push(tmpArray[i]);
							this.get_generateValues().push("1");
						}
					}
				}
				if(propertyName == "maxIncrease") {
					this.set_maxIncrease(Std.parseInt(Reflect.getProperty(_data,propertyName)));
				}
			}
		}
	}
	,setDefault: function() {
		this.set_name("");
		this.set_generates("");
		this.set_occurance("");
		this.set_img("");
		this.set_hasReminder(false);
		this.set_totalPercents([]);
		this.set_generatesArray([]);
		this.set_generateValues([]);
		this.set_maxIncrease(0);
	}
	,get_name: function() {
		return this.name;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_generates: function() {
		return this.generates;
	}
	,set_generates: function(value) {
		return this.generates = value;
	}
	,get_occurance: function() {
		return this.occurance;
	}
	,set_occurance: function(value) {
		if(value.indexOf("remainder") != -1) {
			this.set_hasReminder(true);
		}
		return this.occurance = value;
	}
	,get_img: function() {
		return this.img;
	}
	,set_img: function(value) {
		return this.img = value;
	}
	,get_hasReminder: function() {
		return this.hasReminder;
	}
	,set_hasReminder: function(value) {
		return this.hasReminder = value;
	}
	,get_totalPercents: function() {
		return this.totalPercents;
	}
	,set_totalPercents: function(value) {
		return this.totalPercents = value;
	}
	,get_generateValues: function() {
		return this.generateValues;
	}
	,set_generateValues: function(value) {
		return this.generateValues = value;
	}
	,get_generatesArray: function() {
		return this.generatesArray;
	}
	,set_generatesArray: function(value) {
		return this.generatesArray = value;
	}
	,get_maxIncrease: function() {
		return this.maxIncrease;
	}
	,set_maxIncrease: function(value) {
		return this.maxIncrease = value;
	}
	,__class__: com_coffeebreak_data_GrindersData
	,__properties__: {set_maxIncrease:"set_maxIncrease",get_maxIncrease:"get_maxIncrease",set_hasReminder:"set_hasReminder",get_hasReminder:"get_hasReminder",set_totalPercents:"set_totalPercents",get_totalPercents:"get_totalPercents",set_img:"set_img",get_img:"get_img",set_occurance:"set_occurance",get_occurance:"get_occurance",set_generateValues:"set_generateValues",get_generateValues:"get_generateValues",set_generatesArray:"set_generatesArray",get_generatesArray:"get_generatesArray",set_generates:"set_generates",get_generates:"get_generates",set_name:"set_name",get_name:"get_name"}
};
var com_coffeebreak_data_GrindsData = function() {
	this.setDefault();
};
$hxClasses["com.coffeebreak.data.GrindsData"] = com_coffeebreak_data_GrindsData;
com_coffeebreak_data_GrindsData.__name__ = "com.coffeebreak.data.GrindsData";
com_coffeebreak_data_GrindsData.prototype = {
	setValues: function(_data) {
		var fields = Reflect.fields(_data);
		var _g = 0;
		while(_g < fields.length) {
			var propertyName = fields[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this,propertyName)) {
				Reflect.setProperty(this,propertyName,Reflect.getProperty(_data,propertyName));
			}
		}
	}
	,setDefault: function() {
		this.set_name("");
		this.set_img("");
		this.set_drops("");
		this.set_dependency("");
		this.set_timeToBreak("");
		this.set_achievement("");
		this.set_actionIcon("");
		this.set_actionTime(0);
		this.set_soundId("");
		this.set_merge("");
		this.set_mergeArray([]);
	}
	,get_name: function() {
		return this.name;
	}
	,set_name: function(value) {
		return this.name = value;
	}
	,get_img: function() {
		return this.img;
	}
	,set_img: function(value) {
		return this.img = value;
	}
	,get_drops: function() {
		return this.drops;
	}
	,set_drops: function(value) {
		return this.drops = value;
	}
	,get_dependency: function() {
		return this.dependency;
	}
	,set_dependency: function(value) {
		return this.dependency = value;
	}
	,get_timeToBreak: function() {
		return this.timeToBreak;
	}
	,set_timeToBreak: function(value) {
		return this.timeToBreak = value;
	}
	,get_achievement: function() {
		return this.achievement;
	}
	,set_achievement: function(value) {
		return this.achievement = value;
	}
	,get_actionIcon: function() {
		return this.actionIcon;
	}
	,set_actionIcon: function(value) {
		return this.actionIcon = value;
	}
	,get_actionTime: function() {
		return this.actionTime;
	}
	,set_actionTime: function(value) {
		return this.actionTime = value;
	}
	,get_soundId: function() {
		return this.soundId;
	}
	,set_soundId: function(value) {
		return this.soundId = value;
	}
	,set_merge: function(value) {
		this.set_mergeArray(value.split(","));
		return this.merge = value;
	}
	,get_mergeArray: function() {
		return this.mergeArray;
	}
	,set_mergeArray: function(value) {
		return this.mergeArray = value;
	}
	,get_dropsForUpdate: function() {
		return this.dropsForUpdate;
	}
	,set_dropsForUpdate: function(value) {
		return this.dropsForUpdate = value;
	}
	,__class__: com_coffeebreak_data_GrindsData
	,__properties__: {set_dropsForUpdate:"set_dropsForUpdate",get_dropsForUpdate:"get_dropsForUpdate",set_mergeArray:"set_mergeArray",get_mergeArray:"get_mergeArray",set_merge:"set_merge",set_soundId:"set_soundId",get_soundId:"get_soundId",set_actionTime:"set_actionTime",get_actionTime:"get_actionTime",set_actionIcon:"set_actionIcon",get_actionIcon:"get_actionIcon",set_achievement:"set_achievement",get_achievement:"get_achievement",set_timeToBreak:"set_timeToBreak",get_timeToBreak:"get_timeToBreak",set_dependency:"set_dependency",get_dependency:"get_dependency",set_drops:"set_drops",get_drops:"get_drops",set_img:"set_img",get_img:"get_img",set_name:"set_name",get_name:"get_name"}
};
var com_coffeebreak_data_ISettings = function() { };
$hxClasses["com.coffeebreak.data.ISettings"] = com_coffeebreak_data_ISettings;
com_coffeebreak_data_ISettings.__name__ = "com.coffeebreak.data.ISettings";
com_coffeebreak_data_ISettings.__isInterface__ = true;
com_coffeebreak_data_ISettings.prototype = {
	__class__: com_coffeebreak_data_ISettings
};
var com_coffeebreak_data_InventoryData = function() {
	this.inventMap = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.data.InventoryData"] = com_coffeebreak_data_InventoryData;
com_coffeebreak_data_InventoryData.__name__ = "com.coffeebreak.data.InventoryData";
com_coffeebreak_data_InventoryData.prototype = {
	setData: function(_key,_value) {
		this.inventMap.h[_key] = _value;
	}
	,getData: function(_key) {
		if(Object.prototype.hasOwnProperty.call(this.inventMap.h,_key)) {
			return this.inventMap.h[_key];
		}
		return null;
	}
	,reset: function() {
		this.inventMap = new haxe_ds_StringMap();
	}
	,__class__: com_coffeebreak_data_InventoryData
};
var com_coffeebreak_data_ItemTypes = $hxEnums["com.coffeebreak.data.ItemTypes"] = { __ename__:"com.coffeebreak.data.ItemTypes",__constructs__:null
	,MovieClip: {_hx_name:"MovieClip",_hx_index:0,__enum__:"com.coffeebreak.data.ItemTypes",toString:$estr}
	,TextField: {_hx_name:"TextField",_hx_index:1,__enum__:"com.coffeebreak.data.ItemTypes",toString:$estr}
	,Button: {_hx_name:"Button",_hx_index:2,__enum__:"com.coffeebreak.data.ItemTypes",toString:$estr}
	,GameItem: {_hx_name:"GameItem",_hx_index:3,__enum__:"com.coffeebreak.data.ItemTypes",toString:$estr}
};
com_coffeebreak_data_ItemTypes.__constructs__ = [com_coffeebreak_data_ItemTypes.MovieClip,com_coffeebreak_data_ItemTypes.TextField,com_coffeebreak_data_ItemTypes.Button,com_coffeebreak_data_ItemTypes.GameItem];
var com_coffeebreak_data_MapsLoader = function() {
	this.set_mapsLoaderSignal(new msignal_Signal0());
	this.dataParser = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_PARSER");
};
$hxClasses["com.coffeebreak.data.MapsLoader"] = com_coffeebreak_data_MapsLoader;
com_coffeebreak_data_MapsLoader.__name__ = "com.coffeebreak.data.MapsLoader";
com_coffeebreak_data_MapsLoader.prototype = {
	onDataParsed: function() {
		this.dataParser.dataParserSignal.remove($bind(this,this.onDataParsed));
		this.get_mapsLoaderSignal().dispatch();
	}
	,loadMap: function(_mapName) {
		this.dataParser.dataParserSignal.add($bind(this,this.onDataParsed));
		var xmlString = openfl_utils_Assets.getText("data/maps/" + _mapName + ".xml");
		this.xmlData = Xml.parse(xmlString).firstElement();
		this.dataParser.reset();
		this.dataParser.parseData(this.xmlData);
	}
	,get_mapsLoaderSignal: function() {
		return this.mapsLoaderSignal;
	}
	,set_mapsLoaderSignal: function(value) {
		return this.mapsLoaderSignal = value;
	}
	,__class__: com_coffeebreak_data_MapsLoader
	,__properties__: {set_mapsLoaderSignal:"set_mapsLoaderSignal",get_mapsLoaderSignal:"get_mapsLoaderSignal"}
};
var com_coffeebreak_data_MarkerNames = function() { };
$hxClasses["com.coffeebreak.data.MarkerNames"] = com_coffeebreak_data_MarkerNames;
com_coffeebreak_data_MarkerNames.__name__ = "com.coffeebreak.data.MarkerNames";
var com_coffeebreak_data_ParseDataObject = function() {
	this.childAtributes = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.data.ParseDataObject"] = com_coffeebreak_data_ParseDataObject;
com_coffeebreak_data_ParseDataObject.__name__ = "com.coffeebreak.data.ParseDataObject";
com_coffeebreak_data_ParseDataObject.prototype = {
	__class__: com_coffeebreak_data_ParseDataObject
};
var com_coffeebreak_data_PositionData = function() {
	this.set_scaleX(1.0);
	this.set_scaleY(1.0);
};
$hxClasses["com.coffeebreak.data.PositionData"] = com_coffeebreak_data_PositionData;
com_coffeebreak_data_PositionData.__name__ = "com.coffeebreak.data.PositionData";
com_coffeebreak_data_PositionData.prototype = {
	get_scaleX: function() {
		return this.scaleX;
	}
	,set_scaleX: function(value) {
		return this.scaleX = value;
	}
	,get_scaleY: function() {
		return this.scaleY;
	}
	,set_scaleY: function(value) {
		return this.scaleY = value;
	}
	,get_posX: function() {
		return this.posX;
	}
	,set_posX: function(value) {
		return this.posX = value;
	}
	,get_posY: function() {
		return this.posY;
	}
	,set_posY: function(value) {
		return this.posY = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: com_coffeebreak_data_PositionData
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_posY:"set_posY",get_posY:"get_posY",set_posX:"set_posX",get_posX:"get_posX",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX"}
};
var com_coffeebreak_data_ResizeEventRegister = function() {
	com_coffeebreak_data_ResizeEventRegister.funcRegister = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.data.ResizeEventRegister"] = com_coffeebreak_data_ResizeEventRegister;
com_coffeebreak_data_ResizeEventRegister.__name__ = "com.coffeebreak.data.ResizeEventRegister";
com_coffeebreak_data_ResizeEventRegister.callMethod = function() {
	var method = null;
	var h = com_coffeebreak_data_ResizeEventRegister.funcRegister.h;
	var key_h = h;
	var key_keys = Object.keys(h);
	var key_length = key_keys.length;
	var key_current = 0;
	while(key_current < key_length) {
		var key = key_keys[key_current++];
		method = com_coffeebreak_data_ResizeEventRegister.funcRegister.h[key];
		method();
	}
};
com_coffeebreak_data_ResizeEventRegister.prototype = {
	__class__: com_coffeebreak_data_ResizeEventRegister
};
var com_coffeebreak_data_SettingsParser = function() {
	this.settingsMap = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.data.SettingsParser"] = com_coffeebreak_data_SettingsParser;
com_coffeebreak_data_SettingsParser.__name__ = "com.coffeebreak.data.SettingsParser";
com_coffeebreak_data_SettingsParser.__interfaces__ = [com_coffeebreak_data_ISettings];
com_coffeebreak_data_SettingsParser.prototype = {
	parse: function(_data) {
		var child = _data.elements();
		while(child.hasNext()) {
			var child1 = child.next();
			if(child1.elements().hasNext() == false) {
				var ob = child1.attributes();
				if(Reflect.getProperty(ob,"keys").length > 0) {
					var attr = child1.attributes();
					while(attr.hasNext()) {
						var attr1 = attr.next();
						var this1 = this.settingsMap;
						var key = Std.string(child1.get(attr1));
						if(child1.nodeType != Xml.Document && child1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
						}
						var _this = child1.children[0];
						if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
						}
						this1.h[key] = Std.string(_this.nodeValue);
					}
				} else {
					var this2 = this.settingsMap;
					if(child1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
					}
					var key1 = Std.string(child1.nodeName);
					if(child1.nodeType != Xml.Document && child1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
					}
					var _this1 = child1.children[0];
					if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, unexpected " + (_this1.nodeType == null ? "null" : XmlType.toString(_this1.nodeType)));
					}
					this2.h[key1] = Std.string(_this1.nodeValue);
				}
			} else {
				this.tmpArray = [];
				var this3 = this.settingsMap;
				if(child1.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
				}
				this3.h[Std.string(child1.nodeName)] = this.tmpArray;
				var ob1 = child1.attributes();
				var shouldCreateObject = false;
				if(Reflect.getProperty(ob1,"keys").length > 0) {
					var key2 = Reflect.getProperty(ob1,"keys")[0];
					shouldCreateObject = com_coffeebreak_utils_ConvertorUtils.stringToBoolean(child1.get(key2));
				}
				var subchild = child1.elements();
				while(subchild.hasNext()) {
					var subchild1 = subchild.next();
					var ob11 = subchild1.attributes();
					if(shouldCreateObject) {
						var ob2 = subchild1.attributes();
						var pdo = new com_coffeebreak_data_ParseDataObject();
						pdo.key = subchild1.get(Reflect.getProperty(ob2,"keys")[0]);
						if(subchild1.nodeType != Xml.Document && subchild1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (subchild1.nodeType == null ? "null" : XmlType.toString(subchild1.nodeType)));
						}
						var _this2 = subchild1.children[0];
						if(_this2.nodeType == Xml.Document || _this2.nodeType == Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, unexpected " + (_this2.nodeType == null ? "null" : XmlType.toString(_this2.nodeType)));
						}
						pdo.value = _this2.nodeValue;
						var attrArray = Reflect.getProperty(ob11,"keys");
						var _g = 0;
						var _g1 = attrArray.length;
						while(_g < _g1) {
							var n = _g++;
							var this4 = pdo.childAtributes;
							var value = subchild1.get(attrArray[n]);
							this4.h[attrArray[n]] = value;
						}
						this.tmpArray.push(pdo);
					} else {
						var tmp = this.tmpArray;
						if(subchild1.nodeType != Xml.Document && subchild1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (subchild1.nodeType == null ? "null" : XmlType.toString(subchild1.nodeType)));
						}
						var _this3 = subchild1.children[0];
						if(_this3.nodeType == Xml.Document || _this3.nodeType == Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, unexpected " + (_this3.nodeType == null ? "null" : XmlType.toString(_this3.nodeType)));
						}
						tmp.push(_this3.nodeValue);
					}
				}
			}
		}
	}
	,getSettingsString: function(_key) {
		if(this.settingsMap.h[_key] == null) {
			return "";
		}
		return this.settingsMap.h[_key];
	}
	,__class__: com_coffeebreak_data_SettingsParser
};
var com_coffeebreak_data_TestData = function() {
};
$hxClasses["com.coffeebreak.data.TestData"] = com_coffeebreak_data_TestData;
com_coffeebreak_data_TestData.__name__ = "com.coffeebreak.data.TestData";
com_coffeebreak_data_TestData.prototype = {
	get_grinders: function() {
		return this.grinders;
	}
	,set_grinders: function(value) {
		return this.grinders = value;
	}
	,get_grinds: function() {
		return this.grinds;
	}
	,set_grinds: function(value) {
		return this.grinds = value;
	}
	,get_tool: function() {
		return this.tool;
	}
	,set_tool: function(value) {
		return this.tool = value;
	}
	,__class__: com_coffeebreak_data_TestData
	,__properties__: {set_tool:"set_tool",get_tool:"get_tool",set_grinds:"set_grinds",get_grinds:"get_grinds",set_grinders:"set_grinders",get_grinders:"get_grinders"}
};
var com_coffeebreak_data_TextureObject = function() {
	this.set_dispose(null);
};
$hxClasses["com.coffeebreak.data.TextureObject"] = com_coffeebreak_data_TextureObject;
com_coffeebreak_data_TextureObject.__name__ = "com.coffeebreak.data.TextureObject";
com_coffeebreak_data_TextureObject.prototype = {
	get_bmpArray: function() {
		return this.bmpArray;
	}
	,set_bmpArray: function(value) {
		return this.bmpArray = value;
	}
	,get_rect: function() {
		return this.rect;
	}
	,set_rect: function(value) {
		return this.rect = value;
	}
	,get_bmp: function() {
		return this.bmp;
	}
	,set_bmp: function(value) {
		return this.bmp = value;
	}
	,set_dispose: function(value) {
		return this.dispose = value;
	}
	,__class__: com_coffeebreak_data_TextureObject
	,__properties__: {set_dispose:"set_dispose",set_rect:"set_rect",get_rect:"get_rect",set_bmp:"set_bmp",get_bmp:"get_bmp",set_bmpArray:"set_bmpArray",get_bmpArray:"get_bmpArray"}
};
var com_coffeebreak_debug_CoffeeDebugConsole = function() {
	openfl_display_Sprite.call(this);
	this.createTextInfo();
};
$hxClasses["com.coffeebreak.debug.CoffeeDebugConsole"] = com_coffeebreak_debug_CoffeeDebugConsole;
com_coffeebreak_debug_CoffeeDebugConsole.__name__ = "com.coffeebreak.debug.CoffeeDebugConsole";
com_coffeebreak_debug_CoffeeDebugConsole.__super__ = openfl_display_Sprite;
com_coffeebreak_debug_CoffeeDebugConsole.prototype = $extend(openfl_display_Sprite.prototype,{
	createTextInfo: function() {
		this.info = new openfl_text_TextField();
		this.info.set_width(500);
		this.info.set_height(300);
		this.info.set_autoSize(1);
		this.info.set_textColor(16777215);
		this.info.set_background(true);
		this.info.set_backgroundColor(0);
		this.addChild(this.info);
	}
	,__class__: com_coffeebreak_debug_CoffeeDebugConsole
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = "openfl.events.Event";
openfl_events_Event.prototype = {
	isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,__class__: openfl_events_Event
};
var com_coffeebreak_events_CoffeeEvent = function(type,data,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.data = data;
};
$hxClasses["com.coffeebreak.events.CoffeeEvent"] = com_coffeebreak_events_CoffeeEvent;
com_coffeebreak_events_CoffeeEvent.__name__ = "com.coffeebreak.events.CoffeeEvent";
com_coffeebreak_events_CoffeeEvent.__super__ = openfl_events_Event;
com_coffeebreak_events_CoffeeEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: com_coffeebreak_events_CoffeeEvent
});
var com_coffeebreak_managers_FocusManager = function() {
	this.shouldDispatchFocus = false;
	this.isActivated = true;
	this.set_activationSignal(new msignal_Signal1());
	openfl_Lib.get_current().stage.addEventListener("activate",$bind(this,this.onFocusIn));
	openfl_Lib.get_current().stage.addEventListener("deactivate",$bind(this,this.onFocusOut));
};
$hxClasses["com.coffeebreak.managers.FocusManager"] = com_coffeebreak_managers_FocusManager;
com_coffeebreak_managers_FocusManager.__name__ = "com.coffeebreak.managers.FocusManager";
com_coffeebreak_managers_FocusManager.prototype = {
	onFocusOut: function(e) {
		if(this.get_shouldDispatchFocus() == false) {
			return;
		}
		if(this.isActivated == true) {
			this.isActivated = false;
			this.get_activationSignal().dispatch(false);
		}
	}
	,onFocusIn: function(e) {
		if(this.get_shouldDispatchFocus() == false) {
			return;
		}
		if(this.isActivated == false) {
			this.isActivated = true;
			this.get_activationSignal().dispatch(true);
		}
	}
	,get_activationSignal: function() {
		return this.activationSignal;
	}
	,set_activationSignal: function(value) {
		return this.activationSignal = value;
	}
	,get_shouldDispatchFocus: function() {
		return this.shouldDispatchFocus;
	}
	,__class__: com_coffeebreak_managers_FocusManager
	,__properties__: {get_shouldDispatchFocus:"get_shouldDispatchFocus",set_activationSignal:"set_activationSignal",get_activationSignal:"get_activationSignal"}
};
var com_coffeebreak_managers_GrindcraftSaveManager = function() {
	this.set_sol(new com_coffeebreak_managers_SOLManager(com_coffeebreak_managers_GrindcraftSaveManager.DATA_NAME));
	this.localData = this.get_sol().getLocal();
};
$hxClasses["com.coffeebreak.managers.GrindcraftSaveManager"] = com_coffeebreak_managers_GrindcraftSaveManager;
com_coffeebreak_managers_GrindcraftSaveManager.__name__ = "com.coffeebreak.managers.GrindcraftSaveManager";
com_coffeebreak_managers_GrindcraftSaveManager.prototype = {
	saveData: function(_data) {
		this.get_sol().setLocal(_data);
		this.localData = this.get_sol().getLocal();
	}
	,reset: function() {
		this.get_sol().restore();
	}
	,get_sol: function() {
		return this.sol;
	}
	,get_localData: function() {
		return this.localData;
	}
	,set_sol: function(value) {
		return this.sol = value;
	}
	,__class__: com_coffeebreak_managers_GrindcraftSaveManager
	,__properties__: {get_localData:"get_localData",set_sol:"set_sol",get_sol:"get_sol"}
};
var com_coffeebreak_managers_LanguageManager = function() {
	this.languageMap = new haxe_ds_StringMap();
	this.languageSignal = new msignal_Signal0();
};
$hxClasses["com.coffeebreak.managers.LanguageManager"] = com_coffeebreak_managers_LanguageManager;
com_coffeebreak_managers_LanguageManager.__name__ = "com.coffeebreak.managers.LanguageManager";
com_coffeebreak_managers_LanguageManager.prototype = {
	init: function(_path) {
		var xmlString = openfl_utils_Assets.getText(_path);
		var xmlData = Xml.parse(xmlString).firstElement();
		this.parse(xmlData);
	}
	,parse: function(_data) {
		var child = _data.elements();
		while(child.hasNext()) {
			var child1 = child.next();
			if(child1.elements().hasNext() == false) {
				if(child1.attributes() != null) {
					var attr = child1.attributes();
					while(attr.hasNext()) {
						var attr1 = attr.next();
						var this1 = this.languageMap;
						var key = Std.string(child1.get(attr1));
						if(child1.nodeType != Xml.Document && child1.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
						}
						var _this = child1.children[0];
						if(_this.nodeType == Xml.Document || _this.nodeType == Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, unexpected " + (_this.nodeType == null ? "null" : XmlType.toString(_this.nodeType)));
						}
						this1.h[key] = Std.string(_this.nodeValue);
					}
				} else {
					var this2 = this.languageMap;
					if(child1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
					}
					var key1 = Std.string(child1.nodeName);
					if(child1.nodeType != Xml.Document && child1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
					}
					var _this1 = child1.children[0];
					if(_this1.nodeType == Xml.Document || _this1.nodeType == Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, unexpected " + (_this1.nodeType == null ? "null" : XmlType.toString(_this1.nodeType)));
					}
					this2.h[key1] = Std.string(_this1.nodeValue);
				}
			} else {
				var subchild = child1.elements();
				while(subchild.hasNext()) {
					var subchild1 = subchild.next();
					var this3 = this.languageMap;
					var key2 = Std.string(subchild1.get("id"));
					if(subchild1.nodeType != Xml.Document && subchild1.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (subchild1.nodeType == null ? "null" : XmlType.toString(subchild1.nodeType)));
					}
					var _this2 = subchild1.children[0];
					if(_this2.nodeType == Xml.Document || _this2.nodeType == Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, unexpected " + (_this2.nodeType == null ? "null" : XmlType.toString(_this2.nodeType)));
					}
					this3.h[key2] = Std.string(_this2.nodeValue);
				}
			}
		}
		this.get_languageSignal().dispatch();
	}
	,getLocalisationString: function(_key) {
		if(this.languageMap.h[_key] == null) {
			return "";
		}
		return this.languageMap.h[_key];
	}
	,get_languageSignal: function() {
		return this.languageSignal;
	}
	,__class__: com_coffeebreak_managers_LanguageManager
	,__properties__: {get_languageSignal:"get_languageSignal"}
};
var com_coffeebreak_managers_LanguageUpdaterManager = function() {
	this.updateItemMap = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.managers.LanguageUpdaterManager"] = com_coffeebreak_managers_LanguageUpdaterManager;
com_coffeebreak_managers_LanguageUpdaterManager.__name__ = "com.coffeebreak.managers.LanguageUpdaterManager";
com_coffeebreak_managers_LanguageUpdaterManager.prototype = {
	addToLanguageMap: function(_key,_item) {
		if(Object.prototype.hasOwnProperty.call(this.updateItemMap.h,_key) == false) {
			this.updateItemMap.h[_key] = _item;
		}
	}
	,__class__: com_coffeebreak_managers_LanguageUpdaterManager
};
var com_coffeebreak_managers_LayerManager = function() {
	this.holder = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.managers.LayerManager"] = com_coffeebreak_managers_LayerManager;
com_coffeebreak_managers_LayerManager.__name__ = "com.coffeebreak.managers.LayerManager";
com_coffeebreak_managers_LayerManager.prototype = {
	setLayer: function(_id,_layer) {
		this.holder.h[_id] = _layer;
	}
	,getLayer: function(_id) {
		if(Object.prototype.hasOwnProperty.call(this.holder.h,_id)) {
			return this.holder.h[_id];
		}
		return null;
	}
	,__class__: com_coffeebreak_managers_LayerManager
};
var com_coffeebreak_managers_LoadSaveManager = function() {
	this.set_loadSaveSignal(new msignal_Signal1());
	this.logSaver = new com_coffeebreak_utils_LogSaver();
	this.logSaver.get_logSignal().add($bind(this,this.onLogSignal));
};
$hxClasses["com.coffeebreak.managers.LoadSaveManager"] = com_coffeebreak_managers_LoadSaveManager;
com_coffeebreak_managers_LoadSaveManager.__name__ = "com.coffeebreak.managers.LoadSaveManager";
com_coffeebreak_managers_LoadSaveManager.prototype = {
	load: function() {
		this.logSaver.browse();
	}
	,save: function() {
		var s = JSON.stringify(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData());
		this.logSaver.saveLog(s,com_coffeebreak_GameProperties.CURRENT_MAP_NAME + ".json");
	}
	,onLogSignal: function(_type,_data) {
		switch(_type) {
		case "fileloaded":
			this.updateData(_data);
			break;
		case "filesaved":
			this.get_loadSaveSignal().dispatch("DATA_SAVED");
			break;
		}
	}
	,updateData: function(_data) {
		var inventory = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
		inventory.reset();
		var ach = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
		ach.reset();
		var dCollector = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR");
		dCollector.reset();
		var bgs = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS");
		var inventObject;
		var currentMap = "";
		var key = $iterator(openfl_utils_Object)(_data);
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1 == "inventory") {
				inventObject = Reflect.getProperty(_data,key1);
				var key11 = $iterator(openfl_utils_Object)(inventObject);
				while(key11.hasNext()) {
					var key12 = key11.next();
					inventory.setData(key12,Reflect.getProperty(inventObject,key12));
				}
			} else if(key1 == "achievement") {
				inventObject = Reflect.getProperty(_data,key1);
				var key13 = $iterator(openfl_utils_Object)(inventObject);
				while(key13.hasNext()) {
					var key14 = key13.next();
					ach.setAchievement(Std.parseInt(key14),Reflect.getProperty(inventObject,key14));
				}
			} else if(key1 == "grindmenu") {
				var tmpArray = Reflect.getProperty(_data,key1);
				var _g = 0;
				var _g1 = tmpArray.length;
				while(_g < _g1) {
					var i = _g++;
					dCollector.setGrindMenuData(tmpArray[i].ID,tmpArray[i].label,tmpArray[i].img,tmpArray[i].isAutomate,tmpArray[i].automateName,tmpArray[i].grinder);
				}
			} else if(key1 == "BGS") {
				inventObject = Reflect.getProperty(_data,key1);
				bgs.setValues(inventObject);
			} else if(key1 == "MAP") {
				inventObject = Reflect.getProperty(_data,key1);
				var key15 = $iterator(openfl_utils_Object)(inventObject);
				while(key15.hasNext()) {
					var key16 = key15.next();
					dCollector.setMapData(key16,Reflect.getProperty(inventObject,key16));
					if(key16 == "currentLocation") {
						currentMap = Reflect.getProperty(inventObject,key16);
					}
				}
			} else if(key1 == "ACF") {
				var tmpArray1 = [];
				var tmpArray2 = [];
				inventObject = Reflect.getProperty(_data,key1);
				var key17 = $iterator(openfl_utils_Object)(inventObject);
				while(key17.hasNext()) {
					var key18 = key17.next();
					if(key18 == "actf") {
						tmpArray1 = Reflect.getProperty(inventObject,key18);
					} else {
						tmpArray2 = Reflect.getProperty(inventObject,key18);
					}
				}
				var _g2 = 0;
				var _g3 = tmpArray1.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					dCollector.saveAutoCrafters(tmpArray1[i1],tmpArray2[i1]);
				}
			} else if(key1 == "current_menu") {
				com_coffeebreak_GameProperties.LOADED_MENU_NAME = Reflect.getProperty(_data,key1);
			} else if(key1 == "AUTO") {
				dCollector.set_automationData(Reflect.getProperty(_data,key1));
			}
		}
		com_coffeebreak_GameProperties.SAVE_MANAGER.reset();
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
		this.mapsLoader = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("MAP_LOADER");
		this.mapsLoader.get_mapsLoaderSignal().add($bind(this,this.onMapLoaded));
		var tmp = com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData();
		haxe_Log.trace(tmp == null ? "null" : Std.string(tmp),{ fileName : "src/com/coffeebreak/managers/LoadSaveManager.hx", lineNumber : 160, className : "com.coffeebreak.managers.LoadSaveManager", methodName : "updateData"});
		if(currentMap != "") {
			this.setCurrentMapId(currentMap);
			this.mapsLoader.loadMap(com_coffeebreak_utils_TextUtils.replaceDelimiter(currentMap," ",""));
			com_coffeebreak_GameProperties.CURRENT_MAP_NAME = currentMap;
		} else {
			this.mapsLoader.loadMap(com_coffeebreak_GameProperties.LOADED_MENU_NAME);
		}
	}
	,setCurrentMapId: function(_name) {
		var mapData = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers");
		var _g = 0;
		var _g1 = mapData.length;
		while(_g < _g1) {
			var i = _g++;
			var tmpArray = mapData[i].split(",");
			if(tmpArray[0] == _name) {
				com_coffeebreak_GameProperties.CURRENT_MAP_ID = i;
				break;
			}
		}
	}
	,onMapLoaded: function() {
		this.mapsLoader.get_mapsLoaderSignal().remove($bind(this,this.onMapLoaded));
		this.get_loadSaveSignal().dispatch("DATA_UPDATED");
	}
	,get_loadSaveSignal: function() {
		return this.loadSaveSignal;
	}
	,set_loadSaveSignal: function(value) {
		return this.loadSaveSignal = value;
	}
	,__class__: com_coffeebreak_managers_LoadSaveManager
	,__properties__: {set_loadSaveSignal:"set_loadSaveSignal",get_loadSaveSignal:"get_loadSaveSignal"}
};
var com_coffeebreak_managers_PositionManager = function() {
	this.isVerbose = false;
	openfl_events_EventDispatcher.call(this);
	this.positionData = new haxe_ds_StringMap();
	this.set_scenesData(new haxe_ds_StringMap());
	this.games = new haxe_ds_StringMap();
	this.cacheManager = new com_coffeebreak_core_CacheManager();
	this.set_dictionaryGameName("default");
};
$hxClasses["com.coffeebreak.managers.PositionManager"] = com_coffeebreak_managers_PositionManager;
com_coffeebreak_managers_PositionManager.__name__ = "com.coffeebreak.managers.PositionManager";
com_coffeebreak_managers_PositionManager.__super__ = openfl_events_EventDispatcher;
com_coffeebreak_managers_PositionManager.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	init: function(_path,_gameName) {
		if(_gameName == null) {
			_gameName = "default";
		}
		haxe_Log.trace("DATA PATH: " + _path,{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 67, className : "com.coffeebreak.managers.PositionManager", methodName : "init"});
		this.set_currentGameName(_gameName);
		var xmlString = openfl_utils_Assets.getText(_path);
		var xmlData = Xml.parse(xmlString).firstElement();
		this.parse(xmlData);
	}
	,parse: function(_data) {
		var ob;
		var child = _data.elements();
		while(child.hasNext()) {
			var child1 = child.next();
			if(child1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child1.nodeType == null ? "null" : XmlType.toString(child1.nodeType)));
			}
			if(child1.nodeName == "scene") {
				var obArray = [];
				var subChild = child1.elements();
				while(subChild.hasNext()) {
					var subChild1 = subChild.next();
					ob = { };
					var attr = subChild1.attributes();
					while(attr.hasNext()) {
						var attr1 = attr.next();
						var value = Std.string(subChild1.get(attr1));
						Reflect.setProperty(ob,attr1 == null ? "null" : "" + attr1,value);
					}
					obArray.push(ob);
					var this1 = this.positionData;
					var key = Reflect.getProperty(ob,"name");
					this1.h[key] = ob;
				}
				var this2 = this.get_scenesData();
				var key1 = child1.get("name");
				this2.h[key1] = obArray;
			} else {
				ob = { };
				var att = child1.attributes();
				while(att.hasNext()) {
					var att1 = att.next();
					var value1 = Std.string(child1.get(att1));
					Reflect.setProperty(ob,att1 == null ? "null" : "" + att1,value1);
				}
				var this3 = this.positionData;
				var key2 = Reflect.getProperty(ob,"name");
				this3.h[key2] = ob;
			}
		}
		var this1 = this.games;
		var key = this.get_currentGameName();
		this1.h[key] = this.positionData;
		this.dispatchEvent(new openfl_events_Event(com_coffeebreak_managers_PositionManager.DATA_PARSED));
	}
	,getItemPosition: function(_itemName,rect) {
		if(rect == null) {
			rect = new openfl_geom_Rectangle(0,0,100,100);
		}
		if(this.isVerbose) {
			haxe_Log.trace("getItemPosition " + _itemName,{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 335, className : "com.coffeebreak.managers.PositionManager", methodName : "getItemPosition"});
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data == null) {
			if(this.isVerbose) {
				haxe_Log.trace("******************* There isn't assets with the name: " + _itemName + " *************",{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 348, className : "com.coffeebreak.managers.PositionManager", methodName : "getItemPosition"});
			}
			return null;
		}
		var posData = new com_coffeebreak_data_PositionData();
		var position = "";
		position = Reflect.getProperty(_data,"position");
		var percX = 0;
		var percY = 0;
		if(position == "absolute") {
			percX = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_data,"height")));
			posData.set_scaleX(posData.get_scaleX() * this.getScaleX(percX,rect.width));
			posData.set_scaleY(posData.get_scaleY() * this.getScaleY(percY,rect.height));
			posData.set_posX(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_data,"x"))));
			posData.set_posY(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_data,"y"))));
			posData.set_width(percX);
			posData.set_height(percY);
		} else {
			var _holder = { };
			var _holderWidth = 0;
			var _holderHeight = 0;
			var this1 = this.positionData;
			var key = Std.string(Reflect.getProperty(_data,"boxName"));
			_holder = this1.h[key];
			if(_holder == null) {
				_holder = this.findDataInScene(Reflect.getProperty(_data,"boxName"));
			}
			_holderWidth = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_holder,"width")));
			_holderHeight = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_holder,"height")));
			percX = com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"height")));
			posData.set_scaleX(posData.get_scaleX() * this.getScaleX(percX,rect.width));
			posData.set_scaleY(posData.get_scaleY() * this.getScaleY(percY,rect.height));
			posData.set_posX(com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"x"))));
			posData.set_posY(com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"y"))));
			posData.set_width(percX);
			posData.set_height(percY);
		}
		return posData;
	}
	,setItemXY: function(_item,_itemName,rect,_proportion) {
		if(_proportion == null) {
			_proportion = false;
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data == null) {
			if(this.isVerbose) {
				haxe_Log.trace("******************* There isn't assets with the name: " + _itemName + " *************",{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 645, className : "com.coffeebreak.managers.PositionManager", methodName : "setItemXY"});
			}
			return;
		}
		var position = "";
		var percX;
		var percY;
		position = Reflect.getProperty(_data,"position");
		if(position == "absolute") {
			percX = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_data,"height")));
			_item.set_x(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_data,"x"))));
			_item.set_y(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_data,"y"))));
		} else {
			var _holder = { };
			var _holderWidth = 0;
			var _holderHeight = 0;
			var this1 = this.positionData;
			var key = Std.string(Reflect.getProperty(_data,"boxName"));
			_holder = this1.h[key];
			if(_holder == null) {
				_holder = this.findDataInScene(Reflect.getProperty(_data,"boxName"));
			}
			_holderWidth = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_holder,"width")));
			_holderHeight = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_holder,"height")));
			_item.set_x(com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"x"))));
			_item.set_y(com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"y"))));
		}
	}
	,setItemScale: function(_item,_itemName,rect,_proportion,_alternateDimension) {
		if(_proportion == null) {
			_proportion = false;
		}
		if(this.isVerbose) {
			haxe_Log.trace("SET_ITEM_SCALE: " + _itemName,{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 737, className : "com.coffeebreak.managers.PositionManager", methodName : "setItemScale", customParams : [this.get_dictionaryGameName()]});
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data == null) {
			if(this.isVerbose) {
				haxe_Log.trace("******************* There isn't assets with the name: " + _itemName + " *************",{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 750, className : "com.coffeebreak.managers.PositionManager", methodName : "setItemScale"});
			}
			return;
		}
		var percX = 0;
		var percY = 0;
		var localWidth;
		var localHeight;
		var position = "";
		if(_alternateDimension != null) {
			localWidth = Reflect.getProperty(_alternateDimension,"width");
			localHeight = Reflect.getProperty(_alternateDimension,"height");
		} else {
			localWidth = this.get_stageWidth();
			localHeight = this.get_stageHeight();
		}
		position = Reflect.getProperty(_data,"position");
		if(position == "absolute") {
			percX = com_coffeebreak_utils_PercentCounter.getPercent(localWidth,parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(localHeight,parseFloat(Reflect.getProperty(_data,"height")));
			if(_item.get_width() == _item.get_height()) {
				if(js_Boot.__instanceof(openfl_display_Bitmap,_item) == false) {
					_item.set_scaleX(_item.set_scaleY(_item.get_scaleY() * this.getScaleX(percX,rect.width)));
				} else {
					com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinearIterative((js_Boot.__cast(_item , openfl_display_Bitmap)).get_bitmapData(),percX | 0,percY | 0);
				}
			} else if(js_Boot.__instanceof(openfl_display_Bitmap,_item) == false) {
				_item.set_scaleX(_item.get_scaleX() * this.getScaleX(percX,rect.width));
				_item.set_scaleY(_item.get_scaleY() * this.getScaleY(percY,rect.height));
			} else {
				com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinearIterative((js_Boot.__cast(_item , openfl_display_Bitmap)).get_bitmapData(),percX | 0,percY | 0);
			}
		} else {
			var _holder = { };
			var _holderWidth = 0;
			var _holderHeight = 0;
			var this1 = this.positionData;
			var key = Std.string(Reflect.getProperty(_data,"boxName"));
			var _holder = this1.h[key];
			if(_holder == null) {
				_holder = this.findDataInScene(Reflect.getProperty(_data,"boxName"));
			}
			_holderWidth = com_coffeebreak_utils_PercentCounter.getPercent(localWidth,parseFloat(Reflect.getProperty(_holder,"width")));
			_holderHeight = com_coffeebreak_utils_PercentCounter.getPercent(localHeight,parseFloat(Reflect.getProperty(_holder,"height")));
			percX = com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"height")));
			if(_item.get_width() == _item.get_height()) {
				if(js_Boot.__instanceof(openfl_display_Bitmap,_item) == false) {
					_item.set_scaleX(_item.set_scaleY(_item.get_scaleY() * this.getScaleX(percX,rect.width)));
				} else {
					com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinearIterative((js_Boot.__cast(_item , openfl_display_Bitmap)).get_bitmapData(),percX | 0,percY | 0);
				}
			} else if(js_Boot.__instanceof(openfl_display_Bitmap,_item) == false) {
				_item.set_scaleX(_item.get_scaleX() * this.getScaleX(percX,rect.width));
				_item.set_scaleY(_item.get_scaleY() * this.getScaleY(percY,rect.height));
			} else {
				com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinearIterative((js_Boot.__cast(_item , openfl_display_Bitmap)).get_bitmapData(),percX | 0,percY | 0);
			}
		}
	}
	,setTextPosition: function(_item,_itemName,_proportion) {
		if(_proportion == null) {
			_proportion = false;
		}
		if(this.isVerbose) {
			haxe_Log.trace(_itemName,{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 1106, className : "com.coffeebreak.managers.PositionManager", methodName : "setTextPosition"});
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data == null) {
			if(this.isVerbose) {
				haxe_Log.trace("******************* There isn't assets with the name: " + _itemName + " *************",{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 1118, className : "com.coffeebreak.managers.PositionManager", methodName : "setTextPosition"});
			}
			return;
		}
		var position = "";
		var percX = 0;
		var percY = 0;
		var position = "";
		position = Reflect.getProperty(_data,"position");
		if(position == "absolute") {
			percX = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_data,"height")));
			_item.set_width(percX);
			_item.set_height(percY);
			_item.set_x(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),Reflect.getProperty(_data,"x")));
			_item.set_y(com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),Reflect.getProperty(_data,"y")));
		} else {
			var _holder = { };
			var _holderWidth = 0;
			var _holderHeight = 0;
			var this1 = this.positionData;
			var key = Std.string(Reflect.getProperty(_data,"boxName"));
			_holder = this1.h[key];
			if(_holder == null) {
				_holder = this.findDataInScene(Reflect.getProperty(_data,"boxName"));
			}
			_holderWidth = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageWidth(),parseFloat(Reflect.getProperty(_holder,"width")));
			_holderHeight = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_holder,"height")));
			percX = com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"width")));
			percY = com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"height")));
			_item.set_width(percX);
			_item.set_height(percY);
			if(_itemName.indexOf("_box") == -1) {
				_item.set_x(com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"x"))));
				_item.set_y(com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"y"))));
			} else if(_item.parent != null) {
				_item.parent.set_x(com_coffeebreak_utils_PercentCounter.getPercent(_holderWidth,parseFloat(Reflect.getProperty(_data,"x"))));
				_item.parent.set_y(com_coffeebreak_utils_PercentCounter.getPercent(_holderHeight,parseFloat(Reflect.getProperty(_data,"y"))));
			}
		}
		if(Reflect.getProperty(_data,"fontSize")) {
			this.cacheManager.setFontSize(_itemName,Reflect.getProperty(_data,"fontSize"));
			_item.fontSize(this.cacheManager.getFontSize(_itemName));
		}
		_item.set_textColor(Std.parseInt("0x" + Std.string(Reflect.getProperty(_data,"textColor"))));
	}
	,setTextProperties: function(_item,_itemName) {
		if(this.isVerbose) {
			haxe_Log.trace("DICTIONARY NAME: " + this.get_dictionaryGameName(),{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 1266, className : "com.coffeebreak.managers.PositionManager", methodName : "setTextProperties"});
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data == null) {
			if(this.isVerbose) {
				haxe_Log.trace("******************* There isn't assets with the name: " + _itemName + " *************",{ fileName : "com/coffeebreak/managers/PositionManager.hx", lineNumber : 1279, className : "com.coffeebreak.managers.PositionManager", methodName : "setTextProperties"});
			}
			return;
		}
		var tf = _item.get_defaultTextFormat();
		var position = "";
		position = Reflect.getProperty(_data,"position");
		if(tf != null) {
			if(position == "absolute") {
				tf.size = Reflect.getProperty(_data,"fontSize");
			} else {
				var _holder = { };
				var _holderHeight = 0;
				var this1 = this.positionData;
				var key = Std.string(Reflect.getProperty(_data,"boxName"));
				_holder = this1.h[key];
				if(_holder == null) {
					_holder = this.findDataInScene(Reflect.getProperty(_data,"boxName"));
				}
				_holderHeight = com_coffeebreak_utils_PercentCounter.getPercent(this.get_stageHeight(),parseFloat(Reflect.getProperty(_holder,"height")));
				tf.size = Reflect.getProperty(_data,"fontSize");
			}
			tf.color = Std.parseInt("0x" + Std.string(Reflect.getProperty(_data,"textColor")));
			tf.font = Reflect.getProperty(_data,"font");
			var align = "";
			align = Reflect.getProperty(_data,"align");
			switch(align) {
			case "center":
				tf.align = 0;
				break;
			case "left":
				tf.align = 3;
				break;
			case "right":
				tf.align = 4;
				break;
			}
			_item.set_defaultTextFormat(tf);
			_item.setTextFormat(tf);
		}
	}
	,getItemType: function(_itemName) {
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data != null) {
			var type = "";
			type = Reflect.getProperty(_data,"type");
			return type;
		}
		return null;
	}
	,getRegistrationPoint: function(_itemName) {
		if(this.get_dictionaryGameName() == null) {
			return null;
		}
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = null;
		if(pData != null) {
			_data = pData.h[_itemName];
		}
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		if(_data != null) {
			var regPoint = "";
			regPoint = Reflect.getProperty(_data,"regPoint");
			return regPoint;
		}
		return null;
	}
	,findDataInScene: function(_dataId) {
		var h = this.get_scenesData().h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			var scene = this.get_scenesData().h[key];
			var _g = 0;
			var _g1 = scene.length;
			while(_g < _g1) {
				var i = _g++;
				if(_dataId == scene[i].name) {
					return scene[i];
				}
			}
		}
		return null;
	}
	,checkHasItemBox: function(_itemName) {
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		var position = "";
		position = Reflect.getProperty(_data,"position");
		if(position == "absolute") {
			return false;
		}
		return true;
	}
	,getParentBoxName: function(_itemName) {
		var this1 = this.games;
		var key = this.get_dictionaryGameName();
		var pData = this1.h[key];
		var _data = pData.h[_itemName];
		if(_data == null) {
			_data = this.findDataInScene(_itemName);
		}
		var name = "";
		name = Reflect.getProperty(_data,"boxName");
		return name;
	}
	,getScaleX: function(newVal,oldVal) {
		if(oldVal == 0) {
			return newVal;
		}
		var scale = newVal / oldVal;
		return scale;
	}
	,getScaleY: function(newVal,oldVal) {
		if(oldVal == 0) {
			return newVal;
		}
		var scale = newVal / oldVal;
		return scale;
	}
	,get_stageWidth: function() {
		return this.stageWidth;
	}
	,set_stageWidth: function(value) {
		return this.stageWidth = value;
	}
	,get_stageHeight: function() {
		return this.stageHeight;
	}
	,set_stageHeight: function(value) {
		return this.stageHeight = value;
	}
	,get_scenesData: function() {
		return this.scenesData;
	}
	,set_scenesData: function(value) {
		return this.scenesData = value;
	}
	,get_dictionaryGameName: function() {
		return this.dictionaryGameName;
	}
	,set_dictionaryGameName: function(value) {
		return this.dictionaryGameName = value;
	}
	,get_currentGameName: function() {
		return this.currentGameName;
	}
	,set_currentGameName: function(value) {
		return this.currentGameName = value;
	}
	,__class__: com_coffeebreak_managers_PositionManager
	,__properties__: {set_dictionaryGameName:"set_dictionaryGameName",get_dictionaryGameName:"get_dictionaryGameName",set_currentGameName:"set_currentGameName",get_currentGameName:"get_currentGameName",set_stageHeight:"set_stageHeight",get_stageHeight:"get_stageHeight",set_stageWidth:"set_stageWidth",get_stageWidth:"get_stageWidth",set_scenesData:"set_scenesData",get_scenesData:"get_scenesData"}
});
var com_coffeebreak_managers_SOLManager = function(_solName) {
	this.appSharedObject = openfl_net_SharedObject.getLocal(_solName,"/");
	this.lsoHolder = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.managers.SOLManager"] = com_coffeebreak_managers_SOLManager;
com_coffeebreak_managers_SOLManager.__name__ = "com.coffeebreak.managers.SOLManager";
com_coffeebreak_managers_SOLManager.prototype = {
	restore: function() {
		this.appSharedObject.clear();
	}
	,setLocal: function(_data) {
		this.appSharedObject.data.my_data = _data;
		this.appSharedObject.flush();
	}
	,getLocal: function() {
		return this.appSharedObject.data.my_data;
	}
	,__class__: com_coffeebreak_managers_SOLManager
};
var com_coffeebreak_managers_SoundManager = function() {
	this.musicVolume = 1.0;
	this.soundVolume = 1.0;
	this.musicMap = new haxe_ds_StringMap();
	this.soundMap = new haxe_ds_StringMap();
	this.soundPlayingMap = new haxe_ds_StringMap();
	this.musicPlayingMap = new haxe_ds_StringMap();
	this.listenerMap = new haxe_ds_StringMap();
	this.set_soundCompleteSignal(new msignal_Signal1());
	this.set_musicCompleteSignal(new msignal_Signal1());
	this.musicSoundTransform = new openfl_media_SoundTransform();
	this.musicSoundTransform.volume = this.get_musicVolume();
	this.soundTransform = new openfl_media_SoundTransform();
	this.soundTransform.volume = this.get_soundVolume();
	this.set_isMusicMute(false);
	this.set_isSoundMute(false);
	this.isMusicStopped = true;
};
$hxClasses["com.coffeebreak.managers.SoundManager"] = com_coffeebreak_managers_SoundManager;
com_coffeebreak_managers_SoundManager.__name__ = "com.coffeebreak.managers.SoundManager";
com_coffeebreak_managers_SoundManager.prototype = {
	playMusic: function(_soundID,_volume,_repeat,_listenEvent) {
		if(_listenEvent == null) {
			_listenEvent = false;
		}
		if(_repeat == null) {
			_repeat = 9999;
		}
		if(_volume == null) {
			_volume = 1.0;
		}
		this.isMusicStopped = false;
		this.musicRepeat = _repeat;
		this.shouldMusicHaveListener = _listenEvent;
		this.playMusicInternal(_soundID,this.get_musicVolume());
	}
	,playMusicInternal: function(_soundID,_volume) {
		if(_volume == null) {
			_volume = 1.0;
		}
		if(this.get_isMusicMute()) {
			return;
		}
		var snd = openfl_utils_Assets.getSound(com_coffeebreak_managers_SoundManager.SOUNDS_PATH + _soundID);
		if(snd == null) {
			this.soundID = _soundID;
			openfl_utils_Assets.loadSound(com_coffeebreak_managers_SoundManager.SOUNDS_PATH + _soundID,true).onComplete($bind(this,this.onMusicLoaded));
			return;
		}
		this.musicSoundTransform.volume = this.get_musicVolume();
		var channel = snd.play(0.0,this.musicRepeat,this.musicSoundTransform);
		this.currentMusic = snd;
		if(this.shouldMusicHaveListener) {
			channel.addEventListener("soundComplete",$bind(this,this.onMusicComplete));
		}
		if(!Object.prototype.hasOwnProperty.call(this.musicMap.h,_soundID)) {
			this.musicMap.h[_soundID] = channel;
			this.musicPlayingMap.h[_soundID] = snd;
		}
	}
	,stopMusic: function(_soundID) {
		this.isMusicStopped = true;
		this.stopMusicInternal(_soundID);
	}
	,stopMusicInternal: function(_soundID) {
		if(Object.prototype.hasOwnProperty.call(this.musicMap.h,_soundID) == true) {
			this.musicSoundTransform.volume = this.get_musicVolume();
			var channel = this.musicMap.h[_soundID];
			channel.stop();
			channel = null;
			var _this = this.musicMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,_soundID)) {
				delete(_this.h[_soundID]);
			}
			if(Object.prototype.hasOwnProperty.call(this.musicPlayingMap.h,_soundID)) {
				var _this = this.musicPlayingMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,_soundID)) {
					delete(_this.h[_soundID]);
				}
			}
		} else {
			haxe_Log.trace("COFFEE Music ID doesn't exist " + _soundID,{ fileName : "com/coffeebreak/managers/SoundManager.hx", lineNumber : 150, className : "com.coffeebreak.managers.SoundManager", methodName : "stopMusicInternal"});
		}
	}
	,onMusicComplete: function(e) {
		(js_Boot.__cast(e.target , openfl_media_SoundChannel)).removeEventListener("soundComplete",$bind(this,this.onMusicComplete));
		this.get_musicCompleteSignal().dispatch("music_played");
	}
	,playSound: function(_soundID,_listenEvent,_loop,_soundChannel,_shouldUsePath) {
		if(_shouldUsePath == null) {
			_shouldUsePath = true;
		}
		if(_loop == null) {
			_loop = 0;
		}
		if(_listenEvent == null) {
			_listenEvent = false;
		}
		var snd;
		if(_shouldUsePath) {
			snd = openfl_utils_Assets.getSound(com_coffeebreak_managers_SoundManager.SOUNDS_PATH + _soundID);
		} else {
			snd = openfl_utils_Assets.getSound(_soundID);
		}
		if(snd == null) {
			this.shouldHaveListener = _listenEvent;
			if(_shouldUsePath) {
				openfl_utils_Assets.loadSound(com_coffeebreak_managers_SoundManager.SOUNDS_PATH + _soundID,true).onComplete($bind(this,this.onSoundLoaded));
			} else {
				openfl_utils_Assets.loadSound(_soundID,true).onComplete($bind(this,this.onSoundLoaded));
			}
			return;
		}
		if(this.soundMap.h[_soundID] != null) {
			this.stopSound(_soundID);
		}
		this.soundTransform.volume = this.get_soundVolume();
		var channel = snd.play(0.0,_loop,this.soundTransform);
		if(_listenEvent == true) {
			channel.addEventListener("soundComplete",$bind(this,this.onSoundPlayComplete));
			this.listenerMap.h[_soundID] = true;
		}
		this.soundMap.h[_soundID] = channel;
		this.soundPlayingMap.h[_soundID] = snd;
	}
	,stopSound: function(_soundID) {
		if(this.soundMap.h[_soundID] != null) {
			if(this.listenerMap.h[_soundID] != null) {
				this.soundMap.h[_soundID].removeEventListener("soundComplete",$bind(this,this.onSoundPlayComplete));
				var _this = this.listenerMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,_soundID)) {
					delete(_this.h[_soundID]);
				}
			}
			this.soundMap.h[_soundID].stop();
			var _this = this.soundMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,_soundID)) {
				delete(_this.h[_soundID]);
			}
			var _this = this.soundPlayingMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,_soundID)) {
				delete(_this.h[_soundID]);
			}
		}
	}
	,stopAllActiveSounds: function(_music) {
		if(_music == null) {
			_music = true;
		}
		var h = this.soundMap.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			this.stopSound(key);
		}
		if(!_music) {
			return;
		}
		var h = this.musicMap.h;
		var key_h = h;
		var key_keys = Object.keys(h);
		var key_length = key_keys.length;
		var key_current = 0;
		while(key_current < key_length) {
			var key = key_keys[key_current++];
			this.stopMusic(key);
		}
	}
	,muteMusic: function(_musicID) {
		this.set_isMusicMute(true);
		if(Object.prototype.hasOwnProperty.call(this.musicMap.h,_musicID)) {
			this.musicSoundTransform.volume = this.get_musicVolume();
			var channel = this.musicMap.h[_musicID];
			this.musicMutePosition = channel.get_position();
			channel.stop();
		}
	}
	,unmuteMusic: function(_musicID,_volume) {
		if(_volume == null) {
			_volume = 1.0;
		}
		this.set_isMusicMute(false);
		if(Object.prototype.hasOwnProperty.call(this.musicMap.h,_musicID) == true) {
			var channel = this.musicMap.h[_musicID];
			channel.stop();
			channel = null;
			var snd = this.musicPlayingMap.h[_musicID];
			if(snd != null) {
				channel = snd.play(this.musicMutePosition,this.musicRepeat,this.musicSoundTransform);
				this.musicMap.h[_musicID] = channel;
			}
		}
	}
	,adjustMusicVolume: function(_value,_soundID) {
		this.set_musicVolume(_value);
		this.musicSoundTransform.volume = this.get_musicVolume();
		var channel = this.musicMap.h[_soundID];
		if(channel != null) {
			channel.set_soundTransform(this.musicSoundTransform);
		}
	}
	,onSoundLoaded: function(_snd) {
		haxe_Log.trace("sound loaded...",{ fileName : "com/coffeebreak/managers/SoundManager.hx", lineNumber : 383, className : "com.coffeebreak.managers.SoundManager", methodName : "onSoundLoaded"});
		if(this.soundMap.h[this.soundID] != null) {
			this.stopSound(this.soundID);
		}
		this.soundTransform.volume = this.get_soundVolume();
		var channel = _snd.play(0,0,this.soundTransform);
		if(this.shouldHaveListener == true) {
			channel.addEventListener("soundComplete",$bind(this,this.onSoundPlayComplete));
			this.listenerMap.h[this.soundID] = true;
		}
		this.soundMap.h[this.soundID] = channel;
		return _snd;
	}
	,onMusicLoaded: function(_snd) {
		if(this.musicMap.h[this.soundID] != null) {
			this.musicMap.h[this.soundID].stop();
			var key = this.soundID;
			var _this = this.musicMap;
			if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
				delete(_this.h[key]);
			}
		}
		var channel = _snd.play(0.0,this.musicRepeat);
		if(this.shouldMusicHaveListener) {
			channel.addEventListener("soundComplete",$bind(this,this.onMusicComplete));
		}
		this.musicMap.h[this.soundID] = channel;
		return _snd;
	}
	,onSoundPlayComplete: function(_) {
		this.get_soundCompleteSignal().dispatch("soundplayed");
	}
	,get_soundCompleteSignal: function() {
		return this.soundCompleteSignal;
	}
	,set_soundCompleteSignal: function(value) {
		return this.soundCompleteSignal = value;
	}
	,get_isMusicMute: function() {
		return this.isMusicMute;
	}
	,set_isMusicMute: function(value) {
		return this.isMusicMute = value;
	}
	,set_isSoundMute: function(value) {
		return this.isSoundMute = value;
	}
	,get_soundVolume: function() {
		return this.soundVolume;
	}
	,set_soundVolume: function(value) {
		return this.soundVolume = value;
	}
	,get_musicVolume: function() {
		return this.musicVolume;
	}
	,set_musicVolume: function(value) {
		return this.musicVolume = value;
	}
	,get_musicCompleteSignal: function() {
		return this.musicCompleteSignal;
	}
	,set_musicCompleteSignal: function(value) {
		return this.musicCompleteSignal = value;
	}
	,__class__: com_coffeebreak_managers_SoundManager
	,__properties__: {set_musicVolume:"set_musicVolume",get_musicVolume:"get_musicVolume",set_soundVolume:"set_soundVolume",get_soundVolume:"get_soundVolume",set_isSoundMute:"set_isSoundMute",set_isMusicMute:"set_isMusicMute",get_isMusicMute:"get_isMusicMute",set_musicCompleteSignal:"set_musicCompleteSignal",get_musicCompleteSignal:"get_musicCompleteSignal",set_soundCompleteSignal:"set_soundCompleteSignal",get_soundCompleteSignal:"get_soundCompleteSignal"}
};
var com_coffeebreak_managers_TextureLoaderManager = function() {
	this.dataCounter = 0;
	this.LOAD_TYPE_GRAPHICS = "graphics";
	this.dataLoaderSignal = new msignal_Signal0();
	this.imagesHolder = new haxe_ds_StringMap();
	this.rectHolder = new haxe_ds_StringMap();
	this.bmpFontSize = new haxe_ds_StringMap();
	this.jsonDataHolder = new haxe_ds_StringMap();
	this.animationAtlasHolder = new haxe_ds_StringMap();
	this.animationJsonHolder = new haxe_ds_StringMap();
	this.set_atlasDataHolder(new haxe_ds_StringMap());
	this.set_animationSeqDataHolder(new haxe_ds_StringMap());
	this.init();
	this.spritesheetParser = new com_coffeebreak_utils_SpriteSheetParser();
	com_coffeebreak_managers_TextureLoaderManager.xmlBuffer = new haxe_ds_StringMap();
	com_coffeebreak_managers_TextureLoaderManager.bmpBuffer = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.managers.TextureLoaderManager"] = com_coffeebreak_managers_TextureLoaderManager;
com_coffeebreak_managers_TextureLoaderManager.__name__ = "com.coffeebreak.managers.TextureLoaderManager";
com_coffeebreak_managers_TextureLoaderManager.prototype = {
	init: function() {
		this.queueHolder = [];
		this.imageLoadCounter = 0;
		this.soundLoadCounter = 0;
		this.animationLoadCounter = 0;
		this.animationLoadStep = 0;
		this.animationSequenceCounter = 0;
		this.dataCounter = 0;
		this.soundToLoad = "";
		this.set_soundsLoadHolder([]);
		this.soundDataKeys = [];
		this.currentLoadingType = this.LOAD_TYPE_GRAPHICS;
	}
	,getSequenceImage: function(_itemName) {
		var bmpSource;
		var tileId = false;
		var sequence = [];
		var imgCounter = 1;
		var rect = null;
		var name = _itemName + this.convertCounterToString(imgCounter);
		if(Object.prototype.hasOwnProperty.call(this.rectHolder.h,name)) {
			while(Object.prototype.hasOwnProperty.call(this.rectHolder.h,name)) {
				rect = this.rectHolder.h[name];
				bmpSource = openfl_utils_Assets.getBitmapData(name);
				sequence.push(bmpSource);
				++imgCounter;
				name = _itemName + this.convertCounterToString(imgCounter);
			}
		}
		var to = new com_coffeebreak_data_TextureObject();
		to.set_bmpArray(sequence);
		to.set_rect(rect);
		return to;
	}
	,getImage: function(_itemName) {
		var io;
		if(Object.prototype.hasOwnProperty.call(this.rectHolder.h,_itemName)) {
			io = new com_coffeebreak_data_TextureObject();
			io.set_bmp(new openfl_display_Bitmap(openfl_utils_Assets.getBitmapData(_itemName)));
			io.set_rect(this.rectHolder.h[_itemName]);
			return io;
		}
		return null;
	}
	,convertCounterToString: function(_counter) {
		if(_counter < 10) {
			return Std.string("00" + _counter);
		}
		if(_counter >= 10 && _counter < 100) {
			return Std.string("0" + _counter);
		}
		if(_counter >= 100) {
			return Std.string("0" + _counter);
		}
		return "";
	}
	,set_soundsLoadHolder: function(value) {
		return this.soundsLoadHolder = value;
	}
	,set_atlasDataHolder: function(value) {
		return this.atlasDataHolder = value;
	}
	,set_animationSeqDataHolder: function(value) {
		return this.animationSeqDataHolder = value;
	}
	,__class__: com_coffeebreak_managers_TextureLoaderManager
	,__properties__: {set_animationSeqDataHolder:"set_animationSeqDataHolder",set_atlasDataHolder:"set_atlasDataHolder",set_soundsLoadHolder:"set_soundsLoadHolder"}
};
var com_coffeebreak_screens_AlertScreen = function() {
	com_coffeebreak_screens_BaseShadowScreen.call(this);
	this.isNewLocation = false;
	this.gotoLocation = false;
	this.initScreen();
};
$hxClasses["com.coffeebreak.screens.AlertScreen"] = com_coffeebreak_screens_AlertScreen;
com_coffeebreak_screens_AlertScreen.__name__ = "com.coffeebreak.screens.AlertScreen";
com_coffeebreak_screens_AlertScreen.__super__ = com_coffeebreak_screens_BaseShadowScreen;
com_coffeebreak_screens_AlertScreen.prototype = $extend(com_coffeebreak_screens_BaseShadowScreen.prototype,{
	initScreen: function() {
		this.addChild(this.shadowScreen);
		this.holder = new openfl_display_Sprite();
		this.addChild(this.holder);
		var panel = new com_coffeebreak_core_GameItem("mainPanelSkin.png","mainPanelSkin");
		this.holder.addChild(panel);
		this.mainTxt = com_coffeebreak_utils_TextUtils.createText("mainPanelTxt",null,"pauseL");
		this.mainTxt.set_autoSize(0);
		this.mainTxt.set_multiline(true);
		this.mainTxt.set_wordWrap(true);
		this.mainTxt.set_embedFonts(true);
		this.holder.addChild(this.mainTxt);
		var btts_0 = "";
		this.buttonsHolder = [];
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_","panelBtt" + 1);
		btt.set_ID(1);
		btt.initButtonText("panelBttTxt","test");
		btt.alignTextWithSkin();
		this.addButton(btt);
		this.holder.addChild(btt);
		this.buttonsHolder[0] = btt;
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_","panelBtt" + 2);
		btt.set_ID(2);
		btt.initButtonText("panelBttTxt","test");
		btt.alignTextWithSkin();
		this.addButton(btt);
		this.holder.addChild(btt);
		this.buttonsHolder[1] = btt;
		var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_","panelBtt" + 3);
		btt.set_ID(3);
		btt.initButtonText("panelBttTxt","test");
		btt.alignTextWithSkin();
		this.addButton(btt);
		this.holder.addChild(btt);
		this.buttonsHolder[2] = btt;
		var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("mainPanel_box");
		this.holder.set_x(pd.get_posX());
		this.holder.set_y(pd.get_posY());
		this.set_visible(false);
	}
	,showAlert: function(_type,_msg) {
		this.currentAlertType = _type;
		if(_msg != null) {
			this.msg = com_coffeebreak_utils_TextUtils.replaceDelimiter(_msg,"{NL}","\n");
		}
		this.switchType(_type);
		this.show();
	}
	,show: function() {
		com_coffeebreak_screens_BaseShadowScreen.prototype.show.call(this);
		this.set_visible(true);
		haxe_Log.trace(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("pauseL"),{ fileName : "src/com/coffeebreak/screens/AlertScreen.hx", lineNumber : 104, className : "com.coffeebreak.screens.AlertScreen", methodName : "show"});
	}
	,hide: function(_isAuto) {
		if(_isAuto == null) {
			_isAuto = false;
		}
		com_coffeebreak_screens_BaseShadowScreen.prototype.hide.call(this,_isAuto);
		this.set_visible(false);
	}
	,updateMessagge: function(_msg) {
		if(_msg != null) {
			this.msg = com_coffeebreak_utils_TextUtils.replaceDelimiter(_msg,"{NL}","\n");
		}
		this.mainTxt.set_text(this.msg);
	}
	,switchType: function(_type) {
		if(_type == com_coffeebreak_data_AlertTypes.SETTINGS) {
			this.mainTxt.set_visible(false);
			this.setOKState();
		} else if(_type == com_coffeebreak_data_AlertTypes.PAUSE) {
			this.mainTxt.set_visible(true);
			this.buttonsHolder[0].set_visible(false);
			this.buttonsHolder[1].set_visible(false);
			this.buttonsHolder[2].updateLabel(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("resume"));
			this.buttonsHolder[2].set_visible(true);
		} else if(_type == com_coffeebreak_data_AlertTypes.START) {
			this.mainTxt.set_text(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("startL"));
			this.mainTxt.set_visible(true);
			this.buttonsHolder[0].updateLabel(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("play"));
			this.buttonsHolder[0].set_visible(true);
			this.buttonsHolder[1].updateLabel(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("how"));
			this.buttonsHolder[1].set_visible(true);
			this.buttonsHolder[2].set_visible(false);
		} else if(_type == com_coffeebreak_data_AlertTypes.WIN) {
			this.isNewLocation = true;
			if(this.msg != null) {
				this.mainTxt.set_text(this.msg);
			} else {
				this.mainTxt.set_text(com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("game_win"),"{NL}","\n"));
			}
			this.mainTxt.set_visible(true);
			this.setOKState();
		} else if(_type == com_coffeebreak_data_AlertTypes.MSG) {
			this.mainTxt.set_text(this.msg);
			this.setOKState();
		} else if(_type == com_coffeebreak_data_AlertTypes.GOTO) {
			this.mainTxt.set_text(this.msg);
			this.setOKState();
			this.gotoLocation = true;
		} else if(_type == com_coffeebreak_data_AlertTypes.ALERT) {
			this.mainTxt.set_text(this.msg);
			this.setNoButtonState();
		}
	}
	,setOKState: function() {
		this.buttonsHolder[0].set_visible(false);
		this.buttonsHolder[1].set_visible(false);
		this.buttonsHolder[2].set_visible(true);
		this.buttonsHolder[2].updateLabel(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("ok"));
	}
	,setNoButtonState: function() {
		var _g = 0;
		var _g1 = this.buttonsHolder.length;
		while(_g < _g1) {
			var i = _g++;
			this.buttonsHolder[i].set_visible(false);
		}
	}
	,onClick: function(e) {
		com_coffeebreak_screens_BaseShadowScreen.prototype.onClick.call(this,e);
		if(this.isNewLocation) {
			this.get_screenSignal().dispatch("NEW_LOCATION");
			this.isNewLocation = false;
			return;
		}
		if(this.gotoLocation) {
			this.gotoLocation = false;
			this.get_screenSignal().dispatch("GOTO_LOCATION");
			return;
		}
		if(this.get_targetItem().get_ID() == 3) {
			this.hide();
			this.get_screenSignal().dispatch("CLOSE");
			return;
		}
		this.get_screenSignal().dispatch(this.get_targetItem().get_name());
	}
	,__class__: com_coffeebreak_screens_AlertScreen
});
var com_coffeebreak_screens_GameScreen = function(_isTutorial) {
	if(_isTutorial == null) {
		_isTutorial = false;
	}
	this.newAlertMsg = "";
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_screenName("GameScreen");
	com_coffeebreak_GameProperties.IS_TUTORIAL = _isTutorial;
	this.newAlertMsg = "";
};
$hxClasses["com.coffeebreak.screens.GameScreen"] = com_coffeebreak_screens_GameScreen;
com_coffeebreak_screens_GameScreen.__name__ = "com.coffeebreak.screens.GameScreen";
com_coffeebreak_screens_GameScreen.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_screens_GameScreen.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		this.layerManager = new com_coffeebreak_managers_LayerManager();
		var layers = ["MAIN_MENU","ACH_PANEL","MAP","GRIND_MENU","MAIN_GRID","HOVER_ITEM_PANEL","MAIN_MENU","ALERT","PARTICLE","SETTINGS","BEAT"];
		var _g = 0;
		var _g1 = layers.length;
		while(_g < _g1) {
			var i = _g++;
			var sp = new openfl_display_Sprite();
			this.addChild(sp);
			this.layerManager.setLayer(layers[i],sp);
		}
		this.mapLoader = new com_coffeebreak_data_MapsLoader();
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("GAME_STATE",new com_coffeebreak_data_GameState());
		(js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GAME_STATE") , com_coffeebreak_data_GameState)).updateItemsAfterLoadMap();
		this.dataCollector = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR");
		this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
		this.bgs = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS");
		var gLabel = com_coffeebreak_utils_TextUtils.createText("grindLabel",null,"grindLabel");
		gLabel.set_embedFonts(true);
		this.addChild(gLabel);
		this.mainMenu = new com_coffeebreak_components_MainMenu();
		this.mainMenu.init();
		this.mainMenu.get_menuSignal().add($bind(this,this.onTopMenuSignal));
		this.layerManager.getLayer("MAIN_MENU").addChild(this.mainMenu);
		this.grindMenu = new com_coffeebreak_components_GrindMenu();
		this.grindMenu.get_grindSignal().add($bind(this,this.onGrindSignal));
		this.layerManager.getLayer("GRIND_MENU").addChild(this.grindMenu);
		this.grindMenu.init();
		this.achPanel = new com_coffeebreak_components_AchievementPanel();
		this.layerManager.getLayer("ACH_PANEL").addChild(this.achPanel);
		this.mainItemsGrid = new com_coffeebreak_components_MainItemsGrid();
		this.mainItemsGrid.get_craftedSignal().add($bind(this,this.onCraftedSignal));
		if(!com_coffeebreak_GameProperties.IS_TUTORIAL) {
			if(this.bgs.get_mergeInventory()) {
				this.mainItemsGrid.createLayout(true);
			} else {
				this.mainItemsGrid.createLayout(false);
			}
		} else {
			if(this.achPanel.itemsHolder.length > 0) {
				com_coffeebreak_GameProperties.IS_TUTORIAL = false;
				this.bgs.set_mergeInventory(false);
			}
			this.mainItemsGrid.createLayout(false);
		}
		this.layerManager.getLayer("MAIN_GRID").addChild(this.mainItemsGrid);
		this.map = new com_coffeebreak_components_GrindMap(this.grindMenu);
		this.map.get_mapSignal().add($bind(this,this.onMapSignal));
		this.map.init();
		this.map.set_visible(false);
		this.layerManager.getLayer("MAP").addChild(this.map);
		this.checkMap();
		var howerItemPanel = new com_coffeebreak_components_HowerItemPanel();
		this.mainItemsGrid.howerItemPanel = howerItemPanel;
		this.layerManager.getLayer("HOVER_ITEM_PANEL").addChild(howerItemPanel);
		this.alertScreen = new com_coffeebreak_screens_AlertScreen();
		this.alertScreen.get_screenSignal().add($bind(this,this.onAlertSignal));
		this.layerManager.getLayer("ALERT").addChild(this.alertScreen);
		this.layerManager.getLayer("PARTICLE").addChild(this.pe);
		if(com_coffeebreak_GameProperties.IS_TUTORIAL) {
			this.tutorScreen = new com_coffeebreak_screens_TutorialScreen();
			this.tutorScreen.get_tutorialSignal().add($bind(this,this.onTutorialSignal));
			this.tutorScreen.init();
			this.addChild(this.tutorScreen);
			this.tutorScreen.showTutorial();
			this.mainMenu.set_visible(false);
		}
		this.settingsScreen = new com_coffeebreak_screens_SettingsScreen();
		this.settingsScreen.get_settingsSignal().add($bind(this,this.onSettingsSignal));
		this.layerManager.getLayer("SETTINGS").addChild(this.settingsScreen);
		this.beatPanel = new com_coffeebreak_components_BeatPanel();
		this.beatPanel.get_screenSignal().add($bind(this,this.onBeatSignal));
		this.layerManager.getLayer("BEAT").addChild(this.beatPanel);
		com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.setComponent("SETTINGS",this.settingsScreen);
		this.loadSaveManager = new com_coffeebreak_managers_LoadSaveManager();
		this.loadSaveManager.get_loadSaveSignal().add($bind(this,this.onSaveLoadSignal));
	}
	,onSaveLoadSignal: function(_data) {
		var _gthis = this;
		if(_data == "DATA_SAVED") {
			this.alertScreen.updateMessagge(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("save_game_ok"));
			this.tm = openfl_Lib.setTimeout(function() {
				openfl_Lib.clearTimeout(_gthis.tm);
				_gthis.alertScreen.hide();
				_gthis.playAll();
			},1500);
		} else {
			this.alertScreen.updateMessagge(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("loaded_game_ok"));
			this.tm = openfl_Lib.setTimeout(function() {
				openfl_Lib.clearTimeout(_gthis.tm);
				_gthis.alertScreen.hide();
				_gthis.dispatchCoffeeEvent({ action : "PLAY_LOADED"});
			},1500);
		}
	}
	,setItemToLayer: function(_id,_item) {
		this.layerManager.getLayer(_id).addChild(_item);
	}
	,checkMap: function() {
		if(Reflect.getProperty(this.dataCollector.get_mapObj(),"currentLocation") != null) {
			this.map.setSavedData(this.dataCollector.get_mapObj());
			this.map.set_visible(true);
		}
		this.map.stopAllMarkersBlinking();
		this.map.locationClicked();
	}
	,onMapSignal: function(_type,_val) {
		if(_type == "SIZE") {
			this.achPanel.adjustPositionAccordingMap(_val);
		}
		if(_type == "MARKER") {
			com_coffeebreak_GameProperties.CURRENT_MAP_ID = (js_Boot.__cast(_val , com_coffeebreak_components_MapMarker)).get_ID();
			this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.GOTO,com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("goto"),"{LBL}",(js_Boot.__cast(_val , com_coffeebreak_components_MapMarker)).get_markerName()));
		}
	}
	,onTutorialSignal: function(_val) {
		if(_val < 100) {
			this.mainItemsGrid.updateTutorial(_val);
		} else {
			this.mainMenu.set_visible(true);
		}
	}
	,onGrindSignal: function(_drops,_ach) {
		var tmpArray = _drops.split("=");
		this.mainItemsGrid.updateCraftersData(tmpArray[0],tmpArray[1]);
		if(_ach != null) {
			this.achPanel.addAchievement(_ach);
		}
		if(com_coffeebreak_GameProperties.IS_TUTORIAL) {
			this.tutorScreen.updateTutorial();
		}
	}
	,onCraftedSignal: function(_type,_data) {
		if(_type == "ACH") {
			var aItem = new com_coffeebreak_data_AchItem();
			var tmpArray = _data.split("=");
			aItem.txt = tmpArray[0];
			aItem.img = tmpArray[1];
			this.achPanel.addAchievement(aItem);
			this.saveGame();
		} else if(_type == "GAME_END") {
			var msg = com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("game_win"),"{NL}","\n");
			this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.END,msg);
			this.pauseAll(true);
			this.map.set_isOpenTravel(true);
			var tmp = this.map;
			var fh = this.map;
			var lhs = fh.get_beatLocation();
			fh.set_beatLocation(lhs + 1);
			tmp.set_beatLocation(lhs);
			if(this.map.getCurrentLocation() != com_coffeebreak_data_MarkerNames.TRADING_POST) {
				this.map.setMarkerCompleted(this.map.getCurrentLocation());
			}
		} else if(_type == "MAP_ACTIVE") {
			this.map.set_visible(true);
			this.map.set_isActive(true);
			this.map.addNewMarker(_data);
			this.achPanel.adjustPositionAccordingMap(this.map.getMapHeight());
			this.dataCollector.saveMap(this.map.getMarkers(),this.map.getCurrentLocation(),this.map.get_isActive(),this.map.get_isOpenTravel(),this.map.get_isCollapsed(),this.map.get_beatLocation());
			this.saveGame();
		} else if(_type == "NEW_MAP") {
			if(this.map.getCurrentLocation() == com_coffeebreak_data_MarkerNames.TRADING_POST) {
				this.newAlertMsg = _data.split("-")[0];
				this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.WIN,com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("tp_build"));
			} else {
				if(this.map.isMarkerCompleted(this.map.getCurrentLocation())) {
					return;
				}
				if(this.map.getCurrentLocation() != com_coffeebreak_data_MarkerNames.STRONG_ISLE) {
					this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.WIN,com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("beat_msg"),"{LBL}",this.map.getCurrentLocation()));
				}
			}
			this.map.setMarkerCompleted(this.map.getCurrentLocation());
			_data = com_coffeebreak_utils_TextUtils.replaceDelimiter(_data,"-",",");
			this.map.addNewMarker(_data,false);
			this.dataCollector.saveMap(this.map.getMarkers(),this.map.getCurrentLocation(),this.map.get_isActive(),this.map.get_isOpenTravel(),this.map.get_isCollapsed(),this.map.get_beatLocation());
			this.saveGame();
		} else if(_type == "PURCHASE") {
			this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.MSG,com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("purchase"));
		} else if(_type == "BEAT_LOCATION") {
			var tmp = this.map;
			var fh = this.map;
			var lhs = fh.get_beatLocation();
			fh.set_beatLocation(lhs + 1);
			tmp.set_beatLocation(lhs);
		} else if(_type == "SPEED_POTION") {
			this.grindMenu.setPotionSpeed();
		} else if(_type == "HIDE_GRIND") {
			this.grindMenu.stopGrindItem(_data);
		} else if(this.grindMenu != null) {
			this.grindMenu.updateGrindMenu(_type,_data);
			this.saveGame();
		}
		if(com_coffeebreak_GameProperties.IS_TUTORIAL) {
			this.tutorScreen.updateTutorial();
		}
	}
	,onSettingsSignal: function(_data,_val) {
		switch(_data) {
		case "CB2":
			this.mainItemsGrid.createLayout(_val);
			this.bgs.set_mergeInventory(_val);
			this.saveGame();
			break;
		case "DELETE_GAME":
			com_coffeebreak_GameProperties.SAVE_MANAGER.reset();
			this.dataCollector.reset();
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.stopAllActiveSounds();
			this.bgs.setDefaultValues();
			this.dispatchCoffeeEvent({ action : "START"});
			break;
		case "LOAD_GAME":
			this.alertScreen.showAlert(com_coffeebreak_data_AlertTypes.MSG,com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("loaded_game_msg"));
			this.loadSaveManager.load();
			break;
		case "SAVE":
			this.playAll();
			this.saveGame();
			break;
		case "SAVE_DATA":
			this.saveGame();
			break;
		case "SAVE_GAME":
			this.alertScreen.showAlert(com_coffeebreak_data_AlertTypes.ALERT,com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("save_game_msg"));
			this.loadSaveManager.save();
			break;
		}
		com_coffeebreak_GameProperties.IS_GAME_PAUSED = false;
	}
	,pauseAll: function(_exceptParticles) {
		if(_exceptParticles == null) {
			_exceptParticles = false;
		}
		com_coffeebreak_GameProperties.IS_GAME_PAUSED = true;
		if(!_exceptParticles) {
			this.pe.isPaused = true;
		}
		this.grindMenu.gamePause();
		if(!com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_isMusicMute()) {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.muteMusic(this.bgs.musicID + ".ogg");
		}
	}
	,playAll: function() {
		com_coffeebreak_GameProperties.IS_GAME_PAUSED = false;
		this.grindMenu.gameContinue();
		this.pe.isPaused = false;
		if(com_coffeebreak_CoffeeConstants.SOUND_MANAGER.get_isMusicMute()) {
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.unmuteMusic(this.bgs.musicID + ".ogg");
		}
	}
	,saveGame: function() {
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
	}
	,onTopMenuSignal: function(_value) {
		switch(_value) {
		case "fullScrnBtt":
			break;
		case "pauseBtt":
			this.alertScreen.showAlert(com_coffeebreak_data_AlertTypes.PAUSE);
			this.pauseAll();
			window.externalCallManagerInstance.callEvent("haxeInitiatedPause");
			break;
		case "settingsBtt":
			this.settingsScreen.show();
			this.pauseAll();
			break;
		}
	}
	,onAlertSignal: function(_val) {
		if(_val == "CLOSE") {
			if(this.newAlertMsg != "") {
				if(this.newAlertMsg == "CahasmMine") {
					this.alertScreen.showAlert(com_coffeebreak_data_AlertTypes.MSG,com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("check_map"),"{LBL}",this.newAlertMsg));
					this.newAlertMsg = "";
				}
			} else {
				window.externalCallManagerInstance.callEvent("haxeInitiatedUnpause");
				this.playAll();
			}
		}
	}
	,onBeatSignal: function(_val) {
		if(_val == "NEW_LOCATION") {
			var curMapID = com_coffeebreak_GameProperties.CURRENT_MAP_ID + 1;
			var tmpArray = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers")[curMapID].split(",");
			this.map.addNewMarker(com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers")[curMapID],false);
			this.dataCollector.saveMap(this.map.getMarkers(),this.map.getCurrentLocation(),this.map.get_isActive(),this.map.get_isOpenTravel(),this.map.get_isCollapsed(),this.map.get_beatLocation());
			this.saveGame();
			this.beatPanel.showAlert(com_coffeebreak_data_AlertTypes.MSG,com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("check_map"),"{LBL}",tmpArray[0]));
			if(window.externalCallManagerInstance != null) {
				window.externalCallManagerInstance.callEvent("haxeInitiatedNewLocationUnlocked");
			}
		} else if(_val == "GOTO_LOCATION") {
			if(this.map.getCurrentLocation() != com_coffeebreak_data_MarkerNames.TRADING_POST) {
				this.map.disableCurrMarker(com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers")[com_coffeebreak_GameProperties.CURRENT_MAP_ID],false);
			}
			var tmpArray = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers")[com_coffeebreak_GameProperties.CURRENT_MAP_ID].split(",");
			this.map.setCurrentMarkerByName(tmpArray[0]);
			this.mapLoader.get_mapsLoaderSignal().add($bind(this,this.onMapLoaded));
			this.mapLoader.loadMap(com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("maps")[com_coffeebreak_GameProperties.CURRENT_MAP_ID]);
			this.beatPanel.hide();
		}
	}
	,onMapLoaded: function() {
		this.mapLoader.get_mapsLoaderSignal().remove($bind(this,this.onMapLoaded));
		(js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("GAME_STATE") , com_coffeebreak_data_GameState)).update();
		com_coffeebreak_GameProperties.CURRENT_MAP_NAME = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers")[com_coffeebreak_GameProperties.CURRENT_MAP_ID].split(",")[0];
		this.grindMenu.resetMenuForNewLoc();
		this.mainItemsGrid.resetGrid();
		this.dataCollector.saveMap(this.map.getMarkers(),this.map.getCurrentLocation(),this.map.get_isActive(),this.map.get_isOpenTravel(),this.map.get_isCollapsed(),this.map.get_beatLocation());
		this.saveGame();
	}
	,pauseGame: function() {
		if(!com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			this.onTopMenuSignal("pauseBtt");
			com_coffeebreak_CoffeeConstants.SOUND_MANAGER.muteMusic(this.bgs.musicID + ".ogg");
		}
	}
	,unpauseGame: function() {
		if(com_coffeebreak_GameProperties.IS_GAME_PAUSED) {
			this.alertScreen.hide();
			this.playAll();
		}
	}
	,updateDataFromDebugPanel: function(_key,_value) {
		this.mainItemsGrid.updateCraftersData(_key,_value);
	}
	,stopAutomation: function() {
		this.grindMenu.stopAutomation();
	}
	,playBeatParticlesDbg: function() {
		this.beatPanel.playMsgParticles();
	}
	,setGrinderInvisible: function(_data) {
		var data = _data.split(",");
		this.grindMenu.setGrinderInvisible(data[0],data[1]);
	}
	,callExternal: function(_type) {
		if(window.externalCallManagerInstance != null) {
			window.externalCallManagerInstance.callEvent(_type);
		}
	}
	,__class__: com_coffeebreak_screens_GameScreen
});
var com_coffeebreak_screens_SettingsScreen = function() {
	this.soundMinutes = 10;
	com_coffeebreak_screens_BaseShadowScreen.call(this);
	this.baseGameSettings = js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS") , com_coffeebreak_data_BaseGameSettings);
	this.set_settingsSignal(new msignal_Signal2());
	this.addChild(this.shadowScreen);
	this.holder = new openfl_display_Sprite();
	this.addChild(this.holder);
	var panel = new com_coffeebreak_core_GameItem("mainPanelSkin.png","settingsPanelBcg");
	this.holder.addChild(panel);
	this.tabs = [];
	var icons_0 = "iconInfo.png";
	var icons_1 = "iconSound.png";
	var icons_2 = "iconParticles.png";
	var icons_3 = "iconLayout.png";
	var icons_4 = "iconTrash.png";
	var icons_5 = "iconSave.png";
	var btt;
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 1);
	btt.set_ID(1);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_0);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 2);
	btt.set_ID(2);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_1);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 3);
	btt.set_ID(3);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_2);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 4);
	btt.set_ID(4);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_3);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 5);
	btt.set_ID(5);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_4);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	btt = new com_coffeebreak_components_SwitchButton("tab_","tab" + 6);
	btt.set_ID(6);
	btt.set_autoSwitch(true);
	btt.addIcon(icons_5);
	this.holder.addChild(btt);
	this.addButton(btt);
	this.tabs.push(btt);
	this.okBtt = new com_coffeebreak_core_CoffeeButton("panelBtt_","settOKBtt");
	this.okBtt.set_ID(10);
	this.okBtt.initButtonText("panelBttTxt",null,"ok");
	this.okBtt.alignTextWithSkin();
	this.addButton(this.okBtt);
	this.holder.addChild(this.okBtt);
	this.currentTab = this.tabs[0];
	this.currentTab.switchState();
	this.currentState = 0;
	this.createScreens();
	this.holder.addChild(this.screens[this.currentState]);
	var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("settingsPanel_box");
	this.popUptext = new com_coffeebreak_components_PopupTxt();
	this.popUptext.set_y(pd.get_posY() - 65);
	this.holder.set_x(pd.get_posX());
	this.holder.set_y(pd.get_posY());
	this.set_visible(false);
};
$hxClasses["com.coffeebreak.screens.SettingsScreen"] = com_coffeebreak_screens_SettingsScreen;
com_coffeebreak_screens_SettingsScreen.__name__ = "com.coffeebreak.screens.SettingsScreen";
com_coffeebreak_screens_SettingsScreen.__super__ = com_coffeebreak_screens_BaseShadowScreen;
com_coffeebreak_screens_SettingsScreen.prototype = $extend(com_coffeebreak_screens_BaseShadowScreen.prototype,{
	createScreens: function() {
		this.screens = [];
		var sp;
		var labels;
		var txt;
		var pd;
		var cbNames = [];
		var _g = 0;
		while(_g < 6) {
			var i = _g++;
			sp = new openfl_display_Sprite();
			this.screens[i] = sp;
			if(i == 0) {
				this.mainTxt = com_coffeebreak_utils_TextUtils.createText("infoSettTxt",null,"sInfo");
				sp.addChild(this.mainTxt);
			} else if(i == 1) {
				labels = ["sSfx","sMusic"];
				txt = com_coffeebreak_utils_TextUtils.createText("settTxt" + 1,null,labels[0]);
				txt.set_autoSize(1);
				sp.addChild(txt);
				var slider = new feathers_controls_HSlider();
				slider.set_width(150);
				slider.set_name(labels[0]);
				slider.set_minimum(0.0);
				slider.set_maximum(100.0);
				slider.set_step(1.0);
				slider.set_value(this.baseGameSettings.get_sfxVolume() * 100);
				slider.addEventListener("change",$bind(this,this.sliderChangeHandler));
				this.createMouseEvents(slider);
				slider.set_x(txt.get_x() + txt.get_width());
				slider.set_y(txt.get_y());
				sp.addChild(slider);
				labels = ["sSfx","sMusic"];
				txt = com_coffeebreak_utils_TextUtils.createText("settTxt" + 2,null,labels[1]);
				txt.set_autoSize(1);
				sp.addChild(txt);
				var slider1 = new feathers_controls_HSlider();
				slider1.set_width(150);
				slider1.set_name(labels[1]);
				slider1.set_minimum(0.0);
				slider1.set_maximum(100.0);
				slider1.set_step(1.0);
				slider1.set_value(this.baseGameSettings.get_musicVolume() * 100);
				slider1.addEventListener("change",$bind(this,this.sliderChangeHandler));
				this.createMouseEvents(slider1);
				slider1.set_x(txt.get_x() + txt.get_width());
				slider1.set_y(txt.get_y());
				sp.addChild(slider1);
			} else if(i == 2) {
				txt = com_coffeebreak_utils_TextUtils.createText("settTxt3",null,"particlesL");
				txt.set_autoSize(1);
				sp.addChild(txt);
				pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("settSlider2");
				var slider2 = new feathers_controls_HSlider();
				slider2.set_name("particles");
				slider2.set_minimum(0.0);
				slider2.set_maximum(100.0);
				slider2.set_step(1.0);
				slider2.set_value(this.baseGameSettings.get_particles());
				slider2.addEventListener("change",$bind(this,this.sliderChangeHandler));
				this.createMouseEvents(slider2);
				slider2.set_x(txt.get_x() + txt.get_width());
				slider2.set_y(txt.get_y());
				sp.addChild(slider2);
			} else if(i == 3) {
				cbNames = ["ly1","ly2"];
				labels = ["layoutL1","layoutL2"];
				txt = com_coffeebreak_utils_TextUtils.createText("settTxt" + 4,null,labels[0]);
				txt.set_autoSize(1);
				sp.addChild(txt);
				pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("cBox" + 1);
				var check = new feathers_controls_Check();
				check.set_name(cbNames[0]);
				check.set_x(pd.get_posX());
				check.set_y(pd.get_posY());
				check.addEventListener("change",$bind(this,this.checkChangeHandler));
				sp.addChild(check);
				labels = ["layoutL1","layoutL2"];
				txt = com_coffeebreak_utils_TextUtils.createText("settTxt" + 5,null,labels[1]);
				txt.set_autoSize(1);
				sp.addChild(txt);
				pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("cBox" + 2);
				var check1 = new feathers_controls_Check();
				check1.set_name(cbNames[1]);
				check1.set_x(pd.get_posX());
				check1.set_y(pd.get_posY());
				check1.addEventListener("change",$bind(this,this.checkChangeHandler));
				sp.addChild(check1);
				if(!com_coffeebreak_GameProperties.IS_TUTORIAL && this.baseGameSettings.get_mergeInventory()) {
					check1.set_selected(true);
				}
			} else if(i == 4) {
				var btt = new com_coffeebreak_components_PanelButton("panelBtt_","deleteGameBtt");
				btt.set_ID(11);
				btt.setButtonColor();
				btt.initButtonText("panelBttTxt1",null,"deleteGame");
				this.addButton(btt);
				sp.addChild(btt);
			} else {
				var lIds = ["load_game","save_game"];
				var bttPos = ["updateGame","saveGame"];
				var bttIDStart = 12;
				var _g1 = 0;
				var _g2 = lIds.length;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var btt1 = new com_coffeebreak_core_CoffeeButton("panelBtt_",bttPos[i1]);
					btt1.set_ID(bttIDStart);
					btt1.initButtonText("panelBttTxt",null,lIds[i1]);
					btt1.alignTextWithSkin();
					this.addButton(btt1);
					sp.addChild(btt1);
					++bttIDStart;
				}
			}
		}
	}
	,createMouseEvents: function(_handler) {
		_handler.addEventListener("mouseDown",$bind(this,this.onMDown));
		_handler.addEventListener("mouseUp",$bind(this,this.onMUp));
		_handler.addEventListener("mouseMove",$bind(this,this.onMMOve));
		_handler.addEventListener("releaseOutside",$bind(this,this.onMUp));
	}
	,onMMOve: function(e) {
		this.popUptext.set_x(this.get_mouseX() - this.popUptext.get_width() / 2);
	}
	,onMUp: function(e) {
		this.removeChild(this.popUptext);
	}
	,onMDown: function(e) {
		this.popUptext.set_x(this.get_mouseX() - this.popUptext.get_width() / 2);
		this.popUptext.update(com_coffeebreak_utils_ConvertorUtils.floatToStringTwoDecimal((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value()));
		this.addChild(this.popUptext);
	}
	,checkChangeHandler: function(e) {
		switch((js_Boot.__cast(e.currentTarget , feathers_controls_Check)).get_name()) {
		case "err":
			break;
		case "ly1":
			this.get_settingsSignal().dispatch("CB1",(js_Boot.__cast(e.currentTarget , feathers_controls_Check)).get_selected());
			break;
		case "ly2":
			this.get_settingsSignal().dispatch("CB2",(js_Boot.__cast(e.currentTarget , feathers_controls_Check)).get_selected());
			break;
		case "particles":
			this.get_settingsSignal().dispatch("SAVE_DATA");
			break;
		}
	}
	,sliderChangeHandler: function(e) {
		switch((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_name()) {
		case "particles":
			this.baseGameSettings.setParticles((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value() | 0);
			break;
		case "sMusic":
			this.baseGameSettings.setMusicVolume((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value() | 0);
			break;
		case "sSfx":
			this.baseGameSettings.setSfxVolume((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value() | 0);
			break;
		}
		this.get_settingsSignal().dispatch("SAVE_DATA");
		if((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_name() != "particles") {
			this.popUptext.update(com_coffeebreak_utils_ConvertorUtils.floatToStringTwoDecimal((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value()));
		} else {
			this.popUptext.update(com_coffeebreak_utils_ConvertorUtils.floatToStringTwoDecimal((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value() | 0));
		}
	}
	,switchScreen: function(_screenID) {
		if(_screenID == null) {
			this.holder.removeChild(this.screens[this.currentState]);
		} else {
			if(_screenID == 4) {
				this.okBtt.parent.removeChild(this.okBtt);
			} else if(this.okBtt.parent == null) {
				this.holder.addChild(this.okBtt);
			}
			this.holder.addChild(this.screens[_screenID]);
		}
	}
	,getSoundsDelay: function() {
		return this.soundMinutes * 60 * 1000;
	}
	,show: function() {
		com_coffeebreak_screens_BaseShadowScreen.prototype.show.call(this);
		this.set_visible(true);
	}
	,hide: function(_isAuto) {
		if(_isAuto == null) {
			_isAuto = false;
		}
		com_coffeebreak_screens_BaseShadowScreen.prototype.hide.call(this,_isAuto);
		this.set_visible(false);
	}
	,onClick: function(e) {
		com_coffeebreak_screens_BaseShadowScreen.prototype.onClick.call(this,e);
		if(this.get_targetItem().get_name() == "deleteGameBtt") {
			this.get_settingsSignal().dispatch("DELETE_GAME");
			return;
		}
		if(this.get_targetItem().get_ID() == 10) {
			this.hide();
			this.get_settingsSignal().dispatch("SAVE");
		} else if(this.get_targetItem().get_ID() == 12) {
			this.hide();
			this.get_settingsSignal().dispatch("LOAD_GAME");
		} else if(this.get_targetItem().get_ID() == 13) {
			this.hide();
			this.get_settingsSignal().dispatch("SAVE_GAME");
		} else {
			if(this.currentTab != null) {
				this.currentTab.switchState();
			}
			this.currentTab = this.tabs[this.get_targetItem().get_ID() - 1];
			this.switchScreen();
			this.currentState = this.get_targetItem().get_ID() - 1;
			this.switchScreen(this.currentState);
		}
	}
	,get_settingsSignal: function() {
		return this.settingsSignal;
	}
	,set_settingsSignal: function(value) {
		return this.settingsSignal = value;
	}
	,__class__: com_coffeebreak_screens_SettingsScreen
	,__properties__: $extend(com_coffeebreak_screens_BaseShadowScreen.prototype.__properties__,{set_settingsSignal:"set_settingsSignal",get_settingsSignal:"get_settingsSignal"})
});
var com_coffeebreak_screens_StartScreen = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_screenName("StartScreen");
	if(window.externalCallManagerInstance != null) {
		window.externalCallManagerInstance.callEvent("haxeInitiatedGameLoaded");
	}
	this.alertScreen = new com_coffeebreak_screens_AlertScreen();
	this.alertScreen.get_screenSignal().add($bind(this,this.onAlertSignal));
	this.addChild(this.alertScreen);
	this.alertScreen.showAlert(com_coffeebreak_data_AlertTypes.START);
};
$hxClasses["com.coffeebreak.screens.StartScreen"] = com_coffeebreak_screens_StartScreen;
com_coffeebreak_screens_StartScreen.__name__ = "com.coffeebreak.screens.StartScreen";
com_coffeebreak_screens_StartScreen.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_screens_StartScreen.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	onAlertSignal: function(_data) {
		if(_data == "panelBtt1") {
			this.dispatchCoffeeEvent({ action : "PLAY"});
		} else {
			this.dispatchCoffeeEvent({ action : "TUTOR"});
		}
		this.alertScreen.hide();
	}
	,__class__: com_coffeebreak_screens_StartScreen
});
var com_coffeebreak_screens_TutorialScreen = function() {
	com_coffeebreak_core_BaseScreen.call(this);
	this.set_tutorialSignal(new msignal_Signal1());
	this.set_screenName("TutorialScreen");
};
$hxClasses["com.coffeebreak.screens.TutorialScreen"] = com_coffeebreak_screens_TutorialScreen;
com_coffeebreak_screens_TutorialScreen.__name__ = "com.coffeebreak.screens.TutorialScreen";
com_coffeebreak_screens_TutorialScreen.__super__ = com_coffeebreak_core_BaseScreen;
com_coffeebreak_screens_TutorialScreen.prototype = $extend(com_coffeebreak_core_BaseScreen.prototype,{
	init: function() {
		this.tutorialSteps = 0;
		this.maxSteps = 8;
		var names = ["mainBigBtt_box","achPanel_box","craftBox"];
		this.positions = [];
		var _g = 0;
		var _g1 = names.length;
		while(_g < _g1) {
			var i = _g++;
			var pd1 = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition(names[i]);
			this.positions.push(pd1);
		}
		this.panel = new com_coffeebreak_components_TutorPanel();
		this.panel.get_alertSignal().add($bind(this,this.onPanelSignal));
		this.addChild(this.panel);
		this.set_visible(false);
	}
	,showTutorial: function() {
		this.set_visible(true);
		this.tutorialSteps = 1;
		this.updateTutorial();
	}
	,updateTutorial: function() {
		var txt = com_coffeebreak_utils_TextUtils.replaceDelimiter(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("tut" + this.tutorialSteps),"{NL}","\n");
		this.panel.updateText(txt);
		if(this.tutorialSteps == 1) {
			this.panel.setPanel(this.positions[0].get_posX() + this.positions[0].get_width() - 20,this.positions[0].get_posY() - this.positions[0].get_height() / 2 + 10,1);
			this.panel.setArrow(1);
		} else if(this.tutorialSteps == 2) {
			this.panel.setPanel(this.positions[1].get_posX() + this.positions[1].get_width(),this.positions[1].get_posY() - this.panel.panelHalfVal / 2,1);
			this.panel.setArrow(1);
		} else if(this.tutorialSteps == 3) {
			this.panel.setPanel(this.positions[2].get_posX() + 70,this.positions[2].get_posY() - 40,2);
			this.panel.setArrow(2);
		} else if(this.tutorialSteps == 4) {
			this.panel.setPanel(this.positions[2].get_posX() + this.positions[2].get_width() / 2,this.positions[2].get_posY() - 50,2);
			this.panel.setArrow(1);
		} else if(this.tutorialSteps == 6) {
			this.panel.setPanel(this.positions[2].get_posX() + this.positions[2].get_width() - 100,com_coffeebreak_CoffeeConstants.BASE_HEIGHT / 2 - this.panel.panelHalfVal / 2,2);
			this.panel.setArrow(1);
		} else if(this.tutorialSteps == 7) {
			this.panel.setArrow(0);
			this.panel.setPanel(com_coffeebreak_CoffeeConstants.BASE_WIDTH / 2,com_coffeebreak_CoffeeConstants.BASE_HEIGHT / 2 - this.panel.panelHalfVal / 2,2);
		}
		this.tutorialSteps++;
		if(this.tutorialSteps == 3 || this.tutorialSteps == 6) {
			this.panel.geButton().set_visible(true);
		}
		if(this.tutorialSteps == 5) {
			this.panel.geButton().set_visible(false);
		}
	}
	,onPanelSignal: function(_val) {
		if(_val == 1) {
			this.updateTutorial();
			if(this.tutorialSteps == this.maxSteps) {
				this.panel.updateButton(com_coffeebreak_CoffeeConstants.LANGUAGE_MANAGER.getLocalisationString("ok"),2);
			}
			this.get_tutorialSignal().dispatch(this.tutorialSteps);
		} else {
			com_coffeebreak_GameProperties.IS_TUTORIAL = false;
			this.parent.removeChild(this);
			this.get_tutorialSignal().dispatch(100);
		}
	}
	,get_tutorialSignal: function() {
		return this.tutorialSignal;
	}
	,set_tutorialSignal: function(value) {
		return this.tutorialSignal = value;
	}
	,__class__: com_coffeebreak_screens_TutorialScreen
	,__properties__: $extend(com_coffeebreak_core_BaseScreen.prototype.__properties__,{set_tutorialSignal:"set_tutorialSignal",get_tutorialSignal:"get_tutorialSignal"})
});
var com_coffeebreak_utils_ArrayUtil = function() { };
$hxClasses["com.coffeebreak.utils.ArrayUtil"] = com_coffeebreak_utils_ArrayUtil;
com_coffeebreak_utils_ArrayUtil.__name__ = "com.coffeebreak.utils.ArrayUtil";
com_coffeebreak_utils_ArrayUtil.deepCopy = function(arr) {
	var r = [];
	var _g = 0;
	var _g1 = arr.length;
	while(_g < _g1) {
		var i = _g++;
		r.push(com_coffeebreak_utils_ArrayUtil.copy(arr[i]));
	}
	return r;
};
com_coffeebreak_utils_ArrayUtil.copy = function(value) {
	if(((value) instanceof Array)) {
		return com_coffeebreak_utils_ArrayUtil.deepCopy(value);
	} else {
		return value;
	}
};
com_coffeebreak_utils_ArrayUtil.randomizeArray = function(array) {
	var newArray = [];
	while(array.length > 0) newArray.push(array.splice(Math.floor(Math.random() * array.length),1)[0]);
	return newArray;
};
var com_coffeebreak_utils_ConvertorUtils = function() { };
$hxClasses["com.coffeebreak.utils.ConvertorUtils"] = com_coffeebreak_utils_ConvertorUtils;
com_coffeebreak_utils_ConvertorUtils.__name__ = "com.coffeebreak.utils.ConvertorUtils";
com_coffeebreak_utils_ConvertorUtils.stringToBoolean = function(_value) {
	if(_value.toLowerCase() == "true") {
		return true;
	}
	return false;
};
com_coffeebreak_utils_ConvertorUtils.boolToInt = function(_val) {
	if(_val) {
		return 1;
	}
	return 0;
};
com_coffeebreak_utils_ConvertorUtils.floatToStringTwoDecimal = function(_value) {
	_value = Math.round(_value * 100) / 100;
	var str = _value == null ? "null" : "" + _value;
	var index = str.indexOf(".");
	if(str.length == 3) {
		if(index != -1) {
			str += "0";
		} else {
			str += ".00";
		}
	} else if(index != -1) {
		if(str.length - (index + 1) == 0) {
			str += "00";
		} else if(str.length - (index + 1) == 1) {
			str += "0";
		}
	} else {
		str += ".00";
	}
	return str;
};
var com_coffeebreak_utils_DebugPanel = function() {
	this.newLine = "\n";
	this.baseGameSettings = js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS") , com_coffeebreak_data_BaseGameSettings);
	this.pe = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("PARTICLE_EFFECT");
	com_coffeebreak_screens_AlertScreen.call(this);
	this.combinOpen = [16,65,83];
	this.combinClose = [16,84];
	this.currentCombin = [];
	com_coffeebreak_CoffeeConstants.STAGE.addEventListener("keyDown",$bind(this,this.onKeyDown));
	com_coffeebreak_CoffeeConstants.STAGE.addEventListener("keyUp",$bind(this,this.onKeyUp));
	this.logSaver = new com_coffeebreak_utils_LogSaver();
	this.logSaver.get_logSignal().add($bind(this,this.onLogSignal));
	this.timer = new openfl_utils_Timer(1000);
	this.timer.addEventListener("timer",$bind(this,this.onTimer));
};
$hxClasses["com.coffeebreak.utils.DebugPanel"] = com_coffeebreak_utils_DebugPanel;
com_coffeebreak_utils_DebugPanel.__name__ = "com.coffeebreak.utils.DebugPanel";
com_coffeebreak_utils_DebugPanel.__super__ = com_coffeebreak_screens_AlertScreen;
com_coffeebreak_utils_DebugPanel.prototype = $extend(com_coffeebreak_screens_AlertScreen.prototype,{
	onTimer: function(e) {
		this.seconds++;
		if(this.seconds >= 60) {
			this.seconds = 0;
			this.minutes++;
		}
		this.displayTime();
		if(this.timer.currentCount == this.currentTime * 60) {
			this.timer.stop();
			(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.stopTest();
			var fh = this.infoTestText;
			fh.set_text(fh.get_text() + (this.newLine + "CRAFTED ITEMS: " + (js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.getCraftersNum()));
			var fh = this.infoTestText;
			fh.set_text(fh.get_text() + (this.newLine + "::::::::::::: END TEST :::::::::::::::::::::::::::"));
		}
	}
	,startTimer: function() {
		this.seconds = 0;
		this.minutes = 0;
		this.timer.reset();
		this.timer.start();
		this.displayTime();
		this.infoTestText.set_text("");
		this.infoTestText.set_text("::::::::::::: START TEST :::::::::::::::::::::::::::" + this.newLine);
		var fh = this.infoTestText;
		fh.set_text(fh.get_text() + (js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.getTestData());
		var fh = this.infoTestText;
		fh.set_text(fh.get_text() + ("COLLECTION TIME: " + this.currentTime + this.newLine));
		var fh = this.infoTestText;
		fh.set_text(fh.get_text() + ("ESTIMATED CRAFT: " + (js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.calculateEstimatedDrops(this.currentTime * 60)));
	}
	,displayTime: function() {
		var minStr = "";
		var secStr = "";
		if(this.minutes < 10) {
			minStr = "0" + this.minutes;
		} else {
			minStr = Std.string(this.minutes);
		}
		if(this.seconds < 10) {
			secStr = "0" + this.seconds;
		} else {
			secStr = Std.string(this.seconds);
		}
		this.clockTxt.set_text(minStr + ":" + secStr);
	}
	,onLogSignal: function(_type,_data) {
		switch(_type) {
		case "fileloaded":
			this.buttonsHolder[0].set_visible(false);
			this.buttonsHolder[1].set_visible(false);
			this.buttonsHolder[2].set_visible(true);
			this.updateData(_data);
			break;
		case "filesaved":
			this.infoText.set_text("File successfully saved!");
			this.buttonsHolder[0].set_visible(false);
			this.buttonsHolder[1].set_visible(false);
			this.buttonsHolder[2].set_visible(true);
			break;
		}
	}
	,onKeyUp: function(e) {
		this.currentCombin = [];
	}
	,onKeyDown: function(e) {
		haxe_Log.trace(this.currentCombin,{ fileName : "src/com/coffeebreak/utils/DebugPanel.hx", lineNumber : 224, className : "com.coffeebreak.utils.DebugPanel", methodName : "onKeyDown"});
		if(this.parent == null) {
			if(this.currentCombin.length < 3) {
				this.currentCombin.push(e.keyCode);
			}
			if(this.currentCombin.length == 3) {
				var shouldOpen = true;
				var _g = 0;
				var _g1 = this.currentCombin.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.currentCombin[i] != this.combinOpen[i]) {
						shouldOpen = false;
					}
				}
				if(shouldOpen) {
					this.currentCombin = [];
					this.show();
				}
			}
		} else {
			if(this.currentCombin.length < 2) {
				this.currentCombin.push(e.keyCode);
			}
			if(this.currentCombin.length == 2) {
				var shouldClose = true;
				var _g = 0;
				var _g1 = this.currentCombin.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.currentCombin[i] != this.combinClose[i]) {
						shouldClose = false;
					}
				}
				if(shouldClose) {
					this.currentCombin = [];
					this.hide();
				}
			}
		}
	}
	,initScreen: function() {
		this.addChild(this.shadowScreen);
		this.holder = new openfl_display_Sprite();
		this.addChild(this.holder);
		this.prompts = ["input item name","input item value"];
		var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("dbgPanel_box");
		var panel = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),11513775);
		this.holder.addChild(panel);
		this.mainTxt = com_coffeebreak_utils_TextUtils.createText("debugLabel","DEBUG PANEL");
		this.mainTxt.set_embedFonts(true);
		this.holder.addChild(this.mainTxt);
		pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("topDrag");
		var td = com_coffeebreak_utils_SimplePrimitive.createRect(pd.get_width(),pd.get_height(),11513804);
		this.setDraggable(td);
		this.holder.addChild(td);
		this.tabs = [];
		var icons_0 = "iconInfo.png";
		var icons_1 = "iconBug.png";
		var icons_2 = "iconBug.png";
		var btt;
		btt = new com_coffeebreak_components_SwitchButton("tab_","dbgTab" + 1);
		btt.set_name("TAB" + 1);
		btt.set_ID(1);
		btt.set_autoSwitch(true);
		btt.addIcon(icons_0);
		this.holder.addChild(btt);
		this.addButton(btt);
		this.tabs.push(btt);
		btt = new com_coffeebreak_components_SwitchButton("tab_","dbgTab" + 2);
		btt.set_name("TAB" + 2);
		btt.set_ID(2);
		btt.set_autoSwitch(true);
		btt.addIcon(icons_1);
		this.holder.addChild(btt);
		this.addButton(btt);
		this.tabs.push(btt);
		btt = new com_coffeebreak_components_SwitchButton("tab_","dbgTab" + 3);
		btt.set_name("TAB" + 3);
		btt.set_ID(3);
		btt.set_autoSwitch(true);
		btt.addIcon(icons_2);
		this.holder.addChild(btt);
		this.addButton(btt);
		this.tabs.push(btt);
		this.currentTab = this.tabs[0];
		this.currentTab.switchState();
		this.currentState = 0;
		this.createScreens();
		this.holder.addChild(this.screens[this.currentState]);
		this.holder.set_x(pd.get_posX());
		this.holder.set_y(pd.get_posY());
	}
	,createScreens: function() {
		this.screens = [];
		var sp;
		var txt;
		this.prompts1 = ["CHOSE GRINDERS","CHOSE GRINDS","CHOOSE TOOL"];
		var _g = 0;
		while(_g < 3) {
			var i = _g++;
			sp = new openfl_display_Sprite();
			this.screens[i] = sp;
			if(i == 0) {
				this.infoText = com_coffeebreak_utils_TextUtils.createText("debugInfo","");
				sp.addChild(this.infoText);
				var btts_0 = "loadBtt";
				var btts_1 = "saveBtt";
				var btts_2 = "dbgOKBtt";
				var langKeys_0 = "load";
				var langKeys_1 = "save";
				var langKeys_2 = "ok";
				this.buttonsHolder = [];
				var btt = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_0);
				btt.set_ID(0);
				btt.initButtonText("panelBttTxt",null,langKeys_0);
				this.addButton(btt);
				sp.addChild(btt);
				this.buttonsHolder[0] = btt;
				var btt1 = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_1);
				btt1.set_ID(1);
				btt1.initButtonText("panelBttTxt",null,langKeys_1);
				this.addButton(btt1);
				sp.addChild(btt1);
				this.buttonsHolder[1] = btt1;
				var btt2 = new com_coffeebreak_core_CoffeeButton("panelBtt_",btts_2);
				btt2.set_ID(2);
				btt2.initButtonText("panelBttTxt",null,langKeys_2);
				this.addButton(btt2);
				sp.addChild(btt2);
				this.buttonsHolder[2] = btt2;
				this.buttonsHolder[2].set_visible(false);
			} else if(i == 1) {
				this.inputTxt = [];
				txt = com_coffeebreak_utils_TextUtils.createText("dbgInputTxt","");
				txt.set_name("one");
				txt.set_border(true);
				txt.set_type(1);
				txt.set_selectable(true);
				txt.setSelection(0,0);
				txt.set_embedFonts(true);
				txt.set_text(this.prompts[0]);
				sp.addChild(txt);
				txt.addEventListener("change",$bind(this,this.onSelect));
				txt.addEventListener("focusIn",$bind(this,this.onFocusIN));
				txt.addEventListener("focusOut",$bind(this,this.onFocusOut));
				this.inputTxt.push(txt);
				txt = com_coffeebreak_utils_TextUtils.createText("dbgInputTxt1","");
				txt.set_embedFonts(true);
				txt.set_border(true);
				txt.set_selectable(true);
				txt.setSelection(0,0);
				txt.set_type(1);
				txt.set_text(this.prompts[1]);
				txt.addEventListener("change",$bind(this,this.onSelect));
				txt.addEventListener("focusIn",$bind(this,this.onFocusIN));
				txt.addEventListener("focusOut",$bind(this,this.onFocusOut));
				sp.addChild(txt);
				this.inputTxt.push(txt);
				txt = com_coffeebreak_utils_TextUtils.createText("dbgInputTxt2","");
				txt.set_embedFonts(true);
				txt.set_border(true);
				txt.set_selectable(true);
				txt.setSelection(0,0);
				txt.set_type(1);
				txt.set_text(this.prompts[1]);
				txt.addEventListener("change",$bind(this,this.onSelect));
				txt.addEventListener("focusIn",$bind(this,this.onFocusIN));
				txt.addEventListener("focusOut",$bind(this,this.onFocusOut));
				sp.addChild(txt);
				this.inputTxt.push(txt);
				var btt3 = new com_coffeebreak_core_CoffeeButton("panelBtt_","dbgSetBtt");
				btt3.set_ID(i);
				btt3.set_name("SET");
				btt3.initButtonText("panelBttTxt","SET");
				this.addButton(btt3);
				sp.addChild(btt3);
			} else if(i == 2) {
				this.clockTxt = com_coffeebreak_utils_TextUtils.createText("inputTestTf","");
				this.clockTxt.set_border(true);
				this.clockTxt.set_embedFonts(true);
				this.clockTxt.set_text("00:00");
				sp.addChild(this.clockTxt);
				var pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("outputTestTf");
				this.infoTestText = new feathers_controls_TextArea();
				this.infoTestText.set_width(pd.get_width());
				this.infoTestText.set_height(pd.get_height());
				this.infoTestText.set_x(pd.get_posX());
				this.infoTestText.set_y(pd.get_posY());
				sp.addChild(this.infoTestText);
				var arr = ["stopAutoBtt","testBtt","runPtBtt","stopPtBtt"];
				var labels = ["STOP AUTO","START TEST","RUN PARTICLES","STOP PARTICLES"];
				this.comboHolder = [];
				var _g1 = 0;
				while(_g1 < 3) {
					var i1 = _g1++;
					var btt4 = new com_coffeebreak_core_CoffeeButton("panelBtt_",arr[i1]);
					btt4.set_ID(i1);
					btt4.set_name("SET");
					btt4.initButtonText("panelBttTxt",labels[i1]);
					btt4.addEventListener("click",$bind(this,this.onTestClick));
					sp.addChild(btt4);
					if(i1 < 3) {
						pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("cb" + i1);
						var cb = new feathers_controls_ComboBox();
						cb.set_name("cb" + i1);
						cb.set_prompt(this.prompts1[i1]);
						cb.set_x(pd.get_posX());
						cb.set_y(pd.get_posY());
						cb.itemToText = function(item) {
							return item.text;
						};
						sp.addChild(cb);
						this.comboHolder.push(cb);
						if(i1 > 0) {
							cb.set_visible(false);
						}
					}
				}
				this.timeTxt = com_coffeebreak_utils_TextUtils.createText("timeTestTf","test");
				this.timeTxt.set_embedFonts(true);
				this.timeTxt.set_name("tf3-3");
				this.timeTxt.set_border(true);
				this.timeTxt.set_type(1);
				this.timeTxt.set_selectable(true);
				this.timeTxt.setSelection(0,0);
				this.timeTxt.set_text("Input time in minutes");
				sp.addChild(this.timeTxt);
				this.timeTxt.set_visible(false);
				this.timeTxt.set_restrict("0123456789");
				this.timeTxt.addEventListener("focusIn",$bind(this,this.onTimeChange));
				this.sliderInfo = com_coffeebreak_utils_TextUtils.createText("sliderInfoTf","test");
				this.sliderInfo.set_embedFonts(true);
				this.sliderInfo.set_name("sInfo");
				this.sliderInfo.set_border(true);
				pd = com_coffeebreak_CoffeeConstants.POSITION_MANAGER.getItemPosition("ptcsSlider");
				var slider = new feathers_controls_HSlider();
				slider.set_width(150);
				slider.set_minimum(0.0);
				slider.set_maximum(100.0);
				slider.set_step(1.0);
				slider.set_x(pd.get_posX());
				slider.set_y(pd.get_posY());
				slider.addEventListener("change",$bind(this,this.sliderChangeHandler));
				slider.set_value(50);
			}
		}
	}
	,sliderChangeHandler: function(e) {
		this.baseGameSettings.set_particles(this.baseGameSettings.get_particles());
		this.sliderInfo.set_text(Std.string(com_coffeebreak_utils_ConvertorUtils.floatToStringTwoDecimal((js_Boot.__cast(e.currentTarget , feathers_controls_HSlider)).get_value())));
	}
	,playParticles: function() {
		this.pe.emitAchievementParticles(com_coffeebreak_CoffeeConstants.STAGE_WIDTH / 2,com_coffeebreak_CoffeeConstants.STAGE_HEIGHT / 2);
		this.pe.emitAchievementParticles(com_coffeebreak_CoffeeConstants.STAGE_WIDTH / 2,com_coffeebreak_CoffeeConstants.STAGE_HEIGHT / 2 + 200);
	}
	,onTimeChange: function(e) {
		if(this.timeTxt.get_text().indexOf("Input") != -1) {
			this.timeTxt.set_text("");
		}
	}
	,populateCombo: function(cb,_id,_data) {
		if(_id == null) {
			_id = 0;
		}
		var _gthis = this;
		var data;
		if(_id == 0) {
			data = (js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.getGrinders();
		} else {
			data = _data;
		}
		var collectionData = [];
		var _g = 0;
		var _g1 = data.length;
		while(_g < _g1) {
			var i = _g++;
			collectionData.push({ text : data[i]});
		}
		cb.set_dataProvider(new feathers_data_ArrayCollection(collectionData));
		cb.set_selectedIndex(-1);
		if(!cb.get_visible()) {
			cb.set_visible(true);
		}
		cb.addEventListener("change",function(event) {
			var comboBox = js_Boot.__cast(event.currentTarget , feathers_controls_ComboBox);
			if(comboBox.get_selectedItem() == null) {
				return;
			}
			var data;
			switch(comboBox.get_name()) {
			case "cb0":
				data = (js_Boot.__cast(_gthis.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.getGrindersItems(comboBox.get_selectedItem().text);
				_gthis.populateCombo(_gthis.comboHolder[1],1,data);
				break;
			case "cb1":
				data = (js_Boot.__cast(_gthis.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.getTestGrindsData(comboBox.get_selectedItem().text);
				_gthis.populateCombo(_gthis.comboHolder[2],1,data);
				break;
			case "cb2":
				_gthis.timeTxt.set_visible(true);
				break;
			}
		});
	}
	,onTestClick: function(e) {
		this.set_targetItem(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_GameItem));
		if(this.get_targetItem().get_ID() == 0) {
			(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).stopAutomation();
		} else if(this.get_targetItem().get_ID() == 1) {
			if(this.timeTxt.get_text().indexOf("Input") != -1) {
				this.timeTxt.set_text("Input time in minutes");
				return;
			}
			var dataT = new com_coffeebreak_data_TestData();
			dataT.set_grinders(this.comboHolder[0].get_selectedItem().text);
			dataT.set_grinds(this.comboHolder[1].get_selectedItem().text);
			dataT.set_tool(this.comboHolder[2].get_selectedItem().text);
			this.currentTime = Std.parseInt(this.timeTxt.get_text());
			(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).grindMenu.doTest(dataT);
			this.startTimer();
			this.setObjectsDefault();
		} else if(this.get_targetItem().get_ID() == 2) {
			this.playParticles();
		}
	}
	,setObjectsDefault: function() {
		var _g = 0;
		var _g1 = this.comboHolder.length;
		while(_g < _g1) {
			var i = _g++;
			this.comboHolder[i].set_selectedIndex(-1);
		}
		this.timeTxt.set_text("Input time in minutes");
	}
	,setDraggable: function(_item) {
		_item.addEventListener("mouseDown",$bind(this,this.onMDown));
		_item.addEventListener("mouseUp",$bind(this,this.onMUp));
		_item.addEventListener("mouseMove",$bind(this,this.onMove));
		_item.addEventListener("releaseOutside",$bind(this,this.onMUp));
	}
	,onMDown: function(e) {
		this.isMouseDown = true;
	}
	,onMUp: function(e) {
		this.isMouseDown = false;
		this.holder.stopDrag();
	}
	,onMove: function(e) {
		if(this.isMouseDown) {
			this.holder.startDrag();
		}
	}
	,onFocusOut: function(e) {
		if((js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).get_text() == "") {
			if((js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).get_name() == "one") {
				(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).set_text(this.prompts[0]);
			} else {
				(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).set_text(this.prompts[1]);
			}
		}
	}
	,onFocusIN: function(e) {
		var _g = 0;
		var _g1 = this.prompts.length;
		while(_g < _g1) {
			var i = _g++;
			if((js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).get_text() == this.prompts[i]) {
				(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_CoffeeTextField)).set_text("");
			}
		}
	}
	,onSelect: function(e) {
	}
	,setDefault: function() {
		this.buttonsHolder[0].set_visible(true);
		this.buttonsHolder[1].set_visible(true);
		this.buttonsHolder[2].set_visible(false);
		this.infoText.set_text("");
		this.inputTxt[0].set_text(this.prompts[0]);
		this.inputTxt[1].set_text(this.prompts[1]);
	}
	,show: function() {
		com_coffeebreak_screens_AlertScreen.prototype.show.call(this);
		com_coffeebreak_CoffeeConstants.STAGE.addChild(this);
		this.set_visible(true);
	}
	,hide: function(_isAuto) {
		if(_isAuto == null) {
			_isAuto = false;
		}
		com_coffeebreak_screens_AlertScreen.prototype.hide.call(this,_isAuto);
		com_coffeebreak_CoffeeConstants.STAGE.removeChild(this);
		this.set_visible(false);
		this.setDefault();
	}
	,updateData: function(_data) {
		var inventory = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("INVENTORY_DATA");
		inventory.reset();
		var ach = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("ACH_DATA");
		ach.reset();
		var dCollector = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR");
		dCollector.reset();
		var bgs = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("BGS");
		var inventObject;
		var currentMap = "";
		var key = $iterator(openfl_utils_Object)(_data);
		while(key.hasNext()) {
			var key1 = key.next();
			if(key1 == "inventory") {
				inventObject = Reflect.getProperty(_data,key1);
				var key11 = $iterator(openfl_utils_Object)(inventObject);
				while(key11.hasNext()) {
					var key12 = key11.next();
					inventory.setData(key12,Reflect.getProperty(inventObject,key12));
				}
			} else if(key1 == "achievement") {
				inventObject = Reflect.getProperty(_data,key1);
				var key13 = $iterator(openfl_utils_Object)(inventObject);
				while(key13.hasNext()) {
					var key14 = key13.next();
					ach.setAchievement(Std.parseInt(key14),Reflect.getProperty(inventObject,key14));
				}
			} else if(key1 == "grindmenu") {
				var tmpArray = Reflect.getProperty(_data,key1);
				var _g = 0;
				var _g1 = tmpArray.length;
				while(_g < _g1) {
					var i = _g++;
					dCollector.setGrindMenuData(tmpArray[i].ID,tmpArray[i].label,tmpArray[i].img,tmpArray[i].isAutomate,tmpArray[i].automateName,tmpArray[i].grinder);
				}
			} else if(key1 == "BGS") {
				inventObject = Reflect.getProperty(_data,key1);
				bgs.setValues(inventObject);
			} else if(key1 == "MAP") {
				inventObject = Reflect.getProperty(_data,key1);
				var key15 = $iterator(openfl_utils_Object)(inventObject);
				while(key15.hasNext()) {
					var key16 = key15.next();
					dCollector.setMapData(key16,Reflect.getProperty(inventObject,key16));
					if(key16 == "currentLocation") {
						currentMap = Reflect.getProperty(inventObject,key16);
					}
				}
			} else if(key1 == "ACF") {
				var tmpArray1 = [];
				var tmpArray2 = [];
				inventObject = Reflect.getProperty(_data,key1);
				var key17 = $iterator(openfl_utils_Object)(inventObject);
				while(key17.hasNext()) {
					var key18 = key17.next();
					if(key18 == "actf") {
						tmpArray1 = Reflect.getProperty(inventObject,key18);
					} else {
						tmpArray2 = Reflect.getProperty(inventObject,key18);
					}
				}
				var _g2 = 0;
				var _g3 = tmpArray1.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					dCollector.saveAutoCrafters(tmpArray1[i1],tmpArray2[i1]);
				}
			} else if(key1 == "current_menu") {
				com_coffeebreak_GameProperties.LOADED_MENU_NAME = Reflect.getProperty(_data,key1);
			} else if(key1 == "AUTO") {
				dCollector.set_automationData(Reflect.getProperty(_data,key1));
			}
		}
		com_coffeebreak_GameProperties.SAVE_MANAGER.reset();
		com_coffeebreak_GameProperties.SAVE_MANAGER.saveData((js_Boot.__cast(com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("DATA_COLLECTOR") , com_coffeebreak_data_DataCollector)).getAllSaveData());
		var mapsLoader = com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER.getComponent("MAP_LOADER");
		mapsLoader.get_mapsLoaderSignal().add($bind(this,this.onMapLoaded));
		if(currentMap != "") {
			this.setCurrentMapId(currentMap);
			mapsLoader.loadMap(com_coffeebreak_utils_TextUtils.replaceDelimiter(currentMap," ",""));
			com_coffeebreak_GameProperties.CURRENT_MAP_NAME = currentMap;
		} else {
			mapsLoader.loadMap(com_coffeebreak_GameProperties.CURRENT_MAP_NAME);
		}
	}
	,setCurrentMapId: function(_name) {
		var mapData = com_coffeebreak_CoffeeConstants.SETTINGS.getSettingsString("markers");
		var _g = 0;
		var _g1 = mapData.length;
		while(_g < _g1) {
			var i = _g++;
			var tmpArray = mapData[i].split(",");
			if(tmpArray[0] == _name) {
				com_coffeebreak_GameProperties.CURRENT_MAP_ID = i;
				break;
			}
		}
	}
	,onMapLoaded: function() {
		this.infoText.set_text("File successfully loaded!");
	}
	,switchScreen: function(_screenID) {
		if(_screenID == null) {
			this.holder.removeChild(this.screens[this.currentState]);
		} else {
			if(_screenID == 2) {
				this.populateCombo(this.comboHolder[0]);
			}
			this.holder.addChild(this.screens[_screenID]);
		}
	}
	,onClick: function(e) {
		this.set_targetItem(js_Boot.__cast(e.currentTarget , com_coffeebreak_core_GameItem));
		if(this.get_targetItem().get_name().indexOf("TAB") != -1) {
			if(this.currentTab != null) {
				this.currentTab.switchState();
			}
			this.currentTab = this.tabs[this.get_targetItem().get_ID() - 1];
			this.switchScreen();
			this.currentState = this.get_targetItem().get_ID() - 1;
			this.switchScreen(this.currentState);
		} else if(this.get_targetItem().get_name() == "saveBtt") {
			var s = JSON.stringify(com_coffeebreak_GameProperties.SAVE_MANAGER.get_localData());
			this.logSaver.saveLog(s,com_coffeebreak_GameProperties.CURRENT_MAP_NAME + ".json");
		} else if(this.get_targetItem().get_name() == "loadBtt") {
			this.logSaver.browse();
		} else if(this.get_targetItem().get_name() == "SET") {
			if(this.get_currentScreen().get_screenName() == "GameScreen") {
				var fn = Reflect.field(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen),this.inputTxt[2].get_text());
				if(fn != null) {
					fn.apply(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen),[this.inputTxt[0].get_text()]);
				} else {
					(js_Boot.__cast(this.get_currentScreen() , com_coffeebreak_screens_GameScreen)).updateDataFromDebugPanel(this.inputTxt[0].get_text(),this.inputTxt[1].get_text());
				}
			}
		} else {
			this.hide();
		}
	}
	,get_currentScreen: function() {
		return this.currentScreen;
	}
	,set_currentScreen: function(value) {
		return this.currentScreen = value;
	}
	,__class__: com_coffeebreak_utils_DebugPanel
	,__properties__: $extend(com_coffeebreak_screens_AlertScreen.prototype.__properties__,{set_currentScreen:"set_currentScreen",get_currentScreen:"get_currentScreen"})
});
var com_coffeebreak_utils_DetectSystem = function() { };
$hxClasses["com.coffeebreak.utils.DetectSystem"] = com_coffeebreak_utils_DetectSystem;
com_coffeebreak_utils_DetectSystem.__name__ = "com.coffeebreak.utils.DetectSystem";
com_coffeebreak_utils_DetectSystem.getBrowserType = function() {
	var browserType = com_coffeebreak_BrowserType.BROWSER_UNDEFINED;
	var browserAgent = null;
	browserAgent = $global.navigator.userAgent;
	if(browserAgent != null) {
		if(browserAgent.indexOf("Android") >= 0 || browserAgent.indexOf("BlackBerry") >= 0 || browserAgent.indexOf("iPhone") >= 0 || browserAgent.indexOf("iPad") >= 0 || browserAgent.indexOf("iPod") >= 0 || browserAgent.indexOf("Opera Mini") >= 0 || browserAgent.indexOf("IEMobile") >= 0) {
			browserType = com_coffeebreak_BrowserType.BROWSER_MOBILE;
		} else {
			browserType = com_coffeebreak_BrowserType.BROWSER_DESKTOP;
		}
	}
	return browserType;
};
var com_coffeebreak_utils_GrindRandomGenerator = function() {
	this.storedData = new haxe_ds_StringMap();
};
$hxClasses["com.coffeebreak.utils.GrindRandomGenerator"] = com_coffeebreak_utils_GrindRandomGenerator;
com_coffeebreak_utils_GrindRandomGenerator.__name__ = "com.coffeebreak.utils.GrindRandomGenerator";
com_coffeebreak_utils_GrindRandomGenerator.prototype = {
	__class__: com_coffeebreak_utils_GrindRandomGenerator
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = "lime.math.Matrix3";
lime_math_Matrix3.prototype = {
	__class__: lime_math_Matrix3
};
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = "openfl.geom.Matrix";
openfl_geom_Matrix.prototype = {
	clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__class__: openfl_geom_Matrix
};
var com_coffeebreak_utils_ImageScaling = function() { };
$hxClasses["com.coffeebreak.utils.ImageScaling"] = com_coffeebreak_utils_ImageScaling;
com_coffeebreak_utils_ImageScaling.__name__ = "com.coffeebreak.utils.ImageScaling";
com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinearIterative = function(source,width,height,iterationMultiplier) {
	if(iterationMultiplier == null) {
		iterationMultiplier = 1.75;
	}
	var w = source.width;
	var h = source.height;
	var result = null;
	while(result == null || w != width || h != height) {
		w = source.width > width ? Math.max(w / iterationMultiplier,width) | 0 : Math.min(w * iterationMultiplier,width) | 0;
		h = source.height > height ? Math.max(h / iterationMultiplier,height) | 0 : Math.min(h * iterationMultiplier,height) | 0;
		var newResult = com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinear(result != null ? result : source,w,h);
		if(result != null) {
			result.dispose();
		}
		result = newResult;
	}
	return result;
};
com_coffeebreak_utils_ImageScaling.scaleBitmapDataBilinear = function(source,width,height) {
	var result = new openfl_display_BitmapData(width,height);
	com_coffeebreak_utils_ImageScaling.matrix.identity();
	com_coffeebreak_utils_ImageScaling.matrix.scale(width / source.width,height / source.height);
	result.draw(source,com_coffeebreak_utils_ImageScaling.matrix,null,null,null,true);
	return result;
};
var com_coffeebreak_utils_LogSaver = function() {
	this.f = new openfl_net_FileReference();
	this.f.addEventListener("select",$bind(this,this.onFileSelected));
	this.jsonFilter = new openfl_net_FileFilter("Documents","*.json");
	this.set_logSignal(new msignal_Signal2());
	this.baseCode = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS));
};
$hxClasses["com.coffeebreak.utils.LogSaver"] = com_coffeebreak_utils_LogSaver;
com_coffeebreak_utils_LogSaver.__name__ = "com.coffeebreak.utils.LogSaver";
com_coffeebreak_utils_LogSaver.prototype = {
	onFileSelected: function(e) {
		this.f.addEventListener("complete",$bind(this,this.onFileLoaded));
		this.f.addEventListener("ioError",$bind(this,this.onFileLoadError));
		this.f.addEventListener("progress",$bind(this,this.onProgress));
		this.f.load();
	}
	,onProgress: function(e) {
		var percentLoaded = e.bytesLoaded / e.bytesTotal * 100;
		haxe_Log.trace("loaded: " + percentLoaded + "%",{ fileName : "src/com/coffeebreak/utils/LogSaver.hx", lineNumber : 60, className : "com.coffeebreak.utils.LogSaver", methodName : "onProgress"});
	}
	,onFileLoadError: function(e) {
		haxe_Log.trace("File load error",{ fileName : "src/com/coffeebreak/utils/LogSaver.hx", lineNumber : 65, className : "com.coffeebreak.utils.LogSaver", methodName : "onFileLoadError"});
		this.get_logSignal().dispatch("fileerror",null);
	}
	,onFileLoaded: function(e) {
		haxe_Log.trace("FILE LOADED",{ fileName : "src/com/coffeebreak/utils/LogSaver.hx", lineNumber : 72, className : "com.coffeebreak.utils.LogSaver", methodName : "onFileLoaded"});
		this.f.removeEventListener("complete",$bind(this,this.onFileLoaded));
		var data = this.f.data;
		var str = data.toString();
		var decodedData = this.baseCode.decodeString(str);
		var ob = JSON.parse(decodedData);
		this.get_logSignal().dispatch("fileloaded",ob);
	}
	,onComplete: function(e) {
		this.f.removeEventListener("complete",$bind(this,this.onComplete));
		this.get_logSignal().dispatch("filesaved",null);
	}
	,saveLog: function(_data,_fileName) {
		var encodedData = this.baseCode.encodeString(_data);
		this.f.addEventListener("complete",$bind(this,this.onComplete));
		this.f.save(encodedData,_fileName);
	}
	,browse: function() {
		this.f.browse([this.jsonFilter]);
	}
	,get_logSignal: function() {
		return this.logSignal;
	}
	,set_logSignal: function(value) {
		return this.logSignal = value;
	}
	,__class__: com_coffeebreak_utils_LogSaver
	,__properties__: {set_logSignal:"set_logSignal",get_logSignal:"get_logSignal"}
};
var com_coffeebreak_utils_PercentCounter = function() { };
$hxClasses["com.coffeebreak.utils.PercentCounter"] = com_coffeebreak_utils_PercentCounter;
com_coffeebreak_utils_PercentCounter.__name__ = "com.coffeebreak.utils.PercentCounter";
com_coffeebreak_utils_PercentCounter.getPercent = function(_baseNumber,_percent) {
	var percent = _baseNumber * _percent / 100;
	return percent;
};
var com_coffeebreak_utils_RandomNumber = function() { };
$hxClasses["com.coffeebreak.utils.RandomNumber"] = com_coffeebreak_utils_RandomNumber;
com_coffeebreak_utils_RandomNumber.__name__ = "com.coffeebreak.utils.RandomNumber";
com_coffeebreak_utils_RandomNumber.getRandom = function(min,max) {
	var num = Math.floor(Math.random() * (1 + max - min)) + min;
	return num;
};
var com_coffeebreak_utils_SimplePrimitive = function() {
	openfl_display_Sprite.call(this);
};
$hxClasses["com.coffeebreak.utils.SimplePrimitive"] = com_coffeebreak_utils_SimplePrimitive;
com_coffeebreak_utils_SimplePrimitive.__name__ = "com.coffeebreak.utils.SimplePrimitive";
com_coffeebreak_utils_SimplePrimitive.createRect = function(_w,_h,_color,_alpha) {
	if(_alpha == null) {
		_alpha = 1;
	}
	var instance = new com_coffeebreak_utils_SimplePrimitive();
	instance.get_graphics().beginFill(_color,_alpha);
	instance.get_graphics().drawRect(0,0,_w,_h);
	instance.get_graphics().endFill();
	return instance;
};
com_coffeebreak_utils_SimplePrimitive.createRectWithLine = function(_w,_h,_color,_alpha,_tickness,_tickColor) {
	if(_tickColor == null) {
		_tickColor = 16777215;
	}
	if(_tickness == null) {
		_tickness = 1;
	}
	if(_alpha == null) {
		_alpha = 1;
	}
	var instance = new com_coffeebreak_utils_SimplePrimitive();
	instance.get_graphics().beginFill(_color,_alpha);
	instance.get_graphics().lineStyle(_tickness,_tickColor);
	instance.get_graphics().drawRect(0,0,_w,_h);
	instance.get_graphics().endFill();
	return instance;
};
com_coffeebreak_utils_SimplePrimitive.__super__ = openfl_display_Sprite;
com_coffeebreak_utils_SimplePrimitive.prototype = $extend(openfl_display_Sprite.prototype,{
	__class__: com_coffeebreak_utils_SimplePrimitive
});
var com_coffeebreak_utils_SpriteSheetParser = function() {
	this.rectHolder = new haxe_ds_StringMap();
	this.id = 0;
};
$hxClasses["com.coffeebreak.utils.SpriteSheetParser"] = com_coffeebreak_utils_SpriteSheetParser;
com_coffeebreak_utils_SpriteSheetParser.__name__ = "com.coffeebreak.utils.SpriteSheetParser";
com_coffeebreak_utils_SpriteSheetParser.prototype = {
	__class__: com_coffeebreak_utils_SpriteSheetParser
};
var com_coffeebreak_utils_TextFormatUtils = function() { };
$hxClasses["com.coffeebreak.utils.TextFormatUtils"] = com_coffeebreak_utils_TextFormatUtils;
com_coffeebreak_utils_TextFormatUtils.__name__ = "com.coffeebreak.utils.TextFormatUtils";
com_coffeebreak_utils_TextFormatUtils.fitTextToTextField = function(tf,_checkLittle) {
	if(_checkLittle == null) {
		_checkLittle = false;
	}
	var format;
	if(tf.get_textWidth() > tf.get_width()) {
		while(tf.get_textWidth() > tf.get_width()) {
			format = tf.get_defaultTextFormat();
			format.size--;
			tf.set_defaultTextFormat(format);
			tf.setTextFormat(format);
		}
	}
	if(tf.get_textHeight() > tf.get_height()) {
		while(tf.get_textHeight() > tf.get_height()) {
			format = tf.get_defaultTextFormat();
			format.size--;
			tf.set_defaultTextFormat(format);
			tf.setTextFormat(format);
		}
	}
	if(tf.get_textWidth() < tf.get_width() && _checkLittle) {
		while(tf.get_textWidth() < tf.get_width()) {
			format = tf.get_defaultTextFormat();
			format.size++;
			tf.set_defaultTextFormat(format);
			tf.setTextFormat(format);
		}
	}
};
var com_coffeebreak_utils_TextUtils = function() { };
$hxClasses["com.coffeebreak.utils.TextUtils"] = com_coffeebreak_utils_TextUtils;
com_coffeebreak_utils_TextUtils.__name__ = "com.coffeebreak.utils.TextUtils";
com_coffeebreak_utils_TextUtils.createText = function(_positionID,_text,_localisationKey) {
	var tf = new com_coffeebreak_core_CoffeeTextField();
	tf.init(_positionID);
	tf.setText(_text,_localisationKey);
	tf.set_autoSize(2);
	tf.set_selectable(false);
	return tf;
};
com_coffeebreak_utils_TextUtils.replaceDelimiter = function(_text,_delimiter,_change) {
	if(_text.indexOf(_delimiter) == -1) {
		return _text;
	}
	return StringTools.replace(_text,_delimiter,_change);
};
var feathers_core_IValidating = function() { };
$hxClasses["feathers.core.IValidating"] = feathers_core_IValidating;
feathers_core_IValidating.__name__ = "feathers.core.IValidating";
feathers_core_IValidating.__isInterface__ = true;
feathers_core_IValidating.prototype = {
	__class__: feathers_core_IValidating
	,__properties__: {get_depth:"get_depth"}
};
var feathers_core_ValidatingSprite = function() {
	this._ignoreInvalidationFlags = false;
	this._depth = -1;
	this._validationQueue = null;
	this._setInvalidCount = 0;
	this._delayedInvalidationFlags = new haxe_ds_EnumValueMap();
	this._invalidationFlags = new haxe_ds_EnumValueMap();
	this._allInvalidDelayed = false;
	this._allInvalid = false;
	this._validating = false;
	openfl_display_Sprite.call(this);
	this.addEventListener("addedToStage",$bind(this,this.validatingSprite_addedToStageHandler));
	this.addEventListener("removedFromStage",$bind(this,this.validatingSprite_removedFromStageHandler));
};
$hxClasses["feathers.core.ValidatingSprite"] = feathers_core_ValidatingSprite;
feathers_core_ValidatingSprite.__name__ = "feathers.core.ValidatingSprite";
feathers_core_ValidatingSprite.__interfaces__ = [feathers_core_IValidating];
feathers_core_ValidatingSprite.__super__ = openfl_display_Sprite;
feathers_core_ValidatingSprite.prototype = $extend(openfl_display_Sprite.prototype,{
	get_depth: function() {
		return this._depth;
	}
	,isInvalid: function(flag) {
		if(this._allInvalid) {
			return true;
		}
		if(flag == null) {
			return this._invalidationFlags.keys().hasNext();
		}
		return this._invalidationFlags.exists(flag);
	}
	,setInvalid: function(flag) {
		if(this._ignoreInvalidationFlags) {
			return;
		}
		var alreadyInvalid = this.isInvalid();
		var alreadyDelayedInvalid = false;
		if(this._validating) {
			var otherFlag = this._delayedInvalidationFlags.keys();
			while(otherFlag.hasNext()) {
				var otherFlag1 = otherFlag.next();
				alreadyDelayedInvalid = true;
				break;
			}
		}
		if(flag == null) {
			if(this._validating) {
				this._allInvalidDelayed = true;
			} else {
				this._allInvalid = true;
			}
		} else if(this._validating) {
			this._delayedInvalidationFlags.set(flag,true);
		} else if(flag != null && !this._invalidationFlags.exists(flag)) {
			this._invalidationFlags.set(flag,true);
		}
		if(this._validationQueue == null) {
			return;
		}
		if(this._validating) {
			if(alreadyDelayedInvalid) {
				return;
			}
			this._setInvalidCount++;
			if(this._setInvalidCount >= 10) {
				var c = js_Boot.getClass(this);
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError(c.__name__ + " returned to validation queue too many times during validation. This may be an infinite loop. Try to avoid doing anything that calls setInvalid() during validation."));
			}
			this._validationQueue.addControl(this);
			return;
		}
		if(alreadyInvalid) {
			return;
		}
		this._setInvalidCount = 0;
		this._validationQueue.addControl(this);
	}
	,validateNow: function() {
		if(!this.isInvalid()) {
			return;
		}
		if(this._validating) {
			return;
		}
		this._validating = true;
		this.update();
		var flag = this._invalidationFlags.keys();
		while(flag.hasNext()) {
			var flag1 = flag.next();
			this._invalidationFlags.remove(flag1);
		}
		this._allInvalid = this._allInvalidDelayed;
		var flag = this._delayedInvalidationFlags.keys();
		while(flag.hasNext()) {
			var flag1 = flag.next();
			if(flag1 == null) {
				this._allInvalid = true;
			} else {
				this._invalidationFlags.set(flag1,true);
			}
			this._delayedInvalidationFlags.remove(flag1);
		}
		this._validating = false;
	}
	,setInvalidationFlag: function(flag) {
		if(this._ignoreInvalidationFlags) {
			return;
		}
		if(this._invalidationFlags.exists(flag)) {
			return;
		}
		this._invalidationFlags.set(flag,true);
	}
	,update: function() {
	}
	,validatingSprite_addedToStageHandler: function(event) {
		this._depth = feathers_utils_DisplayUtil.getDisplayObjectDepthFromStage(this);
		this._validationQueue = feathers_core_ValidationQueue.forStage(this.stage);
		if(this._validationQueue != null && this.isInvalid()) {
			this._setInvalidCount = 0;
			this._validationQueue.addControl(this);
		}
	}
	,validatingSprite_removedFromStageHandler: function(event) {
		this._depth = -1;
		this._validationQueue = null;
	}
	,__class__: feathers_core_ValidatingSprite
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_depth:"get_depth"})
});
var feathers_core_IDisplayObject = function() { };
$hxClasses["feathers.core.IDisplayObject"] = feathers_core_IDisplayObject;
feathers_core_IDisplayObject.__name__ = "feathers.core.IDisplayObject";
feathers_core_IDisplayObject.__isInterface__ = true;
feathers_core_IDisplayObject.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_core_IDisplayObject.prototype = {
	__class__: feathers_core_IDisplayObject
	,__properties__: {set_alpha:"set_alpha",get_alpha:"get_alpha",set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width",set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x"}
};
var feathers_core_IMeasureObject = function() { };
$hxClasses["feathers.core.IMeasureObject"] = feathers_core_IMeasureObject;
feathers_core_IMeasureObject.__name__ = "feathers.core.IMeasureObject";
feathers_core_IMeasureObject.__isInterface__ = true;
feathers_core_IMeasureObject.__interfaces__ = [feathers_core_IDisplayObject];
feathers_core_IMeasureObject.prototype = {
	__class__: feathers_core_IMeasureObject
	,__properties__: {set_maxHeight:"set_maxHeight",get_maxHeight:"get_maxHeight",set_maxWidth:"set_maxWidth",get_maxWidth:"get_maxWidth",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",get_explicitMaxHeight:"get_explicitMaxHeight",get_explicitMaxWidth:"get_explicitMaxWidth",get_explicitMinHeight:"get_explicitMinHeight",get_explicitMinWidth:"get_explicitMinWidth",get_explicitHeight:"get_explicitHeight",get_explicitWidth:"get_explicitWidth"}
};
var feathers_core_MeasureSprite = function() {
	this._explicitMaxHeight = null;
	this._explicitMaxWidth = null;
	this._explicitMinHeight = null;
	this._explicitMinWidth = null;
	this._explicitHeight = null;
	this._explicitWidth = null;
	this.scaledActualMaxHeight = 1.0 / 0.0;
	this.scaledActualMaxWidth = 1.0 / 0.0;
	this.scaledActualMinHeight = 0.0;
	this.scaledActualMinWidth = 0.0;
	this.scaledActualHeight = 0.0;
	this.scaledActualWidth = 0.0;
	this.actualMaxHeight = 1.0 / 0.0;
	this.actualMaxWidth = 1.0 / 0.0;
	this.actualMinHeight = 0.0;
	this.actualMinWidth = 0.0;
	this.actualHeight = 0.0;
	this.actualWidth = 0.0;
	feathers_core_ValidatingSprite.call(this);
};
$hxClasses["feathers.core.MeasureSprite"] = feathers_core_MeasureSprite;
feathers_core_MeasureSprite.__name__ = "feathers.core.MeasureSprite";
feathers_core_MeasureSprite.__interfaces__ = [feathers_core_IMeasureObject];
feathers_core_MeasureSprite.__super__ = feathers_core_ValidatingSprite;
feathers_core_MeasureSprite.prototype = $extend(feathers_core_ValidatingSprite.prototype,{
	get_width: function() {
		return this.scaledActualWidth;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1.0) {
			value /= this.get_scaleX();
		}
		this.set_explicitWidth(value);
		return this.scaledActualWidth;
	}
	,get_height: function() {
		return this.scaledActualHeight;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1.0) {
			value /= this.get_scaleY();
		}
		this.set_explicitHeight(value);
		return this.scaledActualHeight;
	}
	,set_scaleX: function(value) {
		feathers_core_ValidatingSprite.prototype.set_scaleX.call(this,value);
		this.saveMeasurements(this.actualWidth,this.actualHeight,this.actualMinWidth,this.actualMinHeight,this.actualMaxWidth,this.actualMaxHeight);
		return this.get_scaleX();
	}
	,set_scaleY: function(value) {
		feathers_core_ValidatingSprite.prototype.set_scaleY.call(this,value);
		this.saveMeasurements(this.actualWidth,this.actualHeight,this.actualMinWidth,this.actualMinHeight,this.actualMaxWidth,this.actualMaxHeight);
		return this.get_scaleY();
	}
	,get_explicitWidth: function() {
		return this._explicitWidth;
	}
	,set_explicitWidth: function(value) {
		if(this._explicitWidth == value) {
			return this._explicitWidth;
		}
		this._explicitWidth = value;
		if(value == null) {
			this.actualWidth = 0.0;
			this.scaledActualWidth = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var result = this.saveMeasurements(value,this.actualHeight,this.actualMinWidth,this.actualMinHeight,this.actualMaxWidth,this.actualMaxHeight);
			if(result) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitWidth;
	}
	,get_explicitHeight: function() {
		return this._explicitHeight;
	}
	,set_explicitHeight: function(value) {
		if(this._explicitHeight == value) {
			return this._explicitHeight;
		}
		this._explicitHeight = value;
		if(value == null) {
			this.actualHeight = 0.0;
			this.scaledActualHeight = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var result = this.saveMeasurements(this.actualWidth,value,this.actualMinWidth,this.actualMinHeight,this.actualMaxWidth,this.actualMaxHeight);
			if(result) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitHeight;
	}
	,get_explicitMinWidth: function() {
		return this._explicitMinWidth;
	}
	,set_explicitMinWidth: function(value) {
		if(this._explicitMinWidth == value) {
			return this._explicitMinWidth;
		}
		var oldValue = this._explicitMinWidth;
		this._explicitMinWidth = value;
		if(value == null) {
			this.actualMinWidth = 0.0;
			this.scaledActualMinWidth = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var actualWidth = this.actualWidth;
			this.saveMeasurements(this.actualWidth,this.actualHeight,value,this.actualMinHeight,this.actualMaxWidth,this.actualMaxHeight);
			if(this._explicitWidth == null && (actualWidth < value || actualWidth == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinWidth;
	}
	,get_explicitMinHeight: function() {
		return this._explicitMinHeight;
	}
	,set_explicitMinHeight: function(value) {
		if(this._explicitMinHeight == value) {
			return this._explicitMinHeight;
		}
		var oldValue = this._explicitMinHeight;
		this._explicitMinHeight = value;
		if(value == null) {
			this.actualMinHeight = 0.0;
			this.scaledActualMinHeight = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var actualHeight = this.actualHeight;
			this.saveMeasurements(this.actualWidth,this.actualHeight,this.actualMinWidth,value,this.actualMaxWidth,this.actualMaxHeight);
			if(this._explicitHeight == null && (actualHeight < value || actualHeight == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinHeight;
	}
	,get_minWidth: function() {
		return this.scaledActualMinWidth;
	}
	,set_minWidth: function(value) {
		if(this.get_scaleX() != 1) {
			value /= this.get_scaleX();
		}
		this.set_explicitMinWidth(value);
		return this.scaledActualMinWidth;
	}
	,get_minHeight: function() {
		return this.scaledActualMinHeight;
	}
	,set_minHeight: function(value) {
		if(this.get_scaleY() != 1) {
			value /= this.get_scaleY();
		}
		this.set_explicitMinHeight(value);
		return this.scaledActualMinHeight;
	}
	,get_explicitMaxWidth: function() {
		return this._explicitMaxWidth;
	}
	,set_explicitMaxWidth: function(value) {
		if(this._explicitMaxWidth == value) {
			return this._explicitMaxWidth;
		}
		var oldValue = this._explicitMaxWidth;
		this._explicitMaxWidth = value;
		if(value == null) {
			this.actualMaxWidth = 1.0 / 0.0;
			this.scaledActualMaxWidth = 1.0 / 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var actualWidth = this.actualWidth;
			this.saveMeasurements(this.actualWidth,this.actualHeight,this.actualMinWidth,this.actualMinHeight,value,this.actualMaxHeight);
			if(this._explicitWidth == null && (actualWidth > value || actualWidth == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMaxWidth;
	}
	,get_explicitMaxHeight: function() {
		return this._explicitMaxHeight;
	}
	,set_explicitMaxHeight: function(value) {
		if(this._explicitMaxHeight == value) {
			return this._explicitMaxHeight;
		}
		var oldValue = this._explicitMaxHeight;
		this._explicitMaxHeight = value;
		if(value == null) {
			this.actualMaxHeight = 1.0 / 0.0;
			this.scaledActualMaxHeight = 1.0 / 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			var actualHeight = this.actualHeight;
			this.saveMeasurements(this.actualWidth,this.actualHeight,this.actualMinWidth,this.actualMinHeight,this.actualMaxWidth,value);
			if(this._explicitHeight == null && (actualHeight > value || actualHeight == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMaxHeight;
	}
	,get_maxWidth: function() {
		return this.scaledActualMaxWidth;
	}
	,set_maxWidth: function(value) {
		if(this.get_scaleX() != 1) {
			value /= this.get_scaleX();
		}
		this.set_explicitMaxWidth(value);
		return this.scaledActualMaxWidth;
	}
	,get_maxHeight: function() {
		return this.scaledActualMaxHeight;
	}
	,set_maxHeight: function(value) {
		if(this.get_scaleY() != 1) {
			value /= this.get_scaleY();
		}
		this.set_explicitMaxHeight(value);
		return this.scaledActualMaxHeight;
	}
	,resetWidth: function() {
		this.set_explicitWidth(null);
	}
	,resetHeight: function() {
		this.set_explicitHeight(null);
	}
	,resetMinWidth: function() {
		this.set_explicitMinWidth(null);
	}
	,resetMinHeight: function() {
		this.set_explicitMinHeight(null);
	}
	,resetMaxWidth: function() {
		this.set_explicitMaxWidth(null);
	}
	,resetMaxHeight: function() {
		this.set_explicitMaxHeight(null);
	}
	,getBounds: function(targetCoordinateSpace) {
		if(this.__getBoundsHelperMatrix1 == null) {
			this.__getBoundsHelperMatrix1 = new openfl_geom_Matrix();
		} else {
			this.__getBoundsHelperMatrix1.identity();
		}
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			if(this.__getBoundsHelperMatrix2 == null) {
				this.__getBoundsHelperMatrix2 = new openfl_geom_Matrix();
			}
			var worldTransform1 = this.__getWorldTransform();
			this.__getBoundsHelperMatrix1.copyFrom(worldTransform1);
			var worldTransform2 = targetCoordinateSpace.__getWorldTransform();
			this.__getBoundsHelperMatrix2.copyFrom(worldTransform2);
			this.__getBoundsHelperMatrix2.invert();
			this.__getBoundsHelperMatrix1.concat(this.__getBoundsHelperMatrix2);
			this.__getBoundsHelperMatrix2.identity();
		}
		var x = this.__getBoundsHelperMatrix1.tx;
		var y = this.__getBoundsHelperMatrix1.ty;
		var w = this.actualWidth * this.__getBoundsHelperMatrix1.a + this.actualHeight * this.__getBoundsHelperMatrix1.c + this.__getBoundsHelperMatrix1.tx - x;
		var h = this.actualWidth * this.__getBoundsHelperMatrix1.b + this.actualHeight * this.__getBoundsHelperMatrix1.d + this.__getBoundsHelperMatrix1.ty - y;
		this.__getBoundsHelperMatrix1.identity();
		return new openfl_geom_Rectangle(x,y,w,h);
	}
	,saveMeasurements: function(width,height,minWidth,minHeight,maxWidth,maxHeight) {
		if(minHeight == null) {
			minHeight = 0.0;
		}
		if(minWidth == null) {
			minWidth = 0.0;
		}
		if(maxWidth == null) {
			maxWidth = 1.0 / 0.0;
		}
		if(maxHeight == null) {
			maxHeight = 1.0 / 0.0;
		}
		if(this._explicitMinWidth != null) {
			minWidth = this._explicitMinWidth;
		}
		if(this._explicitMinHeight != null) {
			minHeight = this._explicitMinHeight;
		}
		if(this._explicitMaxWidth != null) {
			maxWidth = this._explicitMaxWidth;
		} else if(maxWidth == null) {
			maxWidth = 1.0 / 0.0;
		}
		if(this._explicitMaxHeight != null) {
			maxHeight = this._explicitMaxHeight;
		} else if(maxHeight == null) {
			maxHeight = 1.0 / 0.0;
		}
		if(this._explicitMaxWidth == null && maxWidth < minWidth) {
			maxWidth = minWidth;
		}
		if(this._explicitMinWidth == null && minWidth > maxWidth) {
			minWidth = maxWidth;
		}
		if(this._explicitMaxHeight == null && maxHeight < minHeight) {
			maxHeight = minHeight;
		}
		if(this._explicitMinHeight == null && minHeight > maxHeight) {
			minHeight = maxHeight;
		}
		if(this._explicitWidth != null) {
			width = this._explicitWidth;
		} else if(width < minWidth) {
			width = minWidth;
		} else if(width > maxWidth) {
			width = maxWidth;
		}
		if(this._explicitHeight != null) {
			height = this._explicitHeight;
		} else if(height < minHeight) {
			height = minHeight;
		} else if(height > maxHeight) {
			height = maxHeight;
		}
		var scaleX = this.get_scaleX();
		if(scaleX < 0.0) {
			scaleX = -scaleX;
		}
		var scaleY = this.get_scaleY();
		if(scaleY < 0.0) {
			scaleY = -scaleY;
		}
		var resized = false;
		if(this.actualWidth != width) {
			this.actualWidth = width;
			resized = true;
		}
		if(this.actualHeight != height) {
			this.actualHeight = height;
			resized = true;
		}
		if(this.actualMinWidth != minWidth) {
			this.actualMinWidth = minWidth;
			resized = true;
		}
		if(this.actualMinHeight != minHeight) {
			this.actualMinHeight = minHeight;
			resized = true;
		}
		if(this.actualMaxWidth != maxWidth) {
			this.actualMaxWidth = maxWidth;
			resized = true;
		}
		if(this.actualMaxHeight != maxHeight) {
			this.actualMaxHeight = maxHeight;
			resized = true;
		}
		width = this.scaledActualWidth;
		height = this.scaledActualHeight;
		this.scaledActualWidth = this.actualWidth * scaleX;
		this.scaledActualHeight = this.actualHeight * scaleY;
		this.scaledActualMinWidth = this.actualMinWidth * scaleX;
		this.scaledActualMinHeight = this.actualMinHeight * scaleY;
		this.scaledActualMaxWidth = this.actualMaxWidth * scaleX;
		this.scaledActualMaxHeight = this.actualMaxHeight * scaleY;
		if(width != this.scaledActualWidth || height != this.scaledActualHeight) {
			resized = true;
			feathers_events_FeathersEvent.dispatch(this,"resize");
		}
		return resized;
	}
	,__class__: feathers_core_MeasureSprite
	,__properties__: $extend(feathers_core_ValidatingSprite.prototype.__properties__,{set_maxHeight:"set_maxHeight",get_maxHeight:"get_maxHeight",set_maxWidth:"set_maxWidth",get_maxWidth:"get_maxWidth",set_explicitMaxHeight:"set_explicitMaxHeight",get_explicitMaxHeight:"get_explicitMaxHeight",set_explicitMaxWidth:"set_explicitMaxWidth",get_explicitMaxWidth:"get_explicitMaxWidth",set_minHeight:"set_minHeight",get_minHeight:"get_minHeight",set_minWidth:"set_minWidth",get_minWidth:"get_minWidth",set_explicitMinHeight:"set_explicitMinHeight",get_explicitMinHeight:"get_explicitMinHeight",set_explicitMinWidth:"set_explicitMinWidth",get_explicitMinWidth:"get_explicitMinWidth",set_explicitHeight:"set_explicitHeight",get_explicitHeight:"get_explicitHeight",set_explicitWidth:"set_explicitWidth",get_explicitWidth:"get_explicitWidth"})
});
var feathers_layout_ILayoutObject = function() { };
$hxClasses["feathers.layout.ILayoutObject"] = feathers_layout_ILayoutObject;
feathers_layout_ILayoutObject.__name__ = "feathers.layout.ILayoutObject";
feathers_layout_ILayoutObject.__isInterface__ = true;
feathers_layout_ILayoutObject.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_layout_ILayoutObject.prototype = {
	__class__: feathers_layout_ILayoutObject
	,__properties__: {get_layoutData:"get_layoutData",get_includeInLayout:"get_includeInLayout"}
};
var feathers_style_IStyleObject = function() { };
$hxClasses["feathers.style.IStyleObject"] = feathers_style_IStyleObject;
feathers_style_IStyleObject.__name__ = "feathers.style.IStyleObject";
feathers_style_IStyleObject.__isInterface__ = true;
feathers_style_IStyleObject.prototype = {
	__class__: feathers_style_IStyleObject
	,__properties__: {get_themeEnabled:"get_themeEnabled"}
};
var feathers_style_IVariantStyleObject = function() { };
$hxClasses["feathers.style.IVariantStyleObject"] = feathers_style_IVariantStyleObject;
feathers_style_IVariantStyleObject.__name__ = "feathers.style.IVariantStyleObject";
feathers_style_IVariantStyleObject.__isInterface__ = true;
feathers_style_IVariantStyleObject.__interfaces__ = [feathers_style_IStyleObject];
feathers_style_IVariantStyleObject.prototype = {
	__class__: feathers_style_IVariantStyleObject
	,__properties__: {set_variant:"set_variant",get_variant:"get_variant",get_styleContext:"get_styleContext"}
};
var feathers_core_IUIControl = function() { };
$hxClasses["feathers.core.IUIControl"] = feathers_core_IUIControl;
feathers_core_IUIControl.__name__ = "feathers.core.IUIControl";
feathers_core_IUIControl.__isInterface__ = true;
feathers_core_IUIControl.__interfaces__ = [feathers_core_IDisplayObject];
feathers_core_IUIControl.prototype = {
	__class__: feathers_core_IUIControl
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var feathers_core_FeathersControl = function() {
	this._restrictedStyles = [];
	this._styleProviderStyles = [];
	this._clearingStyles = false;
	this._applyingStyles = false;
	this._focusPaddingLeft = 0.0;
	this._focusPaddingBottom = 0.0;
	this._focusPaddingRight = 0.0;
	this._focusPaddingTop = 0.0;
	this._focusRectSkin = null;
	this._focusEnabled = true;
	this._focusManager = null;
	this.disabledAlpha = null;
	this._explicitAlpha = 1.0;
	this._includeInLayout = true;
	this._customStyleProvider = null;
	this._currentStyleProvider = null;
	this._themeEnabled = true;
	this._enabled = true;
	this._created = false;
	this._initialized = false;
	this._initializing = false;
	this._waitingToApplyStyles = false;
	feathers_core_MeasureSprite.call(this);
	this.set_tabEnabled(js_Boot.__implements(this,feathers_core_IFocusObject));
	this.addEventListener("addedToStage",$bind(this,this.feathersControl_addedToStageHandler));
	this.addEventListener("removedFromStage",$bind(this,this.feathersControl_removedFromStageHandler));
	this.addEventListener("focusIn",$bind(this,this.feathersControl_focusInHandler));
	this.addEventListener("focusOut",$bind(this,this.feathersControl_focusOutHandler));
};
$hxClasses["feathers.core.FeathersControl"] = feathers_core_FeathersControl;
feathers_core_FeathersControl.__name__ = "feathers.core.FeathersControl";
feathers_core_FeathersControl.__interfaces__ = [feathers_layout_ILayoutObject,feathers_style_IVariantStyleObject,feathers_core_IUIControl];
feathers_core_FeathersControl.__super__ = feathers_core_MeasureSprite;
feathers_core_FeathersControl.prototype = $extend(feathers_core_MeasureSprite.prototype,{
	get_enabled: function() {
		return this._enabled;
	}
	,set_enabled: function(value) {
		if(this._enabled == value) {
			return this._enabled;
		}
		this._enabled = value;
		if(this._enabled || this.disabledAlpha == null) {
			feathers_core_MeasureSprite.prototype.set_alpha.call(this,this._explicitAlpha);
		} else if(!this._enabled && this.disabledAlpha != null) {
			feathers_core_MeasureSprite.prototype.set_alpha.call(this,this.disabledAlpha);
		}
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		if(this._enabled) {
			feathers_events_FeathersEvent.dispatch(this,"enable");
		} else {
			feathers_events_FeathersEvent.dispatch(this,"disable");
		}
		return this._enabled;
	}
	,get_themeEnabled: function() {
		return this._themeEnabled;
	}
	,set_styleProvider: function(value) {
		if(this._customStyleProvider == value) {
			return this._customStyleProvider;
		}
		if(this._customStyleProvider != null) {
			this._customStyleProvider.removeEventListener("clear",$bind(this,this.customStyleProvider_clearHandler));
		}
		this._customStyleProvider = value;
		if(this._customStyleProvider != null) {
			this._customStyleProvider.addEventListener("clear",$bind(this,this.customStyleProvider_clearHandler),false,0,true);
		}
		if(this._initialized && this.stage != null) {
			this.applyStyles();
		} else {
			this._waitingToApplyStyles = true;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._customStyleProvider;
	}
	,get_styleContext: function() {
		return null;
	}
	,get_includeInLayout: function() {
		return this._includeInLayout;
	}
	,get_layoutData: function() {
		return this._layoutData;
	}
	,set_alpha: function(value) {
		this._explicitAlpha = value;
		if(this._enabled || this.disabledAlpha == null) {
			feathers_core_MeasureSprite.prototype.set_alpha.call(this,value);
		}
		return this._explicitAlpha;
	}
	,get_focusManager: function() {
		return this._focusManager;
	}
	,set_focusOwner: function(value) {
		if(this._focusOwner == value) {
			return this._focusOwner;
		}
		this._focusOwner = value;
		return this._focusOwner;
	}
	,get_rawTabEnabled: function() {
		return feathers_core_MeasureSprite.prototype.get_tabEnabled.call(this);
	}
	,get_focusEnabled: function() {
		if(this._enabled) {
			return this._focusEnabled;
		} else {
			return false;
		}
	}
	,set_focusEnabled: function(value) {
		if(this._focusEnabled == value) {
			return this._focusEnabled;
		}
		this._focusEnabled = value;
		return this._focusEnabled;
	}
	,get_tabEnabled: function() {
		if(this._enabled) {
			return feathers_core_MeasureSprite.prototype.get_tabEnabled.call(this);
		} else {
			return false;
		}
	}
	,get_focusRectSkin: function() {
		return this._focusRectSkin;
	}
	,set_focusRectSkin: function(value) {
		if(!this.setStyle("focusRectSkin")) {
			return this._focusRectSkin;
		}
		this.showFocus(false);
		this._previousClearStyle = $bind(this,this.clearStyle_focusRectSkin);
		this._focusRectSkin = value;
		return this._focusRectSkin;
	}
	,set_focusPaddingTop: function(value) {
		if(!this.setStyle("focusPaddingTop")) {
			return this._focusPaddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_focusPaddingTop);
		this._focusPaddingTop = value;
		return this._focusPaddingTop;
	}
	,set_focusPaddingRight: function(value) {
		if(!this.setStyle("focusPaddingRight")) {
			return this._focusPaddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_focusPaddingRight);
		this._focusPaddingRight = value;
		return this._focusPaddingRight;
	}
	,set_focusPaddingBottom: function(value) {
		if(!this.setStyle("focusPaddingBottom")) {
			return this._focusPaddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_focusPaddingBottom);
		this._focusPaddingBottom = value;
		return this._focusPaddingBottom;
	}
	,set_focusPaddingLeft: function(value) {
		if(!this.setStyle("focusPaddingLeft")) {
			return this._focusPaddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_focusPaddingLeft);
		this._focusPaddingLeft = value;
		return this._focusPaddingLeft;
	}
	,showFocus: function(show) {
		if(this._focusManager == null || this._focusRectSkin == null) {
			return;
		}
		if(show) {
			this._focusManager.get_focusPane().addChild(this._focusRectSkin);
			this.addEventListener("enterFrame",$bind(this,this.feathersControl_focusRect_enterFrameHandler));
			this.positionFocusRect();
		} else if(this._focusRectSkin.parent != null) {
			this.removeEventListener("enterFrame",$bind(this,this.feathersControl_focusRect_enterFrameHandler));
			this._focusRectSkin.parent.removeChild(this._focusRectSkin);
		}
	}
	,clearStyle_focusRectSkin: function() {
		this.showFocus(false);
		this._focusRectSkin = null;
		return this._focusRectSkin;
	}
	,clearStyle_focusPaddingTop: function() {
		this._focusPaddingTop = 0.0;
		return this._focusPaddingTop;
	}
	,clearStyle_focusPaddingRight: function() {
		this._focusPaddingRight = 0.0;
		return this._focusPaddingRight;
	}
	,clearStyle_focusPaddingBottom: function() {
		this._focusPaddingBottom = 0.0;
		return this._focusPaddingBottom;
	}
	,clearStyle_focusPaddingLeft: function() {
		this._focusPaddingLeft = 0.0;
		return this._focusPaddingLeft;
	}
	,positionFocusRect: function() {
		if(this._focusManager == null || this._focusRectSkin == null || this._focusRectSkin.parent == null) {
			return;
		}
		var point = new openfl_geom_Point(-this._focusPaddingLeft,-this._focusPaddingTop);
		point = this.localToGlobal(point);
		point = this._focusManager.get_focusPane().globalToLocal(point);
		this._focusRectSkin.set_x(point.x);
		this._focusRectSkin.set_y(point.y);
		point.setTo(this.actualWidth + this._focusPaddingRight,this.actualHeight + this._focusPaddingBottom);
		point = this.localToGlobal(point);
		point = this._focusManager.get_focusPane().globalToLocal(point);
		this._focusRectSkin.set_width(point.x - this._focusRectSkin.get_x());
		this._focusRectSkin.set_height(point.y - this._focusRectSkin.get_y());
	}
	,get_variant: function() {
		return this._variant;
	}
	,set_variant: function(value) {
		if(this._variant == value) {
			return this._variant;
		}
		this._variant = value;
		if(this._initialized && this.stage != null) {
			this.applyStyles();
		} else {
			this._waitingToApplyStyles = true;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._variant;
	}
	,validateNow: function() {
		if(!this._initialized) {
			if(this._initializing) {
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("A component cannot validate until after it has finished initializing."));
			}
			this.initializeNow();
		}
		if(this._waitingToApplyStyles) {
			this.applyStyles();
		}
		feathers_core_MeasureSprite.prototype.validateNow.call(this);
		if(!this._created) {
			this._created = true;
			feathers_events_FeathersEvent.dispatch(this,"creationComplete");
		}
	}
	,initializeNow: function() {
		if(this._initialized || this._initializing) {
			return;
		}
		this._waitingToApplyStyles = true;
		this._initializing = true;
		this.initialize();
		this.setInvalid();
		this._initializing = false;
		this._initialized = true;
		feathers_events_FeathersEvent.dispatch(this,"initialize");
	}
	,initialize: function() {
	}
	,setStyle: function(styleName,state) {
		var styleDef = state == null ? feathers_core__$FeathersControl_StyleDefinition.Name(styleName) : feathers_core__$FeathersControl_StyleDefinition.NameAndState(styleName,state);
		var restricted = this.containsStyleDef(this._restrictedStyles,styleDef);
		if(this._applyingStyles && restricted) {
			return false;
		}
		if(this._applyingStyles) {
			if(!this._clearingStyles && !this.containsStyleDef(this._styleProviderStyles,styleDef)) {
				this._styleProviderStyles.push(styleDef);
			}
		} else if(!restricted) {
			if(!this._clearingStyles && this.containsStyleDef(this._styleProviderStyles,styleDef)) {
				HxOverrides.remove(this._styleProviderStyles,styleDef);
			}
			this._restrictedStyles.push(styleDef);
		}
		return true;
	}
	,containsStyleDef: function(target,styleDef) {
		var _g = 0;
		while(_g < target.length) {
			var other = target[_g];
			++_g;
			if(Type.enumEq(styleDef,other)) {
				return true;
			}
		}
		return false;
	}
	,applyStyles: function() {
		if(!this._initialized) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Cannot apply styles until after a Feathers UI component has initialized."));
		}
		this._waitingToApplyStyles = false;
		var styleProvider = this._customStyleProvider;
		if(styleProvider == null) {
			var theme = feathers_style_Theme.getTheme(this);
			if(theme != null) {
				styleProvider = theme.getStyleProvider(this);
			}
		}
		if(this._themeEnabled && styleProvider == null) {
			var theme = feathers_style_Theme.get_fallbackTheme();
			if(theme != null) {
				styleProvider = theme.getStyleProvider(this);
			}
		}
		if(styleProvider == null) {
			styleProvider = this._currentStyleProvider;
		}
		if(this._currentStyleProvider != styleProvider) {
			if(this._currentStyleProvider != null) {
				this._currentStyleProvider.removeEventListener("stylesChange",$bind(this,this.styleProvider_stylesChangeHandler));
				this._currentStyleProvider.removeEventListener("clear",$bind(this,this.styleProvider_clearHandler));
			}
			this._currentStyleProvider = styleProvider;
			if(this._currentStyleProvider != null) {
				this._currentStyleProvider.addEventListener("stylesChange",$bind(this,this.styleProvider_stylesChangeHandler),false,0,true);
				this._currentStyleProvider.addEventListener("clear",$bind(this,this.styleProvider_clearHandler),false,0,true);
			}
		}
		var oldApplyingStyles = this._applyingStyles;
		this._applyingStyles = true;
		this.clearStyles();
		if(this._currentStyleProvider != null) {
			this._currentStyleProvider.applyStyles(this);
		}
		this._applyingStyles = oldApplyingStyles;
	}
	,clearStyles: function() {
		var oldClearingStyles = this._clearingStyles;
		this._clearingStyles = true;
		var _g = 0;
		var _g1 = this._styleProviderStyles;
		while(_g < _g1.length) {
			var styleDef = _g1[_g];
			++_g;
			switch(styleDef._hx_index) {
			case 0:
				var name = styleDef.name;
				var clearMethodName = "clearStyle_" + name;
				var clearMethod = Reflect.field(this,clearMethodName);
				if(clearMethod == null) {
					throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Missing @style method: '" + clearMethodName + "'"));
				}
				clearMethod.apply(this,[]);
				break;
			case 1:
				var name1 = styleDef.name;
				var state = styleDef.state;
				var method = Reflect.field(this,name1);
				method.apply(this,[state,null]);
				break;
			}
		}
		this._styleProviderStyles = [];
		this._clearingStyles = oldClearingStyles;
	}
	,clearStyleProvider: function() {
		if(this._currentStyleProvider == null) {
			return;
		}
		this._currentStyleProvider.removeEventListener("stylesChange",$bind(this,this.styleProvider_stylesChangeHandler));
		this._currentStyleProvider.removeEventListener("clear",$bind(this,this.styleProvider_clearHandler));
		this._currentStyleProvider = null;
		this._waitingToApplyStyles = true;
	}
	,feathersControl_addedToStageHandler: function(event) {
		if(!this._initialized) {
			this.initializeNow();
		}
		if(this._waitingToApplyStyles) {
			this.applyStyles();
		}
	}
	,feathersControl_removedFromStageHandler: function(event) {
		this.showFocus(false);
		this.clearStyleProvider();
	}
	,feathersControl_focusInHandler: function(event) {
		var focusThis = null;
		if(js_Boot.__implements(this,feathers_core_IFocusObject)) {
			focusThis = js_Boot.__cast(this , feathers_core_IFocusObject);
		}
		if(this._focusManager == null || !this._focusManager.get_showFocusIndicator() || this._focusManager.get_focus() != focusThis) {
			return;
		}
		this.showFocus(true);
	}
	,feathersControl_focusOutHandler: function(event) {
		if(this._focusManager == null) {
			return;
		}
		this.showFocus(false);
	}
	,styleProvider_stylesChangeHandler: function(event) {
		if(!event.affectsTarget(this)) {
			return;
		}
		if(this.stage != null) {
			this.applyStyles();
		} else {
			this._waitingToApplyStyles = true;
		}
	}
	,customStyleProvider_clearHandler: function(event) {
		this._customStyleProvider.removeEventListener("clear",$bind(this,this.customStyleProvider_clearHandler));
		this._customStyleProvider = null;
	}
	,styleProvider_clearHandler: function(event) {
		this.clearStyleProvider();
		if(this.stage != null) {
			this.applyStyles();
		}
	}
	,feathersControl_focusRect_enterFrameHandler: function(event) {
		this.positionFocusRect();
	}
	,__class__: feathers_core_FeathersControl
	,__properties__: $extend(feathers_core_MeasureSprite.prototype.__properties__,{set_variant:"set_variant",get_variant:"get_variant",set_focusPaddingLeft:"set_focusPaddingLeft",set_focusPaddingBottom:"set_focusPaddingBottom",set_focusPaddingRight:"set_focusPaddingRight",set_focusPaddingTop:"set_focusPaddingTop",set_focusRectSkin:"set_focusRectSkin",get_focusRectSkin:"get_focusRectSkin",set_focusEnabled:"set_focusEnabled",get_focusEnabled:"get_focusEnabled",get_rawTabEnabled:"get_rawTabEnabled",set_focusOwner:"set_focusOwner",get_focusManager:"get_focusManager",get_layoutData:"get_layoutData",get_includeInLayout:"get_includeInLayout",get_styleContext:"get_styleContext",set_styleProvider:"set_styleProvider",get_themeEnabled:"get_themeEnabled",set_enabled:"set_enabled",get_enabled:"get_enabled"})
});
var feathers_core_IStateContext = function() { };
$hxClasses["feathers.core.IStateContext"] = feathers_core_IStateContext;
feathers_core_IStateContext.__name__ = "feathers.core.IStateContext";
feathers_core_IStateContext.__isInterface__ = true;
feathers_core_IStateContext.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_core_IStateContext.prototype = {
	__class__: feathers_core_IStateContext
	,__properties__: {get_currentState:"get_currentState"}
};
var feathers_controls_ITriggerView = function() { };
$hxClasses["feathers.controls.ITriggerView"] = feathers_controls_ITriggerView;
feathers_controls_ITriggerView.__name__ = "feathers.controls.ITriggerView";
feathers_controls_ITriggerView.__isInterface__ = true;
feathers_controls_ITriggerView.__interfaces__ = [feathers_core_IUIControl];
var feathers_controls_BasicButton = function(triggerListener) {
	this.__backgroundSkin = null;
	this.__keepDownStateOnRollOut = false;
	this._stateToSkin = new haxe_ds_EnumValueMap();
	this._currentBackgroundSkin = null;
	this._backgroundSkinMeasurements = null;
	this._pointerTrigger = null;
	this._keyToState = null;
	this._pointerToState = null;
	this._currentState = feathers_controls_ButtonState.UP;
	feathers_core_FeathersControl.call(this);
	this.mouseChildren = false;
	this.set_buttonMode(true);
	this.useHandCursor = false;
	this.addEventListener("click",$bind(this,this.basicButton_clickHandler));
	this.addEventListener("touchTap",$bind(this,this.basicButton_touchTapHandler));
	if(triggerListener != null) {
		this.addEventListener("trigger",triggerListener);
	}
};
$hxClasses["feathers.controls.BasicButton"] = feathers_controls_BasicButton;
feathers_controls_BasicButton.__name__ = "feathers.controls.BasicButton";
feathers_controls_BasicButton.__interfaces__ = [feathers_core_IStateContext,feathers_controls_ITriggerView];
feathers_controls_BasicButton.__super__ = feathers_core_FeathersControl;
feathers_controls_BasicButton.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_currentState: function() {
		return this._currentState;
	}
	,set_enabled: function(value) {
		feathers_core_FeathersControl.prototype.set_enabled.call(this,value);
		if(this._enabled) {
			if(this._currentState == feathers_controls_ButtonState.DISABLED) {
				this.changeState(feathers_controls_ButtonState.UP);
			}
		} else {
			this.changeState(feathers_controls_ButtonState.DISABLED);
		}
		return this._enabled;
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this._pointerToState == null) {
			this._pointerToState = new feathers_utils_PointerToState(this,$bind(this,this.changeState),feathers_controls_ButtonState.UP,feathers_controls_ButtonState.DOWN,feathers_controls_ButtonState.HOVER);
		}
		if(this._keyToState == null) {
			this._keyToState = new feathers_utils_KeyToState(this,$bind(this,this.changeState),feathers_controls_ButtonState.UP,feathers_controls_ButtonState.DOWN);
		}
		if(this._pointerTrigger == null) {
			this._pointerTrigger = new feathers_utils_PointerTrigger(this);
		}
	}
	,update: function() {
		this.commitChanges();
		this.measure();
		this.layoutContent();
	}
	,commitChanges: function() {
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid) {
			this.refreshInteractivity();
		}
	}
	,layoutContent: function() {
		this.layoutBackgroundSkin();
	}
	,refreshInteractivity: function() {
		this._pointerToState.set_keepDownStateOnRollOut(this.get_keepDownStateOnRollOut());
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		var result = this._stateToSkin.get(this._currentState);
		if(result != null) {
			return result;
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			if(this._currentBackgroundSkin != null) {
				newWidth = this._currentBackgroundSkin.get_width();
			} else {
				newWidth = 0.0;
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			if(this._currentBackgroundSkin != null) {
				newHeight = this._currentBackgroundSkin.get_height();
			} else {
				newHeight = 0.0;
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			if(measureSkin != null) {
				newMinWidth = measureSkin.get_minWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = this._backgroundSkinMeasurements.minWidth;
			} else {
				newMinWidth = 0.0;
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			if(measureSkin != null) {
				newMinHeight = measureSkin.get_minHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = this._backgroundSkinMeasurements.minHeight;
			} else {
				newMinHeight = 0.0;
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,layoutBackgroundSkin: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,changeState: function(state) {
		if(!this._enabled) {
			state = feathers_controls_ButtonState.DISABLED;
		}
		if(this._currentState == state) {
			return;
		}
		this._currentState = state;
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		feathers_events_FeathersEvent.dispatch(this,"stateChange");
	}
	,basicButton_clickHandler: function(event) {
		if(!this._enabled) {
			event.stopImmediatePropagation();
			return;
		}
	}
	,basicButton_touchTapHandler: function(event) {
		if(!this._enabled) {
			event.stopImmediatePropagation();
			return;
		}
	}
	,get_keepDownStateOnRollOut: function() {
		return this.__keepDownStateOnRollOut;
	}
	,set_keepDownStateOnRollOut: function(value) {
		if(!this.setStyle("keepDownStateOnRollOut")) {
			return this.__keepDownStateOnRollOut;
		}
		if(this.__keepDownStateOnRollOut == value) {
			return this.__keepDownStateOnRollOut;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_keepDownStateOnRollOut);
		this.__keepDownStateOnRollOut = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__keepDownStateOnRollOut;
	}
	,clearStyle_keepDownStateOnRollOut: function() {
		this.set_keepDownStateOnRollOut(false);
		return this.get_keepDownStateOnRollOut();
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,__class__: feathers_controls_BasicButton
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",set_keepDownStateOnRollOut:"set_keepDownStateOnRollOut",get_keepDownStateOnRollOut:"get_keepDownStateOnRollOut",get_currentState:"get_currentState"})
});
var feathers_controls_IToggle = function() { };
$hxClasses["feathers.controls.IToggle"] = feathers_controls_IToggle;
feathers_controls_IToggle.__name__ = "feathers.controls.IToggle";
feathers_controls_IToggle.__isInterface__ = true;
feathers_controls_IToggle.__interfaces__ = [feathers_core_IUIControl];
feathers_controls_IToggle.prototype = {
	__class__: feathers_controls_IToggle
	,__properties__: {set_selected:"set_selected",get_selected:"get_selected"}
};
var feathers_controls_BasicToggleButton = function(changeListener) {
	this.__selectedBackgroundSkin = null;
	this.__backgroundSkin = null;
	this.__keepDownStateOnRollOut = false;
	this._stateToSkin = new haxe_ds_EnumValueMap();
	this._currentBackgroundSkin = null;
	this._backgroundSkinMeasurements = null;
	this._pointerTrigger = null;
	this._keyToState = null;
	this._pointerToState = null;
	this._toggleable = true;
	this._selected = false;
	this._currentState = feathers_controls_ToggleButtonState.UP(false);
	feathers_core_FeathersControl.call(this);
	this.mouseChildren = false;
	this.set_buttonMode(true);
	this.useHandCursor = false;
	this.addEventListener("click",$bind(this,this.basicToggleButton_clickHandler));
	this.addEventListener("touchTap",$bind(this,this.basicToggleButton_touchTapHandler));
	this.addEventListener("trigger",$bind(this,this.basicToggleButton_triggerHandler));
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.BasicToggleButton"] = feathers_controls_BasicToggleButton;
feathers_controls_BasicToggleButton.__name__ = "feathers.controls.BasicToggleButton";
feathers_controls_BasicToggleButton.__interfaces__ = [feathers_core_IStateContext,feathers_controls_IToggle,feathers_controls_ITriggerView];
feathers_controls_BasicToggleButton.__super__ = feathers_core_FeathersControl;
feathers_controls_BasicToggleButton.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_currentState: function() {
		return this._currentState;
	}
	,set_enabled: function(value) {
		feathers_core_FeathersControl.prototype.set_enabled.call(this,value);
		if(this._enabled) {
			var _g = this._currentState;
			if(_g._hx_index == 3) {
				var selected = _g.selected;
				this.changeState(feathers_controls_ToggleButtonState.UP(selected));
			}
		} else {
			this.changeState(feathers_controls_ToggleButtonState.DISABLED(this._selected));
		}
		return this._enabled;
	}
	,get_selected: function() {
		return this._selected;
	}
	,set_selected: function(value) {
		if(this._selected == value) {
			return this._selected;
		}
		this._selected = value;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		feathers_events_FeathersEvent.dispatch(this,"change");
		this.changeState(this.get_currentState());
		return this._selected;
	}
	,set_toggleable: function(value) {
		if(this._toggleable == value) {
			return this._toggleable;
		}
		this._toggleable = value;
		return this._toggleable;
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this._pointerToState == null) {
			this._pointerToState = new feathers_utils_PointerToState(this,$bind(this,this.changeState),feathers_controls_ToggleButtonState.UP(false),feathers_controls_ToggleButtonState.DOWN(false),feathers_controls_ToggleButtonState.HOVER(false));
		}
		if(this._keyToState == null) {
			this._keyToState = new feathers_utils_KeyToState(this,$bind(this,this.changeState),feathers_controls_ToggleButtonState.UP(false),feathers_controls_ToggleButtonState.DOWN(false));
		}
		if(this._pointerTrigger == null) {
			this._pointerTrigger = new feathers_utils_PointerTrigger(this);
		}
	}
	,update: function() {
		this.commitChanges();
		this.measure();
		this.layoutContent();
	}
	,commitChanges: function() {
		var selectionInvalid = this.isInvalid(feathers_core_InvalidationFlag.SELECTION);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		if(selectionInvalid || stateInvalid || stylesInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid) {
			this.refreshInteractivity();
		}
	}
	,refreshInteractivity: function() {
		this._pointerToState.set_keepDownStateOnRollOut(this.get_keepDownStateOnRollOut());
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		var result = this._stateToSkin.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(this._selected && this.get_selectedBackgroundSkin() != null) {
			return this.get_selectedBackgroundSkin();
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			if(this._currentBackgroundSkin != null) {
				newWidth = this._currentBackgroundSkin.get_width();
			} else {
				newWidth = 0.0;
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			if(this._currentBackgroundSkin != null) {
				newHeight = this._currentBackgroundSkin.get_height();
			} else {
				newHeight = 0.0;
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			if(measureSkin != null) {
				newMinWidth = measureSkin.get_minWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = this._backgroundSkinMeasurements.minWidth;
			} else {
				newMinWidth = 0.0;
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			if(measureSkin != null) {
				newMinHeight = measureSkin.get_minHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = this._backgroundSkinMeasurements.minHeight;
			} else {
				newMinHeight = 0.0;
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,layoutContent: function() {
		this.layoutBackgroundSkin();
	}
	,layoutBackgroundSkin: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,changeState: function(state) {
		var toggleState = js_Boot.__cast(state , feathers_controls_ToggleButtonState);
		if(!this._enabled) {
			toggleState = feathers_controls_ToggleButtonState.DISABLED(this._selected);
		}
		switch(toggleState._hx_index) {
		case 0:
			var selected = toggleState.selected;
			if(this._selected != selected) {
				toggleState = feathers_controls_ToggleButtonState.UP(this._selected);
			}
			break;
		case 1:
			var selected = toggleState.selected;
			if(this._selected != selected) {
				toggleState = feathers_controls_ToggleButtonState.HOVER(this._selected);
			}
			break;
		case 2:
			var selected = toggleState.selected;
			if(this._selected != selected) {
				toggleState = feathers_controls_ToggleButtonState.DOWN(this._selected);
			}
			break;
		case 3:
			var selected = toggleState.selected;
			if(this._selected != selected) {
				toggleState = feathers_controls_ToggleButtonState.DISABLED(this._selected);
			}
			break;
		}
		if(this._currentState == toggleState) {
			return;
		}
		this._currentState = toggleState;
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		feathers_events_FeathersEvent.dispatch(this,"stateChange");
	}
	,basicToggleButton_clickHandler: function(event) {
		if(!this._enabled) {
			event.stopImmediatePropagation();
			return;
		}
	}
	,basicToggleButton_touchTapHandler: function(event) {
		if(!this._enabled) {
			event.stopImmediatePropagation();
			return;
		}
	}
	,basicToggleButton_triggerHandler: function(event) {
		if(!this._enabled || !this._toggleable) {
			return;
		}
		this.set_selected(!this._selected);
	}
	,get_keepDownStateOnRollOut: function() {
		return this.__keepDownStateOnRollOut;
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,get_selectedBackgroundSkin: function() {
		return this.__selectedBackgroundSkin;
	}
	,__class__: feathers_controls_BasicToggleButton
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_selectedBackgroundSkin:"get_selectedBackgroundSkin",set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",get_keepDownStateOnRollOut:"get_keepDownStateOnRollOut",set_toggleable:"set_toggleable",set_selected:"set_selected",get_selected:"get_selected",get_currentState:"get_currentState"})
});
var feathers_core_IFocusManagerAware = function() { };
$hxClasses["feathers.core.IFocusManagerAware"] = feathers_core_IFocusManagerAware;
feathers_core_IFocusManagerAware.__name__ = "feathers.core.IFocusManagerAware";
feathers_core_IFocusManagerAware.__isInterface__ = true;
feathers_core_IFocusManagerAware.prototype = {
	__class__: feathers_core_IFocusManagerAware
	,__properties__: {get_focusManager:"get_focusManager"}
};
var feathers_core_IFocusObject = function() { };
$hxClasses["feathers.core.IFocusObject"] = feathers_core_IFocusObject;
feathers_core_IFocusObject.__name__ = "feathers.core.IFocusObject";
feathers_core_IFocusObject.__isInterface__ = true;
feathers_core_IFocusObject.__interfaces__ = [feathers_core_IDisplayObject,feathers_core_IFocusManagerAware];
feathers_core_IFocusObject.prototype = {
	__class__: feathers_core_IFocusObject
	,__properties__: {get_focusEnabled:"get_focusEnabled"}
};
var feathers_core_IHTMLTextControl = function() { };
$hxClasses["feathers.core.IHTMLTextControl"] = feathers_core_IHTMLTextControl;
feathers_core_IHTMLTextControl.__name__ = "feathers.core.IHTMLTextControl";
feathers_core_IHTMLTextControl.__isInterface__ = true;
feathers_core_IHTMLTextControl.__interfaces__ = [feathers_core_IUIControl];
var feathers_core_ITextControl = function() { };
$hxClasses["feathers.core.ITextControl"] = feathers_core_ITextControl;
feathers_core_ITextControl.__name__ = "feathers.core.ITextControl";
feathers_core_ITextControl.__isInterface__ = true;
feathers_core_ITextControl.__interfaces__ = [feathers_core_IUIControl];
feathers_core_ITextControl.prototype = {
	__class__: feathers_core_ITextControl
	,__properties__: {set_text:"set_text"}
};
var feathers_controls_Button = function(text,triggerListener) {
	this.__showText = true;
	this.__textOffsetY = 0.0;
	this.__textOffsetX = 0.0;
	this.__iconOffsetY = 0.0;
	this.__iconOffsetX = 0.0;
	this.__minGap = 0.0;
	this.__gap = 0.0;
	this.__iconPosition = feathers_layout_RelativePosition.LEFT;
	this.__verticalAlign = feathers_layout_VerticalAlign.MIDDLE;
	this.__horizontalAlign = feathers_layout_HorizontalAlign.CENTER;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__icon = null;
	this.__wordWrap = false;
	this.__embedFonts = false;
	this.__disabledTextFormat = null;
	this.__textFormat = null;
	this._stateToTextFormat = new haxe_ds_EnumValueMap();
	this._wrappedOnMeasure = false;
	this._ignoreIconResizes = false;
	this._currentIcon = null;
	this._iconMeasurements = null;
	this._stateToIcon = new haxe_ds_EnumValueMap();
	this._htmlText = null;
	this._updatedTextStyles = false;
	this._previousSimpleTextFormat = null;
	this._previousTextFormat = null;
	this._previousHTMLText = null;
	this._previousText = null;
	this.initializeButtonTheme();
	feathers_controls_BasicButton.call(this,triggerListener);
	this.set_text(text);
	this.set_tabEnabled(true);
	this.set_tabChildren(false);
	this.focusRect = false;
	this.addEventListener("keyDown",$bind(this,this.button_keyDownHandler));
	this.addEventListener("focusIn",$bind(this,this.button_focusInHandler));
	this.addEventListener("focusOut",$bind(this,this.button_focusOutHandler));
};
$hxClasses["feathers.controls.Button"] = feathers_controls_Button;
feathers_controls_Button.__name__ = "feathers.controls.Button";
feathers_controls_Button.__interfaces__ = [feathers_core_IFocusObject,feathers_core_IHTMLTextControl,feathers_core_ITextControl];
feathers_controls_Button.__super__ = feathers_controls_BasicButton;
feathers_controls_Button.prototype = $extend(feathers_controls_BasicButton.prototype,{
	set_text: function(value) {
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._text;
	}
	,initializeButtonTheme: function() {
		feathers_themes_steel_components_SteelButtonStyles.initialize();
	}
	,initialize: function() {
		feathers_controls_BasicButton.prototype.initialize.call(this);
		if(this.textField == null) {
			this.textField = new openfl_text_TextField();
			this.textField.set_selectable(false);
			this.textField.set_multiline(true);
			this.addChild(this.textField);
		}
	}
	,commitChanges: function() {
		feathers_controls_BasicButton.prototype.commitChanges.call(this);
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		this._updatedTextStyles = false;
		if(stylesInvalid || stateInvalid) {
			this.refreshIcon();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshTextStyles();
		}
		if(dataInvalid || stylesInvalid || stateInvalid || sizeInvalid) {
			this.refreshText(sizeInvalid);
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		if(hasText || hasHTMLText) {
			this.refreshTextFieldDimensions(true);
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this.measureContentWidth();
			newWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				newWidth = Math.max(this._currentBackgroundSkin.get_width(),newWidth);
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this.measureContentHeight();
			newHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				newHeight = Math.max(this._currentBackgroundSkin.get_height(),newHeight);
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = this.measureContentMinWidth();
			newMinWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMinWidth = Math.max(measureSkin.get_minWidth(),newMinWidth);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = Math.max(this._backgroundSkinMeasurements.minWidth,newMinWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this.measureContentMinHeight();
			newMinHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMinHeight = Math.max(measureSkin.get_minHeight(),newMinHeight);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = Math.max(this._backgroundSkinMeasurements.minHeight,newMinHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,calculateExplicitWidthForTextMeasurement: function() {
		var textFieldExplicitWidth = null;
		if(this.get_explicitWidth() != null) {
			textFieldExplicitWidth = this.get_explicitWidth();
		} else if(this.get_explicitMaxWidth() != null) {
			textFieldExplicitWidth = this.get_explicitMaxWidth();
		} else if(this._backgroundSkinMeasurements != null && this._backgroundSkinMeasurements.maxWidth != null) {
			textFieldExplicitWidth = this._backgroundSkinMeasurements.maxWidth;
		}
		if(textFieldExplicitWidth == null) {
			return textFieldExplicitWidth;
		}
		textFieldExplicitWidth -= this.get_paddingLeft() + this.get_paddingRight();
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
					(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
				}
				textFieldExplicitWidth -= this._currentIcon.get_width() + adjustedGap;
			}
		}
		if(textFieldExplicitWidth < 0.0) {
			textFieldExplicitWidth = 0.0;
		}
		return textFieldExplicitWidth;
	}
	,measureContentWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText) {
					contentWidth += adjustedGap;
				}
				contentWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentWidth = Math.max(contentWidth,this._currentIcon.get_width());
			}
		}
		return contentWidth;
	}
	,measureContentHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText) {
					contentHeight += adjustedGap;
				}
				contentHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentHeight = Math.max(contentHeight,this._currentIcon.get_height());
			}
		}
		return contentHeight;
	}
	,measureContentMinWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText) {
					contentMinWidth += adjustedGap;
				}
				contentMinWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentMinWidth = Math.max(contentMinWidth,this._currentIcon.get_width());
			}
		}
		return contentMinWidth;
	}
	,measureContentMinHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText) {
					contentMinHeight += adjustedGap;
				}
				contentMinHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentMinHeight = Math.max(contentMinHeight,this._currentIcon.get_height());
			}
		}
		return contentMinHeight;
	}
	,refreshTextStyles: function() {
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
			this._updatedTextStyles = true;
		}
		if(this.textField.get_embedFonts() != this.get_embedFonts()) {
			this.textField.set_embedFonts(this.get_embedFonts());
			this._updatedTextStyles = true;
		}
		var textFormat = this.getCurrentTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimpleTextFormat) {
			return;
		}
		if(this._previousTextFormat != null) {
			this._previousTextFormat.removeEventListener("change",$bind(this,this.button_textFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.button_textFormat_changeHandler),false,0,true);
			this.textField.set_defaultTextFormat(simpleTextFormat);
			this._updatedTextStyles = true;
		}
		this._previousTextFormat = textFormat;
		this._previousSimpleTextFormat = simpleTextFormat;
	}
	,refreshText: function(forceMeasurement) {
		var hasText = this.get_showText() && this._text != null && this._text.length > 0;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		this.textField.set_visible(hasText || hasHTMLText);
		if(this._text == this._previousText && this._htmlText == this._previousHTMLText && !this._updatedTextStyles && !forceMeasurement) {
			return;
		}
		this.textField.set_autoSize(1);
		if(hasHTMLText) {
			this.textField.set_htmlText(this._htmlText);
		} else if(hasText) {
			this.textField.set_text(this._text);
		} else {
			this.textField.set_text("​");
		}
		if(this.get_wordWrap()) {
			this.textField.set_wordWrap(false);
		}
		this._textMeasuredWidth = this.textField.get_textWidth() + 4;
		this._wrappedOnMeasure = false;
		if(this.get_wordWrap()) {
			var textFieldExplicitWidth = this.calculateExplicitWidthForTextMeasurement();
			if(textFieldExplicitWidth != null && this._textMeasuredWidth > textFieldExplicitWidth) {
				this.textField.set_wordWrap(true);
				this.textField.set_width(textFieldExplicitWidth);
				this._textMeasuredWidth = this.textField.get_width();
				this._wrappedOnMeasure = true;
			}
		}
		this._textMeasuredHeight = this.textField.get_height();
		this.textField.set_autoSize(2);
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
		}
		if(!hasText && !hasHTMLText) {
			this.textField.set_text("");
		}
		this._previousText = this._text;
		this._previousHTMLText = this._htmlText;
	}
	,getCurrentTextFormat: function() {
		var result = this._stateToTextFormat.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledTextFormat() != null) {
			return this.get_disabledTextFormat();
		}
		return this.get_textFormat();
	}
	,layoutContent: function() {
		feathers_controls_BasicButton.prototype.layoutContent.call(this);
		this.layoutChildren();
	}
	,layoutChildren: function() {
		this.refreshTextFieldDimensions(false);
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var iconIsInLayout = this._currentIcon != null && this.get_iconPosition() != feathers_layout_RelativePosition.MANUAL;
		if((hasText || hasHTMLText) && iconIsInLayout) {
			this.positionSingleChild(this.textField);
			this.positionTextAndIcon();
		} else if(hasText || hasHTMLText) {
			this.positionSingleChild(this.textField);
		} else if(iconIsInLayout) {
			this.positionSingleChild(this._currentIcon);
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.MANUAL) {
				this._currentIcon.set_x(this.get_paddingLeft());
				this._currentIcon.set_y(this.get_paddingTop());
			}
			var fh = this._currentIcon;
			fh.set_x(fh.get_x() + this.get_iconOffsetX());
			var fh = this._currentIcon;
			fh.set_y(fh.get_y() + this.get_iconOffsetY());
		}
		if(hasText || hasHTMLText) {
			var fh = this.textField;
			fh.set_x(fh.get_x() + this.get_textOffsetX());
			var fh = this.textField;
			fh.set_y(fh.get_y() + this.get_textOffsetY());
		}
	}
	,refreshTextFieldDimensions: function(forMeasurement) {
		var oldIgnoreIconResizes = this._ignoreIconResizes;
		this._ignoreIconResizes = true;
		if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
		}
		this._ignoreIconResizes = oldIgnoreIconResizes;
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		if(!hasText && !hasHTMLText) {
			return;
		}
		var calculatedWidth = this.actualWidth;
		var calculatedHeight = this.actualHeight;
		if(forMeasurement) {
			calculatedWidth = 0.0;
			var explicitCalculatedWidth = this.get_explicitWidth();
			if(explicitCalculatedWidth == null) {
				explicitCalculatedWidth = this.get_explicitMaxWidth();
			}
			if(explicitCalculatedWidth != null) {
				calculatedWidth = explicitCalculatedWidth;
			}
			calculatedHeight = 0.0;
			var explicitCalculatedHeight = this.get_explicitHeight();
			if(explicitCalculatedHeight == null) {
				explicitCalculatedHeight = this.get_explicitMaxHeight();
			}
			if(explicitCalculatedHeight != null) {
				calculatedHeight = explicitCalculatedHeight;
			}
		}
		calculatedWidth -= this.get_paddingLeft() + this.get_paddingRight();
		calculatedHeight -= this.get_paddingTop() + this.get_paddingBottom();
		if(this._currentIcon != null) {
			var adjustedGap = this.get_gap();
			if(adjustedGap == 1.0 / 0.0) {
				adjustedGap = this.get_minGap();
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				calculatedWidth -= this._currentIcon.get_width() + adjustedGap;
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				calculatedHeight -= this._currentIcon.get_height() + adjustedGap;
			}
		}
		if(calculatedWidth < 0.0) {
			calculatedWidth = 0.0;
		}
		if(calculatedHeight < 0.0) {
			calculatedHeight = 0.0;
		}
		if(calculatedWidth > this._textMeasuredWidth) {
			calculatedWidth = this._textMeasuredWidth;
		}
		if(calculatedHeight > this._textMeasuredHeight) {
			calculatedHeight = this._textMeasuredHeight;
		}
		this.textField.set_width(calculatedWidth);
		var wordWrap = this.get_wordWrap();
		if(wordWrap && !this._wrappedOnMeasure && calculatedWidth >= this._textMeasuredWidth) {
			wordWrap = false;
		}
		if(this.textField.get_wordWrap() != wordWrap) {
			this.textField.set_wordWrap(wordWrap);
		}
		this.textField.set_height(calculatedHeight);
	}
	,positionSingleChild: function(displayObject) {
		if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
			displayObject.set_x(this.get_paddingLeft());
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
			displayObject.set_x(this.actualWidth - this.get_paddingRight() - displayObject.get_width());
		} else {
			displayObject.set_x(this.get_paddingLeft() + (this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - displayObject.get_width()) / 2.0);
		}
		if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
			displayObject.set_y(this.get_paddingTop());
		} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
			displayObject.set_y(this.actualHeight - this.get_paddingBottom() - displayObject.get_height());
		} else {
			displayObject.set_y(this.get_paddingTop() + (this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - displayObject.get_height()) / 2.0);
		}
	}
	,positionTextAndIcon: function() {
		if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP) {
			if(this.get_gap() == 1.0 / 0.0) {
				this._currentIcon.set_y(this.get_paddingTop());
				this.textField.set_y(this.actualHeight - this.get_paddingBottom() - this.textField.get_height());
			} else {
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
					var fh = this.textField;
					fh.set_y(fh.get_y() + (this._currentIcon.get_height() + this.get_gap()));
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					var fh = this.textField;
					fh.set_y(fh.get_y() + (this._currentIcon.get_height() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_y(this.textField.get_y() - this._currentIcon.get_height() - this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
			if(this.get_gap() == 1.0 / 0.0) {
				this.textField.set_x(this.get_paddingLeft());
				this._currentIcon.set_x(this.actualWidth - this.get_paddingRight() - this._currentIcon.get_width());
			} else {
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
					var fh = this.textField;
					fh.set_x(fh.get_x() - (this._currentIcon.get_width() + this.get_gap()));
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					var fh = this.textField;
					fh.set_x(fh.get_x() - (this._currentIcon.get_width() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_x(this.textField.get_x() + this.textField.get_width() + this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
			if(this.get_gap() == 1.0 / 0.0) {
				this.textField.set_y(this.get_paddingTop());
				this._currentIcon.set_y(this.actualHeight - this.get_paddingBottom() - this._currentIcon.get_height());
			} else {
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
					var fh = this.textField;
					fh.set_y(fh.get_y() - (this._currentIcon.get_height() + this.get_gap()));
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					var fh = this.textField;
					fh.set_y(fh.get_y() - (this._currentIcon.get_height() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_y(this.textField.get_y() + this.textField.get_height() + this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT) {
			if(this.get_gap() == 1.0 / 0.0) {
				this._currentIcon.set_x(this.get_paddingLeft());
				this.textField.set_x(this.actualWidth - this.get_paddingRight() - this.textField.get_width());
			} else {
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
					var fh = this.textField;
					fh.set_x(fh.get_x() + (this.get_gap() + this._currentIcon.get_width()));
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					var fh = this.textField;
					fh.set_x(fh.get_x() + (this.get_gap() + this._currentIcon.get_width()) / 2.0);
				}
				this._currentIcon.set_x(this.textField.get_x() - this.get_gap() - this._currentIcon.get_width());
			}
		}
		if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
			if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
				this._currentIcon.set_y(this.get_paddingTop());
			} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
				this._currentIcon.set_y(this.actualHeight - this.get_paddingBottom() - this._currentIcon.get_height());
			} else {
				this._currentIcon.set_y(this.get_paddingTop() + (this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - this._currentIcon.get_height()) / 2.0);
			}
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
			this._currentIcon.set_x(this.get_paddingLeft());
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
			this._currentIcon.set_x(this.actualWidth - this.get_paddingRight() - this._currentIcon.get_width());
		} else {
			this._currentIcon.set_x(this.get_paddingLeft() + (this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - this._currentIcon.get_width()) / 2.0);
		}
	}
	,refreshIcon: function() {
		var oldIcon = this._currentIcon;
		this._currentIcon = this.getCurrentIcon();
		if(this._currentIcon == oldIcon) {
			return;
		}
		this.removeCurrentIcon(oldIcon);
		this.addCurrentIcon(this._currentIcon);
	}
	,addCurrentIcon: function(icon) {
		if(icon == null) {
			this._iconMeasurements = null;
			return;
		}
		if(js_Boot.__implements(icon,feathers_core_IUIControl)) {
			(js_Boot.__cast(icon , feathers_core_IUIControl)).initializeNow();
		}
		if(this._iconMeasurements == null) {
			this._iconMeasurements = new feathers_layout_Measurements(icon);
		} else {
			this._iconMeasurements.save(icon);
		}
		if(js_Boot.__implements(icon,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(icon , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(icon,feathers_core_IStateObserver)) {
			(js_Boot.__cast(icon , feathers_core_IStateObserver)).set_stateContext(this);
		}
		icon.addEventListener("resize",$bind(this,this.button_icon_resizeHandler),false,0,true);
		var index = this.getChildIndex(this.textField);
		this.addChildAt(icon,index);
	}
	,getCurrentIcon: function() {
		var result = this._stateToIcon.get(this._currentState);
		if(result != null) {
			return result;
		}
		return this.get_icon();
	}
	,removeCurrentIcon: function(icon) {
		if(icon == null) {
			return;
		}
		icon.removeEventListener("resize",$bind(this,this.button_icon_resizeHandler));
		if(js_Boot.__implements(icon,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(icon , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(icon,feathers_core_IStateObserver)) {
			(js_Boot.__cast(icon , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._iconMeasurements.restore(icon);
		if(icon.parent == this) {
			this.removeChild(icon);
		}
	}
	,button_keyDownHandler: function(event) {
		if(!this._enabled || this.get_buttonMode() && this.focusRect == true) {
			return;
		}
		if(this._focusManager != null && this._focusManager.get_focus() != this) {
			return;
		}
		if(event.keyCode != 32 && event.keyCode != 13) {
			return;
		}
		event.preventDefault();
		this.dispatchEvent(new openfl_events_MouseEvent("click"));
	}
	,button_focusInHandler: function(event) {
		this._keyToState.set_enabled(this._enabled);
	}
	,button_focusOutHandler: function(event) {
		this._keyToState.set_enabled(false);
	}
	,button_textFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,button_icon_resizeHandler: function(event) {
		if(this._ignoreIconResizes) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_styleContext: function() {
		return feathers_controls_Button;
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,get_wordWrap: function() {
		return this.__wordWrap;
	}
	,get_icon: function() {
		return this.__icon;
	}
	,set_icon: function(value) {
		if(!this.setStyle("icon")) {
			return this.__icon;
		}
		if(this.__icon == value) {
			return this.__icon;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_icon);
		this.__icon = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__icon;
	}
	,clearStyle_icon: function() {
		this.set_icon(null);
		return this.get_icon();
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_horizontalAlign: function() {
		return this.__horizontalAlign;
	}
	,get_verticalAlign: function() {
		return this.__verticalAlign;
	}
	,get_iconPosition: function() {
		return this.__iconPosition;
	}
	,get_gap: function() {
		return this.__gap;
	}
	,set_gap: function(value) {
		if(!this.setStyle("gap")) {
			return this.__gap;
		}
		if(this.__gap == value) {
			return this.__gap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_gap);
		this.__gap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__gap;
	}
	,clearStyle_gap: function() {
		this.set_gap(0.0);
		return this.get_gap();
	}
	,get_minGap: function() {
		return this.__minGap;
	}
	,get_iconOffsetX: function() {
		return this.__iconOffsetX;
	}
	,get_iconOffsetY: function() {
		return this.__iconOffsetY;
	}
	,get_textOffsetX: function() {
		return this.__textOffsetX;
	}
	,get_textOffsetY: function() {
		return this.__textOffsetY;
	}
	,get_showText: function() {
		return this.__showText;
	}
	,__class__: feathers_controls_Button
	,__properties__: $extend(feathers_controls_BasicButton.prototype.__properties__,{get_showText:"get_showText",get_textOffsetY:"get_textOffsetY",get_textOffsetX:"get_textOffsetX",get_iconOffsetY:"get_iconOffsetY",get_iconOffsetX:"get_iconOffsetX",get_minGap:"get_minGap",set_gap:"set_gap",get_gap:"get_gap",get_iconPosition:"get_iconPosition",get_verticalAlign:"get_verticalAlign",get_horizontalAlign:"get_horizontalAlign",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_icon:"set_icon",get_icon:"get_icon",get_wordWrap:"get_wordWrap",get_embedFonts:"get_embedFonts",set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",set_text:"set_text"})
});
var feathers_controls_ButtonState = $hxEnums["feathers.controls.ButtonState"] = { __ename__:"feathers.controls.ButtonState",__constructs__:null
	,UP: {_hx_name:"UP",_hx_index:0,__enum__:"feathers.controls.ButtonState",toString:$estr}
	,HOVER: {_hx_name:"HOVER",_hx_index:1,__enum__:"feathers.controls.ButtonState",toString:$estr}
	,DOWN: {_hx_name:"DOWN",_hx_index:2,__enum__:"feathers.controls.ButtonState",toString:$estr}
	,DISABLED: {_hx_name:"DISABLED",_hx_index:3,__enum__:"feathers.controls.ButtonState",toString:$estr}
};
feathers_controls_ButtonState.__constructs__ = [feathers_controls_ButtonState.UP,feathers_controls_ButtonState.HOVER,feathers_controls_ButtonState.DOWN,feathers_controls_ButtonState.DISABLED];
var feathers_core_InvalidationFlag = $hxEnums["feathers.core.InvalidationFlag"] = { __ename__:"feathers.core.InvalidationFlag",__constructs__:null
	,STATE: {_hx_name:"STATE",_hx_index:0,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,SIZE: {_hx_name:"SIZE",_hx_index:1,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,STYLES: {_hx_name:"STYLES",_hx_index:2,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,SKIN: {_hx_name:"SKIN",_hx_index:3,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,LAYOUT: {_hx_name:"LAYOUT",_hx_index:4,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,DATA: {_hx_name:"DATA",_hx_index:5,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,SCROLL: {_hx_name:"SCROLL",_hx_index:6,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,SELECTION: {_hx_name:"SELECTION",_hx_index:7,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,FOCUS: {_hx_name:"FOCUS",_hx_index:8,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,SORT: {_hx_name:"SORT",_hx_index:9,__enum__:"feathers.core.InvalidationFlag",toString:$estr}
	,CUSTOM: ($_=function(value) { return {_hx_index:10,value:value,__enum__:"feathers.core.InvalidationFlag",toString:$estr}; },$_._hx_name="CUSTOM",$_.__params__ = ["value"],$_)
};
feathers_core_InvalidationFlag.__constructs__ = [feathers_core_InvalidationFlag.STATE,feathers_core_InvalidationFlag.SIZE,feathers_core_InvalidationFlag.STYLES,feathers_core_InvalidationFlag.SKIN,feathers_core_InvalidationFlag.LAYOUT,feathers_core_InvalidationFlag.DATA,feathers_core_InvalidationFlag.SCROLL,feathers_core_InvalidationFlag.SELECTION,feathers_core_InvalidationFlag.FOCUS,feathers_core_InvalidationFlag.SORT,feathers_core_InvalidationFlag.CUSTOM];
var feathers_controls_Callout = function(content) {
	this.__leftArrowGap = 0.0;
	this.__bottomArrowGap = 0.0;
	this.__rightArrowGap = 0.0;
	this.__topArrowGap = 0.0;
	this.__leftArrowSkin = null;
	this.__bottomArrowSkin = null;
	this.__rightArrowSkin = null;
	this.__topArrowSkin = null;
	this.__backgroundSkin = null;
	this.__arrowPosition = feathers_layout_RelativePosition.TOP;
	this.__verticalAlign = feathers_layout_VerticalAlign.MIDDLE;
	this.__horizontalAlign = feathers_layout_HorizontalAlign.CENTER;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__marginLeft = 0.0;
	this.__marginBottom = 0.0;
	this.__marginRight = 0.0;
	this.__marginTop = 0.0;
	this.__gap = 0.0;
	this.closeOnPointerOutside = true;
	this._ignoreContentResize = false;
	this._arrowOffset = 0.0;
	this.initializeCalloutTheme();
	feathers_core_FeathersControl.call(this);
	this.set_content(content);
	this.addEventListener("addedToStage",$bind(this,this.callout_addedToStageHandler));
	this.addEventListener("removedFromStage",$bind(this,this.callout_removedFromStageHandler));
};
$hxClasses["feathers.controls.Callout"] = feathers_controls_Callout;
feathers_controls_Callout.__name__ = "feathers.controls.Callout";
feathers_controls_Callout.positionBelowOrigin = function(callout,originBounds) {
	callout.measureWithArrowPosition(feathers_layout_RelativePosition.TOP);
	var popUpRoot = feathers_core_PopUpManager.forStage(callout.stage).get_root();
	var stageTopLeft = new openfl_geom_Point();
	stageTopLeft = popUpRoot.globalToLocal(stageTopLeft);
	var stageBottomRight = new openfl_geom_Point(callout.stage.stageWidth,callout.stage.stageHeight);
	stageBottomRight = popUpRoot.globalToLocal(stageBottomRight);
	var idealXPosition = originBounds.x;
	switch(callout.get_horizontalAlign()._hx_index) {
	case 1:
		idealXPosition += (originBounds.width - callout.get_width()) / 2.0;
		break;
	case 2:
		idealXPosition += originBounds.width - callout.get_width();
		break;
	default:
	}
	var minX = stageTopLeft.x + callout.get_marginLeft();
	var maxX = stageBottomRight.x - callout.get_width() - callout.get_marginRight();
	var xPosition = idealXPosition;
	if(xPosition < minX) {
		xPosition = minX;
	} else if(xPosition > maxX) {
		xPosition = maxX;
	}
	callout.set_x(xPosition);
	callout.set_y(originBounds.y + originBounds.height + callout.get_gap());
	callout._arrowOffset = idealXPosition - xPosition;
	callout.set_arrowPosition(feathers_layout_RelativePosition.TOP);
};
feathers_controls_Callout.positionAboveOrigin = function(callout,originBounds) {
	callout.measureWithArrowPosition(feathers_layout_RelativePosition.BOTTOM);
	var popUpRoot = feathers_core_PopUpManager.forStage(callout.stage).get_root();
	var stageTopLeft = new openfl_geom_Point();
	stageTopLeft = popUpRoot.globalToLocal(stageTopLeft);
	var stageBottomRight = new openfl_geom_Point(callout.stage.stageWidth,callout.stage.stageHeight);
	stageBottomRight = popUpRoot.globalToLocal(stageBottomRight);
	var idealXPosition = originBounds.x;
	switch(callout.get_horizontalAlign()._hx_index) {
	case 1:
		idealXPosition += (originBounds.width - callout.get_width()) / 2.0;
		break;
	case 2:
		idealXPosition += originBounds.width - callout.get_width();
		break;
	default:
	}
	var minX = stageTopLeft.x + callout.get_marginLeft();
	var maxX = stageBottomRight.x - callout.get_width() - callout.get_marginRight();
	var xPosition = idealXPosition;
	if(xPosition < minX) {
		xPosition = minX;
	} else if(xPosition > maxX) {
		xPosition = maxX;
	}
	callout.set_x(xPosition);
	callout.set_y(originBounds.y - callout.get_height() - callout.get_gap());
	callout._arrowOffset = idealXPosition - xPosition;
	callout.set_arrowPosition(feathers_layout_RelativePosition.BOTTOM);
};
feathers_controls_Callout.positionLeftOfOrigin = function(callout,originBounds) {
	callout.measureWithArrowPosition(feathers_layout_RelativePosition.RIGHT);
	var popUpRoot = feathers_core_PopUpManager.forStage(callout.stage).get_root();
	var stageTopLeft = new openfl_geom_Point();
	stageTopLeft = popUpRoot.globalToLocal(stageTopLeft);
	var stageBottomRight = new openfl_geom_Point(callout.stage.stageWidth,callout.stage.stageHeight);
	stageBottomRight = popUpRoot.globalToLocal(stageBottomRight);
	var idealYPosition = originBounds.y;
	switch(callout.get_verticalAlign()._hx_index) {
	case 1:
		idealYPosition += (originBounds.height - callout.get_height()) / 2.0;
		break;
	case 2:
		idealYPosition += originBounds.height - callout.get_height();
		break;
	default:
	}
	var minY = stageTopLeft.y + callout.get_marginTop();
	var maxY = stageBottomRight.y - callout.get_height() - callout.get_marginBottom();
	var yPosition = idealYPosition;
	if(yPosition < minY) {
		yPosition = minY;
	} else if(yPosition > maxY) {
		yPosition = maxY;
	}
	callout.set_x(originBounds.x - callout.get_width() - callout.get_gap());
	callout.set_y(yPosition);
	callout._arrowOffset = idealYPosition - yPosition;
	callout.set_arrowPosition(feathers_layout_RelativePosition.RIGHT);
};
feathers_controls_Callout.positionRightOfOrigin = function(callout,originBounds) {
	callout.measureWithArrowPosition(feathers_layout_RelativePosition.RIGHT);
	var popUpRoot = feathers_core_PopUpManager.forStage(callout.stage).get_root();
	var stageTopLeft = new openfl_geom_Point();
	stageTopLeft = popUpRoot.globalToLocal(stageTopLeft);
	var stageBottomRight = new openfl_geom_Point(callout.stage.stageWidth,callout.stage.stageHeight);
	stageBottomRight = popUpRoot.globalToLocal(stageBottomRight);
	var idealYPosition = originBounds.y;
	switch(callout.get_verticalAlign()._hx_index) {
	case 1:
		idealYPosition += (originBounds.height - callout.get_height()) / 2.0;
		break;
	case 2:
		idealYPosition += originBounds.height - callout.get_height();
		break;
	default:
	}
	var minY = stageTopLeft.y + callout.get_marginTop();
	var maxY = stageBottomRight.y - callout.get_height() - callout.get_marginBottom();
	var yPosition = idealYPosition;
	if(yPosition < minY) {
		yPosition = minY;
	} else if(yPosition > maxY) {
		yPosition = maxY;
	}
	callout.set_x(originBounds.x + originBounds.width + callout.get_gap());
	callout.set_y(yPosition);
	callout._arrowOffset = idealYPosition - yPosition;
	callout.set_arrowPosition(feathers_layout_RelativePosition.LEFT);
};
feathers_controls_Callout.__super__ = feathers_core_FeathersControl;
feathers_controls_Callout.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_content: function() {
		return this._content;
	}
	,set_content: function(value) {
		if(this._content == value) {
			return this._content;
		}
		if(this._content != null) {
			this._content.removeEventListener("resize",$bind(this,this.callout_content_resizeHandler));
			this._contentMeasurements.restore(this._content);
			if(this._content.parent == this) {
				this.removeChild(this._content);
			}
		}
		this._content = value;
		if(this._content != null) {
			this._content.addEventListener("resize",$bind(this,this.callout_content_resizeHandler),false,0,true);
			this.addChild(this._content);
			if(js_Boot.__implements(this._content,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._content , feathers_core_IUIControl)).initializeNow();
			}
			if(this._contentMeasurements == null) {
				this._contentMeasurements = new feathers_layout_Measurements(this._content);
			} else {
				this._contentMeasurements.save(this._content);
			}
		}
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		return this._content;
	}
	,get_origin: function() {
		return this._origin;
	}
	,set_origin: function(value) {
		if(this._origin == value) {
			return this._origin;
		}
		if(value != null && value.stage == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("origin must be added to the stage."));
		}
		if(this._origin != null) {
			this._origin.removeEventListener("removedFromStage",$bind(this,this.callout_origin_removedFromStageHandler));
			this.removeEventListener("enterFrame",$bind(this,this.callout_enterFrameHandler));
		}
		this._origin = value;
		if(this._origin != null) {
			this._origin.addEventListener("removedFromStage",$bind(this,this.callout_origin_removedFromStageHandler));
			if(this.stage != null) {
				this.addEventListener("enterFrame",$bind(this,this.callout_enterFrameHandler));
			}
		}
		this._lastPopUpOriginBounds = null;
		this.setInvalid(feathers_controls_Callout.INVALIDATION_FLAG_ORIGIN);
		return this._origin;
	}
	,close: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,initializeCalloutTheme: function() {
		feathers_themes_steel_components_SteelCalloutStyles.initialize();
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var originInvalid = this.isInvalid(feathers_controls_Callout.INVALIDATION_FLAG_ORIGIN);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(sizeInvalid) {
			this._lastPopUpOriginBounds = null;
			originInvalid = true;
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshArrowSkin();
		}
		if(originInvalid) {
			this.positionRelativeToOrigin();
		}
		if(stateInvalid || dataInvalid) {
			this.refreshEnabled();
		}
		if(this.measure()) {
			sizeInvalid = true;
		}
		this.layoutChildren();
	}
	,measure: function() {
		return this.measureWithArrowPosition(this.get_arrowPosition());
	}
	,measureWithArrowPosition: function(arrowPosition) {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		var stageWidth = 0.0;
		var stageHeight = 0.0;
		if(this.stage != null) {
			var stageTopLeft = new openfl_geom_Point();
			stageTopLeft = this.globalToLocal(stageTopLeft);
			var stageBottomRight = new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight);
			stageBottomRight = this.globalToLocal(stageBottomRight);
			stageWidth = stageBottomRight.x - stageTopLeft.x;
			stageHeight = stageBottomRight.y - stageTopLeft.y;
		}
		var maxWidthWithStage = this.get_explicitMaxWidth();
		if(this.stage != null) {
			var stageMaxWidth = stageWidth - this.get_marginLeft() - this.get_marginRight();
			if(maxWidthWithStage == null || maxWidthWithStage < stageMaxWidth) {
				maxWidthWithStage = stageMaxWidth;
			}
		} else {
			maxWidthWithStage = 1.0 / 0.0;
		}
		var maxHeightWithStage = this.get_explicitMaxHeight();
		if(this.stage != null) {
			var stageMaxHeight = stageHeight - this.get_marginTop() - this.get_marginBottom();
			if(maxHeightWithStage == null || maxHeightWithStage < stageMaxHeight) {
				maxHeightWithStage = stageMaxHeight;
			}
		} else {
			maxHeightWithStage = 1.0 / 0.0;
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParentValues(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this.get_explicitWidth(),this.get_explicitHeight(),this.get_explicitMinWidth(),this.get_explicitMinHeight(),maxWidthWithStage,maxHeightWithStage);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this.get_topArrowSkin(),feathers_core_IValidating)) {
			(js_Boot.__cast(this.get_topArrowSkin() , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this.get_rightArrowSkin(),feathers_core_IValidating)) {
			(js_Boot.__cast(this.get_rightArrowSkin() , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this.get_bottomArrowSkin(),feathers_core_IValidating)) {
			(js_Boot.__cast(this.get_bottomArrowSkin() , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this.get_leftArrowSkin(),feathers_core_IValidating)) {
			(js_Boot.__cast(this.get_leftArrowSkin() , feathers_core_IValidating)).validateNow();
		}
		var leftOrRightArrowWidth = 0.0;
		var leftOrRightArrowHeight = 0.0;
		var topOrBottomArrowWidth = 0.0;
		var topOrBottomArrowHeight = 0.0;
		if(this._currentArrowSkin != null) {
			switch(arrowPosition._hx_index) {
			case 1:
				leftOrRightArrowWidth = this.get_rightArrowSkin().get_width() + this.get_rightArrowGap();
				leftOrRightArrowHeight = this.get_rightArrowSkin().get_height();
				break;
			case 2:
				topOrBottomArrowWidth = this.get_bottomArrowSkin().get_width();
				topOrBottomArrowHeight = this.get_bottomArrowSkin().get_height() + this.get_bottomArrowGap();
				break;
			case 3:
				leftOrRightArrowWidth = this.get_leftArrowSkin().get_width() + this.get_leftArrowGap();
				leftOrRightArrowHeight = this.get_leftArrowSkin().get_height();
				break;
			default:
				topOrBottomArrowWidth = this.get_topArrowSkin().get_width();
				topOrBottomArrowHeight = this.get_topArrowSkin().get_height() + this.get_topArrowGap();
			}
		}
		var measureContent = null;
		if(js_Boot.__implements(this._content,feathers_core_IMeasureObject)) {
			measureContent = js_Boot.__cast(this._content , feathers_core_IMeasureObject);
		}
		if(this._content != null) {
			var oldIgnoreContentResize = this._ignoreContentResize;
			this._ignoreContentResize = true;
			feathers_utils_MeasurementsUtil.resetFluidlyWithParentValues(this._contentMeasurements,this._content,this.get_explicitWidth() != null ? this.get_explicitWidth() - leftOrRightArrowWidth - this.get_paddingLeft() - this.get_paddingRight() : null,this.get_explicitHeight() != null ? this.get_explicitHeight() - topOrBottomArrowHeight - this.get_paddingTop() - this.get_paddingBottom() : null,this.get_explicitMinWidth() != null ? this.get_explicitMinWidth() - leftOrRightArrowWidth - this.get_paddingLeft() - this.get_paddingRight() : null,this.get_explicitMinHeight() != null ? this.get_explicitMinHeight() - topOrBottomArrowHeight - this.get_paddingLeft() - this.get_paddingRight() : null,maxWidthWithStage != null ? maxWidthWithStage - leftOrRightArrowWidth - this.get_paddingLeft() - this.get_paddingRight() : null,maxHeightWithStage != null ? maxHeightWithStage - topOrBottomArrowHeight - this.get_paddingLeft() - this.get_paddingRight() : null);
			if(js_Boot.__implements(this._content,feathers_core_IValidating)) {
				(js_Boot.__cast(this._content , feathers_core_IValidating)).validateNow();
			}
			this._ignoreContentResize = oldIgnoreContentResize;
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			var contentWidth = 0.0;
			if(this._content != null) {
				contentWidth = this._content.get_width();
			}
			if(contentWidth < topOrBottomArrowWidth) {
				contentWidth = topOrBottomArrowWidth;
			}
			newWidth = contentWidth + this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				var backgroundWidth = this._currentBackgroundSkin.get_width();
				if(newWidth < backgroundWidth) {
					newWidth = backgroundWidth;
				}
			}
			newWidth += leftOrRightArrowWidth;
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			var contentHeight = 0.0;
			if(this._content != null) {
				contentHeight = this._content.get_height();
			}
			if(contentHeight < leftOrRightArrowHeight) {
				contentHeight = leftOrRightArrowHeight;
			}
			newHeight = contentHeight + this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				var backgroundHeight = this._currentBackgroundSkin.get_height();
				if(newHeight < backgroundHeight) {
					newHeight = backgroundHeight;
				}
			}
			newHeight += topOrBottomArrowHeight;
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			var contentMinWidth = 0.0;
			if(measureContent != null) {
				contentMinWidth = measureContent.get_minWidth();
			} else if(this._contentMeasurements != null) {
				contentMinWidth = this._contentMeasurements.minWidth;
			}
			if(contentMinWidth < topOrBottomArrowWidth) {
				contentMinWidth = topOrBottomArrowWidth;
			}
			newMinWidth = contentMinWidth + this.get_paddingLeft() + this.get_paddingRight();
			var backgroundMinWidth = 0.0;
			if(measureSkin != null) {
				backgroundMinWidth = measureSkin.get_minWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				backgroundMinWidth = this._backgroundSkinMeasurements.minWidth;
			}
			if(newMinWidth < backgroundMinWidth) {
				newMinWidth = backgroundMinWidth;
			}
			newMinWidth += leftOrRightArrowWidth;
			if(newMinWidth > maxWidthWithStage) {
				newMinWidth = maxWidthWithStage;
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			var contentMinHeight = 0.0;
			if(measureContent != null) {
				contentMinHeight = measureContent.get_minWidth();
			} else if(this._contentMeasurements != null) {
				contentMinHeight = this._contentMeasurements.minHeight;
			}
			if(contentMinHeight < leftOrRightArrowHeight) {
				contentMinHeight = leftOrRightArrowHeight;
			}
			newMinHeight = contentMinHeight + this.get_paddingTop() + this.get_paddingBottom();
			var backgroundMinHeight = 0.0;
			if(measureSkin != null) {
				backgroundMinHeight = measureSkin.get_minHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				backgroundMinHeight = this._backgroundSkinMeasurements.minHeight;
			}
			if(newMinHeight < backgroundMinHeight) {
				newMinHeight = backgroundMinHeight;
			}
			newMinHeight += topOrBottomArrowHeight;
			if(newMinHeight > maxHeightWithStage) {
				newMinHeight = maxHeightWithStage;
			}
		}
		var newMaxWidth = maxWidthWithStage;
		var newMaxHeight = maxHeightWithStage;
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,getCurrentBackgroundSkin: function() {
		return this.get_backgroundSkin();
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,refreshArrowSkin: function() {
		var oldArrowSkin = this._currentArrowSkin;
		this._currentArrowSkin = this.getCurrentArrowSkin();
		if(oldArrowSkin == this._currentArrowSkin) {
			return;
		}
		this.removeCurrentArrowSkin(oldArrowSkin);
		if(js_Boot.__implements(this._currentArrowSkin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(this._currentArrowSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChild(this._currentArrowSkin);
	}
	,getCurrentArrowSkin: function() {
		switch(this.get_arrowPosition()._hx_index) {
		case 1:
			return this.get_rightArrowSkin();
		case 2:
			return this.get_bottomArrowSkin();
		case 3:
			return this.get_leftArrowSkin();
		default:
			return this.get_topArrowSkin();
		}
	}
	,removeCurrentArrowSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,refreshEnabled: function() {
		if(js_Boot.__implements(this._content,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._content , feathers_core_IUIControl)).set_enabled(this._enabled);
		}
	}
	,layoutChildren: function() {
		if(js_Boot.__implements(this._currentArrowSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentArrowSkin , feathers_core_IValidating)).validateNow();
		}
		var xPosition = 0.0;
		var yPosition = 0.0;
		var widthOffset = 0.0;
		var heightOffset = 0.0;
		if(this._currentArrowSkin != null) {
			switch(this.get_arrowPosition()._hx_index) {
			case 1:
				widthOffset = this._currentArrowSkin.get_width() + this.get_rightArrowGap();
				break;
			case 2:
				heightOffset = this._currentArrowSkin.get_height() + this.get_bottomArrowGap();
				break;
			case 3:
				xPosition = this._currentArrowSkin.get_width() + this.get_leftArrowGap();
				break;
			default:
				yPosition = this._currentArrowSkin.get_height() + this.get_topArrowGap();
			}
		}
		var backgroundWidth = this.actualWidth - xPosition - widthOffset;
		var backgroundHeight = this.actualHeight - yPosition - heightOffset;
		if(this._currentBackgroundSkin != null) {
			this._currentBackgroundSkin.set_x(xPosition);
			this._currentBackgroundSkin.set_y(yPosition);
			this._currentBackgroundSkin.set_width(backgroundWidth);
			this._currentBackgroundSkin.set_height(backgroundHeight);
		}
		if(this._currentArrowSkin != null) {
			var contentWidth = backgroundWidth - this.get_paddingLeft() - this.get_paddingRight();
			var contentHeight = backgroundHeight - this.get_paddingTop() - this.get_paddingBottom();
			switch(this.get_arrowPosition()._hx_index) {
			case 1:
				this.get_rightArrowSkin().set_x(xPosition + backgroundWidth + this.get_rightArrowGap());
				var rightArrowSkinY = this._arrowOffset + yPosition + this.get_paddingTop();
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					rightArrowSkinY += Math.round((contentHeight - this.get_rightArrowSkin().get_height()) / 2.0);
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
					rightArrowSkinY += contentHeight - this.get_rightArrowSkin().get_height();
				}
				var minRightArrowSkinY = yPosition + this.get_paddingTop();
				if(minRightArrowSkinY > rightArrowSkinY) {
					rightArrowSkinY = minRightArrowSkinY;
				} else {
					var maxRightArrowSkinY = yPosition + this.get_paddingTop() + contentHeight - this.get_rightArrowSkin().get_height();
					if(maxRightArrowSkinY < rightArrowSkinY) {
						rightArrowSkinY = maxRightArrowSkinY;
					}
				}
				this.get_rightArrowSkin().set_y(rightArrowSkinY);
				break;
			case 2:
				var bottomArrowSkinX = this._arrowOffset + xPosition + this.get_paddingLeft();
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					bottomArrowSkinX += Math.round((contentWidth - this.get_bottomArrowSkin().get_width()) / 2.0);
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
					bottomArrowSkinX += contentWidth - this.get_bottomArrowSkin().get_width();
				}
				var minBottomArrowSkinX = xPosition + this.get_paddingLeft();
				if(minBottomArrowSkinX > bottomArrowSkinX) {
					bottomArrowSkinX = minBottomArrowSkinX;
				} else {
					var maxBottomArrowSkinX = xPosition + this.get_paddingLeft() + contentWidth - this.get_bottomArrowSkin().get_width();
					if(maxBottomArrowSkinX < bottomArrowSkinX) {
						bottomArrowSkinX = maxBottomArrowSkinX;
					}
				}
				this.get_bottomArrowSkin().set_x(bottomArrowSkinX);
				this.get_bottomArrowSkin().set_y(yPosition + backgroundHeight + this.get_bottomArrowGap());
				break;
			case 3:
				this.get_leftArrowSkin().set_x(xPosition - this.get_leftArrowSkin().get_width() - this.get_leftArrowGap());
				var leftArrowSkinY = this._arrowOffset + yPosition + this.get_paddingTop();
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					leftArrowSkinY += Math.round((contentHeight - this.get_leftArrowSkin().get_height()) / 2.0);
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
					leftArrowSkinY += contentHeight - this.get_leftArrowSkin().get_height();
				}
				var minLeftArrowSkinY = yPosition + this.get_paddingTop();
				if(minLeftArrowSkinY > leftArrowSkinY) {
					leftArrowSkinY = minLeftArrowSkinY;
				} else {
					var maxLeftArrowSkinY = yPosition + this.get_paddingTop() + contentHeight - this.get_leftArrowSkin().get_height();
					if(maxLeftArrowSkinY < leftArrowSkinY) {
						leftArrowSkinY = maxLeftArrowSkinY;
					}
				}
				this.get_leftArrowSkin().set_y(leftArrowSkinY);
				break;
			default:
				var topArrowSkinX = this._arrowOffset + xPosition + this.get_paddingLeft();
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					topArrowSkinX += Math.round((contentWidth - this.get_topArrowSkin().get_width()) / 2.0);
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
					topArrowSkinX += contentWidth - this.get_topArrowSkin().get_width();
				}
				var minTopArrowSkinX = xPosition + this.get_paddingLeft();
				if(minTopArrowSkinX > topArrowSkinX) {
					topArrowSkinX = minTopArrowSkinX;
				} else {
					var maxTopArrowSkinX = xPosition + this.get_paddingLeft() + contentWidth - this.get_topArrowSkin().get_width();
					if(maxTopArrowSkinX < topArrowSkinX) {
						topArrowSkinX = maxTopArrowSkinX;
					}
				}
				this.get_topArrowSkin().set_x(topArrowSkinX);
				this.get_topArrowSkin().set_y(yPosition - this.get_topArrowSkin().get_height() - this.get_topArrowGap());
			}
		}
		if(this._content != null) {
			this._content.set_x(xPosition + this.get_paddingLeft());
			this._content.set_y(yPosition + this.get_paddingTop());
			var oldIgnoreContentResize = this._ignoreContentResize;
			this._ignoreContentResize = true;
			this._content.set_width(backgroundWidth - this.get_paddingLeft() - this.get_paddingRight());
			this._content.set_height(backgroundHeight - this.get_paddingTop() - this.get_paddingBottom());
			if(js_Boot.__implements(this._content,feathers_core_IValidating)) {
				(js_Boot.__cast(this._content , feathers_core_IValidating)).validateNow();
			}
			this._ignoreContentResize = oldIgnoreContentResize;
		}
	}
	,checkForOriginMoved: function() {
		if(this._origin == null) {
			return false;
		}
		var popUpRoot = feathers_core_PopUpManager.forStage(this.stage).get_root();
		var originTopLeft = new openfl_geom_Point(this.get_origin().get_x(),this.get_origin().get_y());
		originTopLeft = this.get_origin().parent.localToGlobal(originTopLeft);
		originTopLeft = popUpRoot.globalToLocal(originTopLeft);
		var originBottomRight = new openfl_geom_Point(this.get_origin().get_x() + this.get_origin().get_width(),this.get_origin().get_y() + this.get_origin().get_height());
		originBottomRight = this.get_origin().parent.localToGlobal(originBottomRight);
		originBottomRight = popUpRoot.globalToLocal(originBottomRight);
		var bounds = new openfl_geom_Rectangle(originTopLeft.x,originTopLeft.y,originBottomRight.x - originTopLeft.x,originBottomRight.y - originTopLeft.y);
		var hasPopUpBounds = this._lastPopUpOriginBounds != null;
		if(hasPopUpBounds && this._lastPopUpOriginBounds.equals(bounds)) {
			return false;
		}
		this._lastPopUpOriginBounds = bounds;
		return true;
	}
	,positionRelativeToOrigin: function() {
		this.checkForOriginMoved();
		var popUpRoot = feathers_core_PopUpManager.forStage(this.stage).get_root();
		var stageBottomRight = new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight);
		stageBottomRight = popUpRoot.globalToLocal(stageBottomRight);
		var upSpace = -Infinity;
		var downSpace = -Infinity;
		var rightSpace = -Infinity;
		var leftSpace = -Infinity;
		var positions = this.supportedPositions;
		if(positions == null) {
			positions = [feathers_layout_RelativePosition.BOTTOM,feathers_layout_RelativePosition.TOP,feathers_layout_RelativePosition.RIGHT,feathers_layout_RelativePosition.LEFT];
		}
		var _g = 0;
		while(_g < positions.length) {
			var position = positions[_g];
			++_g;
			switch(position._hx_index) {
			case 0:
				this.measureWithArrowPosition(feathers_layout_RelativePosition.BOTTOM);
				upSpace = this._lastPopUpOriginBounds.y - this.actualHeight;
				if(upSpace >= this.get_marginTop()) {
					feathers_controls_Callout.positionAboveOrigin(this,this._lastPopUpOriginBounds);
					return;
				}
				if(upSpace < 0.0) {
					upSpace = 0.0;
				}
				break;
			case 1:
				this.measureWithArrowPosition(feathers_layout_RelativePosition.LEFT);
				rightSpace = stageBottomRight.x - this.actualWidth - (this._lastPopUpOriginBounds.x + this._lastPopUpOriginBounds.width);
				if(rightSpace >= this.get_marginRight()) {
					feathers_controls_Callout.positionRightOfOrigin(this,this._lastPopUpOriginBounds);
					return;
				}
				if(rightSpace < 0.0) {
					rightSpace = 0.0;
				}
				break;
			case 3:
				this.measureWithArrowPosition(feathers_layout_RelativePosition.RIGHT);
				leftSpace = this._lastPopUpOriginBounds.x - this.actualWidth;
				if(leftSpace >= this.get_marginLeft()) {
					feathers_controls_Callout.positionLeftOfOrigin(this,this._lastPopUpOriginBounds);
					return;
				}
				if(leftSpace < 0.0) {
					leftSpace = 0.0;
				}
				break;
			default:
				this.measureWithArrowPosition(feathers_layout_RelativePosition.TOP);
				downSpace = stageBottomRight.y - this.actualHeight - (this._lastPopUpOriginBounds.y + this._lastPopUpOriginBounds.height);
				if(downSpace >= this.get_marginBottom()) {
					feathers_controls_Callout.positionBelowOrigin(this,this._lastPopUpOriginBounds);
					return;
				}
				if(downSpace < 0.0) {
					downSpace = 0.0;
				}
			}
		}
		if(downSpace != -Infinity && downSpace >= upSpace && downSpace >= rightSpace && downSpace >= leftSpace) {
			feathers_controls_Callout.positionBelowOrigin(this,this._lastPopUpOriginBounds);
		} else if(upSpace != -Infinity && upSpace >= rightSpace && upSpace >= leftSpace) {
			feathers_controls_Callout.positionAboveOrigin(this,this._lastPopUpOriginBounds);
		} else if(rightSpace != -Infinity && rightSpace >= leftSpace) {
			feathers_controls_Callout.positionRightOfOrigin(this,this._lastPopUpOriginBounds);
		} else if(leftSpace != -Infinity) {
			feathers_controls_Callout.positionLeftOfOrigin(this,this._lastPopUpOriginBounds);
		} else {
			feathers_controls_Callout.positionBelowOrigin(this,this._lastPopUpOriginBounds);
		}
	}
	,callout_addedToStageHandler: function(event) {
		this.stage.addEventListener("mouseDown",$bind(this,this.callout_stage_mouseDownHandler),false,0,true);
		this.stage.addEventListener("touchBegin",$bind(this,this.callout_stage_touchBeginHandler),false,0,true);
		if(this._origin != null) {
			this.addEventListener("enterFrame",$bind(this,this.callout_enterFrameHandler));
		}
	}
	,callout_removedFromStageHandler: function(event) {
		this.stage.removeEventListener("mouseDown",$bind(this,this.callout_stage_mouseDownHandler));
		this.stage.removeEventListener("touchBegin",$bind(this,this.callout_stage_touchBeginHandler));
		this.removeEventListener("enterFrame",$bind(this,this.callout_enterFrameHandler));
		feathers_events_FeathersEvent.dispatch(this,"close");
	}
	,callout_enterFrameHandler: function(event) {
		if(!this.checkForOriginMoved()) {
			return;
		}
		this.setInvalid(feathers_controls_Callout.INVALIDATION_FLAG_ORIGIN);
	}
	,callout_origin_removedFromStageHandler: function(event) {
		this.close();
	}
	,callout_content_resizeHandler: function(event) {
		if(this._ignoreContentResize) {
			return;
		}
		this._contentMeasurements.save(this.get_content());
		this.setInvalid(feathers_core_InvalidationFlag.SIZE);
	}
	,callout_stage_mouseDownHandler: function(event) {
		if(!this.closeOnPointerOutside) {
			return;
		}
		if(this.hitTestPoint(event.stageX,event.stageY)) {
			return;
		}
		this.close();
	}
	,callout_stage_touchBeginHandler: function(event) {
		if(event.isPrimaryTouchPoint) {
			return;
		}
		if(!this.closeOnPointerOutside) {
			return;
		}
		if(this.hitTestPoint(event.stageX,event.stageY)) {
			return;
		}
		this.close();
	}
	,get_gap: function() {
		return this.__gap;
	}
	,get_marginTop: function() {
		return this.__marginTop;
	}
	,set_marginTop: function(value) {
		if(!this.setStyle("marginTop")) {
			return this.__marginTop;
		}
		if(this.__marginTop == value) {
			return this.__marginTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_marginTop);
		this.__marginTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__marginTop;
	}
	,clearStyle_marginTop: function() {
		this.set_marginTop(0.0);
		return this.get_marginTop();
	}
	,get_marginRight: function() {
		return this.__marginRight;
	}
	,set_marginRight: function(value) {
		if(!this.setStyle("marginRight")) {
			return this.__marginRight;
		}
		if(this.__marginRight == value) {
			return this.__marginRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_marginRight);
		this.__marginRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__marginRight;
	}
	,clearStyle_marginRight: function() {
		this.set_marginRight(0.0);
		return this.get_marginRight();
	}
	,get_marginBottom: function() {
		return this.__marginBottom;
	}
	,set_marginBottom: function(value) {
		if(!this.setStyle("marginBottom")) {
			return this.__marginBottom;
		}
		if(this.__marginBottom == value) {
			return this.__marginBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_marginBottom);
		this.__marginBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__marginBottom;
	}
	,clearStyle_marginBottom: function() {
		this.set_marginBottom(0.0);
		return this.get_marginBottom();
	}
	,get_marginLeft: function() {
		return this.__marginLeft;
	}
	,set_marginLeft: function(value) {
		if(!this.setStyle("marginLeft")) {
			return this.__marginLeft;
		}
		if(this.__marginLeft == value) {
			return this.__marginLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_marginLeft);
		this.__marginLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__marginLeft;
	}
	,clearStyle_marginLeft: function() {
		this.set_marginLeft(0.0);
		return this.get_marginLeft();
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_horizontalAlign: function() {
		return this.__horizontalAlign;
	}
	,get_verticalAlign: function() {
		return this.__verticalAlign;
	}
	,get_arrowPosition: function() {
		return this.__arrowPosition;
	}
	,set_arrowPosition: function(value) {
		if(!this.setStyle("arrowPosition")) {
			return this.__arrowPosition;
		}
		if(this.__arrowPosition == value) {
			return this.__arrowPosition;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_arrowPosition);
		this.__arrowPosition = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__arrowPosition;
	}
	,clearStyle_arrowPosition: function() {
		this.set_arrowPosition(feathers_layout_RelativePosition.TOP);
		return this.get_arrowPosition();
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,get_topArrowSkin: function() {
		return this.__topArrowSkin;
	}
	,set_topArrowSkin: function(value) {
		if(!this.setStyle("topArrowSkin")) {
			return this.__topArrowSkin;
		}
		if(this.__topArrowSkin == value) {
			return this.__topArrowSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_topArrowSkin);
		this.__topArrowSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__topArrowSkin;
	}
	,clearStyle_topArrowSkin: function() {
		this.set_topArrowSkin(null);
		return this.get_topArrowSkin();
	}
	,get_rightArrowSkin: function() {
		return this.__rightArrowSkin;
	}
	,set_rightArrowSkin: function(value) {
		if(!this.setStyle("rightArrowSkin")) {
			return this.__rightArrowSkin;
		}
		if(this.__rightArrowSkin == value) {
			return this.__rightArrowSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_rightArrowSkin);
		this.__rightArrowSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__rightArrowSkin;
	}
	,clearStyle_rightArrowSkin: function() {
		this.set_rightArrowSkin(null);
		return this.get_rightArrowSkin();
	}
	,get_bottomArrowSkin: function() {
		return this.__bottomArrowSkin;
	}
	,set_bottomArrowSkin: function(value) {
		if(!this.setStyle("bottomArrowSkin")) {
			return this.__bottomArrowSkin;
		}
		if(this.__bottomArrowSkin == value) {
			return this.__bottomArrowSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_bottomArrowSkin);
		this.__bottomArrowSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__bottomArrowSkin;
	}
	,clearStyle_bottomArrowSkin: function() {
		this.set_bottomArrowSkin(null);
		return this.get_bottomArrowSkin();
	}
	,get_leftArrowSkin: function() {
		return this.__leftArrowSkin;
	}
	,set_leftArrowSkin: function(value) {
		if(!this.setStyle("leftArrowSkin")) {
			return this.__leftArrowSkin;
		}
		if(this.__leftArrowSkin == value) {
			return this.__leftArrowSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_leftArrowSkin);
		this.__leftArrowSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__leftArrowSkin;
	}
	,clearStyle_leftArrowSkin: function() {
		this.set_leftArrowSkin(null);
		return this.get_leftArrowSkin();
	}
	,get_topArrowGap: function() {
		return this.__topArrowGap;
	}
	,set_topArrowGap: function(value) {
		if(!this.setStyle("topArrowGap")) {
			return this.__topArrowGap;
		}
		if(this.__topArrowGap == value) {
			return this.__topArrowGap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_topArrowGap);
		this.__topArrowGap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__topArrowGap;
	}
	,clearStyle_topArrowGap: function() {
		this.set_topArrowGap(0.0);
		return this.get_topArrowGap();
	}
	,get_rightArrowGap: function() {
		return this.__rightArrowGap;
	}
	,set_rightArrowGap: function(value) {
		if(!this.setStyle("rightArrowGap")) {
			return this.__rightArrowGap;
		}
		if(this.__rightArrowGap == value) {
			return this.__rightArrowGap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_rightArrowGap);
		this.__rightArrowGap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__rightArrowGap;
	}
	,clearStyle_rightArrowGap: function() {
		this.set_rightArrowGap(0.0);
		return this.get_rightArrowGap();
	}
	,get_bottomArrowGap: function() {
		return this.__bottomArrowGap;
	}
	,set_bottomArrowGap: function(value) {
		if(!this.setStyle("bottomArrowGap")) {
			return this.__bottomArrowGap;
		}
		if(this.__bottomArrowGap == value) {
			return this.__bottomArrowGap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_bottomArrowGap);
		this.__bottomArrowGap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__bottomArrowGap;
	}
	,clearStyle_bottomArrowGap: function() {
		this.set_bottomArrowGap(0.0);
		return this.get_bottomArrowGap();
	}
	,get_leftArrowGap: function() {
		return this.__leftArrowGap;
	}
	,set_leftArrowGap: function(value) {
		if(!this.setStyle("leftArrowGap")) {
			return this.__leftArrowGap;
		}
		if(this.__leftArrowGap == value) {
			return this.__leftArrowGap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_leftArrowGap);
		this.__leftArrowGap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__leftArrowGap;
	}
	,clearStyle_leftArrowGap: function() {
		this.set_leftArrowGap(0.0);
		return this.get_leftArrowGap();
	}
	,get_styleContext: function() {
		return feathers_controls_Callout;
	}
	,__class__: feathers_controls_Callout
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{set_leftArrowGap:"set_leftArrowGap",get_leftArrowGap:"get_leftArrowGap",set_bottomArrowGap:"set_bottomArrowGap",get_bottomArrowGap:"get_bottomArrowGap",set_rightArrowGap:"set_rightArrowGap",get_rightArrowGap:"get_rightArrowGap",set_topArrowGap:"set_topArrowGap",get_topArrowGap:"get_topArrowGap",set_leftArrowSkin:"set_leftArrowSkin",get_leftArrowSkin:"get_leftArrowSkin",set_bottomArrowSkin:"set_bottomArrowSkin",get_bottomArrowSkin:"get_bottomArrowSkin",set_rightArrowSkin:"set_rightArrowSkin",get_rightArrowSkin:"get_rightArrowSkin",set_topArrowSkin:"set_topArrowSkin",get_topArrowSkin:"get_topArrowSkin",set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",set_arrowPosition:"set_arrowPosition",get_arrowPosition:"get_arrowPosition",get_verticalAlign:"get_verticalAlign",get_horizontalAlign:"get_horizontalAlign",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_marginLeft:"set_marginLeft",get_marginLeft:"get_marginLeft",set_marginBottom:"set_marginBottom",get_marginBottom:"get_marginBottom",set_marginRight:"set_marginRight",get_marginRight:"get_marginRight",set_marginTop:"set_marginTop",get_marginTop:"get_marginTop",get_gap:"get_gap",set_origin:"set_origin",get_origin:"get_origin",set_content:"set_content",get_content:"get_content"})
});
var feathers_controls_ToggleButton = function(text,selected,changeListener) {
	if(selected == null) {
		selected = false;
	}
	this.__showText = true;
	this.__textOffsetY = 0.0;
	this.__textOffsetX = 0.0;
	this.__iconOffsetY = 0.0;
	this.__iconOffsetX = 0.0;
	this.__verticalAlign = feathers_layout_VerticalAlign.MIDDLE;
	this.__horizontalAlign = feathers_layout_HorizontalAlign.CENTER;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__minGap = 0.0;
	this.__gap = 0.0;
	this.__iconPosition = feathers_layout_RelativePosition.LEFT;
	this.__selectedTextFormat = null;
	this.__disabledTextFormat = null;
	this.__wordWrap = false;
	this.__embedFonts = false;
	this.__textFormat = null;
	this.__selectedIcon = null;
	this.__disabledIcon = null;
	this.__icon = null;
	this._stateToTextFormat = new haxe_ds_EnumValueMap();
	this._ignoreIconResizes = false;
	this._currentIcon = null;
	this._iconMeasurements = null;
	this._stateToIcon = new haxe_ds_EnumValueMap();
	this._htmlText = null;
	this._updatedTextStyles = false;
	this._previousSimpleTextFormat = null;
	this._previousTextFormat = null;
	this._previousHTMLText = null;
	this._previousText = null;
	this.initializeToggleButtonTheme();
	feathers_controls_BasicToggleButton.call(this,changeListener);
	this.set_text(text);
	this.set_selected(selected);
	this.set_tabEnabled(true);
	this.set_tabChildren(false);
	this.addEventListener("keyDown",$bind(this,this.toggleButton_keyDownHandler));
	this.addEventListener("focusIn",$bind(this,this.toggleButton_focusInHandler));
	this.addEventListener("focusOut",$bind(this,this.toggleButton_focusOutHandler));
};
$hxClasses["feathers.controls.ToggleButton"] = feathers_controls_ToggleButton;
feathers_controls_ToggleButton.__name__ = "feathers.controls.ToggleButton";
feathers_controls_ToggleButton.__interfaces__ = [feathers_core_IFocusObject,feathers_core_IHTMLTextControl,feathers_core_ITextControl];
feathers_controls_ToggleButton.__super__ = feathers_controls_BasicToggleButton;
feathers_controls_ToggleButton.prototype = $extend(feathers_controls_BasicToggleButton.prototype,{
	set_text: function(value) {
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._text;
	}
	,initializeToggleButtonTheme: function() {
		feathers_themes_steel_components_SteelToggleButtonStyles.initialize();
	}
	,initialize: function() {
		feathers_controls_BasicToggleButton.prototype.initialize.call(this);
		if(this.textField == null) {
			this.textField = new openfl_text_TextField();
			this.textField.set_selectable(false);
			this.textField.set_multiline(true);
			this.addChild(this.textField);
		}
	}
	,commitChanges: function() {
		feathers_controls_BasicToggleButton.prototype.commitChanges.call(this);
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		this._updatedTextStyles = false;
		if(stylesInvalid || stateInvalid) {
			this.refreshIcon();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshTextStyles();
		}
		if(dataInvalid || stylesInvalid || stateInvalid || sizeInvalid) {
			this.refreshText(sizeInvalid);
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		if(hasText || hasHTMLText) {
			this.refreshTextFieldDimensions(true);
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this.measureContentWidth();
			newWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				newWidth = Math.max(this._currentBackgroundSkin.get_width(),newWidth);
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this.measureContentHeight();
			newHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				newHeight = Math.max(this._currentBackgroundSkin.get_height(),newHeight);
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = this.measureContentMinWidth();
			newMinWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMinWidth = Math.max(measureSkin.get_minWidth(),newMinWidth);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = Math.max(this._backgroundSkinMeasurements.minWidth,newMinWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this.measureContentMinHeight();
			newMinHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMinHeight = Math.max(measureSkin.get_minHeight(),newMinHeight);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = Math.max(this._backgroundSkinMeasurements.minHeight,newMinHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,calculateExplicitWidthForTextMeasurement: function() {
		var textFieldExplicitWidth = null;
		if(this.get_explicitWidth() != null) {
			textFieldExplicitWidth = this.get_explicitWidth();
		} else if(this.get_explicitMaxWidth() != null) {
			textFieldExplicitWidth = this.get_explicitMaxWidth();
		} else if(this._backgroundSkinMeasurements != null && this._backgroundSkinMeasurements.maxWidth != null) {
			textFieldExplicitWidth = this._backgroundSkinMeasurements.maxWidth;
		}
		if(textFieldExplicitWidth == null) {
			return textFieldExplicitWidth;
		}
		textFieldExplicitWidth -= this.get_paddingLeft() + this.get_paddingRight();
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
					(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
				}
				textFieldExplicitWidth -= this._currentIcon.get_width() + adjustedGap;
			}
		}
		if(textFieldExplicitWidth < 0.0) {
			textFieldExplicitWidth = 0.0;
		}
		return textFieldExplicitWidth;
	}
	,measureContentWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText) {
					contentWidth += adjustedGap;
				}
				contentWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentWidth = Math.max(contentWidth,this._currentIcon.get_width());
			}
		}
		return contentWidth;
	}
	,measureContentHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText) {
					contentHeight += adjustedGap;
				}
				contentHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentHeight = Math.max(contentHeight,this._currentIcon.get_height());
			}
		}
		return contentHeight;
	}
	,measureContentMinWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText) {
					contentMinWidth += adjustedGap;
				}
				contentMinWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentMinWidth = Math.max(contentMinWidth,this._currentIcon.get_width());
			}
		}
		return contentMinWidth;
	}
	,measureContentMinHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText) {
					contentMinHeight += adjustedGap;
				}
				contentMinHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentMinHeight = Math.max(contentMinHeight,this._currentIcon.get_height());
			}
		}
		return contentMinHeight;
	}
	,refreshTextStyles: function() {
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
			this._updatedTextStyles = true;
		}
		if(this.textField.get_embedFonts() != this.get_embedFonts()) {
			this.textField.set_embedFonts(this.get_embedFonts());
			this._updatedTextStyles = true;
		}
		var textFormat = this.getCurrentTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimpleTextFormat) {
			return;
		}
		if(this._previousTextFormat != null) {
			this._previousTextFormat.removeEventListener("change",$bind(this,this.toggleButton_textFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.toggleButton_textFormat_changeHandler),false,0,true);
			this.textField.set_defaultTextFormat(simpleTextFormat);
			this._updatedTextStyles = true;
		}
		this._previousTextFormat = textFormat;
		this._previousSimpleTextFormat = simpleTextFormat;
	}
	,refreshText: function(forceMeasurement) {
		var hasText = this.get_showText() && this._text != null && this._text.length > 0;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		this.textField.set_visible(hasText || hasHTMLText);
		if(this._text == this._previousText && this._htmlText != this._previousHTMLText && !this._updatedTextStyles && !forceMeasurement) {
			return;
		}
		this.textField.set_autoSize(1);
		if(hasHTMLText) {
			this.textField.set_htmlText(this._htmlText);
		} else if(hasText) {
			this.textField.set_text(this._text);
		} else {
			this.textField.set_text("​");
		}
		if(this.get_wordWrap()) {
			this.textField.set_wordWrap(false);
		}
		this._textMeasuredWidth = this.textField.get_textWidth() + 4;
		this._wrappedOnMeasure = false;
		if(this.get_wordWrap()) {
			var textFieldExplicitWidth = this.calculateExplicitWidthForTextMeasurement();
			if(textFieldExplicitWidth != null && this._textMeasuredWidth > textFieldExplicitWidth) {
				this.textField.set_wordWrap(true);
				this.textField.set_width(textFieldExplicitWidth);
				this._textMeasuredWidth = this.textField.get_width();
				this._wrappedOnMeasure = true;
			}
		}
		this._textMeasuredHeight = this.textField.get_height();
		this.textField.set_autoSize(2);
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
		}
		if(!hasText && !hasHTMLText) {
			this.textField.set_text("");
		}
		this._previousText = this._text;
		this._previousHTMLText = this._htmlText;
	}
	,getCurrentTextFormat: function() {
		var result = this._stateToTextFormat.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledTextFormat() != null) {
			return this.get_disabledTextFormat();
		}
		if(this._selected && this.get_selectedTextFormat() != null) {
			return this.get_selectedTextFormat();
		}
		return this.get_textFormat();
	}
	,layoutContent: function() {
		feathers_controls_BasicToggleButton.prototype.layoutContent.call(this);
		this.layoutChildren();
	}
	,layoutChildren: function() {
		this.refreshTextFieldDimensions(false);
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var iconIsInLayout = this._currentIcon != null && this.get_iconPosition() != feathers_layout_RelativePosition.MANUAL;
		if((hasText || hasHTMLText) && iconIsInLayout) {
			this.positionSingleChild(this.textField);
			this.positionTextAndIcon();
		} else if(hasText || hasHTMLText) {
			this.positionSingleChild(this.textField);
		} else if(iconIsInLayout) {
			this.positionSingleChild(this._currentIcon);
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.MANUAL) {
				this._currentIcon.set_x(this.get_paddingLeft());
				this._currentIcon.set_y(this.get_paddingTop());
			}
			var fh = this._currentIcon;
			fh.set_x(fh.get_x() + this.get_iconOffsetX());
			var fh = this._currentIcon;
			fh.set_y(fh.get_y() + this.get_iconOffsetY());
		}
		if(hasText) {
			var fh = this.textField;
			fh.set_x(fh.get_x() + this.get_textOffsetX());
			var fh = this.textField;
			fh.set_y(fh.get_y() + this.get_textOffsetY());
		}
	}
	,refreshTextFieldDimensions: function(forMeasurement) {
		var oldIgnoreIconResizes = this._ignoreIconResizes;
		this._ignoreIconResizes = true;
		if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
		}
		this._ignoreIconResizes = oldIgnoreIconResizes;
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		if(!hasText && !hasHTMLText) {
			return;
		}
		var calculatedWidth = this.actualWidth;
		var calculatedHeight = this.actualHeight;
		if(forMeasurement) {
			calculatedWidth = 0.0;
			var explicitCalculatedWidth = this.get_explicitWidth();
			if(explicitCalculatedWidth == null) {
				explicitCalculatedWidth = this.get_explicitMaxWidth();
			}
			if(explicitCalculatedWidth != null) {
				calculatedWidth = explicitCalculatedWidth;
			}
			calculatedHeight = 0.0;
			var explicitCalculatedHeight = this.get_explicitHeight();
			if(explicitCalculatedHeight == null) {
				explicitCalculatedHeight = this.get_explicitMaxHeight();
			}
			if(explicitCalculatedHeight != null) {
				calculatedHeight = explicitCalculatedHeight;
			}
		}
		calculatedWidth -= this.get_paddingLeft() + this.get_paddingRight();
		calculatedHeight -= this.get_paddingTop() + this.get_paddingBottom();
		if(this._currentIcon != null) {
			var adjustedGap = this.get_gap();
			if(adjustedGap == 1.0 / 0.0) {
				adjustedGap = this.get_minGap();
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				calculatedWidth -= this._currentIcon.get_width() + adjustedGap;
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				calculatedHeight -= this._currentIcon.get_height() + adjustedGap;
			}
		}
		if(calculatedWidth < 0.0) {
			calculatedWidth = 0.0;
		}
		if(calculatedHeight < 0.0) {
			calculatedHeight = 0.0;
		}
		if(calculatedWidth > this._textMeasuredWidth) {
			calculatedWidth = this._textMeasuredWidth;
		}
		if(calculatedHeight > this._textMeasuredHeight) {
			calculatedHeight = this._textMeasuredHeight;
		}
		this.textField.set_width(calculatedWidth);
		var wordWrap = this.get_wordWrap();
		if(wordWrap && !this._wrappedOnMeasure && calculatedWidth >= this._textMeasuredWidth) {
			wordWrap = false;
		}
		if(this.textField.get_wordWrap() != wordWrap) {
			this.textField.set_wordWrap(wordWrap);
		}
		this.textField.set_height(calculatedHeight);
	}
	,positionSingleChild: function(displayObject) {
		if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
			displayObject.set_x(this.get_paddingLeft());
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
			displayObject.set_x(this.actualWidth - this.get_paddingRight() - displayObject.get_width());
		} else {
			displayObject.set_x(this.get_paddingLeft() + (this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - displayObject.get_width()) / 2.0);
		}
		if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
			displayObject.set_y(this.get_paddingTop());
		} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
			displayObject.set_y(this.actualHeight - this.get_paddingBottom() - displayObject.get_height());
		} else {
			displayObject.set_y(this.get_paddingTop() + (this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - displayObject.get_height()) / 2.0);
		}
	}
	,positionTextAndIcon: function() {
		if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP) {
			if(this.get_gap() == 1.0 / 0.0) {
				this._currentIcon.set_y(this.get_paddingTop());
				this.textField.set_y(this.actualHeight - this.get_paddingBottom() - this.textField.get_height());
			} else {
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
					var fh = this.textField;
					fh.set_y(fh.get_y() + (this._currentIcon.get_height() + this.get_gap()));
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					var fh = this.textField;
					fh.set_y(fh.get_y() + (this._currentIcon.get_height() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_y(this.textField.get_y() - this._currentIcon.get_height() - this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
			if(this.get_gap() == 1.0 / 0.0) {
				this.textField.set_x(this.get_paddingLeft());
				this._currentIcon.set_x(this.actualWidth - this.get_paddingRight() - this._currentIcon.get_width());
			} else {
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
					var fh = this.textField;
					fh.set_x(fh.get_x() - (this._currentIcon.get_width() + this.get_gap()));
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					var fh = this.textField;
					fh.set_x(fh.get_x() - (this._currentIcon.get_width() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_x(this.textField.get_x() + this.textField.get_width() + this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
			if(this.get_gap() == 1.0 / 0.0) {
				this.textField.set_y(this.get_paddingTop());
				this._currentIcon.set_y(this.actualHeight - this.get_paddingBottom() - this._currentIcon.get_height());
			} else {
				if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
					var fh = this.textField;
					fh.set_y(fh.get_y() - (this._currentIcon.get_height() + this.get_gap()));
				} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.MIDDLE) {
					var fh = this.textField;
					fh.set_y(fh.get_y() - (this._currentIcon.get_height() + this.get_gap()) / 2.0);
				}
				this._currentIcon.set_y(this.textField.get_y() + this.textField.get_height() + this.get_gap());
			}
		} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT) {
			if(this.get_gap() == 1.0 / 0.0) {
				this._currentIcon.set_x(this.get_paddingLeft());
				this.textField.set_x(this.actualWidth - this.get_paddingRight() - this.textField.get_width());
			} else {
				if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
					var fh = this.textField;
					fh.set_x(fh.get_x() + (this.get_gap() + this._currentIcon.get_width()));
				} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.CENTER) {
					var fh = this.textField;
					fh.set_x(fh.get_x() + (this.get_gap() + this._currentIcon.get_width()) / 2.0);
				}
				this._currentIcon.set_x(this.textField.get_x() - this.get_gap() - this._currentIcon.get_width());
			}
		}
		if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
			if(this.get_verticalAlign() == feathers_layout_VerticalAlign.TOP) {
				this._currentIcon.set_y(this.get_paddingTop());
			} else if(this.get_verticalAlign() == feathers_layout_VerticalAlign.BOTTOM) {
				this._currentIcon.set_y(this.actualHeight - this.get_paddingBottom() - this._currentIcon.get_height());
			} else {
				this._currentIcon.set_y(this.get_paddingTop() + (this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - this._currentIcon.get_height()) / 2.0);
			}
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.LEFT) {
			this._currentIcon.set_x(this.get_paddingLeft());
		} else if(this.get_horizontalAlign() == feathers_layout_HorizontalAlign.RIGHT) {
			this._currentIcon.set_x(this.actualWidth - this.get_paddingRight() - this._currentIcon.get_width());
		} else {
			this._currentIcon.set_x(this.get_paddingLeft() + (this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - this._currentIcon.get_width()) / 2.0);
		}
	}
	,refreshIcon: function() {
		var oldIcon = this._currentIcon;
		this._currentIcon = this.getCurrentIcon();
		if(this._currentIcon == oldIcon) {
			return;
		}
		this.removeCurrentIcon(oldIcon);
		this.addCurrentIcon(this._currentIcon);
	}
	,getCurrentIcon: function() {
		var result = this._stateToIcon.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledIcon() != null) {
			return this.get_disabledIcon();
		}
		if(this._selected && this.get_selectedIcon() != null) {
			return this.get_selectedIcon();
		}
		return this.get_icon();
	}
	,addCurrentIcon: function(icon) {
		if(icon == null) {
			this._iconMeasurements = null;
			return;
		}
		if(js_Boot.__implements(icon,feathers_core_IUIControl)) {
			(js_Boot.__cast(icon , feathers_core_IUIControl)).initializeNow();
		}
		if(this._iconMeasurements == null) {
			this._iconMeasurements = new feathers_layout_Measurements(icon);
		} else {
			this._iconMeasurements.save(icon);
		}
		if(js_Boot.__implements(icon,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(icon , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(icon,feathers_core_IStateObserver)) {
			(js_Boot.__cast(icon , feathers_core_IStateObserver)).set_stateContext(this);
		}
		icon.addEventListener("resize",$bind(this,this.toggleButton_icon_resizeHandler),false,0,true);
		var index = this.getChildIndex(this.textField);
		this.addChildAt(icon,index);
	}
	,removeCurrentIcon: function(icon) {
		if(icon == null) {
			return;
		}
		icon.removeEventListener("resize",$bind(this,this.toggleButton_icon_resizeHandler));
		if(js_Boot.__implements(icon,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(icon , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(icon,feathers_core_IStateObserver)) {
			(js_Boot.__cast(icon , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._iconMeasurements.restore(icon);
		if(icon.parent == this) {
			this.removeChild(icon);
		}
	}
	,toggleButton_keyDownHandler: function(event) {
		if(!this._enabled || this.get_buttonMode() && this.focusRect == true) {
			return;
		}
		if(this._focusManager != null && this._focusManager.get_focus() != this) {
			return;
		}
		if(event.keyCode != 32 && event.keyCode != 13) {
			return;
		}
		event.preventDefault();
		this.dispatchEvent(new openfl_events_MouseEvent("click"));
	}
	,toggleButton_focusInHandler: function(event) {
		this._keyToState.set_enabled(this._enabled);
	}
	,toggleButton_focusOutHandler: function(event) {
		this._keyToState.set_enabled(false);
	}
	,toggleButton_textFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,toggleButton_icon_resizeHandler: function(event) {
		if(this._ignoreIconResizes) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_styleContext: function() {
		return feathers_controls_ToggleButton;
	}
	,get_icon: function() {
		return this.__icon;
	}
	,set_icon: function(value) {
		if(!this.setStyle("icon")) {
			return this.__icon;
		}
		if(this.__icon == value) {
			return this.__icon;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_icon);
		this.__icon = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__icon;
	}
	,clearStyle_icon: function() {
		this.set_icon(null);
		return this.get_icon();
	}
	,get_disabledIcon: function() {
		return this.__disabledIcon;
	}
	,get_selectedIcon: function() {
		return this.__selectedIcon;
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,get_wordWrap: function() {
		return this.__wordWrap;
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,get_selectedTextFormat: function() {
		return this.__selectedTextFormat;
	}
	,get_iconPosition: function() {
		return this.__iconPosition;
	}
	,get_gap: function() {
		return this.__gap;
	}
	,set_gap: function(value) {
		if(!this.setStyle("gap")) {
			return this.__gap;
		}
		if(this.__gap == value) {
			return this.__gap;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_gap);
		this.__gap = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__gap;
	}
	,clearStyle_gap: function() {
		this.set_gap(0.0);
		return this.get_gap();
	}
	,get_minGap: function() {
		return this.__minGap;
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_horizontalAlign: function() {
		return this.__horizontalAlign;
	}
	,set_horizontalAlign: function(value) {
		if(!this.setStyle("horizontalAlign")) {
			return this.__horizontalAlign;
		}
		if(this.__horizontalAlign == value) {
			return this.__horizontalAlign;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_horizontalAlign);
		this.__horizontalAlign = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__horizontalAlign;
	}
	,clearStyle_horizontalAlign: function() {
		this.set_horizontalAlign(feathers_layout_HorizontalAlign.CENTER);
		return this.get_horizontalAlign();
	}
	,get_verticalAlign: function() {
		return this.__verticalAlign;
	}
	,get_iconOffsetX: function() {
		return this.__iconOffsetX;
	}
	,get_iconOffsetY: function() {
		return this.__iconOffsetY;
	}
	,get_textOffsetX: function() {
		return this.__textOffsetX;
	}
	,get_textOffsetY: function() {
		return this.__textOffsetY;
	}
	,get_showText: function() {
		return this.__showText;
	}
	,__class__: feathers_controls_ToggleButton
	,__properties__: $extend(feathers_controls_BasicToggleButton.prototype.__properties__,{get_showText:"get_showText",get_textOffsetY:"get_textOffsetY",get_textOffsetX:"get_textOffsetX",get_iconOffsetY:"get_iconOffsetY",get_iconOffsetX:"get_iconOffsetX",get_verticalAlign:"get_verticalAlign",set_horizontalAlign:"set_horizontalAlign",get_horizontalAlign:"get_horizontalAlign",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",get_minGap:"get_minGap",set_gap:"set_gap",get_gap:"get_gap",get_iconPosition:"get_iconPosition",get_selectedTextFormat:"get_selectedTextFormat",set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",get_wordWrap:"get_wordWrap",get_embedFonts:"get_embedFonts",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",get_selectedIcon:"get_selectedIcon",get_disabledIcon:"get_disabledIcon",set_icon:"set_icon",get_icon:"get_icon",set_text:"set_text"})
});
var feathers_controls_Check = function(text,selected,changeListener) {
	if(selected == null) {
		selected = false;
	}
	this.initializeCheckTheme();
	feathers_controls_ToggleButton.call(this,text,selected,changeListener);
};
$hxClasses["feathers.controls.Check"] = feathers_controls_Check;
feathers_controls_Check.__name__ = "feathers.controls.Check";
feathers_controls_Check.__super__ = feathers_controls_ToggleButton;
feathers_controls_Check.prototype = $extend(feathers_controls_ToggleButton.prototype,{
	initializeCheckTheme: function() {
		feathers_themes_steel_components_SteelCheckStyles.initialize();
	}
	,get_styleContext: function() {
		return feathers_controls_Check;
	}
	,__class__: feathers_controls_Check
});
var feathers_core_IStageFocusDelegate = function() { };
$hxClasses["feathers.core.IStageFocusDelegate"] = feathers_core_IStageFocusDelegate;
feathers_core_IStageFocusDelegate.__name__ = "feathers.core.IStageFocusDelegate";
feathers_core_IStageFocusDelegate.__isInterface__ = true;
feathers_core_IStageFocusDelegate.__interfaces__ = [feathers_core_IFocusObject];
var feathers_core_IDataSelector = function() { };
$hxClasses["feathers.core.IDataSelector"] = feathers_core_IDataSelector;
feathers_core_IDataSelector.__name__ = "feathers.core.IDataSelector";
feathers_core_IDataSelector.__isInterface__ = true;
var feathers_core_IIndexSelector = function() { };
$hxClasses["feathers.core.IIndexSelector"] = feathers_core_IIndexSelector;
feathers_core_IIndexSelector.__name__ = "feathers.core.IIndexSelector";
feathers_core_IIndexSelector.__isInterface__ = true;
var feathers_utils_DisplayObjectFactory = function() {
};
$hxClasses["feathers.utils.DisplayObjectFactory"] = feathers_utils_DisplayObjectFactory;
feathers_utils_DisplayObjectFactory.__name__ = "feathers.utils.DisplayObjectFactory";
feathers_utils_DisplayObjectFactory.withClass = function(displayObjectType,destroy) {
	var item = new feathers_utils_DisplayObjectFactory();
	item.create = function() {
		return Type.createInstance(displayObjectType,[]);
	};
	item.destroy = destroy;
	return item;
};
feathers_utils_DisplayObjectFactory.prototype = {
	create: function() {
		return null;
	}
	,destroy: function(target) {
	}
	,__class__: feathers_utils_DisplayObjectFactory
};
var feathers_controls_IRange = function() { };
$hxClasses["feathers.controls.IRange"] = feathers_controls_IRange;
feathers_controls_IRange.__name__ = "feathers.controls.IRange";
feathers_controls_IRange.__isInterface__ = true;
feathers_controls_IRange.__interfaces__ = [feathers_core_IUIControl];
feathers_controls_IRange.prototype = {
	__class__: feathers_controls_IRange
	,__properties__: {set_value:"set_value",get_value:"get_value",set_maximum:"set_maximum",set_minimum:"set_minimum"}
};
var feathers_controls_IScrollBar = function() { };
$hxClasses["feathers.controls.IScrollBar"] = feathers_controls_IScrollBar;
feathers_controls_IScrollBar.__name__ = "feathers.controls.IScrollBar";
feathers_controls_IScrollBar.__isInterface__ = true;
feathers_controls_IScrollBar.__interfaces__ = [feathers_controls_IRange];
feathers_controls_IScrollBar.prototype = {
	__class__: feathers_controls_IScrollBar
	,__properties__: {set_page:"set_page",set_step:"set_step"}
};
var feathers_controls_supportClasses_BaseScrollBar = function(value,minimum,maximum,changeListener) {
	if(maximum == null) {
		maximum = 1.0;
	}
	if(minimum == null) {
		minimum = 0.0;
	}
	if(value == null) {
		value = 0.0;
	}
	this.__hideThumbWhenDisabled = false;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__fixedThumbSize = false;
	this.__secondaryTrackSkin = null;
	this.__trackSkin = null;
	this.__thumbSkin = null;
	this._previousFallbackTrackHeight = 0.0;
	this._previousFallbackTrackWidth = 0.0;
	this._thumbStartY = 0.0;
	this._thumbStartX = 0.0;
	this._pointerStartY = 0.0;
	this._pointerStartX = 0.0;
	this._dragging = false;
	this._secondaryTrackSkinMeasurements = null;
	this._currentSecondaryTrackSkin = null;
	this._trackSkinMeasurements = null;
	this._currentTrackSkin = null;
	this._thumbSkinMeasurements = null;
	this._currentThumbSkin = null;
	this.liveDragging = true;
	this._page = 0.0;
	this._snapInterval = 0.0;
	this._step = 0.01;
	this._maximum = 1.0;
	this._minimum = 0.0;
	this._value = 0.0;
	this._isDefaultValue = true;
	feathers_core_FeathersControl.call(this);
	this.set_tabChildren(false);
	this.focusRect = null;
	this.set_minimum(minimum);
	this.set_maximum(maximum);
	this.set_value(value);
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.supportClasses.BaseScrollBar"] = feathers_controls_supportClasses_BaseScrollBar;
feathers_controls_supportClasses_BaseScrollBar.__name__ = "feathers.controls.supportClasses.BaseScrollBar";
feathers_controls_supportClasses_BaseScrollBar.__interfaces__ = [feathers_controls_IScrollBar];
feathers_controls_supportClasses_BaseScrollBar.__super__ = feathers_core_FeathersControl;
feathers_controls_supportClasses_BaseScrollBar.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_value: function() {
		return this._value;
	}
	,set_value: function(value) {
		if(this._value == value) {
			return this._value;
		}
		this._isDefaultValue = false;
		this._value = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		if(this.liveDragging || !this._dragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
		return this._value;
	}
	,set_minimum: function(value) {
		if(this._minimum == value) {
			return this._minimum;
		}
		this._minimum = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._minimum;
	}
	,set_maximum: function(value) {
		if(this._maximum == value) {
			return this._maximum;
		}
		this._maximum = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._maximum;
	}
	,set_step: function(value) {
		if(this._step == value) {
			return this._step;
		}
		this._step = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._step;
	}
	,set_page: function(value) {
		if(this._page == value) {
			return this._page;
		}
		this._page = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._page;
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this._isDefaultValue) {
			this.set_value(this.restrictValue(this._value));
		}
	}
	,update: function() {
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(stylesInvalid) {
			this.refreshThumb();
			this.refreshTrack();
			this.refreshSecondaryTrack();
		}
		if(stateInvalid || stylesInvalid) {
			this.refreshEnabled();
		}
		if(this.measure()) {
			sizeInvalid = true;
		}
		this.layoutContent();
	}
	,measure: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'measure' in type " + c.__name__));
	}
	,refreshThumb: function() {
		var oldSkin = this._currentThumbSkin;
		this._currentThumbSkin = this.get_thumbSkin();
		if(this._currentThumbSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			oldSkin.removeEventListener("mouseDown",$bind(this,this.thumbSkin_mouseDownHandler));
			this.removeChild(oldSkin);
		}
		if(this._currentThumbSkin != null) {
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._thumbSkinMeasurements == null) {
				this._thumbSkinMeasurements = new feathers_layout_Measurements(this._currentThumbSkin);
			} else {
				this._thumbSkinMeasurements.save(this._currentThumbSkin);
			}
			this.addChild(this._currentThumbSkin);
			this._currentThumbSkin.addEventListener("mouseDown",$bind(this,this.thumbSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentThumbSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._thumbSkinMeasurements = null;
		}
	}
	,refreshTrack: function() {
		var oldSkin = this._currentTrackSkin;
		this._currentTrackSkin = this.get_trackSkin();
		if(this._currentTrackSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			this.removeChild(oldSkin);
			oldSkin.removeEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
		}
		if(this._currentTrackSkin != null) {
			if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._trackSkinMeasurements == null) {
				this._trackSkinMeasurements = new feathers_layout_Measurements(this._currentTrackSkin);
			} else {
				this._trackSkinMeasurements.save(this._currentTrackSkin);
			}
			this.addChildAt(this._currentTrackSkin,0);
			this._currentTrackSkin.addEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentTrackSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._trackSkinMeasurements = null;
		}
	}
	,refreshSecondaryTrack: function() {
		var oldSkin = this._currentSecondaryTrackSkin;
		this._currentSecondaryTrackSkin = this.get_secondaryTrackSkin();
		if(this._currentSecondaryTrackSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			this.removeChild(oldSkin);
			oldSkin.removeEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
		}
		if(this._currentSecondaryTrackSkin != null) {
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._secondaryTrackSkinMeasurements == null) {
				this._secondaryTrackSkinMeasurements = new feathers_layout_Measurements(this._currentSecondaryTrackSkin);
			} else {
				this._secondaryTrackSkinMeasurements.save(this._currentSecondaryTrackSkin);
			}
			var index = this._currentTrackSkin != null ? 1 : 0;
			this.addChildAt(this._currentSecondaryTrackSkin,index);
			this._currentSecondaryTrackSkin.addEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._secondaryTrackSkinMeasurements = null;
		}
	}
	,refreshEnabled: function() {
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IUIControl)).set_enabled(this._enabled);
		}
	}
	,layoutContent: function() {
		if(this._currentTrackSkin != null && this._currentSecondaryTrackSkin != null) {
			this.get_graphics().clear();
			this.layoutSplitTrack();
		} else if(this._currentTrackSkin != null) {
			this.get_graphics().clear();
			this.layoutSingleTrack();
		} else {
			this.drawFallbackTrack();
		}
		this.layoutThumb();
	}
	,layoutSplitTrack: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutSplitTrack' in type " + c.__name__));
	}
	,layoutSingleTrack: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutSingleTrack' in type " + c.__name__));
	}
	,layoutThumb: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutThumb' in type " + c.__name__));
	}
	,drawFallbackTrack: function() {
		if(this.actualWidth == this._previousFallbackTrackWidth && this.actualHeight == this._previousFallbackTrackHeight) {
			return;
		}
		this.get_graphics().clear();
		this.get_graphics().beginFill(16711935,0.0);
		this.get_graphics().drawRect(0,0,this.actualWidth,this.actualHeight);
		this.get_graphics().endFill();
		this._previousFallbackTrackWidth = this.actualWidth;
		this._previousFallbackTrackHeight = this.actualHeight;
	}
	,normalizeValue: function(value) {
		var normalized = 0.0;
		if(this._minimum != this._maximum) {
			normalized = (value - this._minimum) / (this._maximum - this._minimum);
			if(normalized < 0.0) {
				normalized = 0.0;
			} else if(normalized > 1.0) {
				normalized = 1.0;
			}
		}
		return normalized;
	}
	,restrictValue: function(value) {
		if(this._snapInterval != 0.0 && value != this._minimum && value != this._maximum) {
			value = feathers_utils_MathUtil.roundToNearest(value,this._snapInterval);
		}
		if(value < this._minimum) {
			value = this._minimum;
		} else if(value > this._maximum) {
			value = this._maximum;
		}
		return value;
	}
	,locationToValue: function(x,y) {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'locationToValue' in type " + c.__name__));
	}
	,saveThumbStart: function(x,y) {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'saveThumbStart' in type " + c.__name__));
	}
	,getAdjustedPage: function() {
		var range = this._maximum - this._minimum;
		var adjustedPage = this._page;
		if(adjustedPage == 0.0) {
			adjustedPage = this._step;
		} else if(adjustedPage > range) {
			adjustedPage = range;
		}
		return adjustedPage;
	}
	,thumbSkin_mouseDownHandler: function(event) {
		if(!this._enabled || this.stage == null) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var result = exclusivePointer.claimMouse(this);
		if(!result) {
			return;
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.thumbSkin_stage_mouseMoveHandler),false,0,true);
		this.stage.addEventListener("mouseUp",$bind(this,this.thumbSkin_stage_mouseUpHandler),false,0,true);
		this._thumbStartX = this._currentThumbSkin.get_x();
		this._thumbStartY = this._currentThumbSkin.get_y();
		this._pointerStartX = this.get_mouseX();
		this._pointerStartY = this.get_mouseY();
		this._dragging = true;
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
	}
	,thumbSkin_stage_mouseMoveHandler: function(event) {
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,thumbSkin_stage_mouseUpHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		stage.removeEventListener("mouseMove",$bind(this,this.thumbSkin_stage_mouseMoveHandler));
		stage.removeEventListener("mouseUp",$bind(this,this.thumbSkin_stage_mouseUpHandler));
		this._dragging = false;
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
		if(!this.liveDragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,trackSkin_mouseDownHandler: function(event) {
		if(!this._enabled || this.stage == null) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var result = exclusivePointer.claimMouse(this);
		if(!result) {
			return;
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.trackSkin_stage_mouseMoveHandler),false,0,true);
		this.stage.addEventListener("mouseUp",$bind(this,this.trackSkin_stage_mouseUpHandler),false,0,true);
		this.saveThumbStart(this.get_mouseX(),this.get_mouseY());
		this._pointerStartX = this.get_mouseX();
		this._pointerStartY = this.get_mouseY();
		this._dragging = true;
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,trackSkin_stage_mouseMoveHandler: function(event) {
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,trackSkin_stage_mouseUpHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		stage.removeEventListener("mouseMove",$bind(this,this.trackSkin_stage_mouseMoveHandler));
		stage.removeEventListener("mouseUp",$bind(this,this.trackSkin_stage_mouseUpHandler));
		this._dragging = false;
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
		if(!this.liveDragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,get_thumbSkin: function() {
		return this.__thumbSkin;
	}
	,set_thumbSkin: function(value) {
		if(!this.setStyle("thumbSkin")) {
			return this.__thumbSkin;
		}
		if(this.__thumbSkin == value) {
			return this.__thumbSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_thumbSkin);
		this.__thumbSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__thumbSkin;
	}
	,clearStyle_thumbSkin: function() {
		this.set_thumbSkin(null);
		return this.get_thumbSkin();
	}
	,get_trackSkin: function() {
		return this.__trackSkin;
	}
	,set_trackSkin: function(value) {
		if(!this.setStyle("trackSkin")) {
			return this.__trackSkin;
		}
		if(this.__trackSkin == value) {
			return this.__trackSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_trackSkin);
		this.__trackSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__trackSkin;
	}
	,clearStyle_trackSkin: function() {
		this.set_trackSkin(null);
		return this.get_trackSkin();
	}
	,get_secondaryTrackSkin: function() {
		return this.__secondaryTrackSkin;
	}
	,get_fixedThumbSize: function() {
		return this.__fixedThumbSize;
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_hideThumbWhenDisabled: function() {
		return this.__hideThumbWhenDisabled;
	}
	,__class__: feathers_controls_supportClasses_BaseScrollBar
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_hideThumbWhenDisabled:"get_hideThumbWhenDisabled",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",get_fixedThumbSize:"get_fixedThumbSize",get_secondaryTrackSkin:"get_secondaryTrackSkin",set_trackSkin:"set_trackSkin",get_trackSkin:"get_trackSkin",set_thumbSkin:"set_thumbSkin",get_thumbSkin:"get_thumbSkin",set_page:"set_page",set_step:"set_step",set_maximum:"set_maximum",set_minimum:"set_minimum",set_value:"set_value",get_value:"get_value"})
});
var feathers_controls_HScrollBar = function(value,minimum,maximum,changeListener) {
	if(maximum == null) {
		maximum = 1.0;
	}
	if(minimum == null) {
		minimum = 0.0;
	}
	if(value == null) {
		value = 0.0;
	}
	this.initializeHScrollBarTheme();
	feathers_controls_supportClasses_BaseScrollBar.call(this,value,minimum,maximum,changeListener);
};
$hxClasses["feathers.controls.HScrollBar"] = feathers_controls_HScrollBar;
feathers_controls_HScrollBar.__name__ = "feathers.controls.HScrollBar";
feathers_controls_HScrollBar.__super__ = feathers_controls_supportClasses_BaseScrollBar;
feathers_controls_HScrollBar.prototype = $extend(feathers_controls_supportClasses_BaseScrollBar.prototype,{
	initializeHScrollBarTheme: function() {
		feathers_themes_steel_components_SteelHScrollBarStyles.initialize();
	}
	,valueToLocation: function(value) {
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		var normalized = this.normalizeValue(value);
		var trackScrollableWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - this._currentThumbSkin.get_width();
		return this.get_paddingLeft() + trackScrollableWidth * normalized;
	}
	,locationToValue: function(x,y) {
		var percentage = 0.0;
		var trackScrollableWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - this._currentThumbSkin.get_width();
		var xOffset = x - this._pointerStartX;
		var xPosition = Math.min(Math.max(0.0,this._thumbStartX + xOffset),trackScrollableWidth);
		percentage = xPosition / trackScrollableWidth;
		return this._minimum + percentage * (this._maximum - this._minimum);
	}
	,saveThumbStart: function(x,y) {
		var trackWidthMinusThumbWidth = this.actualWidth;
		var locationMinusHalfThumbWidth = x;
		if(this._currentThumbSkin != null) {
			trackWidthMinusThumbWidth -= this._currentThumbSkin.get_width();
			locationMinusHalfThumbWidth -= this._currentThumbSkin.get_width() / 2.0;
		}
		this._thumbStartX = Math.min(trackWidthMinusThumbWidth,locationMinusHalfThumbWidth);
		this._thumbStartY = y;
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		this._thumbSkinMeasurements.restore(this._currentThumbSkin);
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		if(this._currentTrackSkin != null) {
			this._trackSkinMeasurements.restore(this._currentTrackSkin);
			if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		if(this._currentSecondaryTrackSkin != null) {
			this._secondaryTrackSkinMeasurements.restore(this._currentSecondaryTrackSkin);
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = 0.0;
			if(this._currentTrackSkin != null) {
				newWidth += this._currentTrackSkin.get_width();
				if(this._currentSecondaryTrackSkin != null) {
					newWidth += this._currentSecondaryTrackSkin.get_width();
				}
			}
			var thumbWidth = this._currentThumbSkin.get_width() + this.get_paddingLeft() + this.get_paddingRight();
			if(newWidth < thumbWidth) {
				newWidth = thumbWidth;
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this._currentThumbSkin.get_height() + this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentTrackSkin != null) {
				if(newHeight < this._currentTrackSkin.get_height()) {
					newHeight = this._currentTrackSkin.get_height();
				}
				if(this._currentSecondaryTrackSkin != null && newHeight < this._currentSecondaryTrackSkin.get_height()) {
					newHeight = this._currentSecondaryTrackSkin.get_height();
				}
			}
		}
		var newMinWidth = newWidth;
		var newMinHeight = newHeight;
		var newMaxHeight = newHeight;
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,null,newMaxHeight);
	}
	,layoutSplitTrack: function() {
		var location = this.valueToLocation(this.get_value());
		if(this._currentThumbSkin != null) {
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
			}
			location += Math.round(this._currentThumbSkin.get_width() / 2.0);
		}
		this._currentTrackSkin.set_x(0.0);
		this._currentTrackSkin.set_width(location);
		this._currentSecondaryTrackSkin.set_x(location);
		this._currentSecondaryTrackSkin.set_width(this.actualWidth - location);
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentTrackSkin.set_y((this.actualHeight - this._currentTrackSkin.get_height()) / 2.0);
		this._currentSecondaryTrackSkin.set_y((this.actualHeight - this._currentSecondaryTrackSkin.get_height()) / 2.0);
	}
	,layoutSingleTrack: function() {
		if(this._currentTrackSkin == null) {
			return;
		}
		this._currentTrackSkin.set_x(0.0);
		this._currentTrackSkin.set_width(this.actualWidth);
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentTrackSkin.set_y((this.actualHeight - this._currentTrackSkin.get_height()) / 2.0);
	}
	,layoutThumb: function() {
		if(this._currentThumbSkin == null) {
			return;
		}
		var range = this._maximum - this._minimum;
		this._currentThumbSkin.set_visible((!this.get_hideThumbWhenDisabled() || this._enabled) && range > 0.0);
		if(!this._currentThumbSkin.get_visible()) {
			return;
		}
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		var valueOffset = 0.0;
		if(this._value < this._minimum) {
			valueOffset = this._minimum - this._value;
		} else if(this._value > this._maximum) {
			valueOffset = this._value - this._maximum;
		}
		var contentWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight();
		var contentHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom();
		if(this.get_fixedThumbSize()) {
			if(this._thumbSkinMeasurements.width != null) {
				this._currentThumbSkin.set_width(this._thumbSkinMeasurements.width);
			}
		} else {
			var adjustedPage = this.getAdjustedPage();
			var thumbWidth = contentWidth * adjustedPage / (range + adjustedPage);
			if(thumbWidth > 0.0) {
				var widthOffset = contentWidth - thumbWidth;
				if(widthOffset > thumbWidth) {
					widthOffset = thumbWidth;
				}
				widthOffset *= valueOffset / (range * thumbWidth / contentWidth);
				thumbWidth -= widthOffset;
			}
			if(this._thumbSkinMeasurements.minWidth != null) {
				if(thumbWidth < this._thumbSkinMeasurements.minWidth) {
					thumbWidth = this._thumbSkinMeasurements.minWidth;
				}
			} else if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IMeasureObject)) {
				var measureSkin = js_Boot.__cast(this._currentThumbSkin , feathers_core_IMeasureObject);
				if(thumbWidth < measureSkin.get_minWidth()) {
					thumbWidth = measureSkin.get_minWidth();
				}
			}
			if(thumbWidth < 0.0) {
				thumbWidth = 0.0;
			}
			this._currentThumbSkin.set_width(thumbWidth);
		}
		this._currentThumbSkin.set_x(this.valueToLocation(this._value));
		this._currentThumbSkin.set_y(this.get_paddingTop() + (contentHeight - this._currentThumbSkin.get_height()) / 2.0);
	}
	,get_styleContext: function() {
		return feathers_controls_HScrollBar;
	}
	,__class__: feathers_controls_HScrollBar
});
var feathers_controls_VScrollBar = function(value,minimum,maximum,changeListener) {
	if(maximum == null) {
		maximum = 1.0;
	}
	if(minimum == null) {
		minimum = 0.0;
	}
	if(value == null) {
		value = 0.0;
	}
	this.initializeVScrollBarTheme();
	feathers_controls_supportClasses_BaseScrollBar.call(this,value,minimum,maximum,changeListener);
};
$hxClasses["feathers.controls.VScrollBar"] = feathers_controls_VScrollBar;
feathers_controls_VScrollBar.__name__ = "feathers.controls.VScrollBar";
feathers_controls_VScrollBar.__super__ = feathers_controls_supportClasses_BaseScrollBar;
feathers_controls_VScrollBar.prototype = $extend(feathers_controls_supportClasses_BaseScrollBar.prototype,{
	initializeVScrollBarTheme: function() {
		feathers_themes_steel_components_SteelVScrollBarStyles.initialize();
	}
	,valueToLocation: function(value) {
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		var normalized = this.normalizeValue(value);
		var trackScrollableHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - this._currentThumbSkin.get_height();
		return this.get_paddingTop() + trackScrollableHeight * normalized;
	}
	,locationToValue: function(x,y) {
		var percentage = 0.0;
		var trackScrollableHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom() - this._currentThumbSkin.get_height();
		var yOffset = y - this._pointerStartY;
		var yPosition = Math.min(Math.max(0.0,this._thumbStartY + yOffset),trackScrollableHeight);
		percentage = yPosition / trackScrollableHeight;
		return this._minimum + percentage * (this._maximum - this._minimum);
	}
	,saveThumbStart: function(x,y) {
		var trackHeightMinusThumbHeight = this.actualHeight;
		var locationMinusHalfThumbHeight = y;
		if(this._currentThumbSkin != null) {
			trackHeightMinusThumbHeight -= this._currentThumbSkin.get_height();
			locationMinusHalfThumbHeight -= this._currentThumbSkin.get_height() / 2.0;
		}
		this._thumbStartX = x;
		this._thumbStartY = Math.min(trackHeightMinusThumbHeight,locationMinusHalfThumbHeight);
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		this._thumbSkinMeasurements.restore(this._currentThumbSkin);
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		if(this._currentTrackSkin != null) {
			this._trackSkinMeasurements.restore(this._currentTrackSkin);
			if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		if(this._currentSecondaryTrackSkin != null) {
			this._secondaryTrackSkinMeasurements.restore(this._currentSecondaryTrackSkin);
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this._currentThumbSkin.get_width() + this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentTrackSkin != null) {
				if(newWidth < this._currentTrackSkin.get_width()) {
					newWidth = this._currentTrackSkin.get_width();
				}
				if(this._currentSecondaryTrackSkin != null && newWidth < this._currentSecondaryTrackSkin.get_width()) {
					newWidth = this._currentSecondaryTrackSkin.get_width();
				}
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = 0.0;
			if(this._currentTrackSkin != null) {
				newHeight += this._currentTrackSkin.get_height();
				if(this._currentSecondaryTrackSkin != null) {
					newHeight += this._currentSecondaryTrackSkin.get_height();
				}
			}
			var thumbHeight = this._currentThumbSkin.get_height() + this.get_paddingTop() + this.get_paddingBottom();
			if(newHeight < thumbHeight) {
				newHeight = thumbHeight;
			}
		}
		var newMinWidth = newWidth;
		var newMinHeight = newHeight;
		var newMaxWidth = newWidth;
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,null);
	}
	,layoutSplitTrack: function() {
		var location = this.valueToLocation(this.get_value());
		if(this._currentThumbSkin != null) {
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
			}
			location += Math.round(this._currentThumbSkin.get_height() / 2.0);
		}
		this._currentSecondaryTrackSkin.set_y(0.0);
		this._currentSecondaryTrackSkin.set_height(location);
		this._currentTrackSkin.set_y(location);
		this._currentTrackSkin.set_height(this.actualHeight - location);
		if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentSecondaryTrackSkin.set_x((this.actualWidth - this._currentSecondaryTrackSkin.get_width()) / 2.0);
		this._currentTrackSkin.set_x((this.actualWidth - this._currentTrackSkin.get_width()) / 2.0);
	}
	,layoutSingleTrack: function() {
		if(this._currentTrackSkin == null) {
			return;
		}
		this._currentTrackSkin.set_y(0.0);
		this._currentTrackSkin.set_height(this.actualHeight);
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentTrackSkin.set_x((this.actualWidth - this._currentTrackSkin.get_width()) / 2.0);
	}
	,layoutThumb: function() {
		if(this._currentThumbSkin == null) {
			return;
		}
		var range = this._maximum - this._minimum;
		this._currentThumbSkin.set_visible((!this.get_hideThumbWhenDisabled() || this._enabled) && range > 0.0);
		if(!this._currentThumbSkin.get_visible()) {
			return;
		}
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		var valueOffset = 0.0;
		if(this._value < this._minimum) {
			valueOffset = this._minimum - this._value;
		} else if(this._value > this._maximum) {
			valueOffset = this._value - this._maximum;
		}
		var contentWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight();
		var contentHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom();
		if(this.get_fixedThumbSize()) {
			if(this._thumbSkinMeasurements.height != null) {
				this._currentThumbSkin.set_height(this._thumbSkinMeasurements.height);
			}
		} else {
			var adjustedPage = this.getAdjustedPage();
			var thumbHeight = contentHeight * adjustedPage / (range + adjustedPage);
			if(thumbHeight > 0.0) {
				var heightOffset = contentHeight - thumbHeight;
				if(heightOffset > thumbHeight) {
					heightOffset = thumbHeight;
				}
				heightOffset *= valueOffset / (range * thumbHeight / contentHeight);
				thumbHeight -= heightOffset;
			}
			if(this._thumbSkinMeasurements.minHeight != null) {
				if(thumbHeight < this._thumbSkinMeasurements.minHeight) {
					thumbHeight = this._thumbSkinMeasurements.minHeight;
				}
			} else if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IMeasureObject)) {
				var measureSkin = js_Boot.__cast(this._currentThumbSkin , feathers_core_IMeasureObject);
				if(thumbHeight < measureSkin.get_minHeight()) {
					thumbHeight = measureSkin.get_minHeight();
				}
			}
			if(thumbHeight < 0.0) {
				thumbHeight = 0.0;
			}
			this._currentThumbSkin.set_height(thumbHeight);
		}
		this._currentThumbSkin.set_x(this.get_paddingLeft() + (contentWidth - this._currentThumbSkin.get_width()) / 2.0);
		this._currentThumbSkin.set_y(this.valueToLocation(this._value));
	}
	,get_styleContext: function() {
		return feathers_controls_VScrollBar;
	}
	,__class__: feathers_controls_VScrollBar
});
var feathers_controls_supportClasses_BaseScrollContainer = function() {
	this.__scrollPixelSnapping = false;
	this.__hideScrollBarEase = motion_easing_Quart.easeOut;
	this.__hideScrollBarDuration = 0.2;
	this.__showScrollBarMinimumDuration = 0.5;
	this.__scrollBarYPosition = feathers_layout_RelativePosition.RIGHT;
	this.__scrollBarXPosition = feathers_layout_RelativePosition.BOTTOM;
	this.__autoHideScrollBars = true;
	this.__showScrollBars = true;
	this.__fixedScrollBars = false;
	this.__viewPortMaskSkin = null;
	this.__maskSkin = null;
	this.__disabledBackgroundSkin = null;
	this.__backgroundSkin = null;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this._scrollMode = feathers_controls_ScrollMode.MASK;
	this._previousViewPortHeight = 0.0;
	this._previousViewPortWidth = 0.0;
	this._ignoreViewPortResizing = false;
	this._viewPortBoundsChanged = false;
	this._settingScrollerDimensions = false;
	this._ignoreScrollerChanges = false;
	this._scrollRect2 = new openfl_geom_Rectangle();
	this._scrollRect1 = new openfl_geom_Rectangle();
	this._prevMaxScrollY = 0.0;
	this._prevMinScrollY = 0.0;
	this._prevMaxScrollX = 0.0;
	this._prevMinScrollX = 0.0;
	this._hideScrollBarY = null;
	this._hideScrollBarX = null;
	this._scrollPolicyY = feathers_controls_ScrollPolicy.AUTO;
	this._scrollPolicyX = feathers_controls_ScrollPolicy.AUTO;
	this._scrollStepY = 0.0;
	this._scrollStepX = 0.0;
	this._temporaryRestrictedScrollY = null;
	this._temporaryScrollY = null;
	this._temporaryRestrictedScrollX = null;
	this._temporaryScrollX = null;
	this.showScrollBarY = false;
	this.showScrollBarX = false;
	this._ignoreScrollBarYChange = false;
	this._ignoreScrollBarXChange = false;
	this.chromeMeasuredMaxHeight = 1.0 / 0.0;
	this.chromeMeasuredMinHeight = 0.0;
	this.chromeMeasuredHeight = 0.0;
	this.chromeMeasuredMaxWidth = 1.0 / 0.0;
	this.chromeMeasuredMinWidth = 0.0;
	this.chromeMeasuredWidth = 0.0;
	this.leftViewPortOffset = 0.0;
	this.bottomViewPortOffset = 0.0;
	this.rightViewPortOffset = 0.0;
	this.topViewPortOffset = 0.0;
	this._fallbackViewPortMaskSkin = null;
	this._currentViewPortMaskSkin = null;
	this._currentMaskSkin = null;
	this._backgroundSkinMeasurements = null;
	this._currentBackgroundSkin = null;
	this._scrollBarYHover = false;
	this._scrollBarXHover = false;
	this._scrollerDraggingY = false;
	this._scrollerDraggingX = false;
	feathers_core_FeathersControl.call(this);
	this.set_tabEnabled(true);
	this.set_tabChildren(true);
	this.focusRect = null;
	this.addEventListener("keyDown",$bind(this,this.baseScrollContainer_keyDownHandler));
	this.addEventListener("addedToStage",$bind(this,this.baseScrollContainer_addedToStageHandler));
	this.addEventListener("removedFromStage",$bind(this,this.baseScrollContainer_removedFromStageHandler));
};
$hxClasses["feathers.controls.supportClasses.BaseScrollContainer"] = feathers_controls_supportClasses_BaseScrollContainer;
feathers_controls_supportClasses_BaseScrollContainer.__name__ = "feathers.controls.supportClasses.BaseScrollContainer";
feathers_controls_supportClasses_BaseScrollContainer.__interfaces__ = [feathers_core_IFocusObject];
feathers_controls_supportClasses_BaseScrollContainer.__super__ = feathers_core_FeathersControl;
feathers_controls_supportClasses_BaseScrollContainer.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_viewPort: function() {
		return this._viewPort;
	}
	,set_viewPort: function(value) {
		if(this._viewPort == value) {
			return this._viewPort;
		}
		if(this._viewPort != null) {
			this._viewPort.removeEventListener("resize",$bind(this,this.viewPort_resizeHandler));
		}
		if(this.scroller != null) {
			this.scroller.set_target(null);
		}
		this._viewPort = value;
		if(this._viewPort != null) {
			this._viewPort.addEventListener("resize",$bind(this,this.viewPort_resizeHandler));
		}
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		return this._viewPort;
	}
	,get_tabEnabled: function() {
		if(this.get_maxScrollY() != this.get_minScrollY() || this.get_maxScrollX() != this.get_minScrollX()) {
			return this.get_rawTabEnabled();
		} else {
			return false;
		}
	}
	,get_scrollX: function() {
		if(this.scroller == null) {
			if(this._temporaryRestrictedScrollX != null) {
				return this._temporaryRestrictedScrollX;
			}
			if(this._temporaryScrollX != null) {
				return this._temporaryScrollX;
			}
			return 0.0;
		}
		return this.scroller.get_scrollX();
	}
	,set_scrollX: function(value) {
		if(this.scroller == null) {
			this._temporaryScrollX = value;
			this._temporaryRestrictedScrollX = null;
			feathers_events_ScrollEvent.dispatch(this,"scroll");
			return this._temporaryScrollX;
		}
		this.scroller.set_scrollX(value);
		return this.scroller.get_scrollX();
	}
	,get_scrollY: function() {
		if(this.scroller == null) {
			if(this._temporaryRestrictedScrollY != null) {
				return this._temporaryRestrictedScrollY;
			}
			if(this._temporaryScrollY != null) {
				return this._temporaryScrollY;
			}
			return 0.0;
		}
		return this.scroller.get_scrollY();
	}
	,set_scrollY: function(value) {
		if(this.scroller == null) {
			this._temporaryScrollY = value;
			this._temporaryRestrictedScrollY = null;
			feathers_events_ScrollEvent.dispatch(this,"scroll");
			return this._temporaryScrollY;
		}
		this.scroller.set_scrollY(value);
		return this.scroller.get_scrollY();
	}
	,get_minScrollX: function() {
		if(this.scroller == null) {
			return 0.0;
		}
		return this.scroller.get_minScrollX();
	}
	,get_minScrollY: function() {
		if(this.scroller == null) {
			return 0.0;
		}
		return this.scroller.get_minScrollY();
	}
	,get_maxScrollX: function() {
		if(this.scroller == null) {
			return 0.0;
		}
		return this.scroller.get_maxScrollX();
	}
	,get_maxScrollY: function() {
		if(this.scroller == null) {
			return 0.0;
		}
		return this.scroller.get_maxScrollY();
	}
	,get_scrollPolicyX: function() {
		return this._scrollPolicyX;
	}
	,get_scrollPolicyY: function() {
		return this._scrollPolicyY;
	}
	,get_measureViewPort: function() {
		return true;
	}
	,update: function() {
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var scrollerInvalid = this.isInvalid(feathers_controls_supportClasses_BaseScrollContainer.INVALIDATION_FLAG_SCROLLER_FACTORY);
		var scrollBarFactoryInvalid = this.isInvalid(feathers_controls_supportClasses_BaseScrollContainer.INVALIDATION_FLAG_SCROLL_BAR_FACTORY);
		var oldIgnoreScrollerChanges = this._ignoreScrollerChanges;
		this._ignoreScrollerChanges = true;
		if(scrollerInvalid) {
			this.createScroller();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid) {
			this.refreshMaskSkin();
			this.refreshViewPortMaskSkin();
		}
		if(scrollBarFactoryInvalid) {
			this.createScrollBars();
		}
		this.refreshEnabled();
		this.refreshScrollerValues();
		this.refreshViewPort();
		this.applyTemporaryScrollPositions();
		this.refreshScrollRect();
		this.refreshScrollBarValues();
		this.layoutChildren();
		this._ignoreScrollerChanges = oldIgnoreScrollerChanges;
	}
	,applyTemporaryScrollPositions: function() {
		if(this._temporaryScrollX != null) {
			this.scroller.set_scrollX(this._temporaryScrollX);
		} else if(this._temporaryRestrictedScrollX != null) {
			this.scroller.set_restrictedScrollX(this._temporaryRestrictedScrollX);
		}
		if(this._temporaryScrollY != null) {
			this.scroller.set_scrollY(this._temporaryScrollY);
		} else if(this._temporaryRestrictedScrollY != null) {
			this.scroller.set_restrictedScrollY(this._temporaryRestrictedScrollY);
		}
		this._temporaryScrollX = null;
		this._temporaryScrollY = null;
		this._temporaryRestrictedScrollX = null;
		this._temporaryRestrictedScrollY = null;
	}
	,needsMeasurement: function() {
		if(!(this.isInvalid(feathers_core_InvalidationFlag.SCROLL) && this.needsScrollMeasurement() || this.isInvalid(feathers_core_InvalidationFlag.DATA) || this.isInvalid(feathers_core_InvalidationFlag.SIZE) || this.isInvalid(feathers_core_InvalidationFlag.STYLES) || this.isInvalid(feathers_controls_supportClasses_BaseScrollContainer.INVALIDATION_FLAG_SCROLL_BAR_FACTORY) || this.isInvalid(feathers_core_InvalidationFlag.STATE))) {
			return this.isInvalid(feathers_core_InvalidationFlag.LAYOUT);
		} else {
			return true;
		}
	}
	,needsScrollMeasurement: function() {
		return false;
	}
	,createScroller: function() {
		if(this.scroller != null) {
			this._temporaryScrollX = this.scroller.get_scrollX();
			this._temporaryScrollY = this.scroller.get_scrollY();
			this._temporaryRestrictedScrollX = null;
			this._temporaryRestrictedScrollY = null;
			this.scroller.set_target(null);
			this.scroller.removeEventListener("scroll",$bind(this,this.baseScrollContainer_scroller_scrollHandler));
			this.scroller.removeEventListener("scrollStart",$bind(this,this.baseScrollContainer_scroller_scrollStartHandler));
			this.scroller.removeEventListener("scrollComplete",$bind(this,this.baseScrollContainer_scroller_scrollCompleteHandler));
			this.scroller = null;
		}
		this.scroller = this._scrollerFactory != null ? this._scrollerFactory() : new feathers_utils_Scroller();
		this.scroller.addEventListener("scroll",$bind(this,this.baseScrollContainer_scroller_scrollHandler));
		this.scroller.addEventListener("scrollStart",$bind(this,this.baseScrollContainer_scroller_scrollStartHandler));
		this.scroller.addEventListener("scrollComplete",$bind(this,this.baseScrollContainer_scroller_scrollCompleteHandler));
	}
	,createScrollBars: function() {
		if(this.scrollBarX != null) {
			this.scrollBarX.removeEventListener("change",$bind(this,this.scrollBarX_changeHandler));
			this.scrollBarX.removeEventListener("rollOver",$bind(this,this.scrollBarX_rollOverHandler));
			this.scrollBarX.removeEventListener("rollOut",$bind(this,this.scrollBarX_rollOutHandler));
			this.scrollBarX.removeEventListener("scrollStart",$bind(this,this.scrollBarX_scrollStartHandler));
			this.scrollBarX.removeEventListener("scrollComplete",$bind(this,this.scrollBarX_scrollCompleteHandler));
			this.removeChild(js_Boot.__cast(this.scrollBarX , openfl_display_DisplayObject));
			if(this._oldScrollBarXFactory.destroy != null) {
				this._oldScrollBarXFactory.destroy(this.scrollBarX);
			}
			this._oldScrollBarXFactory = null;
			this.scrollBarX = null;
		}
		if(this.scrollBarY != null) {
			this.scrollBarY.removeEventListener("change",$bind(this,this.scrollBarY_changeHandler));
			this.scrollBarY.removeEventListener("rollOver",$bind(this,this.scrollBarY_rollOverHandler));
			this.scrollBarY.removeEventListener("rollOut",$bind(this,this.scrollBarY_rollOutHandler));
			this.scrollBarY.removeEventListener("scrollStart",$bind(this,this.scrollBarY_scrollStartHandler));
			this.scrollBarY.removeEventListener("scrollComplete",$bind(this,this.scrollBarY_scrollCompleteHandler));
			this.removeChild(js_Boot.__cast(this.scrollBarY , openfl_display_DisplayObject));
			if(this._oldScrollBarYFactory.destroy != null) {
				this._oldScrollBarYFactory.destroy(this.scrollBarY);
			}
			this._oldScrollBarYFactory = null;
			this.scrollBarY = null;
		}
		var factory = this._scrollBarXFactory != null ? this._scrollBarXFactory : feathers_controls_supportClasses_BaseScrollContainer.defaultScrollBarXFactory;
		this._oldScrollBarXFactory = factory;
		this.scrollBarX = factory.create();
		if(this.get_autoHideScrollBars()) {
			this.scrollBarX.set_alpha(0.0);
		}
		this.scrollBarX.addEventListener("change",$bind(this,this.scrollBarX_changeHandler));
		this.scrollBarX.addEventListener("rollOver",$bind(this,this.scrollBarX_rollOverHandler));
		this.scrollBarX.addEventListener("rollOut",$bind(this,this.scrollBarX_rollOutHandler));
		this.scrollBarX.addEventListener("scrollStart",$bind(this,this.scrollBarX_scrollStartHandler));
		this.scrollBarX.addEventListener("scrollComplete",$bind(this,this.scrollBarX_scrollCompleteHandler));
		this.addChild(js_Boot.__cast(this.scrollBarX , openfl_display_DisplayObject));
		var factory = this._scrollBarYFactory != null ? this._scrollBarYFactory : feathers_controls_supportClasses_BaseScrollContainer.defaultScrollBarYFactory;
		this._oldScrollBarYFactory = factory;
		this.scrollBarY = factory.create();
		if(this.get_autoHideScrollBars()) {
			this.scrollBarY.set_alpha(0.0);
		}
		this.scrollBarY.addEventListener("change",$bind(this,this.scrollBarY_changeHandler));
		this.scrollBarY.addEventListener("rollOver",$bind(this,this.scrollBarY_rollOverHandler));
		this.scrollBarY.addEventListener("rollOut",$bind(this,this.scrollBarY_rollOutHandler));
		this.scrollBarY.addEventListener("scrollStart",$bind(this,this.scrollBarY_scrollStartHandler));
		this.scrollBarY.addEventListener("scrollComplete",$bind(this,this.scrollBarY_scrollCompleteHandler));
		this.addChild(js_Boot.__cast(this.scrollBarY , openfl_display_DisplayObject));
	}
	,refreshEnabled: function() {
		this._viewPort.set_enabled(this._enabled);
		if(this.scrollBarX != null) {
			this.scrollBarX.set_enabled(this._enabled);
		}
		if(this.scrollBarY != null) {
			this.scrollBarY.set_enabled(this._enabled);
		}
	}
	,restrictScrollAfterRefreshViewPort: function() {
		if(this.scroller.get_scrolling()) {
			return;
		}
		if(this._prevMinScrollX != this.scroller.get_minScrollX() && this.scroller.get_scrollX() < this.scroller.get_minScrollX()) {
			this.scroller.set_restrictedScrollX(this.scroller.get_scrollX());
		} else if(this._prevMaxScrollX != this.scroller.get_maxScrollX() && this.scroller.get_scrollX() > this.scroller.get_maxScrollX()) {
			this.scroller.set_restrictedScrollX(this.scroller.get_scrollX());
		}
		if(this._prevMinScrollY != this.scroller.get_minScrollY() && this.scroller.get_scrollY() < this.scroller.get_minScrollY()) {
			this.scroller.set_restrictedScrollY(this.scroller.get_scrollY());
		} else if(this._prevMaxScrollY != this.scroller.get_maxScrollY() && this.scroller.get_scrollY() > this.scroller.get_maxScrollY()) {
			this.scroller.set_restrictedScrollY(this.scroller.get_scrollY());
		}
	}
	,refreshViewPort: function() {
		if(js_Boot.__implements(this.scrollBarX,feathers_core_IValidating)) {
			(js_Boot.__cast(this.scrollBarX , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this.scrollBarY,feathers_core_IValidating)) {
			(js_Boot.__cast(this.scrollBarY , feathers_core_IValidating)).validateNow();
		}
		this._viewPort.set_scrollX(this.get_scrollX());
		this._viewPort.set_scrollY(this.get_scrollY());
		this._prevMinScrollX = this.scroller.get_minScrollX();
		this._prevMaxScrollX = this.scroller.get_maxScrollX();
		this._prevMinScrollY = this.scroller.get_minScrollY();
		this._prevMaxScrollY = this.scroller.get_maxScrollY();
		if(!this.needsMeasurement()) {
			this._viewPort.validateNow();
			var oldSettingScrollerDimensions = this._settingScrollerDimensions;
			this._settingScrollerDimensions = true;
			this.scroller.setDimensions(this._viewPort.get_visibleWidth(),this._viewPort.get_visibleHeight(),this._viewPort.get_width(),this._viewPort.get_height());
			this._settingScrollerDimensions = oldSettingScrollerDimensions;
			this.restrictScrollAfterRefreshViewPort();
			return;
		}
		this.refreshViewPortBoundsForMeasurement();
		var loopCount = 0;
		while(true) {
			this._viewPortBoundsChanged = false;
			if(this.get_measureViewPort()) {
				this.resetViewPortOffsets();
				this.calculateViewPortOffsets(true,false);
				this.refreshViewPortBoundsForMeasurement();
			}
			this.resetViewPortOffsets();
			this.calculateViewPortOffsets(false,false);
			this.measure();
			this.resetViewPortOffsets();
			this.calculateViewPortOffsets(false,true);
			this.refreshViewPortBoundsForLayout();
			++loopCount;
			if(loopCount >= 10) {
				var c = js_Boot.getClass(this);
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError(c.__name__ + " stuck in an infinite loop during measurement and validation. This may be an issue with the layout or children, such as custom item renderers."));
			}
			if(!this._viewPortBoundsChanged) {
				break;
			}
		}
		this._previousViewPortWidth = this._viewPort.get_width();
		this._previousViewPortHeight = this._viewPort.get_height();
		this.restrictScrollAfterRefreshViewPort();
	}
	,resetViewPortOffsets: function() {
		this.topViewPortOffset = 0.0;
		this.rightViewPortOffset = 0.0;
		this.bottomViewPortOffset = 0.0;
		this.leftViewPortOffset = 0.0;
		this.chromeMeasuredWidth = 0.0;
		this.chromeMeasuredMinWidth = 0.0;
		this.chromeMeasuredMaxWidth = 1.0 / 0.0;
		this.chromeMeasuredHeight = 0.0;
		this.chromeMeasuredMinHeight = 0.0;
		this.chromeMeasuredMaxHeight = 1.0 / 0.0;
	}
	,calculateViewPortOffsets: function(forceScrollBars,useActualBounds) {
		this.calculateViewPortOffsetsForFixedScrollBarX(forceScrollBars && this.get_showScrollBars() && this.get_scrollPolicyX() != feathers_controls_ScrollPolicy.OFF,useActualBounds);
		this.calculateViewPortOffsetsForFixedScrollBarY(forceScrollBars && this.get_showScrollBars() && this.get_scrollPolicyY() != feathers_controls_ScrollPolicy.OFF,useActualBounds);
		if(this.get_fixedScrollBars() && this.showScrollBarY && !this.showScrollBarX) {
			this.calculateViewPortOffsetsForFixedScrollBarX(forceScrollBars && this.get_showScrollBars() && this.get_scrollPolicyX() != feathers_controls_ScrollPolicy.OFF,useActualBounds);
		}
	}
	,calculateViewPortOffsetsForFixedScrollBarX: function(forceScrollBars,useActualBounds) {
		if(this.scrollBarX != null && (this.get_measureViewPort() || useActualBounds)) {
			var availableWidth = useActualBounds ? this.actualWidth : this.get_explicitWidth();
			if(availableWidth != null) {
				availableWidth -= this.get_paddingLeft() + this.get_paddingRight() + this.leftViewPortOffset + this.rightViewPortOffset;
				if(availableWidth < 0.0) {
					availableWidth = 0.0;
				}
			}
			if(!useActualBounds && !forceScrollBars && availableWidth == null) {
				availableWidth = this._viewPort.get_visibleWidth();
			}
			var maxAvailableWidth = this.get_explicitMaxWidth();
			if(maxAvailableWidth != null) {
				maxAvailableWidth -= this.get_paddingLeft() + this.get_paddingRight() + this.leftViewPortOffset + this.rightViewPortOffset;
				if(maxAvailableWidth < 0.0) {
					maxAvailableWidth = 0.0;
				}
			}
			if(!this.get_showScrollBars()) {
				this.showScrollBarX = false;
				return;
			}
			var totalContentWidth = this._viewPort.get_width();
			if(forceScrollBars || this._scrollPolicyX == feathers_controls_ScrollPolicy.ON || (totalContentWidth > availableWidth && !feathers_utils_MathUtil.fuzzyEquals(totalContentWidth,availableWidth) || maxAvailableWidth != null && totalContentWidth > maxAvailableWidth && !feathers_utils_MathUtil.fuzzyEquals(totalContentWidth,maxAvailableWidth)) && this._scrollPolicyX != feathers_controls_ScrollPolicy.OFF) {
				this.showScrollBarX = true;
				if(this.get_fixedScrollBars()) {
					if(this.get_scrollBarXPosition() == feathers_layout_RelativePosition.TOP) {
						this.topViewPortOffset += this.scrollBarX.get_height();
					} else {
						this.bottomViewPortOffset += this.scrollBarX.get_height();
					}
				}
			} else {
				this.showScrollBarX = false;
			}
		} else {
			this.showScrollBarX = false;
		}
	}
	,calculateViewPortOffsetsForFixedScrollBarY: function(forceScrollBars,useActualBounds) {
		if(this.scrollBarY != null && (this.get_measureViewPort() || useActualBounds)) {
			var availableHeight = useActualBounds ? this.actualHeight : this.get_explicitHeight();
			if(availableHeight != null) {
				availableHeight -= this.get_paddingTop() + this.get_paddingBottom() + this.topViewPortOffset + this.bottomViewPortOffset;
				if(availableHeight < 0.0) {
					availableHeight = 0.0;
				}
			}
			if(!useActualBounds && !forceScrollBars && availableHeight == null) {
				availableHeight = this._viewPort.get_visibleHeight();
			}
			var maxAvailableHeight = this.get_explicitMaxHeight();
			if(maxAvailableHeight != null) {
				maxAvailableHeight -= this.get_paddingTop() + this.get_paddingBottom() + this.topViewPortOffset + this.bottomViewPortOffset;
				if(maxAvailableHeight < 0.0) {
					maxAvailableHeight = 0.0;
				}
			}
			if(!this.get_showScrollBars()) {
				this.showScrollBarY = false;
				return;
			}
			var totalContentHeight = this._viewPort.get_height();
			if(forceScrollBars || this._scrollPolicyY == feathers_controls_ScrollPolicy.ON || (totalContentHeight > availableHeight && !feathers_utils_MathUtil.fuzzyEquals(totalContentHeight,availableHeight) || maxAvailableHeight != null && totalContentHeight > maxAvailableHeight && !feathers_utils_MathUtil.fuzzyEquals(totalContentHeight,maxAvailableHeight)) && this._scrollPolicyY != feathers_controls_ScrollPolicy.OFF) {
				this.showScrollBarY = true;
				if(this.get_fixedScrollBars()) {
					if(this.get_scrollBarYPosition() == feathers_layout_RelativePosition.LEFT) {
						this.leftViewPortOffset += this.scrollBarY.get_width();
					} else {
						this.rightViewPortOffset += this.scrollBarY.get_width();
					}
				}
			} else {
				this.showScrollBarY = false;
			}
		} else {
			this.showScrollBarY = false;
		}
	}
	,refreshViewPortBoundsForMeasurement: function() {
		var oldIgnoreViewPortResizing = this._ignoreViewPortResizing;
		this._ignoreViewPortResizing = true;
		var viewPortX = this.get_paddingLeft() + this.leftViewPortOffset;
		var viewPortY = this.get_paddingTop() + this.topViewPortOffset;
		if(this._scrollMode == feathers_controls_ScrollMode.MASK || this._scrollMode == feathers_controls_ScrollMode.MASKLESS || this._currentViewPortMaskSkin != null) {
			viewPortX -= this.get_scrollX();
			viewPortY -= this.get_scrollY();
		}
		this._viewPort.set_x(viewPortX);
		this._viewPort.set_y(viewPortY);
		if(this.get_explicitWidth() != null) {
			var visibleWidth = this.get_explicitWidth() - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
			if(visibleWidth < 0.0) {
				visibleWidth = 0.0;
			}
			this._viewPort.set_visibleWidth(visibleWidth);
		} else {
			this._viewPort.set_visibleWidth(null);
		}
		if(this.get_explicitHeight() != null) {
			var visibleHeight = this.get_explicitHeight() - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
			if(visibleHeight < 0.0) {
				visibleHeight = 0.0;
			}
			this._viewPort.set_visibleHeight(visibleHeight);
		} else {
			this._viewPort.set_visibleHeight(null);
		}
		if(this.get_explicitMinWidth() != null) {
			var minVisibleWidth = this.get_explicitMinWidth() - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
			if(minVisibleWidth < 0.0) {
				minVisibleWidth = 0.0;
			}
			this._viewPort.set_minVisibleWidth(minVisibleWidth);
		} else {
			this._viewPort.set_minVisibleWidth(null);
		}
		if(this.get_explicitMinHeight() != null) {
			var minVisibleHeight = this.get_explicitMinHeight() - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
			if(minVisibleHeight < 0.0) {
				minVisibleHeight = 0.0;
			}
			this._viewPort.set_minVisibleHeight(minVisibleHeight);
		} else {
			this._viewPort.set_minVisibleHeight(null);
		}
		if(this.get_explicitMaxWidth() != null) {
			var maxVisibleWidth = this.get_explicitMaxWidth() - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
			if(maxVisibleWidth < 0.0) {
				maxVisibleWidth = 0.0;
			}
			this._viewPort.set_maxVisibleWidth(maxVisibleWidth);
		} else if(this._backgroundSkinMeasurements != null && this._backgroundSkinMeasurements.maxWidth != null) {
			var maxVisibleWidth = this._backgroundSkinMeasurements.maxWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
			if(maxVisibleWidth < 0.0) {
				maxVisibleWidth = 0.0;
			}
			this._viewPort.set_maxVisibleWidth(maxVisibleWidth);
		} else {
			this._viewPort.set_maxVisibleWidth(1.0 / 0.0);
		}
		if(this.get_explicitMaxHeight() != null) {
			var maxVisibleHeight = this.get_explicitMaxHeight() - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
			if(maxVisibleHeight < 0.0) {
				maxVisibleHeight = 0.0;
			}
			this._viewPort.set_maxVisibleHeight(maxVisibleHeight);
		} else if(this._backgroundSkinMeasurements != null && this._backgroundSkinMeasurements.maxHeight != null) {
			var maxVisibleHeight = this._backgroundSkinMeasurements.maxHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
			if(maxVisibleHeight < 0.0) {
				maxVisibleHeight = 0.0;
			}
			this._viewPort.set_maxVisibleHeight(maxVisibleHeight);
		} else {
			this._viewPort.set_maxVisibleHeight(1.0 / 0.0);
		}
		this._viewPort.validateNow();
		this._ignoreViewPortResizing = oldIgnoreViewPortResizing;
	}
	,refreshViewPortBoundsForLayout: function() {
		var oldIgnoreViewPortResizing = this._ignoreViewPortResizing;
		this._ignoreViewPortResizing = true;
		var visibleWidth = this.actualWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
		if(visibleWidth < 0.0) {
			visibleWidth = 0.0;
		}
		var visibleHeight = this.actualHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
		if(visibleHeight < 0.0) {
			visibleHeight = 0.0;
		}
		var minVisibleWidth = this.actualMinWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
		if(minVisibleWidth < 0.0) {
			minVisibleWidth = 0.0;
		}
		var minVisibleHeight = this.actualMinHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
		if(minVisibleHeight < 0.0) {
			minVisibleHeight = 0.0;
		}
		var maxVisibleWidth = this.actualMaxWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
		if(maxVisibleWidth < 0.0) {
			maxVisibleWidth = 0.0;
		}
		var maxVisibleHeight = this.actualMaxHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
		if(maxVisibleHeight < 0.0) {
			maxVisibleHeight = 0.0;
		}
		var viewPortX = this.get_paddingLeft() + this.leftViewPortOffset;
		var viewPortY = this.get_paddingTop() + this.topViewPortOffset;
		if(this._scrollMode == feathers_controls_ScrollMode.MASK || this._scrollMode == feathers_controls_ScrollMode.MASKLESS || this._currentViewPortMaskSkin != null) {
			viewPortX -= this.get_scrollX();
			viewPortY -= this.get_scrollY();
		}
		this._viewPort.set_x(viewPortX);
		this._viewPort.set_y(viewPortY);
		this._viewPort.set_visibleWidth(visibleWidth);
		this._viewPort.set_visibleHeight(visibleHeight);
		this._viewPort.set_minVisibleWidth(minVisibleWidth);
		this._viewPort.set_minVisibleHeight(minVisibleHeight);
		this._viewPort.set_maxVisibleWidth(maxVisibleWidth);
		this._viewPort.set_maxVisibleHeight(maxVisibleHeight);
		this._ignoreViewPortResizing = oldIgnoreViewPortResizing;
		this._viewPort.validateNow();
		var oldSettingScrollerDimensions = this._settingScrollerDimensions;
		this._settingScrollerDimensions = true;
		this.scroller.setDimensions(this._viewPort.get_visibleWidth(),this._viewPort.get_visibleHeight(),this._viewPort.get_width(),this._viewPort.get_height());
		this._settingScrollerDimensions = oldSettingScrollerDimensions;
	}
	,refreshScrollerValues: function() {
		if(this.stage != null) {
			this.scroller.set_target(js_Boot.__cast(this._viewPort , openfl_display_InteractiveObject));
		}
		this.scroller.enabledX = this._enabled && this._scrollPolicyX != feathers_controls_ScrollPolicy.OFF;
		this.scroller.enabledY = this._enabled && this._scrollPolicyY != feathers_controls_ScrollPolicy.OFF;
	}
	,refreshScrollBarValues: function() {
		if(this.scrollBarX != null) {
			var oldIgnoreScrollBarXChange = this._ignoreScrollBarXChange;
			this._ignoreScrollBarXChange = true;
			this.scrollBarX.set_minimum(this.scroller.get_minScrollX());
			this.scrollBarX.set_maximum(this.scroller.get_maxScrollX());
			this.scrollBarX.set_value(this.scroller.get_scrollX());
			this.scrollBarX.set_page((this.scroller.get_maxScrollX() - this.scroller.get_minScrollX()) * this._viewPort.get_visibleWidth() / this._viewPort.get_width());
			this.scrollBarX.set_step(this._scrollStepX);
			var displayScrollBarX = js_Boot.__cast(this.scrollBarX , openfl_display_DisplayObjectContainer);
			displayScrollBarX.set_visible(this.showScrollBarX);
			if(this.get_fixedScrollBars() || !this.get_autoHideScrollBars()) {
				this.scrollBarX.set_alpha(1.0);
			}
			this._ignoreScrollBarXChange = oldIgnoreScrollBarXChange;
		}
		if(this.scrollBarY != null) {
			var oldIgnoreScrollBarYChange = this._ignoreScrollBarYChange;
			this._ignoreScrollBarYChange = true;
			this.scrollBarY.set_minimum(this.scroller.get_minScrollY());
			this.scrollBarY.set_maximum(this.scroller.get_maxScrollY());
			this.scrollBarY.set_value(this.scroller.get_scrollY());
			this.scrollBarY.set_page((this.scroller.get_maxScrollY() - this.scroller.get_minScrollY()) * this._viewPort.get_visibleHeight() / this._viewPort.get_height());
			this.scrollBarY.set_step(this._scrollStepY);
			var displayScrollBarY = js_Boot.__cast(this.scrollBarY , openfl_display_DisplayObjectContainer);
			displayScrollBarY.set_visible(this.showScrollBarY);
			if(this.get_fixedScrollBars() || !this.get_autoHideScrollBars()) {
				this.scrollBarY.set_alpha(1.0);
			}
			this._ignoreScrollBarYChange = oldIgnoreScrollBarYChange;
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			if(this.get_measureViewPort()) {
				newWidth = this._viewPort.get_visibleWidth();
			} else {
				newWidth = 0.0;
			}
			newWidth += this.leftViewPortOffset + this.rightViewPortOffset;
			newWidth = Math.max(newWidth,this.chromeMeasuredWidth);
			newWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				newWidth = Math.max(newWidth,this._currentBackgroundSkin.get_width());
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			if(this.get_measureViewPort()) {
				newHeight = this._viewPort.get_visibleHeight();
			} else {
				newHeight = 0.0;
			}
			newHeight += this.topViewPortOffset + this.bottomViewPortOffset;
			newHeight = Math.max(newHeight,this.chromeMeasuredHeight);
			newHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				newHeight = Math.max(newHeight,this._currentBackgroundSkin.get_height());
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			if(this.get_measureViewPort()) {
				newMinWidth = this._viewPort.get_minVisibleWidth();
			} else {
				newMinWidth = 0.0;
			}
			newMinWidth += this.leftViewPortOffset + this.rightViewPortOffset;
			newMinWidth = Math.max(newMinWidth,this.chromeMeasuredMinWidth);
			newMinWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMinWidth = Math.max(newMinWidth,measureSkin.get_minWidth());
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = Math.max(newMinWidth,this._backgroundSkinMeasurements.minWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			if(this.get_measureViewPort()) {
				newMinHeight = this._viewPort.get_minVisibleHeight();
			} else {
				newMinHeight = 0.0;
			}
			newMinHeight += this.topViewPortOffset + this.bottomViewPortOffset;
			newMinHeight = Math.max(newMinHeight,this.chromeMeasuredMinHeight);
			newMinHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMinHeight = Math.max(newMinHeight,measureSkin.get_minHeight());
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = Math.max(newMinHeight,this._backgroundSkinMeasurements.minHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(this.get_measureViewPort()) {
				newMaxWidth = this._viewPort.get_maxVisibleWidth();
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
			newMaxWidth += this.leftViewPortOffset + this.rightViewPortOffset;
			newMaxWidth = Math.min(newMaxWidth,this.chromeMeasuredMaxWidth);
			newMaxWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMaxWidth = Math.min(newMaxWidth,measureSkin.get_maxWidth());
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = Math.min(newMaxWidth,this._backgroundSkinMeasurements.maxWidth);
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(this.get_measureViewPort()) {
				newMaxHeight = this._viewPort.get_maxVisibleHeight();
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
			newMaxHeight += this.topViewPortOffset + this.bottomViewPortOffset;
			newMaxHeight = Math.min(newMaxHeight,this.chromeMeasuredMaxHeight);
			newMaxHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMaxHeight = Math.min(newMaxHeight,measureSkin.get_maxHeight());
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = Math.min(newMaxHeight,this._backgroundSkinMeasurements.maxHeight);
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		if(!this._enabled && this.get_disabledBackgroundSkin() != null) {
			return this.get_disabledBackgroundSkin();
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,refreshMaskSkin: function() {
		var oldSkin = this._currentMaskSkin;
		this._currentMaskSkin = this.getCurrentMaskSkin();
		if(this._currentMaskSkin == oldSkin) {
			return;
		}
		this.removeCurrentMaskSkin(oldSkin);
		this.addCurrentMaskSkin(this._currentMaskSkin);
	}
	,getCurrentMaskSkin: function() {
		return this.get_maskSkin();
	}
	,addCurrentMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChild(skin);
		this.set_mask(skin);
	}
	,removeCurrentMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(skin.parent == this) {
			this.removeChild(skin);
		}
		this.set_mask(null);
	}
	,refreshViewPortMaskSkin: function() {
		var oldSkin = this._currentViewPortMaskSkin;
		this._currentViewPortMaskSkin = this.getCurrentViewPortMaskSkin();
		if(this._currentViewPortMaskSkin == oldSkin) {
			return;
		}
		this.removeCurrentViewPortMaskSkin(oldSkin);
		this.addCurrentViewPortMaskSkin(this._currentViewPortMaskSkin);
	}
	,getCurrentViewPortMaskSkin: function() {
		if(this.get_viewPortMaskSkin() != null) {
			return this.get_viewPortMaskSkin();
		}
		if(this._scrollMode == feathers_controls_ScrollMode.MASK) {
			if(this._fallbackViewPortMaskSkin == null) {
				this._fallbackViewPortMaskSkin = new feathers_skins_RectangleSkin(feathers_graphics_FillStyle.SolidColor(16711935));
			}
			return this._fallbackViewPortMaskSkin;
		}
		return null;
	}
	,addCurrentViewPortMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChild(skin);
		(js_Boot.__cast(this._viewPort , openfl_display_DisplayObject)).set_mask(skin);
	}
	,removeCurrentViewPortMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(skin.parent == this) {
			this.removeChild(skin);
		}
		(js_Boot.__cast(this._viewPort , openfl_display_DisplayObject)).set_mask(null);
	}
	,layoutChildren: function() {
		this.layoutBackgroundSkin();
		this.layoutMaskSkin();
		this.layoutViewPortMaskSkin();
		this.layoutScrollBars();
	}
	,layoutBackgroundSkin: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,layoutMaskSkin: function() {
		if(this._currentMaskSkin == null) {
			return;
		}
		this._currentMaskSkin.set_x(0.0);
		this._currentMaskSkin.set_y(0.0);
		this._currentMaskSkin.set_width(this.actualWidth);
		this._currentMaskSkin.set_height(this.actualHeight);
		if(js_Boot.__implements(this._currentMaskSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentMaskSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,layoutViewPortMaskSkin: function() {
		if(this._currentViewPortMaskSkin == null) {
			return;
		}
		this._currentViewPortMaskSkin.set_x(this.get_paddingLeft() + this.leftViewPortOffset);
		this._currentViewPortMaskSkin.set_y(this.get_paddingTop() + this.topViewPortOffset);
		this._currentViewPortMaskSkin.set_width(this._viewPort.get_visibleWidth());
		this._currentViewPortMaskSkin.set_height(this._viewPort.get_visibleHeight());
		if(js_Boot.__implements(this._currentViewPortMaskSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentViewPortMaskSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,layoutScrollBars: function() {
		var visibleWidth = this.actualWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
		if(visibleWidth < 0.0) {
			visibleWidth = 0.0;
		}
		var visibleHeight = this.actualHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
		if(visibleHeight < 0.0) {
			visibleHeight = 0.0;
		}
		if(this.scrollBarX != null && js_Boot.__implements(this.scrollBarX,feathers_core_IValidating)) {
			(js_Boot.__cast(this.scrollBarX , feathers_core_IValidating)).validateNow();
		}
		if(this.scrollBarY != null && js_Boot.__implements(this.scrollBarY,feathers_core_IValidating)) {
			(js_Boot.__cast(this.scrollBarY , feathers_core_IValidating)).validateNow();
		}
		if(this.scrollBarX != null) {
			if(this.get_scrollBarXPosition()._hx_index == 0) {
				this.scrollBarX.set_y(this.get_paddingTop());
			} else {
				this.scrollBarX.set_y(this.get_paddingTop() + this.topViewPortOffset + visibleHeight);
			}
			this.scrollBarX.set_x(this.get_paddingLeft() + this.leftViewPortOffset);
			if(!this.get_fixedScrollBars()) {
				var fh = this.scrollBarX;
				fh.set_y(fh.get_y() - this.scrollBarX.get_height());
				if((this.showScrollBarY || this._hideScrollBarY != null) && this.scrollBarY != null) {
					var scrollBarXWidth = visibleWidth - this.scrollBarY.get_width();
					if(scrollBarXWidth < 0.0) {
						scrollBarXWidth = 0.0;
					}
					this.scrollBarX.set_width(scrollBarXWidth);
				} else {
					this.scrollBarX.set_width(visibleWidth);
				}
			} else {
				this.scrollBarX.set_width(visibleWidth);
			}
		}
		if(this.scrollBarY != null) {
			if(this.get_scrollBarYPosition()._hx_index == 3) {
				this.scrollBarY.set_x(this.get_paddingLeft());
			} else {
				this.scrollBarY.set_x(this.get_paddingLeft() + this.leftViewPortOffset + visibleWidth);
			}
			this.scrollBarY.set_y(this.get_paddingTop() + this.topViewPortOffset);
			if(!this.get_fixedScrollBars()) {
				var fh = this.scrollBarY;
				fh.set_x(fh.get_x() - this.scrollBarY.get_width());
				if((this.showScrollBarX || this._hideScrollBarX != null) && this.scrollBarX != null) {
					var scrollBarYHeight = visibleHeight - this.scrollBarX.get_height();
					if(scrollBarYHeight < 0.0) {
						scrollBarYHeight = 0.0;
					}
					this.scrollBarY.set_height(scrollBarYHeight);
				} else {
					this.scrollBarY.set_height(visibleHeight);
				}
			} else {
				this.scrollBarY.set_height(visibleHeight);
			}
		}
	}
	,refreshScrollRect: function() {
		var scrollX = this.scroller.get_scrollX();
		var scrollY = this.scroller.get_scrollY();
		if(this.get_scrollPixelSnapping()) {
			var scaleFactorX = feathers_utils_DisplayUtil.getConcatenatedScaleX(this);
			var scaleFactorY = feathers_utils_DisplayUtil.getConcatenatedScaleY(this);
			scrollX = Math.round(scrollX / scaleFactorX) * scaleFactorX;
			scrollY = Math.round(scrollY / scaleFactorY) * scaleFactorY;
		}
		if(this._scrollMode == feathers_controls_ScrollMode.MASK || this._scrollMode == feathers_controls_ScrollMode.MASKLESS || this._currentViewPortMaskSkin != null) {
			var displayViewPort = js_Boot.__cast(this._viewPort , openfl_display_DisplayObject);
			displayViewPort.set_scrollRect(null);
			this._viewPort.set_x(this.get_paddingLeft() + this.leftViewPortOffset - scrollX);
			this._viewPort.set_y(this.get_paddingTop() + this.topViewPortOffset - scrollY);
		} else if(this._scrollMode == feathers_controls_ScrollMode.SCROLL_RECT) {
			var scrollRect = this._scrollRect1;
			if(this._currentScrollRect == scrollRect) {
				scrollRect = this._scrollRect2;
			}
			this._currentScrollRect = scrollRect;
			var scrollRectWidth = this.actualWidth - this.leftViewPortOffset - this.rightViewPortOffset - this.get_paddingLeft() - this.get_paddingRight();
			if(scrollRectWidth < 0.0) {
				scrollRectWidth = 0.0;
			}
			var scrollRectHeight = this.actualHeight - this.topViewPortOffset - this.bottomViewPortOffset - this.get_paddingTop() - this.get_paddingBottom();
			if(scrollRectHeight < 0.0) {
				scrollRectHeight = 0.0;
			}
			scrollRect.setTo(scrollX,scrollY,scrollRectWidth,scrollRectHeight);
			var displayViewPort = js_Boot.__cast(this._viewPort , openfl_display_DisplayObject);
			displayViewPort.set_scrollRect(scrollRect);
		} else {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown scrollMode: " + Std.string(this._scrollMode)));
		}
	}
	,revealScrollBarX: function() {
		if(this.scrollBarX == null || this.scroller.get_minScrollX() == this.scroller.get_maxScrollX()) {
			return;
		}
		if(this._hideScrollBarX != null) {
			motion_Actuate.stop(this._hideScrollBarX);
		}
		this.scrollBarX.set_alpha(1.0);
		this._scrollBarXRevealTime = openfl_Lib.getTimer();
	}
	,revealScrollBarY: function() {
		if(this.scrollBarY == null || this.scroller.get_minScrollY() == this.scroller.get_maxScrollY()) {
			return;
		}
		if(this._hideScrollBarY != null) {
			motion_Actuate.stop(this._hideScrollBarY);
		}
		this.scrollBarY.set_alpha(1.0);
		this._scrollBarYRevealTime = openfl_Lib.getTimer();
	}
	,hideScrollBarX: function() {
		var _gthis = this;
		if(this.scrollBarX == null || this._hideScrollBarX != null) {
			return;
		}
		if(this.scrollBarX.get_alpha() == 0.0) {
			return;
		}
		if(this.get_hideScrollBarDuration() == 0.0) {
			this.scrollBarX.set_alpha(0.0);
			return;
		}
		var tween = motion_Actuate.update(function(alpha) {
			return _gthis.scrollBarX.set_alpha(alpha);
		},this.get_hideScrollBarDuration(),[this.scrollBarX.get_alpha()],[0.0],true);
		this._hideScrollBarX = js_Boot.__cast(tween , motion_actuators_SimpleActuator);
		this._hideScrollBarX.ease(this.get_hideScrollBarEase());
		this._hideScrollBarX.autoVisible(false);
		var visibleTime = (openfl_Lib.getTimer() - this._scrollBarXRevealTime) / 1000.0;
		if(visibleTime < this.get_showScrollBarMinimumDuration()) {
			this._hideScrollBarX.delay(this.get_showScrollBarMinimumDuration() - visibleTime);
		}
		this._hideScrollBarX.onComplete($bind(this,this.hideScrollBarX_onComplete));
	}
	,hideScrollBarY: function() {
		var _gthis = this;
		if(this.scrollBarY == null || this._hideScrollBarY != null) {
			return;
		}
		if(this.scrollBarY.get_alpha() == 0.0) {
			return;
		}
		if(this.get_hideScrollBarDuration() == 0.0) {
			this.scrollBarY.set_alpha(0.0);
			return;
		}
		var tween = motion_Actuate.update(function(alpha) {
			return _gthis.scrollBarY.set_alpha(alpha);
		},this.get_hideScrollBarDuration(),[this.scrollBarY.get_alpha()],[0.0],true);
		this._hideScrollBarY = js_Boot.__cast(tween , motion_actuators_SimpleActuator);
		this._hideScrollBarY.ease(this.get_hideScrollBarEase());
		this._hideScrollBarY.autoVisible(false);
		var visibleTime = (openfl_Lib.getTimer() - this._scrollBarYRevealTime) / 1000.0;
		if(visibleTime < this.get_showScrollBarMinimumDuration()) {
			this._hideScrollBarY.delay(this.get_showScrollBarMinimumDuration() - visibleTime);
		}
		this._hideScrollBarY.onComplete($bind(this,this.hideScrollBarY_onComplete));
	}
	,checkForRevealScrollBars: function() {
		if(!this._scrollerDraggingX && this.scroller.get_draggingX()) {
			this._scrollerDraggingX = true;
			this.revealScrollBarX();
		}
		if(!this._scrollerDraggingY && this.scroller.get_draggingY()) {
			this._scrollerDraggingY = true;
			this.revealScrollBarY();
		}
	}
	,scrollWithKeyboard: function(event) {
		if(this._scrollPolicyY == feathers_controls_ScrollPolicy.OFF && this._scrollPolicyX == feathers_controls_ScrollPolicy.OFF) {
			return;
		}
		var stepX = this._scrollStepX;
		if(stepX <= 0.0) {
			stepX = 1.0;
		}
		var stepY = this._scrollStepY;
		if(stepY <= 0.0) {
			stepY = 1.0;
		}
		var newScrollX = this.get_scrollX();
		var newScrollY = this.get_scrollY();
		switch(event.keyCode) {
		case 33:
			newScrollY = this.get_scrollY() - this._viewPort.get_visibleHeight();
			break;
		case 34:
			newScrollY = this.get_scrollY() + this._viewPort.get_visibleHeight();
			break;
		case 35:
			newScrollY = this.get_maxScrollY();
			break;
		case 36:
			newScrollY = this.get_minScrollY();
			break;
		case 37:
			newScrollX = this.get_scrollX() - stepX;
			break;
		case 38:
			newScrollY = this.get_scrollY() - stepY;
			break;
		case 39:
			newScrollX = this.get_scrollX() + stepX;
			break;
		case 40:
			newScrollY = this.get_scrollY() + stepY;
			break;
		default:
			return;
		}
		if(newScrollY < this.get_minScrollY()) {
			newScrollY = this.get_minScrollY();
		} else if(newScrollY > this.get_maxScrollY()) {
			newScrollY = this.get_maxScrollY();
		}
		if(newScrollX < this.get_minScrollX()) {
			newScrollX = this.get_minScrollX();
		} else if(newScrollX > this.get_maxScrollX()) {
			newScrollX = this.get_maxScrollX();
		}
		var scrolled = false;
		if(this.get_scrollY() != newScrollY && this._scrollPolicyY != feathers_controls_ScrollPolicy.OFF) {
			scrolled = true;
			this.set_scrollY(newScrollY);
		}
		if(this.get_scrollX() != newScrollX && this._scrollPolicyX != feathers_controls_ScrollPolicy.OFF) {
			scrolled = true;
			this.set_scrollX(newScrollX);
		}
		if(scrolled) {
			event.preventDefault();
		}
	}
	,baseScrollContainer_addedToStageHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
	}
	,baseScrollContainer_removedFromStageHandler: function(event) {
		if(this.scroller != null) {
			this.scroller.set_target(null);
		}
	}
	,baseScrollContainer_keyDownHandler: function(event) {
		if(!this._enabled || event.isDefaultPrevented()) {
			return;
		}
		this.scrollWithKeyboard(event);
	}
	,baseScrollContainer_scroller_scrollStartHandler: function(event) {
		var touchPointID = this.scroller.get_touchPointID();
		if(touchPointID != null) {
			var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
			var result = exclusivePointer.claimTouch(touchPointID,this);
			if(!result) {
				this.scroller.stop();
				return;
			}
			this._viewPort.addEventListener("mouseDown",$bind(this,this.baseScrollContainer_viewPort_mouseDownHandler));
			this._viewPort.addEventListener("touchBegin",$bind(this,this.baseScrollContainer_viewPort_touchBeginHandler));
		} else if(this.scroller.get_touchPointIsSimulated()) {
			var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
			var result = exclusivePointer.claimMouse(this);
			if(!result) {
				this.scroller.stop();
				return;
			}
			this._viewPort.addEventListener("mouseDown",$bind(this,this.baseScrollContainer_viewPort_mouseDownHandler));
			this._viewPort.addEventListener("touchBegin",$bind(this,this.baseScrollContainer_viewPort_touchBeginHandler));
		}
		this._scrollerDraggingX = false;
		this._scrollerDraggingY = false;
		this.checkForRevealScrollBars();
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
	}
	,baseScrollContainer_scroller_scrollHandler: function(event) {
		if(this._ignoreScrollerChanges) {
			if(this._settingScrollerDimensions && this.needsScrollMeasurement()) {
				this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
			} else {
				this._viewPort.set_scrollX(this.get_scrollX());
				this._viewPort.set_scrollY(this.get_scrollY());
			}
			return;
		}
		this.checkForRevealScrollBars();
		if(this.needsScrollMeasurement()) {
			this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		} else {
			this._viewPort.set_scrollX(this.get_scrollX());
			this._viewPort.set_scrollY(this.get_scrollY());
			this.refreshScrollRect();
			this.refreshScrollBarValues();
		}
		feathers_events_ScrollEvent.dispatch(this,"scroll");
	}
	,baseScrollContainer_scroller_scrollCompleteHandler: function(event) {
		this._viewPort.removeEventListener("mouseDown",$bind(this,this.baseScrollContainer_viewPort_mouseDownHandler));
		this._viewPort.removeEventListener("touchBegin",$bind(this,this.baseScrollContainer_viewPort_touchBeginHandler));
		this._scrollerDraggingX = false;
		this._scrollerDraggingY = false;
		if(!this._scrollBarXHover && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarX();
		}
		if(!this._scrollBarYHover && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarY();
		}
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
	}
	,reclaimMouse: function() {
		if(!this.scroller.get_touchPointIsSimulated()) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var claim = exclusivePointer.getMouseClaim();
		if(claim != null) {
			return;
		}
		exclusivePointer.claimMouse(this);
	}
	,reclaimTouch: function(touchPointID) {
		if(this.scroller.get_touchPointID() == null || this.scroller.get_touchPointID() != touchPointID) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var claim = exclusivePointer.getTouchClaim(touchPointID);
		if(claim != null) {
			return;
		}
		exclusivePointer.claimTouch(touchPointID,this);
	}
	,baseScrollContainer_viewPort_mouseDownHandler: function(event) {
		this.reclaimMouse();
	}
	,baseScrollContainer_viewPort_touchBeginHandler: function(event) {
		this.reclaimTouch(event.touchPointID);
	}
	,scrollBarX_changeHandler: function(event) {
		if(this._ignoreScrollBarXChange) {
			return;
		}
		this.scroller.set_scrollX(this.scrollBarX.get_value());
	}
	,scrollBarY_changeHandler: function(event) {
		if(this._ignoreScrollBarYChange) {
			return;
		}
		this.scroller.set_scrollY(this.scrollBarY.get_value());
	}
	,scrollBarX_rollOverHandler: function(event) {
		this._scrollBarXHover = true;
		this.revealScrollBarX();
	}
	,scrollBarX_rollOutHandler: function(event) {
		if(!this._scrollBarXHover) {
			return;
		}
		this._scrollBarXHover = false;
		if(!this._scrollerDraggingX && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarX();
		}
	}
	,scrollBarY_rollOverHandler: function(event) {
		this._scrollBarYHover = true;
		this.revealScrollBarY();
	}
	,scrollBarY_rollOutHandler: function(event) {
		if(!this._scrollBarYHover) {
			return;
		}
		this._scrollBarYHover = false;
		if(!this._scrollerDraggingY && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarY();
		}
	}
	,scrollBarX_scrollStartHandler: function(event) {
		this.scroller.stop();
		this._scrollerDraggingX = true;
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
	}
	,scrollBarX_scrollCompleteHandler: function(event) {
		this._scrollerDraggingX = false;
		if(!this._scrollBarXHover && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarX();
		}
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
	}
	,scrollBarY_scrollStartHandler: function(event) {
		this.scroller.stop();
		this._scrollerDraggingY = true;
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
	}
	,scrollBarY_scrollCompleteHandler: function(event) {
		this._scrollerDraggingY = false;
		if(!this._scrollBarYHover && !this.get_fixedScrollBars() && this.get_autoHideScrollBars()) {
			this.hideScrollBarY();
		}
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
	}
	,hideScrollBarX_onComplete: function() {
		this._hideScrollBarX = null;
	}
	,hideScrollBarY_onComplete: function() {
		this._hideScrollBarY = null;
	}
	,viewPort_resizeHandler: function(event) {
		if(this._ignoreViewPortResizing || feathers_utils_MathUtil.fuzzyEquals(this._viewPort.get_width(),this._previousViewPortWidth) && feathers_utils_MathUtil.fuzzyEquals(this._viewPort.get_height(),this._previousViewPortHeight)) {
			return;
		}
		this._previousViewPortWidth = this._viewPort.get_width();
		this._previousViewPortHeight = this._viewPort.get_height();
		if(this._validating) {
			this._viewPortBoundsChanged = true;
		} else {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,get_disabledBackgroundSkin: function() {
		return this.__disabledBackgroundSkin;
	}
	,get_maskSkin: function() {
		return this.__maskSkin;
	}
	,get_viewPortMaskSkin: function() {
		return this.__viewPortMaskSkin;
	}
	,get_fixedScrollBars: function() {
		return this.__fixedScrollBars;
	}
	,set_fixedScrollBars: function(value) {
		if(!this.setStyle("fixedScrollBars")) {
			return this.__fixedScrollBars;
		}
		if(this.__fixedScrollBars == value) {
			return this.__fixedScrollBars;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_fixedScrollBars);
		this.__fixedScrollBars = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__fixedScrollBars;
	}
	,clearStyle_fixedScrollBars: function() {
		this.set_fixedScrollBars(false);
		return this.get_fixedScrollBars();
	}
	,get_showScrollBars: function() {
		return this.__showScrollBars;
	}
	,get_autoHideScrollBars: function() {
		return this.__autoHideScrollBars;
	}
	,set_autoHideScrollBars: function(value) {
		if(!this.setStyle("autoHideScrollBars")) {
			return this.__autoHideScrollBars;
		}
		if(this.__autoHideScrollBars == value) {
			return this.__autoHideScrollBars;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_autoHideScrollBars);
		this.__autoHideScrollBars = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__autoHideScrollBars;
	}
	,clearStyle_autoHideScrollBars: function() {
		this.set_autoHideScrollBars(true);
		return this.get_autoHideScrollBars();
	}
	,get_scrollBarXPosition: function() {
		return this.__scrollBarXPosition;
	}
	,get_scrollBarYPosition: function() {
		return this.__scrollBarYPosition;
	}
	,get_showScrollBarMinimumDuration: function() {
		return this.__showScrollBarMinimumDuration;
	}
	,get_hideScrollBarDuration: function() {
		return this.__hideScrollBarDuration;
	}
	,get_hideScrollBarEase: function() {
		return this.__hideScrollBarEase;
	}
	,get_scrollPixelSnapping: function() {
		return this.__scrollPixelSnapping;
	}
	,__class__: feathers_controls_supportClasses_BaseScrollContainer
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_measureViewPort:"get_measureViewPort",get_scrollPixelSnapping:"get_scrollPixelSnapping",get_hideScrollBarEase:"get_hideScrollBarEase",get_hideScrollBarDuration:"get_hideScrollBarDuration",get_showScrollBarMinimumDuration:"get_showScrollBarMinimumDuration",get_scrollBarYPosition:"get_scrollBarYPosition",get_scrollBarXPosition:"get_scrollBarXPosition",get_scrollPolicyY:"get_scrollPolicyY",get_scrollPolicyX:"get_scrollPolicyX",get_maxScrollY:"get_maxScrollY",get_maxScrollX:"get_maxScrollX",get_minScrollY:"get_minScrollY",get_minScrollX:"get_minScrollX",set_scrollY:"set_scrollY",get_scrollY:"get_scrollY",set_scrollX:"set_scrollX",get_scrollX:"get_scrollX",set_autoHideScrollBars:"set_autoHideScrollBars",get_autoHideScrollBars:"get_autoHideScrollBars",get_showScrollBars:"get_showScrollBars",set_fixedScrollBars:"set_fixedScrollBars",get_fixedScrollBars:"get_fixedScrollBars",get_viewPortMaskSkin:"get_viewPortMaskSkin",get_maskSkin:"get_maskSkin",get_disabledBackgroundSkin:"get_disabledBackgroundSkin",set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",set_viewPort:"set_viewPort",get_viewPort:"get_viewPort"})
});
var feathers_core_IFocusContainer = function() { };
$hxClasses["feathers.core.IFocusContainer"] = feathers_core_IFocusContainer;
feathers_core_IFocusContainer.__name__ = "feathers.core.IFocusContainer";
feathers_core_IFocusContainer.__isInterface__ = true;
feathers_core_IFocusContainer.__interfaces__ = [feathers_core_IFocusObject];
var feathers_data_ListViewItemState = function(data,index,selected,text) {
	if(selected == null) {
		selected = false;
	}
	if(index == null) {
		index = -1;
	}
	this.enabled = true;
	this.selected = false;
	this.index = -1;
	this.data = data;
	this.index = index;
	this.selected = false;
	this.text = text;
};
$hxClasses["feathers.data.ListViewItemState"] = feathers_data_ListViewItemState;
feathers_data_ListViewItemState.__name__ = "feathers.data.ListViewItemState";
feathers_data_ListViewItemState.prototype = {
	__class__: feathers_data_ListViewItemState
};
var feathers_controls_ListView = function(dataProvider,changeListener) {
	this.__customItemRendererVariant = null;
	this.__layout = null;
	this._ignoreLayoutChanges = false;
	this._ignoreSelectionChange = false;
	this._pendingScrollDuration = null;
	this._pendingScrollIndex = -1;
	this.pointerSelectionEnabled = true;
	this._virtualLayout = true;
	this._selectable = true;
	this._layoutItems = [];
	this._tempVisibleIndices = new feathers_layout_VirtualLayoutRange(0,0);
	this._visibleIndices = new feathers_layout_VirtualLayoutRange(0,0);
	this._virtualCache = [];
	this._unrenderedData = [];
	this.itemStatePool = new lime_utils_ObjectPool(function() {
		return new feathers_data_ListViewItemState();
	});
	this.itemRendererToItemState = new haxe_ds_ObjectMap();
	this.dataToItemRenderer = new haxe_ds_ObjectMap();
	this._additionalStorage = null;
	this._defaultStorage = new feathers_controls__$ListView_ItemRendererStorage(null,feathers_utils_DisplayObjectRecycler.withClass(feathers_controls_dataRenderers_ItemRenderer));
	this._recyclerMap = null;
	this._previousCustomItemRendererVariant = null;
	this._selectedItems = [];
	this._selectedIndices = [];
	this._selectionAnchorIndex = -1;
	this._allowMultipleSelection = false;
	this._selectedItem = null;
	this._selectedIndex = -1;
	this.initializeListViewTheme();
	feathers_controls_supportClasses_BaseScrollContainer.call(this);
	this.set_dataProvider(dataProvider);
	this.set_tabEnabled(true);
	this.focusRect = null;
	if(this.get_viewPort() == null) {
		this.listViewPort = new feathers_controls_supportClasses_AdvancedLayoutViewPort();
		this.addChild(this.listViewPort);
		this.set_viewPort(this.listViewPort);
	}
	this.addEventListener("keyDown",$bind(this,this.listView_keyDownHandler));
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.ListView"] = feathers_controls_ListView;
feathers_controls_ListView.__name__ = "feathers.controls.ListView";
feathers_controls_ListView.__interfaces__ = [feathers_core_IFocusContainer,feathers_core_IDataSelector,feathers_core_IIndexSelector];
feathers_controls_ListView.defaultUpdateItemRenderer = function(itemRenderer,state) {
	if(js_Boot.__implements(itemRenderer,feathers_core_ITextControl)) {
		var textControl = js_Boot.__cast(itemRenderer , feathers_core_ITextControl);
		textControl.set_text(state.text);
	}
};
feathers_controls_ListView.defaultResetItemRenderer = function(itemRenderer,state) {
	if(js_Boot.__implements(itemRenderer,feathers_core_ITextControl)) {
		var textControl = js_Boot.__cast(itemRenderer , feathers_core_ITextControl);
		textControl.set_text(null);
	}
};
feathers_controls_ListView.__super__ = feathers_controls_supportClasses_BaseScrollContainer;
feathers_controls_ListView.prototype = $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype,{
	get_tabEnabled: function() {
		if((this._selectable || this.get_maxScrollY() != this.get_minScrollY() || this.get_maxScrollX() != this.get_minScrollX()) && this._enabled) {
			return this.get_rawTabEnabled();
		} else {
			return false;
		}
	}
	,set_dataProvider: function(value) {
		if(this._dataProvider == value) {
			return this._dataProvider;
		}
		this._virtualCache.length = 0;
		if(this._dataProvider != null) {
			this._dataProvider.removeEventListener("change",$bind(this,this.listView_dataProvider_changeHandler));
			this._dataProvider.removeEventListener("addItem",$bind(this,this.listView_dataProvider_addItemHandler));
			this._dataProvider.removeEventListener("removeItem",$bind(this,this.listView_dataProvider_removeItemHandler));
			this._dataProvider.removeEventListener("replaceItem",$bind(this,this.listView_dataProvider_replaceItemHandler));
			this._dataProvider.removeEventListener("removeAll",$bind(this,this.listView_dataProvider_removeAllHandler));
			this._dataProvider.removeEventListener("reset",$bind(this,this.listView_dataProvider_resetHandler));
			this._dataProvider.removeEventListener("sortChange",$bind(this,this.listView_dataProvider_sortChangeHandler));
			this._dataProvider.removeEventListener("filterChange",$bind(this,this.listView_dataProvider_filterChangeHandler));
			this._dataProvider.removeEventListener("updateItem",$bind(this,this.listView_dataProvider_updateItemHandler));
			this._dataProvider.removeEventListener("updateAll",$bind(this,this.listView_dataProvider_updateAllHandler));
		}
		this._dataProvider = value;
		if(this._dataProvider != null) {
			this._virtualCache.length = this._dataProvider.get_length();
			this._dataProvider.addEventListener("change",$bind(this,this.listView_dataProvider_changeHandler));
			this._dataProvider.addEventListener("addItem",$bind(this,this.listView_dataProvider_addItemHandler));
			this._dataProvider.addEventListener("removeItem",$bind(this,this.listView_dataProvider_removeItemHandler));
			this._dataProvider.addEventListener("replaceItem",$bind(this,this.listView_dataProvider_replaceItemHandler));
			this._dataProvider.addEventListener("removeAll",$bind(this,this.listView_dataProvider_removeAllHandler));
			this._dataProvider.addEventListener("reset",$bind(this,this.listView_dataProvider_resetHandler));
			this._dataProvider.addEventListener("sortChange",$bind(this,this.listView_dataProvider_sortChangeHandler));
			this._dataProvider.addEventListener("filterChange",$bind(this,this.listView_dataProvider_filterChangeHandler));
			this._dataProvider.addEventListener("updateItem",$bind(this,this.listView_dataProvider_updateItemHandler));
			this._dataProvider.addEventListener("updateAll",$bind(this,this.listView_dataProvider_updateAllHandler));
		}
		this.set_scrollX(0.0);
		this.set_scrollY(0.0);
		this.set_selectedIndex(-1);
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._dataProvider;
	}
	,get_selectedIndex: function() {
		return this._selectedIndex;
	}
	,set_selectedIndex: function(value) {
		if(!this._selectable || this._dataProvider == null) {
			value = -1;
		}
		if(this._selectedIndex == value && this._selectedIndices.length <= 1) {
			return this._selectedIndex;
		}
		if(value == -1) {
			this._selectionAnchorIndex = -1;
			this._selectedIndex = -1;
			this._selectedItem = null;
			this._selectedIndices.length = 0;
			this._selectedItems.length = 0;
			this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
			feathers_events_FeathersEvent.dispatch(this,"change");
			return this._selectedIndex;
		}
		this._selectedIndex = value;
		this._selectedItem = this._dataProvider.get(this._selectedIndex);
		this._selectedIndices.length = 1;
		this._selectedIndices[0] = this._selectedIndex;
		this._selectedItems.length = 1;
		this._selectedItems[0] = this._selectedItem;
		this._selectionAnchorIndex = this._selectedIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedIndex;
	}
	,get_selectedItem: function() {
		return this._selectedItem;
	}
	,set_selectedItem: function(value) {
		if(value == null || !this._selectable || this._dataProvider == null) {
			this.set_selectedIndex(-1);
			return this._selectedItem;
		}
		var index = this._dataProvider.indexOf(value);
		if(index == -1) {
			this.set_selectedIndex(-1);
			return this._selectedItem;
		}
		if(this._selectedItem == value && this._selectedIndex == index && this._selectedIndices.length == 1) {
			return this._selectedItem;
		}
		this._selectedIndex = index;
		this._selectedItem = value;
		this._selectedIndices.length = 1;
		this._selectedIndices[0] = this._selectedIndex;
		this._selectedItems.length = 1;
		this._selectedItems[0] = this._selectedItem;
		this._selectionAnchorIndex = this._selectedIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedItem;
	}
	,set_selectedIndices: function(value) {
		if(value == null || value.length == 0 || !this._selectable || this._dataProvider == null) {
			this.set_selectedIndex(-1);
			return this._selectedIndices;
		}
		if(this._selectedIndices == value) {
			return this._selectedIndices;
		}
		if(!this._allowMultipleSelection && value.length > 1) {
			value.length = 1;
		}
		this._selectedIndices = value;
		this._selectedIndex = this._selectedIndices[0];
		this._selectedItems.length = this._selectedIndices.length;
		var _g = 0;
		var _g1 = this._selectedIndices.length;
		while(_g < _g1) {
			var i = _g++;
			var index = this._selectedIndices[i];
			this._selectedItems[i] = this._dataProvider.get(index);
		}
		this._selectedItem = this._selectedItems[0];
		this._selectionAnchorIndex = this._selectedIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedIndices;
	}
	,set_selectedItems: function(value) {
		if(value == null || value.length == 0 || !this._selectable || this._dataProvider == null) {
			this.set_selectedIndex(-1);
			return this._selectedItems;
		}
		if(this._selectedItems == value) {
			return this._selectedItems;
		}
		if(!this._allowMultipleSelection && value.length > 1) {
			value.length = 1;
		}
		var indices = [];
		var i = 0;
		while(i < value.length) {
			var item = value[i];
			var index = this._dataProvider.indexOf(item);
			if(index == -1) {
				value.splice(i,1);
				continue;
			}
			indices.push(index);
			++i;
		}
		this._selectedIndices = indices;
		this._selectedItems = value;
		if(value.length == 0) {
			this._selectedIndex = -1;
			this._selectedItem = null;
		} else {
			this._selectedIndex = this._selectedIndices[0];
			this._selectedItem = this._selectedItems[0];
		}
		this._selectionAnchorIndex = this._selectedIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedIndices;
	}
	,set_itemRendererRecycler: function(value) {
		if(this._defaultStorage.itemRendererRecycler == value) {
			return this._defaultStorage.itemRendererRecycler;
		}
		this._defaultStorage.oldItemRendererRecycler = this._defaultStorage.itemRendererRecycler;
		this._defaultStorage.itemRendererRecycler = value;
		this._defaultStorage.measurements = null;
		this.setInvalid(feathers_controls_ListView.INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		return this._defaultStorage.itemRendererRecycler;
	}
	,itemToText: function(data) {
		return Std.string(data);
	}
	,scrollToIndex: function(index,animationDuration) {
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			return;
		}
		this._pendingScrollIndex = index;
		this._pendingScrollDuration = animationDuration;
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
	}
	,initializeListViewTheme: function() {
		feathers_themes_steel_components_SteelListViewStyles.initialize();
	}
	,update: function() {
		var layoutInvalid = this.isInvalid(feathers_core_InvalidationFlag.LAYOUT);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(this._previousCustomItemRendererVariant != this.get_customItemRendererVariant()) {
			this.setInvalidationFlag(feathers_controls_ListView.INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		}
		if(layoutInvalid || stylesInvalid) {
			if(this._previousLayout != this.get_layout()) {
				this._virtualCache.length = 0;
				if(this._dataProvider != null) {
					this._virtualCache.length = this._dataProvider.get_length();
				}
			}
			this.listViewPort.set_layout(this.get_layout());
			this._previousLayout = this.get_layout();
		}
		this.listViewPort.refreshChildren = $bind(this,this.refreshItemRenderers);
		var flag = this._invalidationFlags.keys();
		while(flag.hasNext()) {
			var flag1 = flag.next();
			this.listViewPort.setInvalid(flag1);
		}
		feathers_controls_supportClasses_BaseScrollContainer.prototype.update.call(this);
		this._previousCustomItemRendererVariant = this.get_customItemRendererVariant();
		this.handlePendingScroll();
	}
	,refreshScrollerValues: function() {
		feathers_controls_supportClasses_BaseScrollContainer.prototype.refreshScrollerValues.call(this);
		if(js_Boot.__implements(this.get_layout(),feathers_layout_IScrollLayout)) {
			var scrollLayout = js_Boot.__cast(this.get_layout() , feathers_layout_IScrollLayout);
			this.scroller.forceElasticTop = scrollLayout.get_elasticTop();
			this.scroller.forceElasticRight = scrollLayout.get_elasticRight();
			this.scroller.forceElasticBottom = scrollLayout.get_elasticBottom();
			this.scroller.forceElasticLeft = scrollLayout.get_elasticLeft();
		} else {
			this.scroller.forceElasticTop = false;
			this.scroller.forceElasticRight = false;
			this.scroller.forceElasticBottom = false;
			this.scroller.forceElasticLeft = false;
		}
		this.scroller.snapPositionsX = this.listViewPort.get_snapPositionsX();
		this.scroller.snapPositionsY = this.listViewPort.get_snapPositionsY();
	}
	,needsScrollMeasurement: function() {
		var oldStart = this._visibleIndices.start;
		var oldEnd = this._visibleIndices.end;
		if(this._virtualLayout && js_Boot.__implements(this.get_layout(),feathers_layout_IVirtualLayout)) {
			var virtualLayout = js_Boot.__cast(this.get_layout() , feathers_layout_IVirtualLayout);
			virtualLayout.set_scrollX(this.get_scrollX());
			virtualLayout.set_scrollY(this.get_scrollY());
			virtualLayout.getVisibleIndices(this._layoutItems.length,this.listViewPort.get_visibleWidth(),this.listViewPort.get_visibleHeight(),this._tempVisibleIndices);
		} else {
			this._tempVisibleIndices.start = 0;
			this._tempVisibleIndices.end = this._layoutItems.length - 1;
		}
		if(oldStart == this._tempVisibleIndices.start) {
			return oldEnd != this._tempVisibleIndices.end;
		} else {
			return true;
		}
	}
	,refreshItemRenderers: function(items) {
		this._layoutItems = items;
		if(this._defaultStorage.itemRendererRecycler.update == null) {
			this._defaultStorage.itemRendererRecycler.update = feathers_controls_ListView.defaultUpdateItemRenderer;
			if(this._defaultStorage.itemRendererRecycler.reset == null) {
				this._defaultStorage.itemRendererRecycler.reset = feathers_controls_ListView.defaultResetItemRenderer;
			}
		}
		if(this._additionalStorage != null) {
			var _g = 0;
			var _g1 = this._additionalStorage.length;
			while(_g < _g1) {
				var i = _g++;
				var storage = this._additionalStorage[i];
				if(storage.itemRendererRecycler.update == null) {
					storage.itemRendererRecycler.update = feathers_controls_ListView.defaultUpdateItemRenderer;
					if(storage.itemRendererRecycler.reset == null) {
						storage.itemRendererRecycler.reset = feathers_controls_ListView.defaultResetItemRenderer;
					}
				}
			}
		}
		var itemRendererInvalid = this.isInvalid(feathers_controls_ListView.INVALIDATION_FLAG_ITEM_RENDERER_FACTORY);
		this.refreshInactiveItemRenderers(this._defaultStorage,itemRendererInvalid);
		if(this._additionalStorage != null) {
			var _g = 0;
			var _g1 = this._additionalStorage.length;
			while(_g < _g1) {
				var i = _g++;
				var storage = this._additionalStorage[i];
				this.refreshInactiveItemRenderers(storage,itemRendererInvalid);
			}
		}
		this.findUnrenderedData();
		this.recoverInactiveItemRenderers(this._defaultStorage);
		if(this._additionalStorage != null) {
			var _g = 0;
			var _g1 = this._additionalStorage.length;
			while(_g < _g1) {
				var i = _g++;
				var storage = this._additionalStorage[i];
				this.recoverInactiveItemRenderers(storage);
			}
		}
		this.renderUnrenderedData();
		this.freeInactiveItemRenderers(this._defaultStorage);
		if(this._defaultStorage.inactiveItemRenderers.length > 0) {
			var c = js_Boot.getClass(this);
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("" + c.__name__ + ": inactive item renderers should be empty after updating."));
		}
		if(this._additionalStorage != null) {
			var _g = 0;
			var _g1 = this._additionalStorage.length;
			while(_g < _g1) {
				var i = _g++;
				var storage = this._additionalStorage[i];
				this.freeInactiveItemRenderers(storage);
				if(storage.inactiveItemRenderers.length > 0) {
					var c = js_Boot.getClass(this);
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("" + c.__name__ + ": inactive item renderers " + storage.id + " should be empty after updating."));
				}
			}
		}
	}
	,refreshInactiveItemRenderers: function(storage,factoryInvalid) {
		var temp = storage.inactiveItemRenderers;
		storage.inactiveItemRenderers = storage.activeItemRenderers;
		storage.activeItemRenderers = temp;
		if(storage.activeItemRenderers.length > 0) {
			var c = js_Boot.getClass(this);
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("" + c.__name__ + ": active item renderers should be empty before updating."));
		}
		if(factoryInvalid) {
			this.recoverInactiveItemRenderers(storage);
			this.freeInactiveItemRenderers(storage);
			storage.oldItemRendererRecycler = null;
		}
	}
	,recoverInactiveItemRenderers: function(storage) {
		var _g = 0;
		var _g1 = storage.inactiveItemRenderers;
		while(_g < _g1.length) {
			var itemRenderer = _g1[_g];
			++_g;
			if(itemRenderer == null) {
				continue;
			}
			var state = this.itemRendererToItemState.h[itemRenderer.__id__];
			if(state == null) {
				continue;
			}
			var item = state.data;
			this.itemRendererToItemState.remove(itemRenderer);
			this.dataToItemRenderer.remove(item);
			itemRenderer.removeEventListener("trigger",$bind(this,this.listView_itemRenderer_triggerHandler));
			itemRenderer.removeEventListener("click",$bind(this,this.listView_itemRenderer_clickHandler));
			itemRenderer.removeEventListener("touchTap",$bind(this,this.listView_itemRenderer_touchTapHandler));
			itemRenderer.removeEventListener("change",$bind(this,this.listView_itemRenderer_changeHandler));
			itemRenderer.removeEventListener("resize",$bind(this,this.listView_itemRenderer_resizeHandler));
			this.resetItemRenderer(itemRenderer,state,storage);
			if(storage.measurements != null) {
				storage.measurements.restore(itemRenderer);
			}
			this.itemStatePool.release(state);
		}
	}
	,freeInactiveItemRenderers: function(storage) {
		var recycler = storage.oldItemRendererRecycler != null ? storage.oldItemRendererRecycler : storage.itemRendererRecycler;
		var _g = 0;
		var _g1 = storage.inactiveItemRenderers;
		while(_g < _g1.length) {
			var itemRenderer = _g1[_g];
			++_g;
			if(itemRenderer == null) {
				continue;
			}
			this.destroyItemRenderer(itemRenderer,recycler);
		}
		storage.inactiveItemRenderers.length = 0;
	}
	,findUnrenderedData: function() {
		this._layoutItems.length = 0;
		this._visibleIndices.start = 0;
		this._visibleIndices.end = 0;
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			return;
		}
		this._layoutItems.length = this._dataProvider.get_length();
		if(this._virtualLayout && js_Boot.__implements(this.get_layout(),feathers_layout_IVirtualLayout)) {
			var virtualLayout = js_Boot.__cast(this.get_layout() , feathers_layout_IVirtualLayout);
			var oldIgnoreLayoutChanges = this._ignoreLayoutChanges;
			this._ignoreLayoutChanges = true;
			virtualLayout.set_virtualCache(this._virtualCache);
			this._ignoreLayoutChanges = oldIgnoreLayoutChanges;
			virtualLayout.getVisibleIndices(this._dataProvider.get_length(),this.listViewPort.get_visibleWidth(),this.listViewPort.get_visibleHeight(),this._visibleIndices);
		} else {
			this._visibleIndices.start = 0;
			var tmp = this._dataProvider.get_length();
			this._visibleIndices.end = tmp - 1;
		}
		var _g = this._visibleIndices.start;
		var _g1 = this._visibleIndices.end + 1;
		while(_g < _g1) {
			var i = _g++;
			var item = this._dataProvider.get(i);
			var itemRenderer = this.dataToItemRenderer.h[item.__id__];
			if(itemRenderer != null) {
				var state = this.itemRendererToItemState.h[itemRenderer.__id__];
				this.populateCurrentItemState(item,i,state);
				var oldRecyclerID = state.recyclerID;
				var storage = this.itemStateToStorage(state);
				if(storage.id != oldRecyclerID) {
					this._unrenderedData.push(item);
					continue;
				}
				this.updateItemRenderer(itemRenderer,state,storage);
				itemRenderer.set_visible(true);
				this._layoutItems[i] = itemRenderer;
				var removed = HxOverrides.remove(storage.inactiveItemRenderers,itemRenderer);
				if(!removed) {
					var c = js_Boot.getClass(this);
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("" + c.__name__ + ": item renderer map contains bad data for item at index " + i + ". This may be caused by duplicate items in the data provider, which is not allowed."));
				}
				storage.activeItemRenderers.push(itemRenderer);
			} else {
				this._unrenderedData.push(item);
			}
		}
	}
	,populateCurrentItemState: function(item,index,state) {
		state.owner = this;
		state.data = item;
		state.index = index;
		state.selected = this._selectedIndices.indexOf(index) != -1;
		state.enabled = this._enabled;
		state.text = this.itemToText(item);
	}
	,resetItemRenderer: function(itemRenderer,state,storage) {
		var oldIgnoreSelectionChange = this._ignoreSelectionChange;
		this._ignoreSelectionChange = true;
		var recycler = storage.oldItemRendererRecycler != null ? storage.oldItemRendererRecycler : storage.itemRendererRecycler;
		if(recycler != null && recycler.reset != null) {
			recycler.reset(itemRenderer,state);
		}
		this._ignoreSelectionChange = oldIgnoreSelectionChange;
		this.refreshItemRendererProperties(itemRenderer,feathers_controls_ListView.RESET_ITEM_STATE);
	}
	,updateItemRenderer: function(itemRenderer,state,storage) {
		state.recyclerID = storage.id;
		var oldIgnoreSelectionChange = this._ignoreSelectionChange;
		this._ignoreSelectionChange = true;
		if(storage.itemRendererRecycler.update != null) {
			storage.itemRendererRecycler.update(itemRenderer,state);
		}
		this._ignoreSelectionChange = oldIgnoreSelectionChange;
		this.refreshItemRendererProperties(itemRenderer,state);
	}
	,refreshItemRendererProperties: function(itemRenderer,state) {
		var oldIgnoreSelectionChange = this._ignoreSelectionChange;
		this._ignoreSelectionChange = true;
		if(js_Boot.__implements(itemRenderer,feathers_core_IUIControl)) {
			var uiControl = js_Boot.__cast(itemRenderer , feathers_core_IUIControl);
			uiControl.set_enabled(state.enabled);
		}
		if(js_Boot.__implements(itemRenderer,feathers_controls_dataRenderers_IDataRenderer)) {
			var dataRenderer = js_Boot.__cast(itemRenderer , feathers_controls_dataRenderers_IDataRenderer);
			dataRenderer.set_data(state.data);
		}
		if(js_Boot.__implements(itemRenderer,feathers_controls_dataRenderers_IListViewItemRenderer)) {
			var listRenderer = js_Boot.__cast(itemRenderer , feathers_controls_dataRenderers_IListViewItemRenderer);
			listRenderer.set_index(state.index);
			listRenderer.set_listViewOwner(state.owner);
		}
		if(js_Boot.__implements(itemRenderer,feathers_layout_ILayoutIndexObject)) {
			var layoutIndexObject = js_Boot.__cast(itemRenderer , feathers_layout_ILayoutIndexObject);
			layoutIndexObject.set_layoutIndex(state.index);
		}
		if(js_Boot.__implements(itemRenderer,feathers_controls_IToggle)) {
			var toggle = js_Boot.__cast(itemRenderer , feathers_controls_IToggle);
			toggle.set_selected(state.selected);
		}
		this._ignoreSelectionChange = oldIgnoreSelectionChange;
	}
	,renderUnrenderedData: function() {
		var _g = 0;
		var _g1 = this._unrenderedData;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			var index = this._dataProvider.indexOf(item);
			var state = this.itemStatePool.get();
			this.populateCurrentItemState(item,index,state);
			var itemRenderer = this.createItemRenderer(state);
			itemRenderer.set_visible(true);
			this.listViewPort.addChild(itemRenderer);
			this._layoutItems[index] = itemRenderer;
		}
		this._unrenderedData.length = 0;
	}
	,createItemRenderer: function(state) {
		var storage = this.itemStateToStorage(state);
		var itemRenderer = null;
		if(storage.inactiveItemRenderers.length == 0) {
			itemRenderer = storage.itemRendererRecycler.create();
			if(js_Boot.__implements(itemRenderer,feathers_style_IVariantStyleObject)) {
				var variantItemRenderer = js_Boot.__cast(itemRenderer , feathers_style_IVariantStyleObject);
				if(variantItemRenderer.get_variant() == null) {
					var variant = this.get_customItemRendererVariant() != null ? this.get_customItemRendererVariant() : feathers_controls_ListView.CHILD_VARIANT_ITEM_RENDERER;
					variantItemRenderer.set_variant(variant);
				}
			}
			if(js_Boot.__implements(itemRenderer,feathers_core_IUIControl)) {
				(js_Boot.__cast(itemRenderer , feathers_core_IUIControl)).initializeNow();
			}
			if(storage.measurements == null) {
				storage.measurements = new feathers_layout_Measurements(itemRenderer);
			}
		} else {
			itemRenderer = storage.inactiveItemRenderers.shift();
		}
		this.updateItemRenderer(itemRenderer,state,storage);
		if(js_Boot.__implements(itemRenderer,feathers_controls_ITriggerView)) {
			itemRenderer.addEventListener("trigger",$bind(this,this.listView_itemRenderer_triggerHandler));
		} else {
			itemRenderer.addEventListener("click",$bind(this,this.listView_itemRenderer_clickHandler));
			itemRenderer.addEventListener("touchTap",$bind(this,this.listView_itemRenderer_touchTapHandler));
		}
		if(js_Boot.__implements(itemRenderer,feathers_controls_IToggle)) {
			itemRenderer.addEventListener("change",$bind(this,this.listView_itemRenderer_changeHandler));
		}
		if(js_Boot.__implements(itemRenderer,feathers_core_IMeasureObject)) {
			itemRenderer.addEventListener("resize",$bind(this,this.listView_itemRenderer_resizeHandler));
		}
		this.itemRendererToItemState.set(itemRenderer,state);
		this.dataToItemRenderer.set(state.data,itemRenderer);
		storage.activeItemRenderers.push(itemRenderer);
		return itemRenderer;
	}
	,destroyItemRenderer: function(itemRenderer,recycler) {
		this.listViewPort.removeChild(itemRenderer);
		if(recycler != null && recycler.destroy != null) {
			recycler.destroy(itemRenderer);
		}
	}
	,itemStateToStorage: function(state) {
		var recyclerID = null;
		if(this._itemRendererRecyclerIDFunction != null) {
			recyclerID = this._itemRendererRecyclerIDFunction(state);
		}
		var recycler = null;
		if(recyclerID != null) {
			if(this._recyclerMap != null) {
				recycler = this._recyclerMap.h[recyclerID];
			}
			if(recycler == null) {
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Item renderer recycler ID \"" + recyclerID + "\" is not registered."));
			}
		}
		if(recycler == null) {
			return this._defaultStorage;
		}
		if(this._additionalStorage == null) {
			this._additionalStorage = [];
		}
		var _g = 0;
		var _g1 = this._additionalStorage.length;
		while(_g < _g1) {
			var i = _g++;
			var storage = this._additionalStorage[i];
			if(storage.itemRendererRecycler == recycler) {
				return storage;
			}
		}
		var storage = new feathers_controls__$ListView_ItemRendererStorage(recyclerID,recycler);
		this._additionalStorage.push(storage);
		return storage;
	}
	,refreshSelectedIndicesAfterFilterOrSort: function() {
		if(this._selectedIndex == -1) {
			return;
		}
		this.set_selectedIndex(this._dataProvider.indexOf(this._selectedItem));
	}
	,handleSelectionChange: function(item,index,ctrlKey,shiftKey) {
		if(index == -1 || !this._selectable) {
			this.set_selectedItem(null);
			return;
		}
		var selectionIndex = this._selectedItems.indexOf(item);
		if(this._allowMultipleSelection && (ctrlKey || shiftKey)) {
			if(shiftKey) {
				var anchorIndex = this._selectionAnchorIndex;
				if(anchorIndex == -1) {
					anchorIndex = 0;
				}
				var selectedIndices = [];
				if(index == anchorIndex) {
					selectedIndices.unshift(anchorIndex);
				} else {
					var i = anchorIndex;
					while(true) {
						selectedIndices.unshift(i);
						i += anchorIndex > index ? -1 : 1;
						if(!(i != index)) {
							break;
						}
					}
					if(index != anchorIndex) {
						selectedIndices.unshift(index);
					}
				}
				this.set_selectedIndices(selectedIndices);
				this._selectionAnchorIndex = anchorIndex;
			} else {
				if(selectionIndex == -1) {
					var selectedItems = this._selectedItems.slice();
					selectedItems.unshift(item);
					this.set_selectedItems(selectedItems);
				} else {
					var selectedItems = this._selectedItems.slice();
					selectedItems.splice(selectionIndex,1);
					this.set_selectedItems(selectedItems);
				}
				this._selectionAnchorIndex = index;
			}
		} else {
			this.set_selectedItem(item);
		}
	}
	,handlePendingScroll: function() {
		if(this._pendingScrollIndex == -1) {
			return;
		}
		var index = this._pendingScrollIndex;
		var duration = this._pendingScrollDuration != null ? this._pendingScrollDuration : 0.0;
		this._pendingScrollIndex = -1;
		this._pendingScrollDuration = null;
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			return;
		}
		var targetX = this.get_scrollX();
		var targetY = this.get_scrollY();
		if(js_Boot.__implements(this.get_layout(),feathers_layout_IScrollLayout)) {
			var scrollLayout = js_Boot.__cast(this.get_layout() , feathers_layout_IScrollLayout);
			var result = scrollLayout.getNearestScrollPositionForIndex(index,this._dataProvider.get_length(),this.get_viewPort().get_visibleWidth(),this.get_viewPort().get_visibleHeight());
			targetX = result.x;
			targetY = result.y;
		} else {
			var item = this._dataProvider.get(index);
			var itemRenderer = this.dataToItemRenderer.h[item.__id__];
			if(itemRenderer == null) {
				return;
			}
			var maxX = itemRenderer.get_x();
			var minX = maxX + itemRenderer.get_width() - this.get_viewPort().get_visibleWidth();
			if(targetX < minX) {
				targetX = minX;
			} else if(targetX > maxX) {
				targetX = maxX;
			}
			var maxY = itemRenderer.get_y();
			var minY = maxY + itemRenderer.get_height() - this.get_viewPort().get_visibleHeight();
			if(targetY < minY) {
				targetY = minY;
			} else if(targetY > maxY) {
				targetY = maxY;
			}
		}
		if(duration == 0.0) {
			this.scroller.set_scrollX(targetX);
			this.scroller.set_scrollY(targetY);
		} else {
			this.scroller.throwTo(targetX,targetY,duration);
		}
	}
	,listView_itemRenderer_touchTapHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(event.isPrimaryTouchPoint) {
			return;
		}
		var itemRenderer = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		var state = this.itemRendererToItemState.h[itemRenderer.__id__];
		feathers_events_ListViewEvent.dispatch(this,"itemTrigger",state);
		if(!this._selectable || !this.pointerSelectionEnabled) {
			return;
		}
		this.handleSelectionChange(state.data,state.index,event.ctrlKey,event.shiftKey);
	}
	,listView_itemRenderer_clickHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		var itemRenderer = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		var state = this.itemRendererToItemState.h[itemRenderer.__id__];
		feathers_events_ListViewEvent.dispatch(this,"itemTrigger",state);
		if(!this._selectable || !this.pointerSelectionEnabled) {
			return;
		}
		this.handleSelectionChange(state.data,state.index,event.ctrlKey,event.shiftKey);
	}
	,listView_itemRenderer_triggerHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		var itemRenderer = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		var state = this.itemRendererToItemState.h[itemRenderer.__id__];
		feathers_events_ListViewEvent.dispatch(this,"itemTrigger",state);
		if(!this._selectable) {
			return;
		}
		this.handleSelectionChange(state.data,state.index,event.ctrlKey,event.shiftKey);
	}
	,listView_itemRenderer_resizeHandler: function(event) {
		if(this._validating) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,listView_itemRenderer_changeHandler: function(event) {
		if(this._ignoreSelectionChange) {
			return;
		}
		var itemRenderer = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		var toggleItemRenderer = js_Boot.__cast(itemRenderer , feathers_controls_IToggle);
		var state = this.itemRendererToItemState.h[itemRenderer.__id__];
		if(toggleItemRenderer.get_selected() == state.selected) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
	}
	,listView_dataProvider_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
	}
	,listView_dataProvider_addItemHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache.splice(event.index,0,null);
		}
		if(this._selectedIndex == -1) {
			return;
		}
		var changed = false;
		var _g = 0;
		var _g1 = this._selectedIndices.length;
		while(_g < _g1) {
			var i = _g++;
			var selectedIndex = this._selectedIndices[i];
			if(selectedIndex >= event.index) {
				this._selectedIndices[i] = selectedIndex + 1;
				changed = true;
			}
		}
		if(changed) {
			this._selectedIndex = this._selectedIndices[0];
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,listView_dataProvider_removeItemHandler: function(event) {
		if(this._virtualCache != null) {
			HxOverrides.remove(this._virtualCache,event.index);
		}
		if(this.get_selectedIndex() == -1) {
			return;
		}
		var changed = false;
		var i = this._selectedIndices.length - 1;
		while(i >= 0) {
			var selectedIndex = this._selectedIndices[i];
			if(selectedIndex == event.index) {
				this._selectedIndices.splice(i,1);
				this._selectedItems.splice(i,1);
				changed = true;
			} else if(selectedIndex > event.index) {
				this._selectedIndices[i] = selectedIndex - 1;
				changed = true;
			}
			--i;
		}
		if(changed) {
			if(this._selectedIndices.length > 0) {
				this._selectedIndex = this._selectedIndices[0];
				this._selectedItem = this._dataProvider.get(this._selectedIndex);
			} else {
				this._selectedIndex = -1;
				this._selectedItem = null;
			}
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,listView_dataProvider_replaceItemHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache[event.index] = null;
		}
		if(this._selectedIndex == -1) {
			return;
		}
		var _g = 0;
		var _g1 = this._selectedIndices.length;
		while(_g < _g1) {
			var i = _g++;
			var selectedIndex = this._selectedIndices[i];
			if(selectedIndex == event.index) {
				this._selectedItems[i] = this._dataProvider.get(selectedIndex);
				this._selectedItem = this._selectedItems[0];
				feathers_events_FeathersEvent.dispatch(this,"change");
				break;
			}
		}
	}
	,listView_dataProvider_removeAllHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache.length = 0;
		}
		this.set_selectedIndex(-1);
	}
	,listView_dataProvider_resetHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache.length = 0;
			this._virtualCache.length = this._dataProvider.get_length();
		}
		this.set_selectedIndex(-1);
	}
	,listView_dataProvider_sortChangeHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache.length = 0;
			this._virtualCache.length = this._dataProvider.get_length();
		}
		this.refreshSelectedIndicesAfterFilterOrSort();
	}
	,listView_dataProvider_filterChangeHandler: function(event) {
		if(this._virtualCache != null) {
			this._virtualCache.length = 0;
			this._virtualCache.length = this._dataProvider.get_length();
		}
		this.refreshSelectedIndicesAfterFilterOrSort();
	}
	,updateItemRendererForIndex: function(index) {
		if(this._virtualCache != null) {
			this._virtualCache[index] = null;
		}
		var item = this._dataProvider.get(index);
		var itemRenderer = this.dataToItemRenderer.h[item.__id__];
		if(itemRenderer == null) {
			this.setInvalid(feathers_core_InvalidationFlag.DATA);
			return;
		}
		var state = this.itemRendererToItemState.h[itemRenderer.__id__];
		var storage = this.itemStateToStorage(state);
		this.populateCurrentItemState(item,index,state);
		this.resetItemRenderer(itemRenderer,state,storage);
		if(storage.measurements != null) {
			storage.measurements.restore(itemRenderer);
		}
		this.updateItemRenderer(itemRenderer,state,storage);
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,listView_dataProvider_updateItemHandler: function(event) {
		this.updateItemRendererForIndex(event.index);
	}
	,listView_dataProvider_updateAllHandler: function(event) {
		var _g = 0;
		var _g1 = this._dataProvider.get_length();
		while(_g < _g1) {
			var i = _g++;
			this.updateItemRendererForIndex(i);
		}
	}
	,navigateWithKeyboard: function(event) {
		if(event.isDefaultPrevented()) {
			return;
		}
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			return;
		}
		var result = this._selectedIndex;
		if(js_Boot.__implements(this.get_layout(),feathers_layout_IKeyboardNavigationLayout)) {
			if(event.keyCode != 38 && event.keyCode != 40 && event.keyCode != 37 && event.keyCode != 39 && event.keyCode != 33 && event.keyCode != 34 && event.keyCode != 36 && event.keyCode != 35) {
				return;
			}
			result = (js_Boot.__cast(this.get_layout() , feathers_layout_IKeyboardNavigationLayout)).findNextKeyboardIndex(result,event,false,this._layoutItems,null,this.listViewPort.get_visibleWidth(),this.listViewPort.get_visibleHeight());
		} else {
			switch(event.keyCode) {
			case 33:
				--result;
				break;
			case 34:
				++result;
				break;
			case 35:
				result = this._dataProvider.get_length() - 1;
				break;
			case 36:
				result = 0;
				break;
			case 37:
				--result;
				break;
			case 38:
				--result;
				break;
			case 39:
				++result;
				break;
			case 40:
				++result;
				break;
			default:
				return;
			}
		}
		if(result < 0) {
			result = 0;
		} else if(result >= this._dataProvider.get_length()) {
			result = this._dataProvider.get_length() - 1;
		}
		if(result == this._selectedIndex) {
			return;
		}
		event.preventDefault();
		this.set_selectedIndex(result);
		if(this._selectedIndex != -1) {
			this.scrollToIndex(this._selectedIndex);
		}
		if(this._focusManager != null) {
			this._focusManager.set_focus(this);
		} else if(this.stage != null) {
			this.stage.set_focus(this);
		}
	}
	,baseScrollContainer_keyDownHandler: function(event) {
		if(!this._selectable) {
			feathers_controls_supportClasses_BaseScrollContainer.prototype.baseScrollContainer_keyDownHandler.call(this,event);
			return;
		}
		if(!this._enabled || event.isDefaultPrevented()) {
			return;
		}
		this.navigateWithKeyboard(event);
	}
	,listView_keyDownHandler: function(event) {
		if(!this._enabled || event.isDefaultPrevented()) {
			return;
		}
		if(event.keyCode == 32 || event.keyCode == 13) {
			if(this._selectedItem != null) {
				var itemRenderer = this.dataToItemRenderer.h[this._selectedItem.__id__];
				var state = null;
				if(itemRenderer != null) {
					state = this.itemRendererToItemState.h[itemRenderer.__id__];
				}
				var isTemporary = false;
				if(state == null) {
					isTemporary = true;
					state = this.itemStatePool.get();
				}
				this.populateCurrentItemState(this._selectedItem,this._selectedIndex,state);
				feathers_events_ListViewEvent.dispatch(this,"itemTrigger",state);
				if(isTemporary) {
					this.itemStatePool.release(state);
				}
			}
		}
	}
	,get_styleContext: function() {
		return feathers_controls_ListView;
	}
	,get_layout: function() {
		return this.__layout;
	}
	,set_layout: function(value) {
		if(!this.setStyle("layout")) {
			return this.__layout;
		}
		if(this.__layout == value) {
			return this.__layout;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_layout);
		this.__layout = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__layout;
	}
	,clearStyle_layout: function() {
		this.set_layout(null);
		return this.get_layout();
	}
	,get_customItemRendererVariant: function() {
		return this.__customItemRendererVariant;
	}
	,__class__: feathers_controls_ListView
	,__properties__: $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype.__properties__,{set_itemRendererRecycler:"set_itemRendererRecycler",get_customItemRendererVariant:"get_customItemRendererVariant",set_layout:"set_layout",get_layout:"get_layout",set_selectedItems:"set_selectedItems",set_selectedIndices:"set_selectedIndices",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",get_selectedIndex:"get_selectedIndex",set_dataProvider:"set_dataProvider"})
});
var feathers_controls_TextInput = function(text,prompt,changeListener) {
	if(text == null) {
		text = "";
	}
	this.__customErrorCalloutVariant = null;
	this.__autoSizeWidth = false;
	this.__verticalAlign = feathers_layout_VerticalAlign.MIDDLE;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__embedFonts = false;
	this.__promptTextFormat = null;
	this.__disabledTextFormat = null;
	this.__textFormat = null;
	this.__rightViewGap = 0.0;
	this.__rightView = null;
	this.__leftViewGap = 0.0;
	this.__leftView = null;
	this.__backgroundSkin = null;
	this._previousCustomErrorCalloutVariant = null;
	this._maxChars = 0;
	this._pendingSelectionActiveIndex = -1;
	this._pendingSelectionAnchorIndex = -1;
	this._scrollX = 0.0;
	this._stateToTextFormat = new haxe_ds_EnumValueMap();
	this._errorString = null;
	this._displayAsPassword = false;
	this._measureText = null;
	this._updatedPromptStyles = false;
	this._updatedTextStyles = false;
	this._previousPromptTextFormat = null;
	this._previousTextFormat = null;
	this._previousPrompt = null;
	this._previousMeasureText = null;
	this._previousText = null;
	this._stateToSkin = new haxe_ds_EnumValueMap();
	this._ignoreRightViewResize = false;
	this._ignoreLeftViewResize = false;
	this._currentBackgroundSkin = null;
	this._backgroundSkinMeasurements = null;
	this._currentState = feathers_controls_TextInputState.ENABLED;
	this._selectable = true;
	this._editable = true;
	this.initializeTextInputTheme();
	feathers_core_FeathersControl.call(this);
	this.set_text(text);
	this.set_prompt(prompt);
	this.set_tabEnabled(true);
	this.set_tabChildren(false);
	this.focusRect = null;
	this.addEventListener("focusIn",$bind(this,this.textInput_focusInHandler));
	this.addEventListener("focusOut",$bind(this,this.textInput_focusOutHandler));
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.TextInput"] = feathers_controls_TextInput;
feathers_controls_TextInput.__name__ = "feathers.controls.TextInput";
feathers_controls_TextInput.__interfaces__ = [feathers_core_IStageFocusDelegate,feathers_core_ITextControl,feathers_core_IStateContext];
feathers_controls_TextInput.__super__ = feathers_core_FeathersControl;
feathers_controls_TextInput.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_editable: function() {
		return this._editable;
	}
	,get_selectable: function() {
		return this._selectable;
	}
	,get_currentState: function() {
		return this._currentState;
	}
	,set_enabled: function(value) {
		feathers_core_FeathersControl.prototype.set_enabled.call(this,value);
		this.refreshState();
		return this._enabled;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == null) {
			if(this._text.length == 0) {
				return this._text;
			}
			value = "";
		}
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._text;
	}
	,set_prompt: function(value) {
		if(this._prompt == value) {
			return this._prompt;
		}
		this._prompt = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._prompt;
	}
	,get_selectionAnchorIndex: function() {
		if(this.textField != null && this._pendingSelectionAnchorIndex == -1) {
			if(this.textField.get_caretIndex() == this.textField.get_selectionBeginIndex()) {
				return this.textField.get_selectionEndIndex();
			}
			return this.textField.get_selectionBeginIndex();
		}
		return this._pendingSelectionAnchorIndex;
	}
	,get_selectionActiveIndex: function() {
		if(this.textField != null && this._pendingSelectionActiveIndex == -1) {
			return this.textField.get_caretIndex();
		}
		return this._pendingSelectionActiveIndex;
	}
	,selectRange: function(anchorIndex,activeIndex) {
		this._pendingSelectionAnchorIndex = anchorIndex;
		this._pendingSelectionActiveIndex = activeIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
	}
	,showFocus: function(show) {
		feathers_core_FeathersControl.prototype.showFocus.call(this,show);
		if(show) {
			this.selectRange(this._text.length,0);
		}
	}
	,initializeTextInputTheme: function() {
		feathers_themes_steel_components_SteelTextInputStyles.initialize();
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this.textField == null) {
			this.textField = new openfl_text_TextField();
			this.textField.set_tabEnabled(false);
			this.textField.addEventListener("change",$bind(this,this.textField_changeHandler));
			this.textField.addEventListener("scroll",$bind(this,this.textField_scrollHandler));
			this.addChild(this.textField);
		}
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var scrollInvalid = this.isInvalid(feathers_core_InvalidationFlag.SCROLL);
		var selectionInvalid = this.isInvalid(feathers_core_InvalidationFlag.SELECTION);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(this._previousCustomErrorCalloutVariant != this.get_customErrorCalloutVariant()) {
			this.setInvalidationFlag(feathers_controls_TextInput.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
		}
		var errorCalloutFactoryInvalid = this.isInvalid(feathers_controls_TextInput.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
		this._updatedTextStyles = false;
		this._updatedPromptStyles = false;
		if(errorCalloutFactoryInvalid || dataInvalid) {
			this.createErrorCallout();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
			this.refreshLeftView();
			this.refreshRightView();
		}
		if(dataInvalid) {
			this.refreshPrompt();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshTextStyles();
			this.refreshPromptStyles();
		}
		if(dataInvalid || stylesInvalid || stateInvalid || sizeInvalid) {
			this.refreshText(sizeInvalid);
		}
		if(dataInvalid || stylesInvalid || sizeInvalid) {
			this.refreshPromptText(sizeInvalid);
		}
		if(selectionInvalid) {
			this.refreshSelection();
		}
		if(scrollInvalid) {
			this.refreshScrollPosition();
		}
		this.measure();
		this.layoutContent();
		if(errorCalloutFactoryInvalid || stateInvalid || dataInvalid) {
			this.refreshErrorString();
		}
		this._previousCustomErrorCalloutVariant = this.get_customErrorCalloutVariant();
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		var result = this._stateToSkin.get(this._currentState);
		if(result != null) {
			return result;
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,refreshLeftView: function() {
		var oldView = this._currentLeftView;
		this._currentLeftView = this.getCurrentLeftView();
		if(this._currentLeftView == oldView) {
			return;
		}
		this.removeCurrentLeftView(oldView);
		if(this._currentLeftView == null) {
			this._leftViewMeasurements = null;
			return;
		}
		if(js_Boot.__implements(this._currentLeftView,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentLeftView , feathers_core_IUIControl)).initializeNow();
		}
		if(this._leftViewMeasurements == null) {
			this._leftViewMeasurements = new feathers_layout_Measurements(this._currentLeftView);
		} else {
			this._leftViewMeasurements.save(this._currentLeftView);
		}
		if(js_Boot.__implements(this._currentLeftView,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(this._currentLeftView , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(this._currentLeftView,feathers_core_IStateObserver)) {
			(js_Boot.__cast(this._currentLeftView , feathers_core_IStateObserver)).set_stateContext(this);
		}
		this._currentLeftView.addEventListener("resize",$bind(this,this.textInput_leftView_resizeHandler),false,0,true);
		this.addChild(this._currentLeftView);
	}
	,getCurrentLeftView: function() {
		return this.get_leftView();
	}
	,removeCurrentLeftView: function(view) {
		if(view == null) {
			return;
		}
		view.removeEventListener("resize",$bind(this,this.textInput_leftView_resizeHandler));
		if(js_Boot.__implements(view,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(view , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(view,feathers_core_IStateObserver)) {
			(js_Boot.__cast(view , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._leftViewMeasurements.restore(view);
		if(view.parent == this) {
			this.removeChild(view);
		}
	}
	,refreshRightView: function() {
		var oldView = this._currentRightView;
		this._currentRightView = this.getCurrentRightView();
		if(this._currentRightView == oldView) {
			return;
		}
		this.removeCurrentRightView(oldView);
		if(this._currentRightView == null) {
			this._rightViewMeasurements = null;
			return;
		}
		if(js_Boot.__implements(this._currentRightView,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentRightView , feathers_core_IUIControl)).initializeNow();
		}
		if(this._rightViewMeasurements == null) {
			this._rightViewMeasurements = new feathers_layout_Measurements(this._currentRightView);
		} else {
			this._rightViewMeasurements.save(this._currentRightView);
		}
		if(js_Boot.__implements(this._currentRightView,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(this._currentRightView , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(this._currentRightView,feathers_core_IStateObserver)) {
			(js_Boot.__cast(this._currentRightView , feathers_core_IStateObserver)).set_stateContext(this);
		}
		this._currentRightView.addEventListener("resize",$bind(this,this.textInput_rightView_resizeHandler),false,0,true);
		this.addChild(this._currentRightView);
	}
	,getCurrentRightView: function() {
		return this.get_rightView();
	}
	,removeCurrentRightView: function(view) {
		if(view == null) {
			return;
		}
		view.removeEventListener("resize",$bind(this,this.textInput_rightView_resizeHandler));
		if(js_Boot.__implements(view,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(view , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(view,feathers_core_IStateObserver)) {
			(js_Boot.__cast(view , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._rightViewMeasurements.restore(view);
		if(view.parent == this) {
			this.removeChild(view);
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._backgroundSkinMeasurements != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var oldIgnoreLeftViewResize = this._ignoreLeftViewResize;
		this._ignoreLeftViewResize = true;
		var oldIgnoreRightViewResize = this._ignoreRightViewResize;
		this._ignoreRightViewResize = true;
		var measureLeftView = null;
		if(js_Boot.__implements(this._currentLeftView,feathers_core_IMeasureObject)) {
			measureLeftView = js_Boot.__cast(this._currentLeftView , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentLeftView,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentLeftView , feathers_core_IValidating)).validateNow();
		}
		var measureRightView = null;
		if(js_Boot.__implements(this._currentRightView,feathers_core_IMeasureObject)) {
			measureRightView = js_Boot.__cast(this._currentRightView , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentRightView,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentRightView , feathers_core_IValidating)).validateNow();
		}
		this._ignoreLeftViewResize = oldIgnoreLeftViewResize;
		this._ignoreRightViewResize = oldIgnoreRightViewResize;
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			if(this.get_autoSizeWidth() || this._measureText != null) {
				newWidth = this._textMeasuredWidth;
			} else {
				newWidth = 0.0;
			}
			if(this._prompt != null) {
				newWidth = Math.max(newWidth,this._promptTextMeasuredWidth);
			}
			if(measureLeftView != null) {
				newWidth += measureLeftView.get_width() + this.get_leftViewGap();
			} else if(this._leftViewMeasurements != null) {
				newWidth += this._leftViewMeasurements.width + this.get_leftViewGap();
			}
			if(measureRightView != null) {
				newWidth += measureRightView.get_width() + this.get_rightViewGap();
			} else if(this._rightViewMeasurements != null) {
				newWidth += this._rightViewMeasurements.width + this.get_rightViewGap();
			}
			newWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				newWidth = Math.max(this._currentBackgroundSkin.get_width(),newWidth);
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this._textMeasuredHeight;
			if(this._prompt != null) {
				newHeight = Math.max(newHeight,this._promptTextMeasuredHeight);
			}
			if(measureLeftView != null && newHeight < measureLeftView.get_height()) {
				newHeight = measureLeftView.get_height();
			} else if(this._leftViewMeasurements != null && newHeight < this._leftViewMeasurements.height) {
				newHeight = this._leftViewMeasurements.height;
			}
			if(measureRightView != null && newHeight < measureRightView.get_height()) {
				newHeight = measureRightView.get_height();
			} else if(this._rightViewMeasurements != null && newHeight < this._rightViewMeasurements.height) {
				newHeight = this._rightViewMeasurements.height;
			}
			newHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				newHeight = Math.max(this._currentBackgroundSkin.get_height(),newHeight);
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			if(this.get_autoSizeWidth() || this._measureText != null) {
				newMinWidth = this._textMeasuredWidth;
			} else {
				newMinWidth = 0.0;
			}
			if(this._prompt != null) {
				newMinWidth = Math.max(newMinWidth,this._promptTextMeasuredWidth);
			}
			if(measureLeftView != null) {
				newMinWidth += measureLeftView.get_minWidth() + this.get_leftViewGap();
			} else if(this._leftViewMeasurements != null) {
				newMinWidth += this._leftViewMeasurements.minWidth + this.get_leftViewGap();
			}
			if(measureRightView != null) {
				newMinWidth += measureRightView.get_minWidth() + this.get_rightViewGap();
			} else if(this._rightViewMeasurements != null) {
				newMinWidth += this._rightViewMeasurements.minWidth + this.get_rightViewGap();
			}
			newMinWidth += this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMinWidth = Math.max(measureSkin.get_minWidth(),newMinWidth);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = Math.max(this._backgroundSkinMeasurements.minWidth,newMinWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this._textMeasuredHeight;
			if(this._prompt != null) {
				newMinHeight = Math.max(newMinHeight,this._promptTextMeasuredHeight);
			}
			if(measureLeftView != null && newMinHeight < measureLeftView.get_minHeight()) {
				newMinHeight = measureLeftView.get_minHeight();
			} else if(this._leftViewMeasurements != null && newMinHeight < this._leftViewMeasurements.minHeight) {
				newMinHeight = this._leftViewMeasurements.minHeight;
			}
			if(measureRightView != null && newMinHeight < measureRightView.get_minHeight()) {
				newMinHeight = measureRightView.get_minHeight();
			} else if(this._rightViewMeasurements != null && newMinHeight < this._rightViewMeasurements.minHeight) {
				newMinHeight = this._rightViewMeasurements.minHeight;
			}
			newMinHeight += this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMinHeight = Math.max(measureSkin.get_minHeight(),newMinHeight);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = Math.max(this._backgroundSkinMeasurements.minHeight,newMinHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,refreshTextStyles: function() {
		if(this._enabled && this._editable && this.textField.get_type() != 1) {
			this.textField.set_type(1);
		} else if((!this._enabled || !this._editable) && this.textField.get_type() == 1) {
			this.textField.set_type(0);
		}
		if(this.textField.get_embedFonts() != this.get_embedFonts()) {
			this.textField.set_embedFonts(this.get_embedFonts());
			this._updatedTextStyles = true;
		}
		if(this.textField.get_displayAsPassword() != this._displayAsPassword) {
			this.textField.set_displayAsPassword(this._displayAsPassword);
			this._updatedTextStyles = true;
		}
		var textFormat = this.getCurrentTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimpleTextFormat) {
			return;
		}
		if(this._previousTextFormat != null) {
			this._previousTextFormat.removeEventListener("change",$bind(this,this.textInput_textFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.textInput_textFormat_changeHandler),false,0,true);
			this.textField.set_defaultTextFormat(simpleTextFormat);
			this._updatedTextStyles = true;
		}
		this._previousTextFormat = textFormat;
		this._previousSimpleTextFormat = simpleTextFormat;
	}
	,refreshPrompt: function() {
		if(this._prompt == null) {
			if(this.promptTextField != null) {
				this.removeChild(this.promptTextField);
				this.promptTextField = null;
			}
			return;
		}
		if(this.promptTextField == null) {
			this.promptTextField = new openfl_text_TextField();
			this.addChildAt(this.promptTextField,this.getChildIndex(this.textField));
		}
		this.promptTextField.set_selectable(false);
		this.promptTextField.set_mouseWheelEnabled(false);
		this.promptTextField.mouseEnabled = false;
		this.promptTextField.set_visible(this._text.length == 0);
	}
	,refreshPromptText: function(sizeInvalid) {
		if(this._prompt == null || this._prompt == this._previousPrompt && !this._updatedPromptStyles && !sizeInvalid) {
			return;
		}
		this.promptTextField.set_autoSize(1);
		var hasPromptText = this._prompt.length > 0;
		if(hasPromptText) {
			this.promptTextField.set_text(this._prompt);
		} else {
			this.promptTextField.set_text("​");
		}
		this._promptTextMeasuredWidth = this.promptTextField.get_width();
		this._promptTextMeasuredHeight = this.promptTextField.get_height();
		this.promptTextField.set_autoSize(2);
		if(!hasPromptText) {
			this.promptTextField.set_text("");
		}
		this._previousPrompt = this._prompt;
	}
	,refreshPromptStyles: function() {
		if(this._prompt == null) {
			return;
		}
		if(this.promptTextField.get_embedFonts() != this.get_embedFonts()) {
			this.promptTextField.set_embedFonts(this.get_embedFonts());
			this._updatedPromptStyles = true;
		}
		var textFormat = this.getCurrentPromptTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousPromptSimpleTextFormat) {
			return;
		}
		if(this._previousPromptTextFormat != null) {
			this._previousPromptTextFormat.removeEventListener("change",$bind(this,this.textInput_promptTextFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.textInput_textFormat_changeHandler),false,0,true);
			this.promptTextField.set_defaultTextFormat(simpleTextFormat);
			this._updatedPromptStyles = true;
		}
		this._previousPromptTextFormat = textFormat;
		this._previousPromptSimpleTextFormat = simpleTextFormat;
	}
	,getCurrentPromptTextFormat: function() {
		var textFormat = this.get_promptTextFormat();
		if(textFormat == null) {
			textFormat = this.get_textFormat();
		}
		return textFormat;
	}
	,refreshText: function(forceMeasurement) {
		this.textField.set_restrict(this.__restrict);
		this.textField.set_maxChars(this._maxChars);
		if(this._editable) {
			this.textField.set_selectable(this._enabled);
		} else {
			this.textField.set_selectable(this._enabled && this._selectable);
		}
		var hasMeasureText = this._measureText != null;
		var measureText = hasMeasureText ? this._measureText : this._text;
		if(measureText == null || measureText.length == 0) {
			hasMeasureText = true;
			measureText = "​";
		}
		if(this._text == this._previousText && measureText == this._previousMeasureText && !this._updatedTextStyles && !forceMeasurement) {
			return;
		}
		this.textField.set_autoSize(1);
		this.textField.set_text(measureText);
		this._textMeasuredWidth = this.textField.get_width();
		this._textMeasuredHeight = this.textField.get_height();
		this.textField.set_autoSize(2);
		var finalText = null;
		if(this._text == null || this._text.length == 0) {
			finalText = "";
		} else if(hasMeasureText) {
			finalText = this._text;
		}
		if(finalText != null) {
			this.textField.set_text(finalText);
		}
		this._previousText = this._text;
		this._previousMeasureText = measureText;
	}
	,refreshSelection: function() {
		if(this._pendingSelectionActiveIndex == -1 && this._pendingSelectionAnchorIndex == -1) {
			return;
		}
		var anchorIndex = this._pendingSelectionAnchorIndex;
		var activeIndex = this._pendingSelectionActiveIndex;
		this._pendingSelectionAnchorIndex = -1;
		this._pendingSelectionActiveIndex = -1;
		this.textField.setSelection(anchorIndex,activeIndex);
	}
	,refreshScrollPosition: function() {
		this.textField.set_scrollH(Math.round(this._scrollX));
	}
	,getCurrentTextFormat: function() {
		var result = this._stateToTextFormat.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledTextFormat() != null) {
			return this.get_disabledTextFormat();
		}
		return this.get_textFormat();
	}
	,layoutContent: function() {
		var oldIgnoreLeftViewResize = this._ignoreLeftViewResize;
		this._ignoreLeftViewResize = true;
		var oldIgnoreRightViewResize = this._ignoreRightViewResize;
		this._ignoreRightViewResize = true;
		this.layoutBackgroundSkin();
		var textFieldHeight = this._textMeasuredHeight;
		var maxHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom();
		if(textFieldHeight > maxHeight || this.get_verticalAlign() == feathers_layout_VerticalAlign.JUSTIFY) {
			textFieldHeight = maxHeight;
		}
		this.textField.set_height(textFieldHeight);
		var leftViewOffset = 0.0;
		if(this._currentLeftView != null) {
			if(js_Boot.__implements(this._currentLeftView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentLeftView , feathers_core_IValidating)).validateNow();
			}
			this._currentLeftView.set_x(this.get_paddingLeft());
			this._currentLeftView.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + (maxHeight - this._currentLeftView.get_height()) / 2.0));
			leftViewOffset = this._currentLeftView.get_width() + this.get_leftViewGap();
		}
		var rightViewOffset = 0.0;
		if(this._currentRightView != null) {
			if(js_Boot.__implements(this._currentRightView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentRightView , feathers_core_IValidating)).validateNow();
			}
			this._currentRightView.set_x(this.actualWidth - this.get_paddingRight() - this._currentRightView.get_width());
			this._currentRightView.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + (maxHeight - this._currentRightView.get_height()) / 2.0));
			rightViewOffset = this._currentRightView.get_width() + this.get_rightViewGap();
		}
		var textFieldWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight() - leftViewOffset - rightViewOffset;
		this.textField.set_width(textFieldWidth);
		this.textField.set_x(this.get_paddingLeft() + leftViewOffset);
		var textField = this.textField;
		switch(this.get_verticalAlign()._hx_index) {
		case 0:
			textField.set_y(this.get_paddingTop());
			break;
		case 2:
			textField.set_y(this.actualHeight - this.get_paddingBottom() - textFieldHeight);
			break;
		case 3:
			textField.set_y(this.get_paddingTop());
			break;
		default:
			textField.set_y(this.get_paddingTop() + (maxHeight - textFieldHeight) / 2.0);
		}
		if(this.promptTextField != null) {
			this.promptTextField.set_width(textFieldWidth);
			var textFieldHeight = this._promptTextMeasuredHeight;
			if(textFieldHeight > maxHeight || this.get_verticalAlign() == feathers_layout_VerticalAlign.JUSTIFY) {
				textFieldHeight = maxHeight;
			}
			this.promptTextField.set_height(textFieldHeight);
			this.promptTextField.set_x(this.get_paddingLeft() + leftViewOffset);
			var textField = this.promptTextField;
			switch(this.get_verticalAlign()._hx_index) {
			case 0:
				textField.set_y(this.get_paddingTop());
				break;
			case 2:
				textField.set_y(this.actualHeight - this.get_paddingBottom() - textFieldHeight);
				break;
			case 3:
				textField.set_y(this.get_paddingTop());
				break;
			default:
				textField.set_y(this.get_paddingTop() + (maxHeight - textFieldHeight) / 2.0);
			}
		}
		this._ignoreLeftViewResize = oldIgnoreLeftViewResize;
		this._ignoreRightViewResize = oldIgnoreRightViewResize;
	}
	,layoutBackgroundSkin: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,refreshErrorString: function() {
		if(this.errorStringCallout == null) {
			return;
		}
		this.errorStringCallout.set_text(this._errorString);
		if(this._currentState == feathers_controls_TextInputState.FOCUSED && this.errorStringCallout.parent == null) {
			feathers_core_PopUpManager.addPopUp(this.errorStringCallout,this,false,false);
		} else if(this._currentState != feathers_controls_TextInputState.FOCUSED && this.errorStringCallout.parent != null) {
			this.errorStringCallout.parent.removeChild(this.errorStringCallout);
		}
	}
	,createErrorCallout: function() {
		if(this.errorStringCallout != null) {
			if(this.errorStringCallout.parent != null) {
				this.errorStringCallout.parent.removeChild(this.errorStringCallout);
			}
			this.errorStringCallout = null;
		}
		if(this._errorString == null || this._errorString.length == 0) {
			return;
		}
		this.errorStringCallout = new feathers_controls_TextCallout();
		if(this.errorStringCallout.get_variant() == null) {
			this.errorStringCallout.set_variant(this.get_customErrorCalloutVariant() != null ? this.get_customErrorCalloutVariant() : feathers_controls_TextInput.CHILD_VARIANT_ERROR_CALLOUT);
		}
		this.errorStringCallout.set_origin(this);
		this.errorStringCallout.closeOnPointerOutside = false;
	}
	,changeState: function(state) {
		if(!this._enabled) {
			state = feathers_controls_TextInputState.DISABLED;
		}
		if(this._currentState == state) {
			return;
		}
		this._currentState = state;
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		feathers_events_FeathersEvent.dispatch(this,"stateChange");
	}
	,refreshState: function() {
		if(this._enabled) {
			if(this.stage != null && this.stage.get_focus() == this.textField) {
				this.changeState(feathers_controls_TextInputState.FOCUSED);
			} else if(this._errorString != null) {
				this.changeState(feathers_controls_TextInputState.ERROR);
			} else {
				this.changeState(feathers_controls_TextInputState.ENABLED);
			}
		} else {
			this.changeState(feathers_controls_TextInputState.DISABLED);
		}
	}
	,textField_changeHandler: function(event) {
		event.stopPropagation();
		var oldText = this._text;
		var newText = this.textField.get_text();
		this._text = newText;
		var hasMeasureText = this._measureText != null;
		var measureText = hasMeasureText ? this._measureText : this._text;
		if(measureText == null || measureText.length == 0) {
			hasMeasureText = true;
			measureText = "​";
		}
		var hasText = this._text != null && this._text.length > 0;
		var hasOldText = oldText != null && oldText.length > 0;
		var hasPrompt = this._prompt != null && this._prompt.length > 0;
		if(this.get_autoSizeWidth() || hasPrompt && (!hasText && hasOldText || hasText && !hasOldText)) {
			this.setInvalid(feathers_core_InvalidationFlag.DATA);
		} else {
			this._previousMeasureText = measureText;
			this._previousText = this._text;
		}
		feathers_events_FeathersEvent.dispatch(this,"change");
	}
	,textField_scrollHandler: function(event) {
		this._scrollX = this.textField.get_scrollH();
		feathers_events_FeathersEvent.dispatch(this,"scroll");
	}
	,textInput_focusInHandler: function(event) {
		if(this.stage != null && this.stage.get_focus() != this.textField) {
			event.stopImmediatePropagation();
			this.stage.set_focus(this.textField);
		}
		this.refreshState();
	}
	,textInput_focusOutHandler: function(event) {
		this.refreshState();
	}
	,textInput_textFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,textInput_promptTextFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,textInput_leftView_resizeHandler: function(event) {
		if(this._ignoreLeftViewResize) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,textInput_rightView_resizeHandler: function(event) {
		if(this._ignoreRightViewResize) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,get_leftView: function() {
		return this.__leftView;
	}
	,get_leftViewGap: function() {
		return this.__leftViewGap;
	}
	,get_rightView: function() {
		return this.__rightView;
	}
	,get_rightViewGap: function() {
		return this.__rightViewGap;
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,get_promptTextFormat: function() {
		return this.__promptTextFormat;
	}
	,set_promptTextFormat: function(value) {
		if(!this.setStyle("promptTextFormat")) {
			return this.__promptTextFormat;
		}
		if(this.__promptTextFormat == value) {
			return this.__promptTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_promptTextFormat);
		this.__promptTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__promptTextFormat;
	}
	,clearStyle_promptTextFormat: function() {
		this.set_promptTextFormat(null);
		return this.get_promptTextFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,set_paddingTop: function(value) {
		if(!this.setStyle("paddingTop")) {
			return this.__paddingTop;
		}
		if(this.__paddingTop == value) {
			return this.__paddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingTop);
		this.__paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingTop;
	}
	,clearStyle_paddingTop: function() {
		this.set_paddingTop(0.0);
		return this.get_paddingTop();
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,set_paddingRight: function(value) {
		if(!this.setStyle("paddingRight")) {
			return this.__paddingRight;
		}
		if(this.__paddingRight == value) {
			return this.__paddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingRight);
		this.__paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingRight;
	}
	,clearStyle_paddingRight: function() {
		this.set_paddingRight(0.0);
		return this.get_paddingRight();
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,set_paddingBottom: function(value) {
		if(!this.setStyle("paddingBottom")) {
			return this.__paddingBottom;
		}
		if(this.__paddingBottom == value) {
			return this.__paddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingBottom);
		this.__paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingBottom;
	}
	,clearStyle_paddingBottom: function() {
		this.set_paddingBottom(0.0);
		return this.get_paddingBottom();
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,set_paddingLeft: function(value) {
		if(!this.setStyle("paddingLeft")) {
			return this.__paddingLeft;
		}
		if(this.__paddingLeft == value) {
			return this.__paddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_paddingLeft);
		this.__paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__paddingLeft;
	}
	,clearStyle_paddingLeft: function() {
		this.set_paddingLeft(0.0);
		return this.get_paddingLeft();
	}
	,get_verticalAlign: function() {
		return this.__verticalAlign;
	}
	,get_autoSizeWidth: function() {
		return this.__autoSizeWidth;
	}
	,get_customErrorCalloutVariant: function() {
		return this.__customErrorCalloutVariant;
	}
	,get_styleContext: function() {
		return feathers_controls_TextInput;
	}
	,__class__: feathers_controls_TextInput
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_customErrorCalloutVariant:"get_customErrorCalloutVariant",get_autoSizeWidth:"get_autoSizeWidth",get_selectionActiveIndex:"get_selectionActiveIndex",get_selectionAnchorIndex:"get_selectionAnchorIndex",get_verticalAlign:"get_verticalAlign",set_paddingLeft:"set_paddingLeft",get_paddingLeft:"get_paddingLeft",set_paddingBottom:"set_paddingBottom",get_paddingBottom:"get_paddingBottom",set_paddingRight:"set_paddingRight",get_paddingRight:"get_paddingRight",set_paddingTop:"set_paddingTop",get_paddingTop:"get_paddingTop",get_embedFonts:"get_embedFonts",set_promptTextFormat:"set_promptTextFormat",get_promptTextFormat:"get_promptTextFormat",set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",set_prompt:"set_prompt",set_text:"set_text",get_text:"get_text",get_rightViewGap:"get_rightViewGap",get_rightView:"get_rightView",get_leftViewGap:"get_leftViewGap",get_leftView:"get_leftView",set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",get_currentState:"get_currentState",get_selectable:"get_selectable",get_editable:"get_editable"})
});
var feathers_controls_ComboBox = function(dataProvider,changeListener) {
	this.__customListViewVariant = null;
	this.__customButtonVariant = null;
	this.__customTextInputVariant = null;
	this.__popUpAdapter = new feathers_controls_popups_DropDownPopUpAdapter();
	this.openListViewOnFocus = false;
	this._filterText = null;
	this._previousCustomListViewVariant = null;
	this._previousCustomButtonVariant = null;
	this._previousCustomTextInputVariant = null;
	this._ignoreListViewChange = false;
	this._ignoreTextInputChange = false;
	this._itemRendererRecycler = feathers_utils_DisplayObjectRecycler.withClass(feathers_controls_dataRenderers_ItemRenderer);
	this._selectedItem = null;
	this._customSelectedItem = null;
	this._selectedIndex = -1;
	this.pendingSelectedIndex = -1;
	this._allowCustomUserValue = true;
	this.textInputMeasurements = new feathers_layout_Measurements();
	this.buttonMeasurements = new feathers_layout_Measurements();
	this.initializeComboBoxTheme();
	feathers_core_FeathersControl.call(this);
	this.set_dataProvider(dataProvider);
	this.addEventListener("focusIn",$bind(this,this.comboBox_focusInHandler));
	this.addEventListener("removedFromStage",$bind(this,this.comboBox_removedFromStageHandler));
	this.addEventListener("keyUp",$bind(this,this.comboBox_keyUpHandler));
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.ComboBox"] = feathers_controls_ComboBox;
feathers_controls_ComboBox.__name__ = "feathers.controls.ComboBox";
feathers_controls_ComboBox.__interfaces__ = [feathers_core_IStageFocusDelegate,feathers_core_IDataSelector,feathers_core_IIndexSelector];
feathers_controls_ComboBox.__super__ = feathers_core_FeathersControl;
feathers_controls_ComboBox.prototype = $extend(feathers_core_FeathersControl.prototype,{
	set_dataProvider: function(value) {
		if(this._dataProvider == value) {
			return this._dataProvider;
		}
		if(this._dataProvider != null) {
			this._dataProvider.removeEventListener("removeAll",$bind(this,this.comboBox_dataProvider_removeAllHandler));
		}
		var oldSelectedIndex = this._selectedIndex;
		var oldSelectedItem = this._selectedItem;
		this._dataProvider = value;
		if(this._dataProvider != null) {
			this._dataProvider.addEventListener("removeAll",$bind(this,this.comboBox_dataProvider_removeAllHandler));
		}
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			this.set_selectedIndex(-1);
		} else {
			this.set_selectedIndex(0);
		}
		if(this._selectedIndex == oldSelectedIndex && this._selectedItem != oldSelectedItem) {
			this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
		if(this._dataProvider != null) {
			this._dataProvider.set_filterFunction($bind(this,this.comboBoxFilterFunction));
		}
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._dataProvider;
	}
	,set_selectedIndex: function(value) {
		if(this._dataProvider == null) {
			value = -1;
		}
		if(this._selectedIndex == value && (!this.get_open() || this.pendingSelectedIndex == value)) {
			return this._selectedIndex;
		}
		this._selectedIndex = value;
		if(this.get_open()) {
			this.pendingSelectedIndex = value;
		}
		if(this._selectedIndex == -1) {
			this._selectedItem = null;
		} else {
			this._selectedItem = this._dataProvider.get(this._selectedIndex);
		}
		this._customSelectedItem = null;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedIndex;
	}
	,get_selectedItem: function() {
		if(this._customSelectedItem != null) {
			return this._customSelectedItem;
		}
		return this._selectedItem;
	}
	,set_selectedItem: function(value) {
		if(value == null || this._dataProvider == null) {
			this.set_selectedIndex(-1);
			return this._selectedItem;
		}
		var index = this._dataProvider.indexOf(value);
		if(index == -1) {
			if(this._allowCustomUserValue) {
				this._selectedIndex = -1;
				this._selectedItem = null;
				this._customSelectedItem = value;
				this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
				feathers_events_FeathersEvent.dispatch(this,"change");
				return this._customSelectedItem;
			}
			this.set_selectedIndex(-1);
			return this._selectedItem;
		}
		if(this._selectedItem == value && this._selectedIndex == index) {
			return this._selectedItem;
		}
		this._selectedIndex = index;
		this._selectedItem = value;
		this._customSelectedItem = null;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._selectedItem;
	}
	,set_prompt: function(value) {
		if(this._prompt == value) {
			return this._prompt;
		}
		this._prompt = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._prompt;
	}
	,itemToText: function(data) {
		return Std.string(data);
	}
	,textToItem: function(text) {
		return text;
	}
	,get_open: function() {
		if(this.listView != null) {
			return this.listView.parent != null;
		} else {
			return false;
		}
	}
	,showFocus: function(show) {
		feathers_core_FeathersControl.prototype.showFocus.call(this,show);
		if(this.textInput != null) {
			this.textInput.showFocus(show);
		}
	}
	,openListView: function() {
		if(this.get_open() || this.stage == null) {
			return;
		}
		this.validateNow();
		this._filterText = null;
		if(this._dataProvider != null) {
			this._dataProvider.refresh();
		}
		this.pendingSelectedIndex = this._selectedIndex;
		this.get_popUpAdapter().addEventListener("open",$bind(this,this.comboBox_popUpAdapter_openHandler));
		this.get_popUpAdapter().addEventListener("close",$bind(this,this.comboBox_popUpAdapter_closeHandler));
		this.get_popUpAdapter().open(this.listView,this);
		this.listView.set_visible(this._dataProvider != null && this._dataProvider.get_length() > 0);
		this.listView.validateNow();
		this.listView.addEventListener("removedFromStage",$bind(this,this.comboBox_listView_removedFromStageHandler));
		this.textInput.addEventListener("focusOut",$bind(this,this.comboBox_textInput_focusOutHandler));
		this.stage.addEventListener("mouseDown",$bind(this,this.comboBox_stage_mouseDownHandler),false,0,true);
		this.stage.addEventListener("touchBegin",$bind(this,this.comboBox_stage_touchBeginHandler),false,0,true);
		this.listView.scrollToIndex(this._selectedIndex);
	}
	,closeListView: function() {
		if(!this.get_open()) {
			return;
		}
		this.get_popUpAdapter().close();
	}
	,initializeComboBoxTheme: function() {
		feathers_themes_steel_components_SteelComboBoxStyles.initialize();
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var selectionInvalid = this.isInvalid(feathers_core_InvalidationFlag.SELECTION);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		if(this._previousCustomTextInputVariant != this.get_customTextInputVariant()) {
			this.setInvalidationFlag(feathers_controls_ComboBox.INVALIDATION_FLAG_TEXT_INPUT_FACTORY);
		}
		if(this._previousCustomButtonVariant != this.get_customButtonVariant()) {
			this.setInvalidationFlag(feathers_controls_ComboBox.INVALIDATION_FLAG_BUTTON_FACTORY);
		}
		if(this._previousCustomListViewVariant != this.get_customListViewVariant()) {
			this.setInvalidationFlag(feathers_controls_ComboBox.INVALIDATION_FLAG_LIST_VIEW_FACTORY);
		}
		var buttonFactoryInvalid = this.isInvalid(feathers_controls_ComboBox.INVALIDATION_FLAG_BUTTON_FACTORY);
		var textInputFactoryInvalid = this.isInvalid(feathers_controls_ComboBox.INVALIDATION_FLAG_TEXT_INPUT_FACTORY);
		var listViewFactoryInvalid = this.isInvalid(feathers_controls_ComboBox.INVALIDATION_FLAG_LIST_VIEW_FACTORY);
		if(buttonFactoryInvalid) {
			this.createButton();
		}
		if(textInputFactoryInvalid) {
			this.createTextInput();
		}
		if(listViewFactoryInvalid) {
			this.createListView();
		}
		if(dataInvalid || listViewFactoryInvalid) {
			this.refreshListViewData();
		}
		if(dataInvalid || textInputFactoryInvalid) {
			this.refreshTextInputData();
		}
		if(selectionInvalid || listViewFactoryInvalid || buttonFactoryInvalid || textInputFactoryInvalid) {
			this.refreshSelection();
		}
		if(stateInvalid || listViewFactoryInvalid || buttonFactoryInvalid || textInputFactoryInvalid) {
			this.refreshEnabled();
		}
		this.measure();
		this.layoutChildren();
		this._previousCustomTextInputVariant = this.get_customTextInputVariant();
		this._previousCustomButtonVariant = this.get_customButtonVariant();
		this._previousCustomListViewVariant = this.get_customListViewVariant();
	}
	,createButton: function() {
		if(this.button != null) {
			this.button.removeEventListener("mouseDown",$bind(this,this.comboBox_button_mouseDownHandler));
			this.button.removeEventListener("touchBegin",$bind(this,this.comboBox_button_touchBeginHandler));
			this.removeChild(this.button);
			if(this._oldButtonFactory.destroy != null) {
				this._oldButtonFactory.destroy(this.button);
			}
			this._oldButtonFactory = null;
			this.button = null;
		}
		var factory = this._buttonFactory != null ? this._buttonFactory : feathers_controls_ComboBox.defaultButtonFactory;
		this._oldButtonFactory = factory;
		this.button = factory.create();
		if(this.button.get_variant() == null) {
			this.button.set_variant(this.get_customButtonVariant() != null ? this.get_customButtonVariant() : feathers_controls_ComboBox.CHILD_VARIANT_BUTTON);
		}
		this.button.set_focusEnabled(false);
		this.button.addEventListener("mouseDown",$bind(this,this.comboBox_button_mouseDownHandler));
		this.button.addEventListener("touchBegin",$bind(this,this.comboBox_button_touchBeginHandler));
		this.button.initializeNow();
		this.buttonMeasurements.save(this.button);
		this.addChild(this.button);
	}
	,createTextInput: function() {
		if(this.textInput != null) {
			this.textInput.removeEventListener("change",$bind(this,this.comboBox_textInput_changeHandler));
			this.textInput.removeEventListener("keyDown",$bind(this,this.comboBox_textInput_keyDownHandler));
			this.textInput.removeEventListener("focusIn",$bind(this,this.comboBox_textInput_focusInHandler));
			this.textInput.removeEventListener("mouseDown",$bind(this,this.comboBox_textInput_mouseDownHandler));
			this.removeChild(this.textInput);
			if(this._oldTextInputFactory.destroy != null) {
				this._oldTextInputFactory.destroy(this.textInput);
			}
			this._oldTextInputFactory = null;
			this.textInput = null;
		}
		var factory = this._textInputFactory != null ? this._textInputFactory : feathers_controls_ComboBox.defaultTextInputFactory;
		this._oldTextInputFactory = factory;
		this.textInput = factory.create();
		if(this.textInput.get_variant() == null) {
			this.textInput.set_variant(this.get_customTextInputVariant() != null ? this.get_customTextInputVariant() : feathers_controls_ComboBox.CHILD_VARIANT_TEXT_INPUT);
		}
		this.textInput.addEventListener("change",$bind(this,this.comboBox_textInput_changeHandler));
		this.textInput.addEventListener("keyDown",$bind(this,this.comboBox_textInput_keyDownHandler));
		this.textInput.addEventListener("focusIn",$bind(this,this.comboBox_textInput_focusInHandler));
		this.textInput.addEventListener("mouseDown",$bind(this,this.comboBox_textInput_mouseDownHandler));
		this.textInput.initializeNow();
		this.textInputMeasurements.save(this.textInput);
		this.addChild(this.textInput);
	}
	,createListView: function() {
		if(this.listView != null) {
			this.listView.removeEventListener("change",$bind(this,this.comboBox_listView_changeHandler));
			this.listView.removeEventListener("itemTrigger",$bind(this,this.comboBox_listView_itemTriggerHandler));
			this.listView.set_focusOwner(null);
			if(this._oldListViewFactory.destroy != null) {
				this._oldListViewFactory.destroy(this.listView);
			}
			this._oldListViewFactory = null;
			this.listView = null;
		}
		var factory = this._listViewFactory != null ? this._listViewFactory : feathers_controls_ComboBox.defaultListViewFactory;
		this._oldListViewFactory = factory;
		this.listView = factory.create();
		this.listView.set_focusOwner(this);
		this.listView.set_focusEnabled(false);
		if(this.listView.get_variant() == null) {
			this.listView.set_variant(this.get_customListViewVariant() != null ? this.get_customListViewVariant() : feathers_controls_ComboBox.CHILD_VARIANT_LIST_VIEW);
		}
		this.listView.addEventListener("change",$bind(this,this.comboBox_listView_changeHandler));
		this.listView.addEventListener("itemTrigger",$bind(this,this.comboBox_listView_itemTriggerHandler));
	}
	,refreshListViewData: function() {
		var oldIgnoreListViewChange = this._ignoreListViewChange;
		this._ignoreListViewChange = true;
		this.listView.set_dataProvider(this._dataProvider);
		this._ignoreListViewChange = oldIgnoreListViewChange;
		this.listView.set_itemRendererRecycler(this._itemRendererRecycler);
		this.listView.itemToText = $bind(this,this.itemToText);
	}
	,refreshTextInputData: function() {
		this.textInput.set_prompt(this._prompt);
	}
	,refreshSelection: function() {
		var oldIgnoreListViewChange = this._ignoreListViewChange;
		this._ignoreListViewChange = true;
		this.listView.set_selectedIndex(this._selectedIndex);
		this._ignoreListViewChange = oldIgnoreListViewChange;
		var oldIgnoreTextInputChange = this._ignoreTextInputChange;
		this._ignoreTextInputChange = true;
		var item = this._customSelectedItem != null ? this._customSelectedItem : this._selectedItem;
		if(item != null) {
			this.textInput.set_text(typeof(item) == "string" ? js_Boot.__cast(item , String) : this.itemToText(item));
		} else {
			this.textInput.set_text("");
		}
		this._ignoreTextInputChange = oldIgnoreTextInputChange;
	}
	,refreshEnabled: function() {
		this.button.set_enabled(this._enabled);
		this.textInput.set_enabled(this._enabled);
		this.listView.set_enabled(this._enabled);
	}
	,comboBoxFilterFunction: function(item) {
		if(this._filterText == null || this._filterText.length == 0) {
			return true;
		}
		var itemText = typeof(item) == "string" ? js_Boot.__cast(item , String) : this.itemToText(item);
		itemText = itemText.toLowerCase();
		return itemText.indexOf(this._filterText.toLowerCase()) != -1;
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		this.buttonMeasurements.restore(this.button);
		this.button.validateNow();
		this.textInputMeasurements.restore(this.textInput);
		this.textInput.validateNow();
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this.button.get_width() + this.textInput.get_width();
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = Math.max(this.button.get_height(),this.textInput.get_height());
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = this.button.get_minWidth() + this.textInput.get_minWidth();
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = Math.max(this.button.get_minHeight(),this.textInput.get_minHeight());
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight);
	}
	,layoutChildren: function() {
		this.button.validateNow();
		this.button.set_x(this.actualWidth - this.button.get_width());
		this.button.set_y(0.0);
		if(this.button.get_height() != this.actualHeight) {
			this.button.set_height(this.actualHeight);
		}
		this.textInput.set_x(0.0);
		this.textInput.set_y(0.0);
		var textInputWidth = this.actualWidth - this.button.get_width();
		if(this.textInput.get_width() != textInputWidth) {
			this.textInput.set_width(textInputWidth);
		}
		if(this.textInput.get_height() != this.actualHeight) {
			this.textInput.set_height(this.actualHeight);
		}
		this.button.validateNow();
		this.textInput.validateNow();
	}
	,navigateWithKeyboard: function(event) {
		if(event.isDefaultPrevented()) {
			return;
		}
		if(this._dataProvider == null || this._dataProvider.get_length() == 0) {
			return;
		}
		var result = this.get_open() ? this.pendingSelectedIndex : this._selectedIndex;
		switch(event.keyCode) {
		case 33:
			--result;
			break;
		case 34:
			++result;
			break;
		case 35:
			result = this._dataProvider.get_length() - 1;
			break;
		case 36:
			result = 0;
			break;
		case 38:
			--result;
			break;
		case 40:
			++result;
			break;
		default:
			return;
		}
		if(result < 0) {
			result = 0;
		} else if(result >= this._dataProvider.get_length()) {
			result = this._dataProvider.get_length() - 1;
		}
		event.preventDefault();
		this.set_selectedIndex(result);
		if(this.textInput.get_selectionActiveIndex() != this.textInput.get_selectionAnchorIndex()) {
			this.textInput.selectRange(this.textInput.get_selectionAnchorIndex(),this.textInput.get_selectionAnchorIndex());
		}
		if(this.get_open()) {
			this.listView.set_selectedIndex(result);
			this.listView.scrollToIndex(result);
		}
	}
	,comboBox_textInput_keyDownHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		this.navigateWithKeyboard(event);
		if(event.keyCode == 13) {
			event.preventDefault();
			this.closeListView();
		}
	}
	,comboBox_textInput_changeHandler: function(event) {
		if(this._ignoreTextInputChange) {
			return;
		}
		if(!this.get_open()) {
			this.openListView();
		}
		if(this._dataProvider != null) {
			this.pendingSelectedIndex = -1;
			this._filterText = this.textInput.get_text();
			this._dataProvider.refresh();
		}
		this.listView.set_visible(this.get_open() && this._dataProvider != null && this._dataProvider.get_length() > 0);
	}
	,comboBox_textInput_focusInHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(this.openListViewOnFocus && !this.get_open()) {
			this.openListView();
		}
	}
	,comboBox_textInput_focusOutHandler: function(event) {
		if(event.relatedObject != null && (event.relatedObject == this.listView || this.listView.contains(event.relatedObject))) {
			return;
		}
	}
	,comboBox_button_mouseDownHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(this.get_open()) {
			this.closeListView();
		} else {
			this.openListView();
		}
	}
	,comboBox_button_touchBeginHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(event.isPrimaryTouchPoint) {
			return;
		}
		if(this.get_open()) {
			this.closeListView();
		} else {
			this.openListView();
		}
	}
	,comboBox_listView_itemTriggerHandler: function(event) {
		this._filterText = null;
		this.pendingSelectedIndex = event.state.index;
		this.dispatchEvent(event);
		if(!this.get_popUpAdapter().get_persistent()) {
			this.closeListView();
		}
	}
	,comboBox_listView_changeHandler: function(event) {
		if(this._ignoreListViewChange) {
			return;
		}
		if(this.get_open()) {
			this.pendingSelectedIndex = this.listView.get_selectedIndex();
		} else {
			this.pendingSelectedIndex = -1;
			this._filterText = null;
			if(this._selectedIndex != this.listView.get_selectedIndex() || this._selectedItem != this.listView.get_selectedItem()) {
				this._selectedIndex = this.listView.get_selectedIndex();
				this._selectedItem = this.listView.get_selectedItem();
				feathers_events_FeathersEvent.dispatch(this,"change");
			}
			this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
		}
	}
	,comboBox_listView_removedFromStageHandler: function(event) {
		this.listView.removeEventListener("removedFromStage",$bind(this,this.comboBox_listView_removedFromStageHandler));
		this.textInput.removeEventListener("focusOut",$bind(this,this.comboBox_textInput_focusOutHandler));
		this.stage.removeEventListener("mouseDown",$bind(this,this.comboBox_stage_mouseDownHandler));
		this.stage.removeEventListener("touchBegin",$bind(this,this.comboBox_stage_touchBeginHandler));
	}
	,comboBox_focusInHandler: function(event) {
		if(this.stage != null && this.stage.get_focus() != null && this.textInput != null && !this.textInput.contains(this.stage.get_focus())) {
			event.stopImmediatePropagation();
			this.stage.set_focus(this.textInput);
		}
	}
	,comboBox_removedFromStageHandler: function(event) {
		this.closeListView();
	}
	,comboBox_keyUpHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		switch(event.keyCode) {
		case 27:
			if(event.isDefaultPrevented()) {
				return;
			}
			if(!this.get_open()) {
				return;
			}
			event.preventDefault();
			this.closeListView();
			break;
		case 1073742094:
			if(event.isDefaultPrevented()) {
				return;
			}
			if(!this.get_open()) {
				return;
			}
			event.preventDefault();
			this.closeListView();
			break;
		}
	}
	,comboBox_stage_mouseDownHandler: function(event) {
		if(this.hitTestPoint(event.stageX,event.stageY) || this.listView.hitTestPoint(event.stageX,event.stageY)) {
			return;
		}
		this.closeListView();
	}
	,comboBox_stage_touchBeginHandler: function(event) {
		if(event.isPrimaryTouchPoint) {
			return;
		}
		if(this.hitTestPoint(event.stageX,event.stageY) || this.listView.hitTestPoint(event.stageX,event.stageY)) {
			return;
		}
		this.closeListView();
	}
	,comboBox_popUpAdapter_openHandler: function(event) {
		feathers_events_FeathersEvent.dispatch(this,"open");
	}
	,comboBox_popUpAdapter_closeHandler: function(event) {
		this.get_popUpAdapter().removeEventListener("open",$bind(this,this.comboBox_popUpAdapter_openHandler));
		this.get_popUpAdapter().removeEventListener("close",$bind(this,this.comboBox_popUpAdapter_closeHandler));
		feathers_events_FeathersEvent.dispatch(this,"close");
		var newSelectedItem = null;
		if(this.pendingSelectedIndex != -1) {
			newSelectedItem = this._dataProvider.get(this.pendingSelectedIndex);
		} else if(this._filterText != null) {
			var filterText = this._filterText.toLowerCase();
			if(this._dataProvider != null && this._dataProvider.get_length() > 0) {
				var item = this._dataProvider.iterator();
				while(item.hasNext()) {
					var item1 = item.next();
					var itemText = typeof(item1) == "string" ? js_Boot.__cast(item1 , String) : this.itemToText(item1);
					itemText = itemText.toLowerCase();
					if(itemText == filterText) {
						newSelectedItem = item1;
						break;
					}
				}
			}
		} else {
			return;
		}
		var customSelectedItem = null;
		if(this._allowCustomUserValue && newSelectedItem == null && this._filterText != null && this._filterText.length > 0) {
			customSelectedItem = this.textToItem(this._filterText);
		}
		this._filterText = null;
		this.pendingSelectedIndex = -1;
		if(this._dataProvider != null) {
			this._dataProvider.refresh();
		}
		if(customSelectedItem != null) {
			this._customSelectedItem = customSelectedItem;
			this._selectedItem = null;
			this._selectedIndex = -1;
			feathers_events_FeathersEvent.dispatch(this,"change");
		} else if(newSelectedItem != null) {
			this.set_selectedItem(newSelectedItem);
		} else if(this._allowCustomUserValue) {
			this._customSelectedItem = null;
			this._selectedItem = null;
			this._selectedIndex = -1;
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
	}
	,comboBox_dataProvider_removeAllHandler: function(event) {
		this.set_selectedIndex(-1);
	}
	,comboBox_textInput_mouseDownHandler: function(event) {
		if(this.textInput.get_editable() || this.textInput.get_selectable()) {
			return;
		}
		this.openListView();
	}
	,get_popUpAdapter: function() {
		return this.__popUpAdapter;
	}
	,get_customTextInputVariant: function() {
		return this.__customTextInputVariant;
	}
	,get_customButtonVariant: function() {
		return this.__customButtonVariant;
	}
	,get_customListViewVariant: function() {
		return this.__customListViewVariant;
	}
	,get_styleContext: function() {
		return feathers_controls_ComboBox;
	}
	,__class__: feathers_controls_ComboBox
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_open:"get_open",get_customListViewVariant:"get_customListViewVariant",get_customButtonVariant:"get_customButtonVariant",get_customTextInputVariant:"get_customTextInputVariant",get_popUpAdapter:"get_popUpAdapter",set_prompt:"set_prompt",set_selectedItem:"set_selectedItem",get_selectedItem:"get_selectedItem",set_selectedIndex:"set_selectedIndex",set_dataProvider:"set_dataProvider"})
});
var feathers_controls_supportClasses_BaseSlider = function(value,minimum,maximum,changeListener) {
	if(maximum == null) {
		maximum = 1.0;
	}
	if(minimum == null) {
		minimum = 0.0;
	}
	if(value == null) {
		value = 0.0;
	}
	this.__maximumPadding = 0.0;
	this.__minimumPadding = 0.0;
	this.__secondaryTrackSkin = null;
	this.__trackSkin = null;
	this.__thumbSkin = null;
	this._thumbStartY = 0.0;
	this._thumbStartX = 0.0;
	this._pointerStartY = 0.0;
	this._pointerStartX = 0.0;
	this._dragging = false;
	this._secondaryTrackSkinMeasurements = null;
	this._currentSecondaryTrackSkin = null;
	this._trackSkinMeasurements = null;
	this._currentTrackSkin = null;
	this._thumbSkinMeasurements = null;
	this._currentThumbSkin = null;
	this.liveDragging = true;
	this._snapInterval = 0.0;
	this._step = 0.01;
	this._maximum = 1.0;
	this._minimum = 0.0;
	this._value = 0.0;
	this._isDefaultValue = true;
	feathers_core_FeathersControl.call(this);
	this.set_tabEnabled(true);
	this.set_tabChildren(false);
	this.set_minimum(minimum);
	this.set_maximum(maximum);
	this.set_value(value);
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.supportClasses.BaseSlider"] = feathers_controls_supportClasses_BaseSlider;
feathers_controls_supportClasses_BaseSlider.__name__ = "feathers.controls.supportClasses.BaseSlider";
feathers_controls_supportClasses_BaseSlider.__interfaces__ = [feathers_core_IFocusObject,feathers_controls_IRange];
feathers_controls_supportClasses_BaseSlider.__super__ = feathers_core_FeathersControl;
feathers_controls_supportClasses_BaseSlider.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_value: function() {
		return this._value;
	}
	,set_value: function(value) {
		if(this._value == value) {
			return this._value;
		}
		this._isDefaultValue = false;
		this._value = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		if(this.liveDragging || !this._dragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
		return this._value;
	}
	,set_minimum: function(value) {
		if(this._minimum == value) {
			return this._minimum;
		}
		this._minimum = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._minimum;
	}
	,set_maximum: function(value) {
		if(this._maximum == value) {
			return this._maximum;
		}
		this._maximum = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._maximum;
	}
	,set_step: function(value) {
		if(this._step == value) {
			return this._step;
		}
		this._step = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._step;
	}
	,showFocus: function(show) {
		feathers_core_FeathersControl.prototype.showFocus.call(this,show);
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IFocusObject)) {
			var focusThumb = js_Boot.__cast(this._currentThumbSkin , feathers_core_IFocusObject);
			if(focusThumb.get_focusEnabled()) {
				focusThumb.showFocus(show);
			}
		}
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this._isDefaultValue) {
			this.set_value(this.restrictValue(this._value));
		}
	}
	,update: function() {
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(stylesInvalid) {
			this.refreshThumb();
			this.refreshTrack();
			this.refreshSecondaryTrack();
		}
		if(stateInvalid || stylesInvalid) {
			this.refreshEnabled();
		}
		if(this.measure()) {
			sizeInvalid = true;
		}
		this.layoutContent();
	}
	,measure: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'measure' in type " + c.__name__));
	}
	,refreshThumb: function() {
		var oldSkin = this._currentThumbSkin;
		this._currentThumbSkin = this.get_thumbSkin();
		if(this._currentThumbSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			oldSkin.removeEventListener("mouseDown",$bind(this,this.thumbSkin_mouseDownHandler));
			this.removeChild(oldSkin);
		}
		if(this._currentThumbSkin != null) {
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._thumbSkinMeasurements == null) {
				this._thumbSkinMeasurements = new feathers_layout_Measurements(this._currentThumbSkin);
			} else {
				this._thumbSkinMeasurements.save(this._currentThumbSkin);
			}
			this.addChild(this._currentThumbSkin);
			this._currentThumbSkin.addEventListener("mouseDown",$bind(this,this.thumbSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentThumbSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._thumbSkinMeasurements = null;
		}
	}
	,refreshTrack: function() {
		var oldSkin = this._currentTrackSkin;
		this._currentTrackSkin = this.get_trackSkin();
		if(this._currentTrackSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			this.removeChild(oldSkin);
			oldSkin.removeEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
		}
		if(this._currentTrackSkin != null) {
			if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._trackSkinMeasurements == null) {
				this._trackSkinMeasurements = new feathers_layout_Measurements(this._currentTrackSkin);
			} else {
				this._trackSkinMeasurements.save(this._currentTrackSkin);
			}
			this.addChildAt(this._currentTrackSkin,0);
			this._currentTrackSkin.addEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentTrackSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._trackSkinMeasurements = null;
		}
	}
	,refreshSecondaryTrack: function() {
		var oldSkin = this._currentSecondaryTrackSkin;
		this._currentSecondaryTrackSkin = this.get_secondaryTrackSkin();
		if(this._currentSecondaryTrackSkin == oldSkin) {
			return;
		}
		if(oldSkin != null) {
			if(js_Boot.__implements(oldSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(oldSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
			}
			this.removeChild(oldSkin);
			oldSkin.removeEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
		}
		if(this._currentSecondaryTrackSkin != null) {
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IUIControl)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IUIControl)).initializeNow();
			}
			if(this._secondaryTrackSkinMeasurements == null) {
				this._secondaryTrackSkinMeasurements = new feathers_layout_Measurements(this._currentSecondaryTrackSkin);
			} else {
				this._secondaryTrackSkinMeasurements.save(this._currentSecondaryTrackSkin);
			}
			var index = this._currentTrackSkin != null ? 1 : 0;
			this.addChildAt(this._currentSecondaryTrackSkin,index);
			this._currentSecondaryTrackSkin.addEventListener("mouseDown",$bind(this,this.trackSkin_mouseDownHandler));
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_skins_IProgrammaticSkin)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
			}
		} else {
			this._secondaryTrackSkinMeasurements = null;
		}
	}
	,refreshEnabled: function() {
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IUIControl)).set_enabled(this._enabled);
		}
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IUIControl)).set_enabled(this._enabled);
		}
		if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IUIControl)).set_enabled(this._enabled);
		}
	}
	,layoutContent: function() {
		if(this._currentTrackSkin != null && this._currentSecondaryTrackSkin != null) {
			this.layoutSplitTrack();
		} else {
			this.layoutSingleTrack();
		}
		this.layoutThumb();
	}
	,layoutSplitTrack: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutSplitTrack' in type " + c.__name__));
	}
	,layoutSingleTrack: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutSingleTrack' in type " + c.__name__));
	}
	,layoutThumb: function() {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'layoutThumb' in type " + c.__name__));
	}
	,normalizeValue: function(value) {
		var normalized = 0.0;
		if(this._minimum != this._maximum) {
			normalized = (value - this._minimum) / (this._maximum - this._minimum);
			if(normalized < 0.0) {
				normalized = 0.0;
			} else if(normalized > 1.0) {
				normalized = 1.0;
			}
		}
		return normalized;
	}
	,restrictValue: function(value) {
		if(this._snapInterval != 0.0 && value != this._minimum && value != this._maximum) {
			value = feathers_utils_MathUtil.roundToNearest(value,this._snapInterval);
		}
		if(value < this._minimum) {
			value = this._minimum;
		} else if(value > this._maximum) {
			value = this._maximum;
		}
		return value;
	}
	,locationToValue: function(x,y) {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'locationToValue' in type " + c.__name__));
	}
	,saveThumbStart: function(x,y) {
		var c = js_Boot.getClass(this);
		throw haxe_Exception.thrown(new openfl_errors_TypeError("Missing override for 'saveThumbStart' in type " + c.__name__));
	}
	,thumbSkin_mouseDownHandler: function(event) {
		if(!this._enabled || this.stage == null) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var result = exclusivePointer.claimMouse(this);
		if(!result) {
			return;
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.thumbSkin_stage_mouseMoveHandler),false,0,true);
		this.stage.addEventListener("mouseUp",$bind(this,this.thumbSkin_stage_mouseUpHandler),false,0,true);
		this._thumbStartX = this._currentThumbSkin.get_x();
		this._thumbStartY = this._currentThumbSkin.get_y();
		this._pointerStartX = this.get_mouseX();
		this._pointerStartY = this.get_mouseY();
		this._dragging = true;
	}
	,thumbSkin_stage_mouseMoveHandler: function(event) {
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,thumbSkin_stage_mouseUpHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		stage.removeEventListener("mouseMove",$bind(this,this.thumbSkin_stage_mouseMoveHandler));
		stage.removeEventListener("mouseUp",$bind(this,this.thumbSkin_stage_mouseUpHandler));
		this._dragging = false;
		if(!this.liveDragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,trackSkin_mouseDownHandler: function(event) {
		if(!this._enabled || this.stage == null) {
			return;
		}
		var exclusivePointer = feathers_utils_ExclusivePointer.forStage(this.stage);
		var result = exclusivePointer.claimMouse(this);
		if(!result) {
			return;
		}
		this.stage.addEventListener("mouseMove",$bind(this,this.trackSkin_stage_mouseMoveHandler),false,0,true);
		this.stage.addEventListener("mouseUp",$bind(this,this.trackSkin_stage_mouseUpHandler),false,0,true);
		this.saveThumbStart(this.get_mouseX(),this.get_mouseY());
		this._pointerStartX = this.get_mouseX();
		this._pointerStartY = this.get_mouseY();
		this._dragging = true;
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,trackSkin_stage_mouseMoveHandler: function(event) {
		var newValue = this.locationToValue(this.get_mouseX(),this.get_mouseY());
		newValue = this.restrictValue(newValue);
		this.set_value(newValue);
	}
	,trackSkin_stage_mouseUpHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		stage.removeEventListener("mouseMove",$bind(this,this.trackSkin_stage_mouseMoveHandler));
		stage.removeEventListener("mouseUp",$bind(this,this.trackSkin_stage_mouseUpHandler));
		this._dragging = false;
		if(!this.liveDragging) {
			feathers_events_FeathersEvent.dispatch(this,"change");
		}
	}
	,get_thumbSkin: function() {
		return this.__thumbSkin;
	}
	,set_thumbSkin: function(value) {
		if(!this.setStyle("thumbSkin")) {
			return this.__thumbSkin;
		}
		if(this.__thumbSkin == value) {
			return this.__thumbSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_thumbSkin);
		this.__thumbSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__thumbSkin;
	}
	,clearStyle_thumbSkin: function() {
		this.set_thumbSkin(null);
		return this.get_thumbSkin();
	}
	,get_trackSkin: function() {
		return this.__trackSkin;
	}
	,set_trackSkin: function(value) {
		if(!this.setStyle("trackSkin")) {
			return this.__trackSkin;
		}
		if(this.__trackSkin == value) {
			return this.__trackSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_trackSkin);
		this.__trackSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__trackSkin;
	}
	,clearStyle_trackSkin: function() {
		this.set_trackSkin(null);
		return this.get_trackSkin();
	}
	,get_secondaryTrackSkin: function() {
		return this.__secondaryTrackSkin;
	}
	,set_secondaryTrackSkin: function(value) {
		if(!this.setStyle("secondaryTrackSkin")) {
			return this.__secondaryTrackSkin;
		}
		if(this.__secondaryTrackSkin == value) {
			return this.__secondaryTrackSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_secondaryTrackSkin);
		this.__secondaryTrackSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__secondaryTrackSkin;
	}
	,clearStyle_secondaryTrackSkin: function() {
		this.set_secondaryTrackSkin(null);
		return this.get_secondaryTrackSkin();
	}
	,get_minimumPadding: function() {
		return this.__minimumPadding;
	}
	,get_maximumPadding: function() {
		return this.__maximumPadding;
	}
	,__class__: feathers_controls_supportClasses_BaseSlider
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_maximumPadding:"get_maximumPadding",get_minimumPadding:"get_minimumPadding",set_secondaryTrackSkin:"set_secondaryTrackSkin",get_secondaryTrackSkin:"get_secondaryTrackSkin",set_trackSkin:"set_trackSkin",get_trackSkin:"get_trackSkin",set_thumbSkin:"set_thumbSkin",get_thumbSkin:"get_thumbSkin",set_step:"set_step",set_maximum:"set_maximum",set_minimum:"set_minimum",set_value:"set_value",get_value:"get_value"})
});
var feathers_controls_HSlider = function(value,minimum,maximum,changeListener) {
	if(maximum == null) {
		maximum = 1.0;
	}
	if(minimum == null) {
		minimum = 0.0;
	}
	if(value == null) {
		value = 0.0;
	}
	this.initializeHSliderTheme();
	feathers_controls_supportClasses_BaseSlider.call(this,value,minimum,maximum,changeListener);
	this.addEventListener("keyDown",$bind(this,this.hSlider_keyDownHandler));
};
$hxClasses["feathers.controls.HSlider"] = feathers_controls_HSlider;
feathers_controls_HSlider.__name__ = "feathers.controls.HSlider";
feathers_controls_HSlider.__super__ = feathers_controls_supportClasses_BaseSlider;
feathers_controls_HSlider.prototype = $extend(feathers_controls_supportClasses_BaseSlider.prototype,{
	initializeHSliderTheme: function() {
		feathers_themes_steel_components_SteelHSliderStyles.initialize();
	}
	,valueToLocation: function(value) {
		if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
		}
		var normalized = this.normalizeValue(value);
		var trackScrollableWidth = this.actualWidth - this.get_minimumPadding() - this.get_maximumPadding();
		if(this._currentThumbSkin != null) {
			trackScrollableWidth -= this._currentThumbSkin.get_width();
		}
		return Math.round(this.get_minimumPadding() + trackScrollableWidth * normalized);
	}
	,locationToValue: function(x,y) {
		var percentage = 0.0;
		var trackScrollableWidth = this.actualWidth - this.get_minimumPadding() - this.get_maximumPadding();
		if(this._currentThumbSkin != null) {
			trackScrollableWidth -= this._currentThumbSkin.get_width();
		}
		var xOffset = x - this._pointerStartX - this.get_minimumPadding();
		var xPosition = Math.min(Math.max(0.0,this._thumbStartX + xOffset),trackScrollableWidth);
		percentage = xPosition / trackScrollableWidth;
		return this._minimum + percentage * (this._maximum - this._minimum);
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentThumbSkin != null) {
			this._thumbSkinMeasurements.restore(this._currentThumbSkin);
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
			}
		}
		if(this._currentTrackSkin != null) {
			this._trackSkinMeasurements.restore(this._currentTrackSkin);
			if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		if(this._currentSecondaryTrackSkin != null) {
			this._secondaryTrackSkinMeasurements.restore(this._currentSecondaryTrackSkin);
			if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
			}
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this._currentTrackSkin.get_width();
			if(this._currentSecondaryTrackSkin != null) {
				newWidth += this._currentSecondaryTrackSkin.get_width();
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this._currentThumbSkin.get_height();
			if(newHeight < this._currentTrackSkin.get_height()) {
				newHeight = this._currentTrackSkin.get_height();
			}
			if(this._currentSecondaryTrackSkin != null && newHeight < this._currentSecondaryTrackSkin.get_height()) {
				newHeight = this._currentSecondaryTrackSkin.get_height();
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = this._currentTrackSkin.get_width();
			if(this._currentSecondaryTrackSkin != null) {
				newMinWidth += this._secondaryTrackSkinMeasurements.width;
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this._currentThumbSkin.get_height();
			if(newMinHeight < this._currentTrackSkin.get_height()) {
				newMinHeight = this._currentTrackSkin.get_height();
			}
			if(this._currentSecondaryTrackSkin != null && newHeight < this._currentSecondaryTrackSkin.get_height()) {
				newMinHeight = this._currentSecondaryTrackSkin.get_height();
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight);
	}
	,saveThumbStart: function(x,y) {
		var trackWidthMinusThumbWidth = this.actualWidth;
		var locationMinusHalfThumbWidth = x;
		if(this._currentThumbSkin != null) {
			trackWidthMinusThumbWidth -= this._currentThumbSkin.get_width();
			locationMinusHalfThumbWidth -= this._currentThumbSkin.get_width() / 2.0;
		}
		this._thumbStartX = Math.min(trackWidthMinusThumbWidth - this.get_maximumPadding(),Math.max(this.get_minimumPadding(),locationMinusHalfThumbWidth));
		this._thumbStartY = y;
	}
	,layoutSplitTrack: function() {
		var location = this.valueToLocation(this.get_value());
		if(this._currentThumbSkin != null) {
			if(js_Boot.__implements(this._currentThumbSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentThumbSkin , feathers_core_IValidating)).validateNow();
			}
			location += Math.round(this._currentThumbSkin.get_width() / 2.0);
		}
		this._currentTrackSkin.set_x(0.0);
		this._currentTrackSkin.set_width(location);
		this._currentSecondaryTrackSkin.set_x(location);
		this._currentSecondaryTrackSkin.set_width(this.actualWidth - location);
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		if(js_Boot.__implements(this._currentSecondaryTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentSecondaryTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentTrackSkin.set_y((this.actualHeight - this._currentTrackSkin.get_height()) / 2.0);
		this._currentSecondaryTrackSkin.set_y((this.actualHeight - this._currentSecondaryTrackSkin.get_height()) / 2.0);
	}
	,layoutSingleTrack: function() {
		if(this._currentTrackSkin == null) {
			return;
		}
		this._currentTrackSkin.set_x(0.0);
		this._currentTrackSkin.set_width(this.actualWidth);
		if(js_Boot.__implements(this._currentTrackSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentTrackSkin , feathers_core_IValidating)).validateNow();
		}
		this._currentTrackSkin.set_y((this.actualHeight - this._currentTrackSkin.get_height()) / 2.0);
	}
	,layoutThumb: function() {
		if(this._currentThumbSkin == null) {
			return;
		}
		var thumbLocation = this.valueToLocation(this._value);
		this._currentThumbSkin.set_x(thumbLocation);
		this._currentThumbSkin.set_y((this.actualHeight - this.get_thumbSkin().get_height()) / 2.0);
	}
	,hSlider_keyDownHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(event.isDefaultPrevented()) {
			return;
		}
		var newValue = this._value;
		switch(event.keyCode) {
		case 35:
			newValue = this._maximum;
			break;
		case 36:
			newValue = this._minimum;
			break;
		case 37:
			newValue -= this._step;
			break;
		case 39:
			newValue += this._step;
			break;
		default:
			return;
		}
		if(newValue < this._minimum) {
			newValue = this._minimum;
		} else if(newValue > this._maximum) {
			newValue = this._maximum;
		}
		event.preventDefault();
		this.set_value(newValue);
	}
	,get_styleContext: function() {
		return feathers_controls_HSlider;
	}
	,__class__: feathers_controls_HSlider
});
var feathers_controls_Label = function(text) {
	if(text == null) {
		text = "";
	}
	this.__disabledBackgroundSkin = null;
	this.__backgroundSkin = null;
	this.__wordWrap = false;
	this.__verticalAlign = feathers_layout_VerticalAlign.TOP;
	this.__paddingLeft = 0.0;
	this.__paddingBottom = 0.0;
	this.__paddingRight = 0.0;
	this.__paddingTop = 0.0;
	this.__disabledTextFormat = null;
	this.__embedFonts = false;
	this.__textFormat = null;
	this._backgroundSkinMeasurements = null;
	this._currentBackgroundSkin = null;
	this._selectable = false;
	this._htmlText = null;
	this._wrappedOnMeasure = false;
	this._updatedTextStyles = false;
	this._previousSimpleTextFormat = null;
	this._previousTextFormat = null;
	this._previousHTMLText = null;
	this._previousText = null;
	this.initializeLabelTheme();
	feathers_core_FeathersControl.call(this);
	this.set_text(text);
	this.set_tabEnabled(false);
	this.set_tabChildren(false);
	this.addEventListener("focusIn",$bind(this,this.label_focusInHandler));
};
$hxClasses["feathers.controls.Label"] = feathers_controls_Label;
feathers_controls_Label.__name__ = "feathers.controls.Label";
feathers_controls_Label.__interfaces__ = [feathers_core_IStageFocusDelegate,feathers_core_IFocusObject,feathers_core_IHTMLTextControl,feathers_core_ITextControl];
feathers_controls_Label.__super__ = feathers_core_FeathersControl;
feathers_controls_Label.prototype = $extend(feathers_core_FeathersControl.prototype,{
	set_text: function(value) {
		if(value == null) {
			if(this._text.length == 0) {
				return this._text;
			}
			value = "";
		}
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._text;
	}
	,set_htmlText: function(value) {
		if(this._htmlText == value) {
			return this._htmlText;
		}
		this._htmlText = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._htmlText;
	}
	,get_tabEnabled: function() {
		if(this._selectable && this._enabled) {
			return this.get_rawTabEnabled();
		} else {
			return false;
		}
	}
	,initializeLabelTheme: function() {
		feathers_themes_steel_components_SteelLabelStyles.initialize();
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this.textField == null) {
			this.textField = new openfl_text_TextField();
			this.textField.set_multiline(true);
			this.addChild(this.textField);
		}
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var selectionInvalid = this.isInvalid(feathers_core_InvalidationFlag.SELECTION);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		this._updatedTextStyles = false;
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshTextStyles();
		}
		if(dataInvalid || stylesInvalid || stateInvalid || sizeInvalid) {
			this.refreshText(sizeInvalid);
		}
		if(dataInvalid || stylesInvalid || selectionInvalid) {
			this.refreshSelection();
		}
		if(this.measure()) {
			sizeInvalid = true;
		}
		if(stylesInvalid || stateInvalid || dataInvalid || sizeInvalid) {
			this.layoutContent();
		}
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = this._textMeasuredWidth + this.get_paddingLeft() + this.get_paddingRight();
			if(this._currentBackgroundSkin != null) {
				newWidth = Math.max(this._currentBackgroundSkin.get_width(),newWidth);
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this._textMeasuredHeight + this.get_paddingTop() + this.get_paddingBottom();
			if(this._currentBackgroundSkin != null) {
				newHeight = Math.max(this._currentBackgroundSkin.get_height(),newHeight);
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = this._textMeasuredWidth + this.get_paddingLeft() + this.get_paddingRight();
			if(measureSkin != null) {
				newMinWidth = Math.max(measureSkin.get_minWidth(),newMinWidth);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinWidth = Math.max(this._backgroundSkinMeasurements.minWidth,newMinWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this._textMeasuredHeight + this.get_paddingTop() + this.get_paddingBottom();
			if(measureSkin != null) {
				newMinHeight = Math.max(measureSkin.get_minHeight(),newMinHeight);
			} else if(this._backgroundSkinMeasurements != null) {
				newMinHeight = Math.max(this._backgroundSkinMeasurements.minHeight,newMinHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxWidth = this._backgroundSkinMeasurements.maxWidth;
			} else {
				newMaxWidth = 1.0 / 0.0;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._backgroundSkinMeasurements != null) {
				newMaxHeight = this._backgroundSkinMeasurements.maxHeight;
			} else {
				newMaxHeight = 1.0 / 0.0;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,refreshTextStyles: function() {
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
			this._updatedTextStyles = true;
		}
		if(this.textField.get_embedFonts() != this.get_embedFonts()) {
			this.textField.set_embedFonts(this.get_embedFonts());
			this._updatedTextStyles = true;
		}
		var textFormat = this.getCurrentTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimpleTextFormat) {
			return;
		}
		if(this._previousTextFormat != null) {
			this._previousTextFormat.removeEventListener("change",$bind(this,this.label_textFormat_changeHandler));
		}
		if(this.textField.get_caretIndex() != -1 && this.textField.get_selectionBeginIndex() != this.textField.get_selectionEndIndex()) {
			this.textField.setSelection(0,0);
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.label_textFormat_changeHandler),false,0,true);
			this.textField.set_defaultTextFormat(simpleTextFormat);
			this._updatedTextStyles = true;
		}
		this._previousTextFormat = textFormat;
		this._previousSimpleTextFormat = simpleTextFormat;
	}
	,refreshText: function(forceMeasurement) {
		var hasText = this._text != null && this._text.length > 0;
		var hasHTMLText = this._htmlText != null && this._htmlText.length > 0;
		this.textField.set_visible(hasText || hasHTMLText);
		if(this._text == this._previousText && this._htmlText == this._previousHTMLText && !this._updatedTextStyles && !forceMeasurement) {
			return;
		}
		this.textField.set_autoSize(1);
		if(hasHTMLText) {
			this.textField.set_htmlText(this._htmlText);
		} else if(hasText) {
			this.textField.set_text(this._text);
		} else {
			this.textField.set_text("​");
		}
		if(this.get_wordWrap()) {
			this.textField.set_wordWrap(false);
		}
		this._textMeasuredWidth = this.textField.get_textWidth() + 4;
		this._wrappedOnMeasure = false;
		if(this.get_wordWrap()) {
			var textFieldExplicitWidth = this.calculateExplicitWidthForTextMeasurement();
			if(textFieldExplicitWidth != null && this._textMeasuredWidth > textFieldExplicitWidth) {
				this.textField.set_wordWrap(true);
				this.textField.set_width(textFieldExplicitWidth);
				this._textMeasuredWidth = this.textField.get_width();
				this._wrappedOnMeasure = true;
			}
		}
		this._textMeasuredHeight = this.textField.get_height();
		this.textField.set_autoSize(2);
		if(this.textField.get_wordWrap() != this.get_wordWrap()) {
			this.textField.set_wordWrap(this.get_wordWrap());
		}
		if(!hasText && !hasHTMLText) {
			this.textField.set_text("");
		}
		this._previousText = this._text;
		this._previousHTMLText = this._htmlText;
	}
	,calculateExplicitWidthForTextMeasurement: function() {
		var textFieldExplicitWidth = null;
		if(this.get_explicitWidth() != null) {
			textFieldExplicitWidth = this.get_explicitWidth();
		} else if(this.get_explicitMaxWidth() != null) {
			textFieldExplicitWidth = this.get_explicitMaxWidth();
		} else if(this._backgroundSkinMeasurements != null && this._backgroundSkinMeasurements.maxWidth != null) {
			textFieldExplicitWidth = this._backgroundSkinMeasurements.maxWidth;
		}
		if(textFieldExplicitWidth == null) {
			return textFieldExplicitWidth;
		}
		textFieldExplicitWidth -= this.get_paddingLeft() + this.get_paddingRight();
		return textFieldExplicitWidth;
	}
	,refreshSelection: function() {
		var selectable = this._selectable && this._enabled;
		if(this.textField.get_selectable() != selectable) {
			this.textField.set_selectable(selectable);
		}
	}
	,getCurrentTextFormat: function() {
		if(!this._enabled && this.get_disabledTextFormat() != null) {
			return this.get_disabledTextFormat();
		}
		return this.get_textFormat();
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		if(!this._enabled && this.get_disabledBackgroundSkin() != null) {
			return this.get_disabledBackgroundSkin();
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this.addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this.removeChild(skin);
		}
	}
	,layoutContent: function() {
		this.layoutBackgroundSkin();
		var textFieldLayoutWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight();
		this.textField.set_x(this.get_paddingLeft());
		this.textField.set_width(textFieldLayoutWidth);
		var wordWrap = this.get_wordWrap();
		if(wordWrap && !this._wrappedOnMeasure && textFieldLayoutWidth >= this._textMeasuredWidth) {
			wordWrap = false;
		}
		if(this.textField.get_wordWrap() != wordWrap) {
			this.textField.set_wordWrap(wordWrap);
		}
		var textFieldHeight = this._textMeasuredHeight;
		var maxHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom();
		if(textFieldHeight > maxHeight) {
			textFieldHeight = maxHeight;
		}
		this.textField.set_height(textFieldHeight);
		switch(this.get_verticalAlign()._hx_index) {
		case 0:
			this.textField.set_y(this.get_paddingTop());
			break;
		case 2:
			this.textField.set_y(this.actualHeight - this.get_paddingBottom() - textFieldHeight);
			break;
		default:
			this.textField.set_y(this.get_paddingTop() + (maxHeight - textFieldHeight) / 2.0);
		}
	}
	,layoutBackgroundSkin: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,label_focusInHandler: function(event) {
		if(this.stage != null && this.stage.get_focus() != this.textField) {
			event.stopImmediatePropagation();
			this.stage.set_focus(this.textField);
		}
	}
	,label_textFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,set_embedFonts: function(value) {
		if(!this.setStyle("embedFonts")) {
			return this.__embedFonts;
		}
		if(this.__embedFonts == value) {
			return this.__embedFonts;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_embedFonts);
		this.__embedFonts = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__embedFonts;
	}
	,clearStyle_embedFonts: function() {
		this.set_embedFonts(false);
		return this.get_embedFonts();
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,get_paddingTop: function() {
		return this.__paddingTop;
	}
	,get_paddingRight: function() {
		return this.__paddingRight;
	}
	,get_paddingBottom: function() {
		return this.__paddingBottom;
	}
	,get_paddingLeft: function() {
		return this.__paddingLeft;
	}
	,get_verticalAlign: function() {
		return this.__verticalAlign;
	}
	,get_wordWrap: function() {
		return this.__wordWrap;
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,get_disabledBackgroundSkin: function() {
		return this.__disabledBackgroundSkin;
	}
	,get_styleContext: function() {
		return feathers_controls_Label;
	}
	,__class__: feathers_controls_Label
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_disabledBackgroundSkin:"get_disabledBackgroundSkin",get_backgroundSkin:"get_backgroundSkin",get_wordWrap:"get_wordWrap",get_verticalAlign:"get_verticalAlign",get_paddingLeft:"get_paddingLeft",get_paddingBottom:"get_paddingBottom",get_paddingRight:"get_paddingRight",get_paddingTop:"get_paddingTop",set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",set_htmlText:"set_htmlText",set_text:"set_text"})
});
var feathers_controls_LayoutGroup = function() {
	this.__maskSkin = null;
	this.__disabledBackgroundSkin = null;
	this.__backgroundSkin = null;
	this.__layout = null;
	this._autoSizeMode = feathers_layout_AutoSizeMode.CONTENT;
	this._currentMaskSkin = null;
	this._backgroundSkinMeasurements = null;
	this._currentBackgroundSkin = null;
	this._ignoreLayoutChanges = false;
	this._ignoreChangesButSetFlags = false;
	this._ignoreChildChanges = false;
	this._layoutMeasurements = new feathers_layout_Measurements();
	this._layoutResult = new feathers_layout_LayoutBoundsResult();
	this.items = [];
	this.initializeLayoutGroupTheme();
	feathers_core_FeathersControl.call(this);
	this.addEventListener("addedToStage",$bind(this,this.layoutGroup_addedToStageHandler));
};
$hxClasses["feathers.controls.LayoutGroup"] = feathers_controls_LayoutGroup;
feathers_controls_LayoutGroup.__name__ = "feathers.controls.LayoutGroup";
feathers_controls_LayoutGroup.__super__ = feathers_core_FeathersControl;
feathers_controls_LayoutGroup.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_autoSizeMode: function() {
		return this._autoSizeMode;
	}
	,get_numChildren: function() {
		return this.items.length;
	}
	,get__numChildren: function() {
		return feathers_core_FeathersControl.prototype.get_numChildren.call(this);
	}
	,addChildAt: function(child,index) {
		var oldIndex = this.items.indexOf(child);
		if(oldIndex == index) {
			return child;
		}
		if(oldIndex >= 0) {
			HxOverrides.remove(this.items,child);
		}
		var privateIndex = this.getPrivateIndexForPublicIndex(index);
		this.items.splice(index,0,child);
		var result = this._addChildAt(child,privateIndex);
		child.addEventListener("resize",$bind(this,this.layoutGroup_child_resizeHandler));
		if(js_Boot.__implements(child,feathers_layout_ILayoutObject)) {
			child.addEventListener("layoutDataChange",$bind(this,this.layoutGroup_child_layoutDataChangeHandler),false,0,true);
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		return result;
	}
	,_addChild: function(child) {
		return feathers_core_FeathersControl.prototype.addChildAt.call(this,child,this.get__numChildren());
	}
	,_addChildAt: function(child,index) {
		return feathers_core_FeathersControl.prototype.addChildAt.call(this,child,index);
	}
	,removeChild: function(child) {
		if(child == null || child.parent != this) {
			return child;
		}
		HxOverrides.remove(this.items,child);
		var result = this._removeChild(child);
		child.removeEventListener("resize",$bind(this,this.layoutGroup_child_resizeHandler));
		if(js_Boot.__implements(child,feathers_layout_ILayoutObject)) {
			child.removeEventListener("layoutDataChange",$bind(this,this.layoutGroup_child_layoutDataChangeHandler));
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		return result;
	}
	,_removeChild: function(child) {
		return feathers_core_FeathersControl.prototype.removeChild.call(this,child);
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.items.length) {
			return this.removeChild(this.items[index]);
		}
		return null;
	}
	,getChildIndex: function(child) {
		return this.items.indexOf(child);
	}
	,_getChildIndex: function(child) {
		return feathers_core_FeathersControl.prototype.getChildIndex.call(this,child);
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		var oldIndex = this.getChildIndex(child);
		if(oldIndex == index) {
			return;
		}
		this._setChildIndex(child,this.getPrivateIndexForPublicIndex(index));
		HxOverrides.remove(this.items,child);
		this.items.splice(index,0,child);
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,_setChildIndex: function(child,index) {
		feathers_core_FeathersControl.prototype.setChildIndex.call(this,child,index);
	}
	,getChildAt: function(index) {
		return this.items[index];
	}
	,initializeLayoutGroupTheme: function() {
		feathers_themes_steel_components_SteelLayoutGroupStyles.initialize();
	}
	,getPrivateIndexForPublicIndex: function(publicIndex) {
		if(this.items.length > 0) {
			return publicIndex + this._getChildIndex(this.items[0]);
		} else if(this.get__numChildren() > 0) {
			return publicIndex + this.get__numChildren();
		}
		return publicIndex;
	}
	,validateNow: function() {
		var oldIgnoreChildChanges = this._ignoreChangesButSetFlags;
		this._ignoreChangesButSetFlags = true;
		feathers_core_FeathersControl.prototype.validateNow.call(this);
		this._ignoreChangesButSetFlags = oldIgnoreChildChanges;
	}
	,update: function() {
		this._ignoreChangesButSetFlags = false;
		var layoutInvalid = this.isInvalid(feathers_core_InvalidationFlag.LAYOUT);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		if(stylesInvalid || stateInvalid) {
			this.refreshBackgroundSkin();
		}
		if(stylesInvalid) {
			this.refreshMaskSkin();
			this.refreshLayout();
		}
		if(sizeInvalid || layoutInvalid || stylesInvalid || stateInvalid) {
			this.refreshViewPortBounds();
			if(this._currentLayout != null) {
				this.handleCustomLayout();
			} else {
				this.handleManualLayout();
			}
			this.handleLayoutResult();
			this.refreshBackgroundLayout();
			this.refreshDisabledOverlay();
			this.refreshMaskLayout();
			this.validateChildren();
		}
	}
	,refreshDisabledOverlay: function() {
		if(!this._enabled) {
			if(this._disabledOverlay == null) {
				this._disabledOverlay = new openfl_display_Sprite();
				this._disabledOverlay.get_graphics().beginFill(16711935,0.0);
				this._disabledOverlay.get_graphics().drawRect(0.0,0.0,1.0,1.0);
				this._disabledOverlay.get_graphics().endFill();
				this._addChild(this._disabledOverlay);
			} else {
				this._setChildIndex(this._disabledOverlay,this.get__numChildren() - 1);
			}
		}
		if(this._disabledOverlay != null) {
			this._disabledOverlay.set_visible(!this._enabled);
			this._disabledOverlay.set_x(0.0);
			this._disabledOverlay.set_y(0.0);
			this._disabledOverlay.set_width(this.actualWidth);
			this._disabledOverlay.set_height(this.actualHeight);
		}
	}
	,refreshLayout: function() {
		var newLayout = this.get_layout();
		if(this._currentLayout == newLayout) {
			return;
		}
		if(this._currentLayout != null) {
			this._currentLayout.removeEventListener("change",$bind(this,this.layoutGroup_layout_changeHandler));
		}
		this._currentLayout = newLayout;
		if(this._currentLayout != null) {
			this._currentLayout.addEventListener("change",$bind(this,this.layoutGroup_layout_changeHandler));
		}
	}
	,refreshBackgroundSkin: function() {
		var oldSkin = this._currentBackgroundSkin;
		this._currentBackgroundSkin = this.getCurrentBackgroundSkin();
		if(this._currentBackgroundSkin == oldSkin) {
			return;
		}
		this.removeCurrentBackgroundSkin(oldSkin);
		this.addCurrentBackgroundSkin(this._currentBackgroundSkin);
	}
	,getCurrentBackgroundSkin: function() {
		if(!this._enabled && this.get_disabledBackgroundSkin() != null) {
			return this.get_disabledBackgroundSkin();
		}
		return this.get_backgroundSkin();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			this._backgroundSkinMeasurements = null;
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(this._backgroundSkinMeasurements == null) {
			this._backgroundSkinMeasurements = new feathers_layout_Measurements(skin);
		} else {
			this._backgroundSkinMeasurements.save(skin);
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this._addChildAt(skin,0);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		this._backgroundSkinMeasurements.restore(skin);
		if(skin.parent == this) {
			this._removeChild(skin);
		}
	}
	,refreshMaskSkin: function() {
		var oldSkin = this._currentMaskSkin;
		this._currentMaskSkin = this.getCurrentMaskSkin();
		if(this._currentMaskSkin == oldSkin) {
			return;
		}
		this.removeCurrentMaskSkin(oldSkin);
		this.addCurrentMaskSkin(this._currentMaskSkin);
	}
	,getCurrentMaskSkin: function() {
		return this.get_maskSkin();
	}
	,addCurrentMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IUIControl)) {
			(js_Boot.__cast(skin , feathers_core_IUIControl)).initializeNow();
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		this._addChild(skin);
		this.set_mask(skin);
	}
	,removeCurrentMaskSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(skin , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(skin.parent == this) {
			this._removeChild(skin);
		}
		this.set_mask(null);
	}
	,refreshViewPortBounds: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
			if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
			}
		}
		var needsToMeasureContent = this._autoSizeMode == feathers_layout_AutoSizeMode.CONTENT || this.stage == null;
		var stageWidth = 0.0;
		var stageHeight = 0.0;
		if(!needsToMeasureContent) {
			var topLeft = this.globalToLocal(new openfl_geom_Point());
			var bottomRight = this.globalToLocal(new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight));
			stageWidth = bottomRight.x - topLeft.x;
			stageHeight = bottomRight.y - topLeft.y;
		}
		if(needsWidth && !needsToMeasureContent) {
			this._layoutMeasurements.width = stageWidth;
		} else {
			this._layoutMeasurements.width = this.get_explicitWidth();
		}
		if(needsHeight && !needsToMeasureContent) {
			this._layoutMeasurements.height = stageHeight;
		} else {
			this._layoutMeasurements.height = this.get_explicitHeight();
		}
		var viewPortMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			viewPortMinWidth = 0.0;
		}
		var viewPortMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			viewPortMinHeight = 0.0;
		}
		var viewPortMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			viewPortMaxWidth = 1.0 / 0.0;
		}
		var viewPortMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			viewPortMaxHeight = 1.0 / 0.0;
		}
		if(this._backgroundSkinMeasurements != null) {
			if(this._backgroundSkinMeasurements.width != null) {
				if(this._backgroundSkinMeasurements.width > viewPortMinWidth) {
					viewPortMinWidth = this._backgroundSkinMeasurements.width;
				}
			} else if(this._backgroundSkinMeasurements.minWidth != null) {
				if(this._backgroundSkinMeasurements.minWidth > viewPortMinWidth) {
					viewPortMinWidth = this._backgroundSkinMeasurements.minWidth;
				}
			}
			if(this._backgroundSkinMeasurements.height != null) {
				if(this._backgroundSkinMeasurements.height > viewPortMinHeight) {
					viewPortMinHeight = this._backgroundSkinMeasurements.height;
				}
			} else if(this._backgroundSkinMeasurements.minHeight != null) {
				if(this._backgroundSkinMeasurements.minHeight > viewPortMinHeight) {
					viewPortMinHeight = this._backgroundSkinMeasurements.minHeight;
				}
			}
		}
		this._layoutMeasurements.minWidth = viewPortMinWidth;
		this._layoutMeasurements.minHeight = viewPortMinHeight;
		this._layoutMeasurements.maxWidth = viewPortMaxWidth;
		this._layoutMeasurements.maxHeight = viewPortMaxHeight;
	}
	,handleCustomLayout: function() {
		var oldIgnoreChildChanges = this._ignoreChildChanges;
		this._ignoreChildChanges = true;
		this._layoutResult.reset();
		this._currentLayout.layout(this.items,this._layoutMeasurements,this._layoutResult);
		this._ignoreChildChanges = oldIgnoreChildChanges;
	}
	,handleManualLayout: function() {
		var maxX = this._layoutMeasurements.width;
		if(maxX == null) {
			maxX = 0.0;
		}
		var maxY = this._layoutMeasurements.height;
		if(maxY == null) {
			maxY = 0.0;
		}
		var oldIgnoreChildChanges = this._ignoreChildChanges;
		this._ignoreChildChanges = true;
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject) && !(js_Boot.__cast(item , feathers_layout_ILayoutObject)).get_includeInLayout()) {
				continue;
			}
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			var itemMaxX = item.get_x() + item.get_width();
			var itemMaxY = item.get_y() + item.get_height();
			if(maxX < itemMaxX) {
				maxX = itemMaxX;
			}
			if(maxY < itemMaxY) {
				maxY = itemMaxY;
			}
		}
		this._ignoreChildChanges = oldIgnoreChildChanges;
		this._layoutResult.contentX = 0.0;
		this._layoutResult.contentY = 0.0;
		this._layoutResult.contentWidth = maxX;
		this._layoutResult.contentHeight = maxY;
		if(this._layoutMeasurements.width != null) {
			this._layoutResult.viewPortWidth = this._layoutMeasurements.width;
		} else {
			if(this._layoutMeasurements.minWidth != null && maxX < this._layoutMeasurements.minWidth) {
				maxX = this._layoutMeasurements.minWidth;
			} else if(this._layoutMeasurements.maxWidth != null && maxX > this._layoutMeasurements.maxWidth) {
				maxX = this._layoutMeasurements.maxWidth;
			}
			this._layoutResult.viewPortWidth = maxX;
		}
		if(this._layoutMeasurements.height != null) {
			this._layoutResult.viewPortHeight = this._layoutMeasurements.height;
		} else {
			if(this._layoutMeasurements.minHeight != null && maxY < this._layoutMeasurements.minHeight) {
				maxY = this._layoutMeasurements.minHeight;
			} else if(this._layoutMeasurements.maxHeight != null && maxY > this._layoutMeasurements.maxHeight) {
				maxY = this._layoutMeasurements.maxHeight;
			}
			this._layoutResult.viewPortHeight = maxY;
		}
	}
	,handleLayoutResult: function() {
		var viewPortWidth = this._layoutResult.viewPortWidth;
		var viewPortHeight = this._layoutResult.viewPortHeight;
		this.saveMeasurements(viewPortWidth,viewPortHeight,viewPortWidth,viewPortHeight);
	}
	,refreshMaskLayout: function() {
		if(this._currentMaskSkin == null) {
			return;
		}
		this._currentMaskSkin.set_x(0.0);
		this._currentMaskSkin.set_y(0.0);
		this._currentMaskSkin.set_width(this.actualWidth);
		this._currentMaskSkin.set_height(this.actualHeight);
		if(js_Boot.__implements(this._currentMaskSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentMaskSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,refreshBackgroundLayout: function() {
		if(this._currentBackgroundSkin == null) {
			return;
		}
		this._currentBackgroundSkin.set_x(0.0);
		this._currentBackgroundSkin.set_y(0.0);
		if(this._currentBackgroundSkin.get_width() != this.actualWidth) {
			this._currentBackgroundSkin.set_width(this.actualWidth);
		}
		if(this._currentBackgroundSkin.get_height() != this.actualHeight) {
			this._currentBackgroundSkin.set_height(this.actualHeight);
		}
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
	}
	,validateChildren: function() {
		if(js_Boot.__implements(this._currentBackgroundSkin,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentBackgroundSkin , feathers_core_IValidating)).validateNow();
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var item = _g1[_g];
			++_g;
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
		}
	}
	,layoutGroup_addedToStageHandler: function(event) {
		if(this._autoSizeMode == feathers_layout_AutoSizeMode.STAGE) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			this.addEventListener("removedFromStage",$bind(this,this.layoutGroup_removedFromStageHandler));
			this.stage.addEventListener("resize",$bind(this,this.layoutGroup_stage_resizeHandler),false,0,true);
		}
	}
	,layoutGroup_removedFromStageHandler: function(event) {
		this.removeEventListener("removedFromStage",$bind(this,this.layoutGroup_removedFromStageHandler));
		this.stage.removeEventListener("resize",$bind(this,this.layoutGroup_stage_resizeHandler));
	}
	,layoutGroup_stage_resizeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.SIZE);
	}
	,layoutGroup_child_resizeHandler: function(event) {
		if(this._ignoreChildChanges) {
			return;
		}
		if(this._ignoreChangesButSetFlags) {
			this.setInvalidationFlag(feathers_core_InvalidationFlag.LAYOUT);
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,layoutGroup_child_layoutDataChangeHandler: function(event) {
		if(this._ignoreChildChanges) {
			return;
		}
		if(this._ignoreChangesButSetFlags) {
			this.setInvalidationFlag(feathers_core_InvalidationFlag.LAYOUT);
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,layoutGroup_layout_changeHandler: function(event) {
		if(this._ignoreLayoutChanges) {
			return;
		}
		if(this._ignoreChangesButSetFlags) {
			this.setInvalidationFlag(feathers_core_InvalidationFlag.LAYOUT);
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,get_layout: function() {
		return this.__layout;
	}
	,set_layout: function(value) {
		if(!this.setStyle("layout")) {
			return this.__layout;
		}
		if(this.__layout == value) {
			return this.__layout;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_layout);
		this.__layout = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__layout;
	}
	,clearStyle_layout: function() {
		this.set_layout(null);
		return this.get_layout();
	}
	,get_backgroundSkin: function() {
		return this.__backgroundSkin;
	}
	,set_backgroundSkin: function(value) {
		if(!this.setStyle("backgroundSkin")) {
			return this.__backgroundSkin;
		}
		if(this.__backgroundSkin == value) {
			return this.__backgroundSkin;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_backgroundSkin);
		this.__backgroundSkin = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__backgroundSkin;
	}
	,clearStyle_backgroundSkin: function() {
		this.set_backgroundSkin(null);
		return this.get_backgroundSkin();
	}
	,get_disabledBackgroundSkin: function() {
		return this.__disabledBackgroundSkin;
	}
	,get_maskSkin: function() {
		return this.__maskSkin;
	}
	,get_styleContext: function() {
		return feathers_controls_LayoutGroup;
	}
	,__class__: feathers_controls_LayoutGroup
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get__numChildren:"get__numChildren",get_autoSizeMode:"get_autoSizeMode",get_maskSkin:"get_maskSkin",get_disabledBackgroundSkin:"get_disabledBackgroundSkin",set_backgroundSkin:"set_backgroundSkin",get_backgroundSkin:"get_backgroundSkin",set_layout:"set_layout",get_layout:"get_layout"})
});
var feathers_controls__$ListView_ItemRendererStorage = function(id,recycler) {
	this.inactiveItemRenderers = [];
	this.activeItemRenderers = [];
	this.id = id;
	this.itemRendererRecycler = recycler;
};
$hxClasses["feathers.controls._ListView.ItemRendererStorage"] = feathers_controls__$ListView_ItemRendererStorage;
feathers_controls__$ListView_ItemRendererStorage.__name__ = "feathers.controls._ListView.ItemRendererStorage";
feathers_controls__$ListView_ItemRendererStorage.prototype = {
	__class__: feathers_controls__$ListView_ItemRendererStorage
};
var feathers_controls_ScrollContainer = function() {
	this.__layout = null;
	this._autoSizeMode = feathers_layout_AutoSizeMode.CONTENT;
	this.items = [];
	this._displayListBypassEnabled = true;
	this._ignoreChangesButSetFlags = false;
	this._ignoreChildChanges = false;
	this.initializeScrollContainerTheme();
	feathers_controls_supportClasses_BaseScrollContainer.call(this);
	if(this.get_viewPort() == null) {
		this.layoutViewPort = new feathers_controls_supportClasses_LayoutViewPort();
		this.addRawChild(this.layoutViewPort);
		this.set_viewPort(this.layoutViewPort);
	}
	this.addEventListener("addedToStage",$bind(this,this.scrollContainer_addedToStageHandler));
};
$hxClasses["feathers.controls.ScrollContainer"] = feathers_controls_ScrollContainer;
feathers_controls_ScrollContainer.__name__ = "feathers.controls.ScrollContainer";
feathers_controls_ScrollContainer.__interfaces__ = [feathers_core_IFocusContainer];
feathers_controls_ScrollContainer.__super__ = feathers_controls_supportClasses_BaseScrollContainer;
feathers_controls_ScrollContainer.prototype = $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype,{
	get_numChildren: function() {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.get_numChildren.call(this);
		}
		return this.layoutViewPort.get_numChildren();
	}
	,addChild: function(child) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.addChild.call(this,child);
		}
		return this.addChildAt(child,this.layoutViewPort.get_numChildren());
	}
	,addChildAt: function(child,index) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.addChildAt.call(this,child,index);
		}
		var oldIndex = this.items.indexOf(child);
		if(oldIndex == index) {
			return child;
		}
		if(oldIndex >= 0) {
			HxOverrides.remove(this.items,child);
		}
		this.items.splice(index,0,child);
		var result = this.layoutViewPort.addChildAt(child,index);
		child.addEventListener("resize",$bind(this,this.scrollContainer_child_resizeHandler));
		if(js_Boot.__implements(child,feathers_layout_ILayoutObject)) {
			child.addEventListener("layoutDataChange",$bind(this,this.scrollContainer_child_layoutDataChangeHandler),false,0,true);
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		return result;
	}
	,removeChild: function(child) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.removeChild.call(this,child);
		}
		if(child == null || child.parent != this.layoutViewPort) {
			return child;
		}
		HxOverrides.remove(this.items,child);
		var result = this.layoutViewPort.removeChild(child);
		child.removeEventListener("resize",$bind(this,this.scrollContainer_child_resizeHandler));
		if(js_Boot.__implements(child,feathers_layout_ILayoutObject)) {
			child.removeEventListener("layoutDataChange",$bind(this,this.scrollContainer_child_layoutDataChangeHandler));
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		return result;
	}
	,removeChildAt: function(index) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.removeChildAt.call(this,index);
		}
		return this.removeChild(this.layoutViewPort.getChildAt(index));
	}
	,getChildAt: function(index) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.removeChildAt.call(this,index);
		}
		return this.layoutViewPort.getChildAt(index);
	}
	,getChildIndex: function(child) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.getChildIndex.call(this,child);
		}
		return this.items.indexOf(child);
	}
	,setChildIndex: function(child,index) {
		if(!this._displayListBypassEnabled) {
			feathers_controls_supportClasses_BaseScrollContainer.prototype.setChildIndex.call(this,child,index);
			return;
		}
		HxOverrides.remove(this.items,child);
		this.items.splice(index,0,child);
	}
	,getChildByName: function(name) {
		if(!this._displayListBypassEnabled) {
			return feathers_controls_supportClasses_BaseScrollContainer.prototype.getChildByName.call(this,name);
		}
		var _g = 0;
		var _g1 = this.items;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,addRawChild: function(child) {
		var oldBypass = this._displayListBypassEnabled;
		this._displayListBypassEnabled = false;
		var result = this.addChild(child);
		this._displayListBypassEnabled = oldBypass;
		return result;
	}
	,initializeScrollContainerTheme: function() {
		feathers_themes_steel_components_SteelScrollContainerStyles.initialize();
	}
	,dispatchEvent: function(event) {
		var oldBypass = this._displayListBypassEnabled;
		this._displayListBypassEnabled = true;
		var result = feathers_controls_supportClasses_BaseScrollContainer.prototype.dispatchEvent.call(this,event);
		this._displayListBypassEnabled = oldBypass;
		return result;
	}
	,validateNow: function() {
		var oldIgnoreChildChanges = this._ignoreChangesButSetFlags;
		this._ignoreChangesButSetFlags = true;
		feathers_controls_supportClasses_BaseScrollContainer.prototype.validateNow.call(this);
		this._ignoreChangesButSetFlags = oldIgnoreChildChanges;
	}
	,update: function() {
		this._ignoreChangesButSetFlags = false;
		var layoutInvalid = this.isInvalid(feathers_core_InvalidationFlag.LAYOUT);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(layoutInvalid || stylesInvalid) {
			this.refreshLayout();
		}
		var oldBypass = this._displayListBypassEnabled;
		this._displayListBypassEnabled = false;
		var oldIgnoreChildChanges = this._ignoreChildChanges;
		this._ignoreChildChanges = true;
		feathers_controls_supportClasses_BaseScrollContainer.prototype.update.call(this);
		this._ignoreChildChanges = oldIgnoreChildChanges;
		this._displayListBypassEnabled = oldBypass;
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._autoSizeMode == feathers_layout_AutoSizeMode.STAGE && this.stage != null) {
			var topLeft = this.globalToLocal(new openfl_geom_Point());
			var bottomRight = this.globalToLocal(new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight));
			var stageWidth = bottomRight.x - topLeft.x;
			var stageHeight = bottomRight.y - topLeft.y;
			return this.saveMeasurements(stageWidth,stageHeight,stageWidth,stageHeight);
		}
		return feathers_controls_supportClasses_BaseScrollContainer.prototype.measure.call(this);
	}
	,refreshViewPortBoundsForMeasurement: function() {
		var oldBypass = this._displayListBypassEnabled;
		this._displayListBypassEnabled = true;
		feathers_controls_supportClasses_BaseScrollContainer.prototype.refreshViewPortBoundsForMeasurement.call(this);
		this._displayListBypassEnabled = oldBypass;
	}
	,refreshViewPortBoundsForLayout: function() {
		var oldBypass = this._displayListBypassEnabled;
		this._displayListBypassEnabled = true;
		feathers_controls_supportClasses_BaseScrollContainer.prototype.refreshViewPortBoundsForLayout.call(this);
		this._displayListBypassEnabled = oldBypass;
	}
	,refreshScrollerValues: function() {
		feathers_controls_supportClasses_BaseScrollContainer.prototype.refreshScrollerValues.call(this);
		if(js_Boot.__implements(this.get_layout(),feathers_layout_IScrollLayout)) {
			var scrollLayout = js_Boot.__cast(this.get_layout() , feathers_layout_IScrollLayout);
			this.scroller.forceElasticTop = scrollLayout.get_elasticTop();
			this.scroller.forceElasticRight = scrollLayout.get_elasticRight();
			this.scroller.forceElasticBottom = scrollLayout.get_elasticBottom();
			this.scroller.forceElasticLeft = scrollLayout.get_elasticLeft();
		} else {
			this.scroller.forceElasticTop = false;
			this.scroller.forceElasticRight = false;
			this.scroller.forceElasticBottom = false;
			this.scroller.forceElasticLeft = false;
		}
		this.scroller.snapPositionsX = this.layoutViewPort.get_snapPositionsX();
		this.scroller.snapPositionsY = this.layoutViewPort.get_snapPositionsY();
	}
	,needsScrollMeasurement: function() {
		return js_Boot.__implements(this.get_layout(),feathers_layout_IScrollLayout);
	}
	,refreshLayout: function() {
		this.layoutViewPort.set_layout(this.get_layout());
	}
	,scrollContainer_addedToStageHandler: function(event) {
		if(this._autoSizeMode == feathers_layout_AutoSizeMode.STAGE) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			this.addEventListener("removedFromStage",$bind(this,this.scrollContainer_removedFromStageHandler));
			this.stage.addEventListener("resize",$bind(this,this.scrollContainer_stage_resizeHandler),false,0,true);
		}
	}
	,scrollContainer_removedFromStageHandler: function(event) {
		this.removeEventListener("removedFromStage",$bind(this,this.scrollContainer_removedFromStageHandler));
		this.stage.removeEventListener("resize",$bind(this,this.scrollContainer_stage_resizeHandler));
	}
	,scrollContainer_stage_resizeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.SIZE);
	}
	,scrollContainer_child_layoutDataChangeHandler: function(event) {
		if(this._ignoreChildChanges) {
			return;
		}
		if(this._ignoreChangesButSetFlags) {
			this.setInvalidationFlag(feathers_core_InvalidationFlag.LAYOUT);
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,scrollContainer_child_resizeHandler: function(event) {
		if(this._ignoreChildChanges) {
			return;
		}
		if(this._ignoreChangesButSetFlags) {
			this.setInvalidationFlag(feathers_core_InvalidationFlag.LAYOUT);
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,get_styleContext: function() {
		return feathers_controls_ScrollContainer;
	}
	,get_layout: function() {
		return this.__layout;
	}
	,__class__: feathers_controls_ScrollContainer
	,__properties__: $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype.__properties__,{get_layout:"get_layout"})
});
var feathers_controls_ScrollMode = $hxEnums["feathers.controls.ScrollMode"] = { __ename__:"feathers.controls.ScrollMode",__constructs__:null
	,SCROLL_RECT: {_hx_name:"SCROLL_RECT",_hx_index:0,__enum__:"feathers.controls.ScrollMode",toString:$estr}
	,MASK: {_hx_name:"MASK",_hx_index:1,__enum__:"feathers.controls.ScrollMode",toString:$estr}
	,MASKLESS: {_hx_name:"MASKLESS",_hx_index:2,__enum__:"feathers.controls.ScrollMode",toString:$estr}
};
feathers_controls_ScrollMode.__constructs__ = [feathers_controls_ScrollMode.SCROLL_RECT,feathers_controls_ScrollMode.MASK,feathers_controls_ScrollMode.MASKLESS];
var feathers_controls_ScrollPolicy = $hxEnums["feathers.controls.ScrollPolicy"] = { __ename__:"feathers.controls.ScrollPolicy",__constructs__:null
	,ON: {_hx_name:"ON",_hx_index:0,__enum__:"feathers.controls.ScrollPolicy",toString:$estr}
	,OFF: {_hx_name:"OFF",_hx_index:1,__enum__:"feathers.controls.ScrollPolicy",toString:$estr}
	,AUTO: {_hx_name:"AUTO",_hx_index:2,__enum__:"feathers.controls.ScrollPolicy",toString:$estr}
};
feathers_controls_ScrollPolicy.__constructs__ = [feathers_controls_ScrollPolicy.ON,feathers_controls_ScrollPolicy.OFF,feathers_controls_ScrollPolicy.AUTO];
var feathers_controls_TextArea = function(text,prompt,changeListener) {
	if(text == null) {
		text = "";
	}
	this.__customErrorCalloutVariant = null;
	this.__textPaddingLeft = 0.0;
	this.__textPaddingBottom = 0.0;
	this.__textPaddingRight = 0.0;
	this.__textPaddingTop = 0.0;
	this.__wordWrap = true;
	this.__embedFonts = false;
	this.__promptTextFormat = null;
	this.__disabledTextFormat = null;
	this.__textFormat = null;
	this.__smoothScrolling = false;
	this._stateToSkin = new haxe_ds_EnumValueMap();
	this._ignoreViewPortTextChange = false;
	this._previousCustomErrorCalloutVariant = null;
	this._maxChars = 0;
	this._stateToTextFormat = new haxe_ds_EnumValueMap();
	this._errorString = null;
	this._displayAsPassword = false;
	this._currentState = feathers_controls_TextInputState.ENABLED;
	this._selectable = true;
	this._editable = true;
	this._updatedPromptStyles = false;
	this._previousSimplePromptTextFormat = null;
	this._previousPromptTextFormat = null;
	this._previousPrompt = null;
	this._previousSimpleTextFormat = null;
	this._previousTextFormat = null;
	this.initializeTextAreaTheme();
	feathers_controls_supportClasses_BaseScrollContainer.call(this);
	this.set_text(text);
	this.set_prompt(prompt);
	this.set_tabEnabled(true);
	this.set_tabChildren(false);
	this.focusRect = null;
	if(this.get_viewPort() == null) {
		this.textFieldViewPort = new feathers_controls_supportClasses_TextFieldViewPort();
		this.textFieldViewPort.set_wordWrap(true);
		this.textFieldViewPort.set_multiline(true);
		this.textFieldViewPort.addEventListener("change",$bind(this,this.textArea_viewPort_changeHandler));
		this.addChild(this.textFieldViewPort);
		this.set_viewPort(this.textFieldViewPort);
	}
	this.addEventListener("focusIn",$bind(this,this.textArea_focusInHandler));
	this.addEventListener("focusOut",$bind(this,this.textArea_focusOutHandler));
	if(changeListener != null) {
		this.addEventListener("change",changeListener);
	}
};
$hxClasses["feathers.controls.TextArea"] = feathers_controls_TextArea;
feathers_controls_TextArea.__name__ = "feathers.controls.TextArea";
feathers_controls_TextArea.__interfaces__ = [feathers_core_IStageFocusDelegate,feathers_core_ITextControl,feathers_core_IStateContext];
feathers_controls_TextArea.__super__ = feathers_controls_supportClasses_BaseScrollContainer;
feathers_controls_TextArea.prototype = $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype,{
	get_tabEnabled: function() {
		if(this._enabled) {
			return this.get_rawTabEnabled();
		} else {
			return false;
		}
	}
	,get_currentState: function() {
		return this._currentState;
	}
	,set_enabled: function(value) {
		feathers_controls_supportClasses_BaseScrollContainer.prototype.set_enabled.call(this,value);
		this.refreshState();
		return this._enabled;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(value == null) {
			if(this._text.length == 0) {
				return this._text;
			}
			value = "";
		}
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._text;
	}
	,set_prompt: function(value) {
		if(this._prompt == value) {
			return this._prompt;
		}
		this._prompt = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._prompt;
	}
	,get_measureViewPort: function() {
		return false;
	}
	,selectRange: function(anchorIndex,activeIndex) {
		this.textFieldViewPort.selectRange(anchorIndex,activeIndex);
	}
	,showFocus: function(show) {
		feathers_controls_supportClasses_BaseScrollContainer.prototype.showFocus.call(this,show);
		if(show) {
			this.selectRange(this._text.length,0);
		}
	}
	,initializeTextAreaTheme: function() {
		feathers_themes_steel_components_SteelTextAreaStyles.initialize();
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(this._previousCustomErrorCalloutVariant != this.get_customErrorCalloutVariant()) {
			this.setInvalidationFlag(feathers_controls_TextArea.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
		}
		var errorCalloutFactoryInvalid = this.isInvalid(feathers_controls_TextArea.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY);
		this._updatedPromptStyles = false;
		if(errorCalloutFactoryInvalid || dataInvalid) {
			this.createErrorCallout();
		}
		if(dataInvalid) {
			this.refreshPrompt();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshPromptStyles();
		}
		if(dataInvalid || stylesInvalid || sizeInvalid) {
			this.refreshPromptText(sizeInvalid);
		}
		if(stylesInvalid) {
			this.refreshTextStyles();
			this.textFieldViewPort.set_embedFonts(this.get_embedFonts());
			this.textFieldViewPort.set_wordWrap(this.get_wordWrap());
			this.textFieldViewPort.set_paddingTop(this.get_textPaddingTop());
			this.textFieldViewPort.set_paddingRight(this.get_textPaddingRight());
			this.textFieldViewPort.set_paddingBottom(this.get_textPaddingBottom());
			this.textFieldViewPort.set_paddingLeft(this.get_textPaddingLeft());
			this.textFieldViewPort.set_smoothScrolling(this.get_smoothScrolling());
		}
		if(dataInvalid) {
			var oldIgnoreViewPortTextChange = this._ignoreViewPortTextChange;
			this._ignoreViewPortTextChange = true;
			this.textFieldViewPort.set_text(this._text);
			this._ignoreViewPortTextChange = oldIgnoreViewPortTextChange;
			this.textFieldViewPort.set_restrict(this.__restrict);
			this.textFieldViewPort.set_maxChars(this._maxChars);
			this.textFieldViewPort.set_displayAsPassword(this._displayAsPassword);
			if(this._editable) {
				this.textFieldViewPort.set_selectable(this._enabled);
			} else {
				this.textFieldViewPort.set_selectable(this._enabled && this._selectable);
			}
		}
		if(stateInvalid) {
			this.textFieldViewPort.set_enabled(this._enabled);
			this.textFieldViewPort.set_textFieldType(this._editable ? 1 : 0);
		}
		feathers_controls_supportClasses_BaseScrollContainer.prototype.update.call(this);
		if(errorCalloutFactoryInvalid || stateInvalid || dataInvalid) {
			this.refreshErrorString();
		}
		this._previousCustomErrorCalloutVariant = this.get_customErrorCalloutVariant();
	}
	,layoutChildren: function() {
		feathers_controls_supportClasses_BaseScrollContainer.prototype.layoutChildren.call(this);
		this.layoutPrompt();
	}
	,addCurrentBackgroundSkin: function(skin) {
		if(skin != null) {
			if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
				(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(this);
			}
		}
		feathers_controls_supportClasses_BaseScrollContainer.prototype.addCurrentBackgroundSkin.call(this,skin);
	}
	,removeCurrentBackgroundSkin: function(skin) {
		if(skin == null) {
			return;
		}
		if(js_Boot.__implements(skin,feathers_core_IStateObserver)) {
			(js_Boot.__cast(skin , feathers_core_IStateObserver)).set_stateContext(null);
		}
		feathers_controls_supportClasses_BaseScrollContainer.prototype.removeCurrentBackgroundSkin.call(this,skin);
	}
	,refreshTextStyles: function() {
		var textFormat = this.getCurrentTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimpleTextFormat) {
			return;
		}
		if(this._previousTextFormat != null) {
			this._previousTextFormat.removeEventListener("change",$bind(this,this.textArea_textFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.textArea_textFormat_changeHandler),false,0,true);
			this.textFieldViewPort.set_textFormat(simpleTextFormat);
		}
		this._previousTextFormat = textFormat;
		this._previousSimpleTextFormat = simpleTextFormat;
	}
	,refreshPrompt: function() {
		if(this._prompt == null) {
			if(this.promptTextField != null) {
				this.removeChild(this.promptTextField);
				this.promptTextField = null;
			}
			return;
		}
		if(this.promptTextField == null) {
			this.promptTextField = new openfl_text_TextField();
			this.promptTextField.set_selectable(false);
			this.promptTextField.set_mouseWheelEnabled(false);
			this.promptTextField.mouseEnabled = false;
			this.promptTextField.set_multiline(true);
			this.addChildAt(this.promptTextField,this.getChildIndex(this.textFieldViewPort));
		}
		this.promptTextField.set_visible(this._text.length == 0);
	}
	,refreshPromptText: function(sizeInvalid) {
		if(this._prompt == null || this._prompt == this._previousPrompt && !this._updatedPromptStyles && !sizeInvalid) {
			return;
		}
		this.promptTextField.set_autoSize(1);
		var hasPromptText = this._prompt.length > 0;
		if(hasPromptText) {
			this.promptTextField.set_text(this._prompt);
		} else {
			this.promptTextField.set_text("​");
		}
		this.promptTextField.set_wordWrap(false);
		this._promptTextMeasuredWidth = this.promptTextField.get_width();
		this._promptTextMeasuredHeight = this.promptTextField.get_height();
		this.promptTextField.set_autoSize(2);
		this.promptTextField.set_wordWrap(true);
		if(!hasPromptText) {
			this.promptTextField.set_text("");
		}
		this._previousPrompt = this._prompt;
	}
	,refreshPromptStyles: function() {
		if(this._prompt == null) {
			return;
		}
		if(this.promptTextField.get_embedFonts() != this.get_embedFonts()) {
			this.promptTextField.set_embedFonts(this.get_embedFonts());
			this._updatedPromptStyles = true;
		}
		var textFormat = this.getCurrentPromptTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSimplePromptTextFormat) {
			return;
		}
		if(this._previousPromptTextFormat != null) {
			this._previousPromptTextFormat.removeEventListener("change",$bind(this,this.textArea_promptTextFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.textArea_promptTextFormat_changeHandler),false,0,true);
			this.promptTextField.set_defaultTextFormat(simpleTextFormat);
			this._updatedPromptStyles = true;
		}
		this._previousPromptTextFormat = textFormat;
		this._previousSimplePromptTextFormat = simpleTextFormat;
	}
	,getCurrentPromptTextFormat: function() {
		var textFormat = this.get_promptTextFormat();
		if(textFormat == null) {
			textFormat = this.get_textFormat();
		}
		return textFormat;
	}
	,refreshErrorString: function() {
		if(this.errorStringCallout == null) {
			return;
		}
		this.errorStringCallout.set_text(this._errorString);
		if(this._currentState == feathers_controls_TextInputState.FOCUSED && this.errorStringCallout.parent == null) {
			feathers_core_PopUpManager.addPopUp(this.errorStringCallout,this,false,false);
		} else if(this._currentState != feathers_controls_TextInputState.FOCUSED && this.errorStringCallout.parent != null) {
			this.errorStringCallout.parent.removeChild(this.errorStringCallout);
		}
	}
	,layoutPrompt: function() {
		if(this._prompt == null) {
			return;
		}
		this.promptTextField.set_x(this.leftViewPortOffset + this.get_textPaddingLeft());
		this.promptTextField.set_y(this.topViewPortOffset + this.get_textPaddingTop());
		var maxPromptWidth = this.get_viewPort().get_visibleWidth() - this.get_textPaddingLeft() - this.get_textPaddingRight();
		if(this._promptTextMeasuredWidth > maxPromptWidth) {
			this.promptTextField.set_width(maxPromptWidth);
		} else {
			this.promptTextField.set_width(this._promptTextMeasuredWidth);
		}
		this.promptTextField.set_height(this.get_viewPort().get_visibleHeight() - this.get_textPaddingTop() - this.get_textPaddingBottom());
	}
	,getCurrentBackgroundSkin: function() {
		var result = this._stateToSkin.get(this._currentState);
		if(result != null) {
			return result;
		}
		return feathers_controls_supportClasses_BaseScrollContainer.prototype.getCurrentBackgroundSkin.call(this);
	}
	,getCurrentTextFormat: function() {
		var result = this._stateToTextFormat.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledTextFormat() != null) {
			return this.get_disabledTextFormat();
		}
		return this.get_textFormat();
	}
	,createErrorCallout: function() {
		if(this.errorStringCallout != null) {
			if(this.errorStringCallout.parent != null) {
				this.errorStringCallout.parent.removeChild(this.errorStringCallout);
			}
			this.errorStringCallout = null;
		}
		if(this._errorString == null || this._errorString.length == 0) {
			return;
		}
		this.errorStringCallout = new feathers_controls_TextCallout();
		if(this.errorStringCallout.get_variant() == null) {
			this.errorStringCallout.set_variant(this.get_customErrorCalloutVariant() != null ? this.get_customErrorCalloutVariant() : feathers_controls_TextInput.CHILD_VARIANT_ERROR_CALLOUT);
		}
		this.errorStringCallout.set_origin(this);
		this.errorStringCallout.closeOnPointerOutside = false;
	}
	,changeState: function(state) {
		if(!this._enabled) {
			state = feathers_controls_TextInputState.DISABLED;
		}
		if(this._currentState == state) {
			return;
		}
		this._currentState = state;
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
		feathers_events_FeathersEvent.dispatch(this,"stateChange");
	}
	,refreshState: function() {
		if(this._enabled) {
			var focused = this.stage != null && this.stage.get_focus() == this.textFieldViewPort.get_textField();
			if(focused) {
				this.changeState(feathers_controls_TextInputState.FOCUSED);
			} else if(this._errorString != null) {
				this.changeState(feathers_controls_TextInputState.ERROR);
			} else {
				this.changeState(feathers_controls_TextInputState.ENABLED);
			}
		} else {
			this.changeState(feathers_controls_TextInputState.DISABLED);
		}
	}
	,textArea_focusInHandler: function(event) {
		if(this.stage != null && this.stage.get_focus() != null && this.textFieldViewPort != null && !this.textFieldViewPort.contains(this.stage.get_focus())) {
			event.stopImmediatePropagation();
			this.stage.set_focus(this.textFieldViewPort);
		}
		this.refreshState();
	}
	,textArea_focusOutHandler: function(event) {
		this.refreshState();
	}
	,baseScrollContainer_keyDownHandler: function(event) {
	}
	,textArea_viewPort_changeHandler: function(event) {
		if(this._ignoreViewPortTextChange) {
			return;
		}
		this.set_text(this.textFieldViewPort.get_text());
	}
	,textArea_textFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,textArea_promptTextFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_styleContext: function() {
		return feathers_controls_TextArea;
	}
	,get_smoothScrolling: function() {
		return this.__smoothScrolling;
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,get_promptTextFormat: function() {
		return this.__promptTextFormat;
	}
	,set_promptTextFormat: function(value) {
		if(!this.setStyle("promptTextFormat")) {
			return this.__promptTextFormat;
		}
		if(this.__promptTextFormat == value) {
			return this.__promptTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_promptTextFormat);
		this.__promptTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__promptTextFormat;
	}
	,clearStyle_promptTextFormat: function() {
		this.set_promptTextFormat(null);
		return this.get_promptTextFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,get_wordWrap: function() {
		return this.__wordWrap;
	}
	,get_textPaddingTop: function() {
		return this.__textPaddingTop;
	}
	,set_textPaddingTop: function(value) {
		if(!this.setStyle("textPaddingTop")) {
			return this.__textPaddingTop;
		}
		if(this.__textPaddingTop == value) {
			return this.__textPaddingTop;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textPaddingTop);
		this.__textPaddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textPaddingTop;
	}
	,clearStyle_textPaddingTop: function() {
		this.set_textPaddingTop(0.0);
		return this.get_textPaddingTop();
	}
	,get_textPaddingRight: function() {
		return this.__textPaddingRight;
	}
	,set_textPaddingRight: function(value) {
		if(!this.setStyle("textPaddingRight")) {
			return this.__textPaddingRight;
		}
		if(this.__textPaddingRight == value) {
			return this.__textPaddingRight;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textPaddingRight);
		this.__textPaddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textPaddingRight;
	}
	,clearStyle_textPaddingRight: function() {
		this.set_textPaddingRight(0.0);
		return this.get_textPaddingRight();
	}
	,get_textPaddingBottom: function() {
		return this.__textPaddingBottom;
	}
	,set_textPaddingBottom: function(value) {
		if(!this.setStyle("textPaddingBottom")) {
			return this.__textPaddingBottom;
		}
		if(this.__textPaddingBottom == value) {
			return this.__textPaddingBottom;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textPaddingBottom);
		this.__textPaddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textPaddingBottom;
	}
	,clearStyle_textPaddingBottom: function() {
		this.set_textPaddingBottom(0.0);
		return this.get_textPaddingBottom();
	}
	,get_textPaddingLeft: function() {
		return this.__textPaddingLeft;
	}
	,set_textPaddingLeft: function(value) {
		if(!this.setStyle("textPaddingLeft")) {
			return this.__textPaddingLeft;
		}
		if(this.__textPaddingLeft == value) {
			return this.__textPaddingLeft;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textPaddingLeft);
		this.__textPaddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textPaddingLeft;
	}
	,clearStyle_textPaddingLeft: function() {
		this.set_textPaddingLeft(0.0);
		return this.get_textPaddingLeft();
	}
	,get_customErrorCalloutVariant: function() {
		return this.__customErrorCalloutVariant;
	}
	,__class__: feathers_controls_TextArea
	,__properties__: $extend(feathers_controls_supportClasses_BaseScrollContainer.prototype.__properties__,{get_customErrorCalloutVariant:"get_customErrorCalloutVariant",set_textPaddingLeft:"set_textPaddingLeft",get_textPaddingLeft:"get_textPaddingLeft",set_textPaddingBottom:"set_textPaddingBottom",get_textPaddingBottom:"get_textPaddingBottom",set_textPaddingRight:"set_textPaddingRight",get_textPaddingRight:"get_textPaddingRight",set_textPaddingTop:"set_textPaddingTop",get_textPaddingTop:"get_textPaddingTop",get_wordWrap:"get_wordWrap",get_embedFonts:"get_embedFonts",set_promptTextFormat:"set_promptTextFormat",get_promptTextFormat:"get_promptTextFormat",set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",get_smoothScrolling:"get_smoothScrolling",set_prompt:"set_prompt",set_text:"set_text",get_text:"get_text",get_currentState:"get_currentState"})
});
var feathers_controls_TextCallout = function(text) {
	if(text == null) {
		text = "";
	}
	this.__disabledTextFormat = null;
	this.__embedFonts = false;
	this.__textFormat = null;
	this._htmlText = null;
	this.initializeTextCalloutTheme();
	feathers_controls_Callout.call(this);
	this.set_text(text);
};
$hxClasses["feathers.controls.TextCallout"] = feathers_controls_TextCallout;
feathers_controls_TextCallout.__name__ = "feathers.controls.TextCallout";
feathers_controls_TextCallout.__interfaces__ = [feathers_core_IHTMLTextControl,feathers_core_ITextControl];
feathers_controls_TextCallout.__super__ = feathers_controls_Callout;
feathers_controls_TextCallout.prototype = $extend(feathers_controls_Callout.prototype,{
	set_text: function(value) {
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._text;
	}
	,initializeTextCalloutTheme: function() {
		feathers_themes_steel_components_SteelTextCalloutStyles.initialize();
	}
	,initialize: function() {
		feathers_controls_Callout.prototype.initialize.call(this);
		if(this.label == null) {
			this.label = new feathers_controls_Label();
			this.addChild(this.label);
			this.set_content(this.label);
		}
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		if(stylesInvalid || stateInvalid) {
			this.refreshTextStyles();
		}
		if(dataInvalid || stylesInvalid || stateInvalid) {
			this.refreshText();
		}
		feathers_controls_Callout.prototype.update.call(this);
	}
	,refreshTextStyles: function() {
		this.label.set_textFormat(this.get_textFormat());
		this.label.set_disabledTextFormat(this.get_disabledTextFormat());
		this.label.set_embedFonts(this.get_embedFonts());
	}
	,refreshText: function() {
		this.label.set_text(this._text);
		this.label.set_htmlText(this._htmlText);
	}
	,get_styleContext: function() {
		return feathers_controls_TextCallout;
	}
	,get_textFormat: function() {
		return this.__textFormat;
	}
	,set_textFormat: function(value) {
		if(!this.setStyle("textFormat")) {
			return this.__textFormat;
		}
		if(this.__textFormat == value) {
			return this.__textFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_textFormat);
		this.__textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__textFormat;
	}
	,clearStyle_textFormat: function() {
		this.set_textFormat(null);
		return this.get_textFormat();
	}
	,get_embedFonts: function() {
		return this.__embedFonts;
	}
	,get_disabledTextFormat: function() {
		return this.__disabledTextFormat;
	}
	,set_disabledTextFormat: function(value) {
		if(!this.setStyle("disabledTextFormat")) {
			return this.__disabledTextFormat;
		}
		if(this.__disabledTextFormat == value) {
			return this.__disabledTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledTextFormat);
		this.__disabledTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledTextFormat;
	}
	,clearStyle_disabledTextFormat: function() {
		this.set_disabledTextFormat(null);
		return this.get_disabledTextFormat();
	}
	,__class__: feathers_controls_TextCallout
	,__properties__: $extend(feathers_controls_Callout.prototype.__properties__,{set_disabledTextFormat:"set_disabledTextFormat",get_disabledTextFormat:"get_disabledTextFormat",get_embedFonts:"get_embedFonts",set_textFormat:"set_textFormat",get_textFormat:"get_textFormat",set_text:"set_text"})
});
var feathers_controls_TextInputState = $hxEnums["feathers.controls.TextInputState"] = { __ename__:"feathers.controls.TextInputState",__constructs__:null
	,ENABLED: {_hx_name:"ENABLED",_hx_index:0,__enum__:"feathers.controls.TextInputState",toString:$estr}
	,DISABLED: {_hx_name:"DISABLED",_hx_index:1,__enum__:"feathers.controls.TextInputState",toString:$estr}
	,FOCUSED: {_hx_name:"FOCUSED",_hx_index:2,__enum__:"feathers.controls.TextInputState",toString:$estr}
	,ERROR: {_hx_name:"ERROR",_hx_index:3,__enum__:"feathers.controls.TextInputState",toString:$estr}
};
feathers_controls_TextInputState.__constructs__ = [feathers_controls_TextInputState.ENABLED,feathers_controls_TextInputState.DISABLED,feathers_controls_TextInputState.FOCUSED,feathers_controls_TextInputState.ERROR];
var feathers_controls_ToggleButtonState = $hxEnums["feathers.controls.ToggleButtonState"] = { __ename__:"feathers.controls.ToggleButtonState",__constructs__:null
	,UP: ($_=function(selected) { return {_hx_index:0,selected:selected,__enum__:"feathers.controls.ToggleButtonState",toString:$estr}; },$_._hx_name="UP",$_.__params__ = ["selected"],$_)
	,HOVER: ($_=function(selected) { return {_hx_index:1,selected:selected,__enum__:"feathers.controls.ToggleButtonState",toString:$estr}; },$_._hx_name="HOVER",$_.__params__ = ["selected"],$_)
	,DOWN: ($_=function(selected) { return {_hx_index:2,selected:selected,__enum__:"feathers.controls.ToggleButtonState",toString:$estr}; },$_._hx_name="DOWN",$_.__params__ = ["selected"],$_)
	,DISABLED: ($_=function(selected) { return {_hx_index:3,selected:selected,__enum__:"feathers.controls.ToggleButtonState",toString:$estr}; },$_._hx_name="DISABLED",$_.__params__ = ["selected"],$_)
};
feathers_controls_ToggleButtonState.__constructs__ = [feathers_controls_ToggleButtonState.UP,feathers_controls_ToggleButtonState.HOVER,feathers_controls_ToggleButtonState.DOWN,feathers_controls_ToggleButtonState.DISABLED];
var feathers_controls_dataRenderers_IDataRenderer = function() { };
$hxClasses["feathers.controls.dataRenderers.IDataRenderer"] = feathers_controls_dataRenderers_IDataRenderer;
feathers_controls_dataRenderers_IDataRenderer.__name__ = "feathers.controls.dataRenderers.IDataRenderer";
feathers_controls_dataRenderers_IDataRenderer.__isInterface__ = true;
feathers_controls_dataRenderers_IDataRenderer.__interfaces__ = [feathers_core_IUIControl];
feathers_controls_dataRenderers_IDataRenderer.prototype = {
	__class__: feathers_controls_dataRenderers_IDataRenderer
	,__properties__: {set_data:"set_data"}
};
var feathers_controls_dataRenderers_IListViewItemRenderer = function() { };
$hxClasses["feathers.controls.dataRenderers.IListViewItemRenderer"] = feathers_controls_dataRenderers_IListViewItemRenderer;
feathers_controls_dataRenderers_IListViewItemRenderer.__name__ = "feathers.controls.dataRenderers.IListViewItemRenderer";
feathers_controls_dataRenderers_IListViewItemRenderer.__isInterface__ = true;
feathers_controls_dataRenderers_IListViewItemRenderer.__interfaces__ = [feathers_core_IUIControl];
feathers_controls_dataRenderers_IListViewItemRenderer.prototype = {
	__class__: feathers_controls_dataRenderers_IListViewItemRenderer
	,__properties__: {set_listViewOwner:"set_listViewOwner",set_index:"set_index"}
};
var feathers_core_IPointerDelegate = function() { };
$hxClasses["feathers.core.IPointerDelegate"] = feathers_core_IPointerDelegate;
feathers_core_IPointerDelegate.__name__ = "feathers.core.IPointerDelegate";
feathers_core_IPointerDelegate.__isInterface__ = true;
var feathers_layout_ILayoutIndexObject = function() { };
$hxClasses["feathers.layout.ILayoutIndexObject"] = feathers_layout_ILayoutIndexObject;
feathers_layout_ILayoutIndexObject.__name__ = "feathers.layout.ILayoutIndexObject";
feathers_layout_ILayoutIndexObject.__isInterface__ = true;
feathers_layout_ILayoutIndexObject.prototype = {
	__class__: feathers_layout_ILayoutIndexObject
	,__properties__: {set_layoutIndex:"set_layoutIndex"}
};
var feathers_controls_dataRenderers_ItemRenderer = function() {
	this.__accessoryView = null;
	this.__showSecondaryText = true;
	this.__alternateBackgroundSkin = null;
	this.__selectedSecondaryTextFormat = null;
	this.__disabledSecondaryTextFormat = null;
	this.__secondaryTextFormat = null;
	this._stateToSecondaryTextFormat = new haxe_ds_EnumValueMap();
	this._ignoreAccessoryResizes = false;
	this._layoutIndex = -1;
	this._secondaryHtmlText = null;
	this._updatedSecondaryTextStyles = false;
	this._previousSecondarySimpleTextFormat = null;
	this._previousSecondaryTextFormat = null;
	this._previousSecondaryHTMLText = null;
	this._previousSecondaryText = null;
	this.initializeItemRendererTheme();
	feathers_controls_ToggleButton.call(this);
	this.mouseChildren = true;
	this.set_buttonMode(false);
	this.set_toggleable(false);
	this.set_tabEnabled(false);
	this.set_tabChildren(true);
};
$hxClasses["feathers.controls.dataRenderers.ItemRenderer"] = feathers_controls_dataRenderers_ItemRenderer;
feathers_controls_dataRenderers_ItemRenderer.__name__ = "feathers.controls.dataRenderers.ItemRenderer";
feathers_controls_dataRenderers_ItemRenderer.__interfaces__ = [feathers_core_IPointerDelegate,feathers_controls_dataRenderers_IDataRenderer,feathers_layout_ILayoutIndexObject,feathers_core_IFocusContainer];
feathers_controls_dataRenderers_ItemRenderer.__super__ = feathers_controls_ToggleButton;
feathers_controls_dataRenderers_ItemRenderer.prototype = $extend(feathers_controls_ToggleButton.prototype,{
	set_data: function(value) {
		if(this._data == value) {
			return this._data;
		}
		this._data = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._data;
	}
	,set_layoutIndex: function(value) {
		if(this._layoutIndex == value) {
			return this._layoutIndex;
		}
		this._layoutIndex = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._layoutIndex;
	}
	,initializeItemRendererTheme: function() {
		feathers_themes_steel_components_SteelItemRendererStyles.initialize();
	}
	,initialize: function() {
		feathers_controls_ToggleButton.prototype.initialize.call(this);
		this._pointerToState.set_customHitTest($bind(this,this.customHitTest));
		this._pointerTrigger.set_customHitTest($bind(this,this.customHitTest));
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stateInvalid = this.isInvalid(feathers_core_InvalidationFlag.STATE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		this._updatedSecondaryTextStyles = false;
		if(dataInvalid) {
			this._pointerToState.set_target(this._pointerTarget != null ? this._pointerTarget : this);
			this.refreshSecondaryTextField();
		}
		if(dataInvalid || stylesInvalid || stateInvalid) {
			this.refreshSecondaryTextStyles();
		}
		if(stylesInvalid || stateInvalid) {
			this.refreshAccessoryView();
		}
		if(dataInvalid || stylesInvalid || stateInvalid || sizeInvalid) {
			this.refreshSecondaryText(sizeInvalid);
		}
		feathers_controls_ToggleButton.prototype.update.call(this);
	}
	,refreshSecondaryTextField: function() {
		if(this._secondaryText == null && this._secondaryHtmlText == null) {
			if(this.secondaryTextField != null) {
				this.removeChild(this.secondaryTextField);
				this.secondaryTextField = null;
			}
			this._previousSecondaryText = null;
			this._previousSecondaryHTMLText = null;
			this._previousSecondaryTextFormat = null;
			this._previousSecondarySimpleTextFormat = null;
			return;
		}
		if(this.secondaryTextField != null) {
			return;
		}
		this.secondaryTextField = new openfl_text_TextField();
		this.secondaryTextField.set_selectable(false);
		this.secondaryTextField.set_multiline(true);
		this.addChild(this.secondaryTextField);
	}
	,refreshSecondaryTextStyles: function() {
		if(this.secondaryTextField == null) {
			return;
		}
		if(this.secondaryTextField.get_embedFonts() != this.get_embedFonts()) {
			this.secondaryTextField.set_embedFonts(this.get_embedFonts());
			this._updatedSecondaryTextStyles = true;
		}
		var textFormat = this.getCurrentSecondaryTextFormat();
		var simpleTextFormat = textFormat != null ? textFormat.toSimpleTextFormat() : null;
		if(simpleTextFormat == this._previousSecondarySimpleTextFormat) {
			return;
		}
		if(this._previousSecondaryTextFormat != null) {
			this._previousSecondaryTextFormat.removeEventListener("change",$bind(this,this.itemRenderer_secondaryTextFormat_changeHandler));
		}
		if(textFormat != null) {
			textFormat.addEventListener("change",$bind(this,this.itemRenderer_secondaryTextFormat_changeHandler),false,0,true);
			this.secondaryTextField.set_defaultTextFormat(simpleTextFormat);
			this._updatedSecondaryTextStyles = true;
		}
		this._previousSecondaryTextFormat = textFormat;
		this._previousSecondarySimpleTextFormat = simpleTextFormat;
	}
	,refreshSecondaryText: function(forceMeasurement) {
		if(this.secondaryTextField == null) {
			return;
		}
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null && this._secondaryText.length > 0;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		this.secondaryTextField.set_visible(hasSecondaryText || hasSecondaryHTMLText);
		if(this._secondaryText == this._previousSecondaryText && this._secondaryHtmlText == this._previousSecondaryHTMLText && !this._updatedSecondaryTextStyles && !forceMeasurement) {
			return;
		}
		this.secondaryTextField.set_autoSize(1);
		if(hasSecondaryHTMLText) {
			this.secondaryTextField.set_htmlText(this._secondaryHtmlText);
		} else if(hasSecondaryText) {
			this.secondaryTextField.set_text(this._secondaryText);
		} else {
			this.secondaryTextField.set_text("​");
		}
		this._secondaryTextMeasuredWidth = this.secondaryTextField.get_width();
		this._secondaryTextMeasuredHeight = this.secondaryTextField.get_height();
		this.secondaryTextField.set_autoSize(2);
		if(!hasSecondaryText && !hasSecondaryHTMLText) {
			this.secondaryTextField.set_text("");
		}
		this._previousSecondaryText = this._secondaryText;
		this._previousSecondaryHTMLText = this._secondaryHtmlText;
	}
	,getCurrentSecondaryTextFormat: function() {
		var result = this._stateToSecondaryTextFormat.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(!this._enabled && this.get_disabledSecondaryTextFormat() != null) {
			return this.get_disabledSecondaryTextFormat();
		}
		if(this._selected && this.get_selectedSecondaryTextFormat() != null) {
			return this.get_selectedSecondaryTextFormat();
		}
		return this.get_secondaryTextFormat();
	}
	,refreshAccessoryView: function() {
		var oldView = this._currentAccessoryView;
		this._currentAccessoryView = this.getCurrentAccessoryView();
		if(this._currentAccessoryView == oldView) {
			return;
		}
		this.removeCurrentAccessoryView(oldView);
		this.addCurrentAccessoryView(this._currentAccessoryView);
	}
	,getCurrentAccessoryView: function() {
		return this.get_accessoryView();
	}
	,removeCurrentAccessoryView: function(view) {
		if(view == null) {
			return;
		}
		view.removeEventListener("resize",$bind(this,this.itemRenderer_accessoryView_resizeHandler));
		if(js_Boot.__implements(view,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(view , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(view,feathers_core_IStateObserver)) {
			(js_Boot.__cast(view , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._accessoryViewMeasurements.restore(view);
		if(view.parent == this) {
			this.removeChild(view);
		}
	}
	,addCurrentAccessoryView: function(view) {
		if(view == null) {
			this._accessoryViewMeasurements = null;
			return;
		}
		if(js_Boot.__implements(view,feathers_core_IUIControl)) {
			(js_Boot.__cast(view , feathers_core_IUIControl)).initializeNow();
		}
		if(this._accessoryViewMeasurements == null) {
			this._accessoryViewMeasurements = new feathers_layout_Measurements(view);
		} else {
			this._accessoryViewMeasurements.save(view);
		}
		if(js_Boot.__implements(view,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(view , feathers_skins_IProgrammaticSkin)).set_uiContext(this);
		}
		if(js_Boot.__implements(view,feathers_core_IStateObserver)) {
			(js_Boot.__cast(view , feathers_core_IStateObserver)).set_stateContext(this);
		}
		view.addEventListener("resize",$bind(this,this.itemRenderer_accessoryView_resizeHandler),false,0,true);
		this.addChild(view);
	}
	,customHitTest: function(stageX,stageY) {
		var value = this._pointerTarget;
		var pointerTargetContainer = ((value) instanceof openfl_display_DisplayObjectContainer) ? value : null;
		if(pointerTargetContainer == null) {
			pointerTargetContainer = this;
		}
		if(pointerTargetContainer.stage == null) {
			return false;
		}
		if(pointerTargetContainer.mouseChildren) {
			var objects = pointerTargetContainer.stage.getObjectsUnderPoint(new openfl_geom_Point(stageX,stageY));
			if(objects.length > 0) {
				var lastObject = objects[objects.length - 1];
				if(pointerTargetContainer.contains(lastObject)) {
					while(lastObject != null && lastObject != pointerTargetContainer) {
						if(((lastObject) instanceof openfl_display_InteractiveObject)) {
							var interactive = js_Boot.__cast(lastObject , openfl_display_InteractiveObject);
							if(!interactive.mouseEnabled) {
								lastObject = lastObject.parent;
								continue;
							}
						}
						if(js_Boot.__implements(lastObject,feathers_core_IFocusObject)) {
							var focusable = js_Boot.__cast(lastObject , feathers_core_IFocusObject);
							if(focusable.parent != this._pointerTarget && focusable.get_focusEnabled()) {
								return false;
							}
						}
						lastObject = lastObject.parent;
					}
				}
			}
		}
		return true;
	}
	,refreshTextFieldDimensions: function(forMeasurement) {
		var oldIgnoreIconResizes = this._ignoreIconResizes;
		this._ignoreIconResizes = true;
		if(js_Boot.__implements(this._currentIcon,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentIcon , feathers_core_IValidating)).validateNow();
		}
		this._ignoreIconResizes = oldIgnoreIconResizes;
		var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
		this._ignoreAccessoryResizes = true;
		if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
		}
		this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		if(!hasText && !hasHTMLText) {
			return;
		}
		var calculatedWidth = this.actualWidth;
		var calculatedHeight = this.actualHeight;
		if(forMeasurement) {
			calculatedWidth = 0.0;
			var explicitCalculatedWidth = this.get_explicitWidth();
			if(explicitCalculatedWidth == null) {
				explicitCalculatedWidth = this.get_explicitMaxWidth();
			}
			if(explicitCalculatedWidth != null) {
				calculatedWidth = explicitCalculatedWidth;
			}
			calculatedHeight = 0.0;
			var explicitCalculatedHeight = this.get_explicitHeight();
			if(explicitCalculatedHeight == null) {
				explicitCalculatedHeight = this.get_explicitMaxHeight();
			}
			if(explicitCalculatedHeight != null) {
				calculatedHeight = explicitCalculatedHeight;
			}
		}
		calculatedWidth -= this.get_paddingLeft() + this.get_paddingRight();
		calculatedHeight -= this.get_paddingTop() + this.get_paddingBottom();
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				calculatedWidth -= this._currentIcon.get_width() + adjustedGap;
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				calculatedHeight -= this._currentIcon.get_height() + adjustedGap;
			}
		}
		if(this.hasAccessoryViewInLayout()) {
			calculatedWidth -= this._currentAccessoryView.get_width() + adjustedGap;
		}
		if(this.secondaryTextField != null) {
			calculatedHeight -= this._secondaryTextMeasuredHeight + adjustedGap;
		}
		if(calculatedWidth < 0.0) {
			calculatedWidth = 0.0;
		}
		if(calculatedHeight < 0.0) {
			calculatedHeight = 0.0;
		}
		if(calculatedWidth > this._textMeasuredWidth) {
			calculatedWidth = this._textMeasuredWidth;
		}
		if(calculatedHeight > this._textMeasuredHeight) {
			calculatedHeight = this._textMeasuredHeight;
		}
		this.textField.set_width(calculatedWidth);
		var wordWrap = this.get_wordWrap();
		if(wordWrap && !this._wrappedOnMeasure && calculatedWidth >= this._textMeasuredWidth) {
			wordWrap = false;
		}
		if(this.textField.get_wordWrap() != wordWrap) {
			this.textField.set_wordWrap(wordWrap);
		}
		this.textField.set_height(calculatedHeight);
	}
	,calculateExplicitWidthForTextMeasurement: function() {
		var textFieldExplicitWidth = feathers_controls_ToggleButton.prototype.calculateExplicitWidthForTextMeasurement.call(this);
		if(textFieldExplicitWidth == null) {
			return textFieldExplicitWidth;
		}
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		if(this.hasAccessoryViewInLayout()) {
			var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
			this._ignoreAccessoryResizes = true;
			if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
			}
			this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
			textFieldExplicitWidth -= this._currentAccessoryView.get_width() + adjustedGap;
		}
		if(textFieldExplicitWidth < 0.0) {
			textFieldExplicitWidth = 0.0;
		}
		return textFieldExplicitWidth;
	}
	,measureContentWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		if(hasSecondaryText || hasSecondaryHTMLText) {
			contentWidth = Math.max(contentWidth,this._secondaryTextMeasuredWidth);
		}
		if(this.hasAccessoryViewInLayout()) {
			var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
			this._ignoreAccessoryResizes = true;
			if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
			}
			this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
			if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) {
				contentWidth += adjustedGap;
			}
			contentWidth += this._currentAccessoryView.get_width();
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText || this.hasAccessoryViewInLayout()) {
					contentWidth += adjustedGap;
				}
				contentWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentWidth = Math.max(contentWidth,this._currentIcon.get_width());
			}
		}
		return contentWidth;
	}
	,measureContentHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		if(hasSecondaryText || hasSecondaryHTMLText) {
			contentHeight += this._secondaryTextMeasuredHeight;
			if(hasText || hasHTMLText) {
				contentHeight += adjustedGap;
			}
		}
		if(this.hasAccessoryViewInLayout()) {
			var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
			this._ignoreAccessoryResizes = true;
			if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
			}
			this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
			contentHeight = Math.max(contentHeight,this._currentAccessoryView.get_height());
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) {
					contentHeight += adjustedGap;
				}
				contentHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentHeight = Math.max(contentHeight,this._currentIcon.get_height());
			}
		}
		return contentHeight;
	}
	,measureContentMinWidth: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		if(hasSecondaryText || hasSecondaryHTMLText) {
			contentMinWidth = Math.max(contentMinWidth,this._secondaryTextMeasuredWidth);
		}
		if(this.hasAccessoryViewInLayout()) {
			var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
			this._ignoreAccessoryResizes = true;
			if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
			}
			this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
			if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) {
				contentMinWidth += adjustedGap;
			}
			contentMinWidth += this._currentAccessoryView.get_width();
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText || this.hasAccessoryViewInLayout()) {
					contentMinWidth += adjustedGap;
				}
				contentMinWidth += this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				contentMinWidth = Math.max(contentMinWidth,this._currentIcon.get_width());
			}
		}
		return contentMinWidth;
	}
	,measureContentMinHeight: function() {
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var contentMinHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		if(hasSecondaryText || hasSecondaryHTMLText) {
			contentMinHeight += this._secondaryTextMeasuredHeight;
			if(hasText || hasHTMLText) {
				contentMinHeight += adjustedGap;
			}
		}
		if(this.hasAccessoryViewInLayout()) {
			var oldIgnoreAccessoryResizes = this._ignoreAccessoryResizes;
			this._ignoreAccessoryResizes = true;
			if(js_Boot.__implements(this._currentAccessoryView,feathers_core_IValidating)) {
				(js_Boot.__cast(this._currentAccessoryView , feathers_core_IValidating)).validateNow();
			}
			this._ignoreAccessoryResizes = oldIgnoreAccessoryResizes;
			contentMinHeight = Math.max(contentMinHeight,this._currentAccessoryView.get_height());
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) {
					contentMinHeight += adjustedGap;
				}
				contentMinHeight += this._currentIcon.get_height();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				contentMinHeight = Math.max(contentMinHeight,this._currentIcon.get_height());
			}
		}
		return contentMinHeight;
	}
	,hasAccessoryViewInLayout: function() {
		if(this._currentAccessoryView == null) {
			return false;
		}
		if(js_Boot.__implements(this._currentAccessoryView,feathers_layout_ILayoutObject)) {
			return (js_Boot.__cast(this._currentAccessoryView , feathers_layout_ILayoutObject)).get_includeInLayout();
		}
		return true;
	}
	,getCurrentBackgroundSkin: function() {
		var result = this._stateToSkin.get(this._currentState);
		if(result != null) {
			return result;
		}
		if(this._selected && this.get_selectedBackgroundSkin() != null) {
			return this.get_selectedBackgroundSkin();
		}
		if(this.get_alternateBackgroundSkin() != null && this._layoutIndex % 2 == 1) {
			return this.get_alternateBackgroundSkin();
		}
		return this.get_backgroundSkin();
	}
	,layoutChildren: function() {
		this.refreshTextFieldDimensions(false);
		var flexGap = false;
		var adjustedGap = this.get_gap();
		if(adjustedGap == 1.0 / 0.0) {
			adjustedGap = this.get_minGap();
			flexGap = true;
		}
		var hasText = this.get_showText() && this._text != null;
		var hasHTMLText = this.get_showText() && this._htmlText != null && this._htmlText.length > 0;
		var hasSecondaryText = this.get_showSecondaryText() && this._secondaryText != null;
		var hasSecondaryHTMLText = this.get_showSecondaryText() && this._secondaryHtmlText != null && this._secondaryHtmlText.length > 0;
		var availableContentWidth = this.actualWidth - this.get_paddingLeft() - this.get_paddingRight();
		var availableContentHeight = this.actualHeight - this.get_paddingTop() - this.get_paddingBottom();
		var totalContentWidth = hasText || hasHTMLText ? this._textMeasuredWidth : 0.0;
		var totalContentHeight = hasText || hasHTMLText ? this._textMeasuredHeight : 0.0;
		if((hasSecondaryText || hasSecondaryHTMLText) && this.secondaryTextField != null) {
			totalContentWidth = Math.max(totalContentWidth,this._secondaryTextMeasuredWidth);
			totalContentHeight += this._secondaryTextMeasuredHeight + adjustedGap;
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				totalContentWidth += adjustedGap + this._currentIcon.get_width();
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				totalContentHeight += adjustedGap + this._currentIcon.get_height();
			}
		}
		var flexGapVertical = flexGap && (hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) && this._currentIcon != null && (this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM);
		var flexGapHorizontal = flexGap && (hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) && this._currentIcon != null && (this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT);
		if(this.hasAccessoryViewInLayout()) {
			this._currentAccessoryView.set_x(this.actualWidth - this.get_paddingRight() - this._currentAccessoryView.get_width());
			switch(this.get_verticalAlign()._hx_index) {
			case 0:
				this._currentAccessoryView.set_y(this.get_paddingTop());
				break;
			case 1:
				this._currentAccessoryView.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + (availableContentHeight - this._currentAccessoryView.get_height()) / 2.0));
				break;
			case 2:
				this._currentAccessoryView.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + availableContentHeight - this._currentAccessoryView.get_height()));
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown vertical align: " + Std.string(this.get_verticalAlign())));
			}
			availableContentWidth -= this._currentAccessoryView.get_width() + adjustedGap;
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP || this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				switch(this.get_horizontalAlign()._hx_index) {
				case 0:
					this._currentIcon.set_x(this.get_paddingLeft());
					break;
				case 1:
					this._currentIcon.set_x(Math.max(this.get_paddingLeft(),this.get_paddingLeft() + (availableContentWidth - this._currentIcon.get_height()) / 2.0));
					break;
				case 2:
					this._currentIcon.set_x(Math.max(this.get_paddingLeft(),this.get_paddingLeft() + availableContentWidth - this._currentIcon.get_width()));
					break;
				default:
					throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown horizontal align: " + Std.string(this.get_horizontalAlign())));
				}
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				switch(this.get_verticalAlign()._hx_index) {
				case 0:
					this._currentIcon.set_y(this.get_paddingTop());
					break;
				case 1:
					this._currentIcon.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + (availableContentHeight - this._currentIcon.get_height()) / 2.0));
					break;
				case 2:
					this._currentIcon.set_y(Math.max(this.get_paddingTop(),this.get_paddingTop() + availableContentHeight - this._currentIcon.get_height()));
					break;
				default:
					throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown vertical align: " + Std.string(this.get_verticalAlign())));
				}
			}
		}
		var currentX = this.get_paddingLeft();
		var currentY = this.get_paddingTop();
		if(flexGapHorizontal) {
			currentX = this.get_paddingLeft();
		} else {
			switch(this.get_horizontalAlign()._hx_index) {
			case 0:
				currentX = this.get_paddingLeft();
				break;
			case 1:
				currentX = Math.max(this.get_paddingLeft(),this.get_paddingLeft() + (availableContentWidth - totalContentWidth) / 2.0);
				break;
			case 2:
				currentX = Math.max(this.get_paddingLeft(),this.get_paddingLeft() + availableContentWidth - totalContentWidth);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown horizontal align: " + Std.string(this.get_horizontalAlign())));
			}
		}
		if(flexGapVertical) {
			currentY = this.get_paddingTop();
		} else {
			switch(this.get_verticalAlign()._hx_index) {
			case 0:
				currentY = this.get_paddingTop();
				break;
			case 1:
				currentY = Math.max(this.get_paddingTop(),this.get_paddingTop() + (availableContentHeight - totalContentHeight) / 2.0);
				break;
			case 2:
				currentY = Math.max(this.get_paddingTop(),this.get_paddingTop() + availableContentHeight - totalContentHeight);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown vertical align: " + Std.string(this.get_verticalAlign())));
			}
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.LEFT) {
				this._currentIcon.set_x(currentX);
				currentX += adjustedGap + this._currentIcon.get_width();
			} else if(this.get_iconPosition() == feathers_layout_RelativePosition.TOP) {
				this._currentIcon.set_y(currentY);
				currentY += adjustedGap + this._currentIcon.get_height();
			}
		}
		var totalTextWidth = 0.0;
		var totalTextHeight = 0.0;
		var availableTextWidth = availableContentWidth;
		if(this._currentIcon != null && (this.get_iconPosition() == feathers_layout_RelativePosition.LEFT || this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT)) {
			availableTextWidth -= adjustedGap + this._currentIcon.get_width();
		}
		if(hasText || hasHTMLText) {
			this.textField.set_x(currentX);
			this.textField.set_y(currentY);
			currentY += this._textMeasuredHeight + adjustedGap;
			totalTextWidth = Math.max(totalTextWidth,this.textField.get_width());
			totalTextHeight += this.textField.get_height();
			if(hasSecondaryText || hasSecondaryHTMLText) {
				totalTextHeight += adjustedGap;
			}
		}
		if((hasSecondaryText || hasSecondaryHTMLText) && this.secondaryTextField != null) {
			this.secondaryTextField.set_x(currentX);
			this.secondaryTextField.set_y(currentY);
			this.secondaryTextField.set_width(this._secondaryTextMeasuredWidth < availableTextWidth ? this._secondaryTextMeasuredWidth : availableTextWidth);
			currentY += this._secondaryTextMeasuredHeight + adjustedGap;
			totalTextWidth = Math.max(totalTextWidth,this.secondaryTextField.get_width());
			totalTextHeight += this.secondaryTextField.get_height();
		}
		if(flexGapHorizontal && this.get_iconPosition() == feathers_layout_RelativePosition.LEFT) {
			if(hasText || hasHTMLText) {
				this.textField.set_x(Math.max(this.textField.get_x(),this.get_paddingLeft() + availableContentWidth - totalTextWidth));
			}
			if(hasSecondaryText || hasSecondaryHTMLText) {
				this.secondaryTextField.set_x(Math.max(this.secondaryTextField.get_x(),this.get_paddingLeft() + availableContentWidth - totalTextWidth));
			}
		} else if(flexGapVertical && this.get_iconPosition() == feathers_layout_RelativePosition.TOP) {
			if(hasText || hasHTMLText) {
				this.textField.set_y(Math.max(this.textField.get_y(),this.get_paddingTop() + availableContentHeight - totalTextHeight));
			}
			if(hasSecondaryText || hasSecondaryHTMLText) {
				this.secondaryTextField.set_y(this.get_paddingTop() + availableContentHeight - this.secondaryTextField.get_height());
			}
		}
		if(hasText || hasHTMLText || hasSecondaryText || hasSecondaryHTMLText) {
			currentX += totalTextWidth + adjustedGap;
		}
		if(this._currentIcon != null) {
			if(this.get_iconPosition() == feathers_layout_RelativePosition.RIGHT) {
				if(flexGapHorizontal) {
					this._currentIcon.set_x(Math.max(currentX,this.get_paddingLeft() + availableContentWidth - this._currentIcon.get_width()));
				} else {
					this._currentIcon.set_x(currentX);
				}
			}
			if(this.get_iconPosition() == feathers_layout_RelativePosition.BOTTOM) {
				if(flexGapVertical) {
					this._currentIcon.set_y(Math.max(currentY,this.get_paddingTop() + availableContentHeight - this._currentIcon.get_height()));
				} else {
					this._currentIcon.set_y(currentY);
				}
			}
		}
	}
	,itemRenderer_secondaryTextFormat_changeHandler: function(event) {
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,itemRenderer_accessoryView_resizeHandler: function(event) {
		if(this._ignoreAccessoryResizes) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,get_secondaryTextFormat: function() {
		return this.__secondaryTextFormat;
	}
	,set_secondaryTextFormat: function(value) {
		if(!this.setStyle("secondaryTextFormat")) {
			return this.__secondaryTextFormat;
		}
		if(this.__secondaryTextFormat == value) {
			return this.__secondaryTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_secondaryTextFormat);
		this.__secondaryTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__secondaryTextFormat;
	}
	,clearStyle_secondaryTextFormat: function() {
		this.set_secondaryTextFormat(null);
		return this.get_secondaryTextFormat();
	}
	,get_disabledSecondaryTextFormat: function() {
		return this.__disabledSecondaryTextFormat;
	}
	,set_disabledSecondaryTextFormat: function(value) {
		if(!this.setStyle("disabledSecondaryTextFormat")) {
			return this.__disabledSecondaryTextFormat;
		}
		if(this.__disabledSecondaryTextFormat == value) {
			return this.__disabledSecondaryTextFormat;
		}
		this._previousClearStyle = $bind(this,this.clearStyle_disabledSecondaryTextFormat);
		this.__disabledSecondaryTextFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this.__disabledSecondaryTextFormat;
	}
	,clearStyle_disabledSecondaryTextFormat: function() {
		this.set_disabledSecondaryTextFormat(null);
		return this.get_disabledSecondaryTextFormat();
	}
	,get_selectedSecondaryTextFormat: function() {
		return this.__selectedSecondaryTextFormat;
	}
	,get_alternateBackgroundSkin: function() {
		return this.__alternateBackgroundSkin;
	}
	,get_showSecondaryText: function() {
		return this.__showSecondaryText;
	}
	,get_accessoryView: function() {
		return this.__accessoryView;
	}
	,get_styleContext: function() {
		return feathers_controls_dataRenderers_ItemRenderer;
	}
	,__class__: feathers_controls_dataRenderers_ItemRenderer
	,__properties__: $extend(feathers_controls_ToggleButton.prototype.__properties__,{get_accessoryView:"get_accessoryView",get_showSecondaryText:"get_showSecondaryText",get_alternateBackgroundSkin:"get_alternateBackgroundSkin",get_selectedSecondaryTextFormat:"get_selectedSecondaryTextFormat",set_disabledSecondaryTextFormat:"set_disabledSecondaryTextFormat",get_disabledSecondaryTextFormat:"get_disabledSecondaryTextFormat",set_secondaryTextFormat:"set_secondaryTextFormat",get_secondaryTextFormat:"get_secondaryTextFormat",set_layoutIndex:"set_layoutIndex",set_data:"set_data"})
});
var feathers_controls_popups_IPopUpAdapter = function() { };
$hxClasses["feathers.controls.popups.IPopUpAdapter"] = feathers_controls_popups_IPopUpAdapter;
feathers_controls_popups_IPopUpAdapter.__name__ = "feathers.controls.popups.IPopUpAdapter";
feathers_controls_popups_IPopUpAdapter.__isInterface__ = true;
feathers_controls_popups_IPopUpAdapter.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_controls_popups_IPopUpAdapter.prototype = {
	__class__: feathers_controls_popups_IPopUpAdapter
	,__properties__: {get_persistent:"get_persistent"}
};
var feathers_controls_popups_DropDownPopUpAdapter = function() {
	this._contentMeasurements = new feathers_layout_Measurements();
	this._fitContentToOriginWidth = true;
	this.modal = false;
	this._gap = 0.0;
	this.origin = null;
	this.content = null;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["feathers.controls.popups.DropDownPopUpAdapter"] = feathers_controls_popups_DropDownPopUpAdapter;
feathers_controls_popups_DropDownPopUpAdapter.__name__ = "feathers.controls.popups.DropDownPopUpAdapter";
feathers_controls_popups_DropDownPopUpAdapter.__interfaces__ = [feathers_controls_popups_IPopUpAdapter];
feathers_controls_popups_DropDownPopUpAdapter.__super__ = openfl_events_EventDispatcher;
feathers_controls_popups_DropDownPopUpAdapter.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_active: function() {
		return this.content != null;
	}
	,get_persistent: function() {
		return false;
	}
	,open: function(content,origin) {
		if(this.get_active()) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Pop-up adapter is already open. Close the previous content before opening new content."));
		}
		if(origin.stage == null) {
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Pop-up adapter failed to open because the origin is not added to the stage."));
		}
		this._stage = origin.stage;
		this._stage.addEventListener("resize",$bind(this,this.dropDownPopUpAdapter_stage_resizeHandler),false,0,true);
		this.content = content;
		this.content.addEventListener("enterFrame",$bind(this,this.dropDownPopUpAdapter_content_enterFrameHandler),false,0,true);
		this.content.addEventListener("resize",$bind(this,this.dropDownPopUpAdapter_content_resizeHandler),false,0,true);
		this.content.addEventListener("removedFromStage",$bind(this,this.dropDownPopUpAdapter_content_removedFromStageHandler),false,0,true);
		this.origin = origin;
		this.origin.addEventListener("resize",$bind(this,this.dropDownPopUpAdapter_origin_resizeHandler),false,0,true);
		this.origin.addEventListener("removedFromStage",$bind(this,this.dropDownPopUpAdapter_origin_removedFromStageHandler),false,0,true);
		feathers_core_PopUpManager.addPopUp(this.content,this.origin,this.modal,false);
		if(!this.get_active()) {
			return;
		}
		if(js_Boot.__implements(this.content,feathers_core_IValidating)) {
			(js_Boot.__cast(this.content , feathers_core_IValidating)).validateNow();
		}
		this._contentMeasurements.save(this.content);
		this.layout();
		feathers_events_FeathersEvent.dispatch(this,"open");
	}
	,close: function() {
		if(!this.get_active()) {
			return;
		}
		this._stage.removeEventListener("resize",$bind(this,this.dropDownPopUpAdapter_stage_resizeHandler));
		this.content.removeEventListener("enterFrame",$bind(this,this.dropDownPopUpAdapter_content_enterFrameHandler));
		this.content.removeEventListener("resize",$bind(this,this.dropDownPopUpAdapter_content_resizeHandler));
		this.content.removeEventListener("removedFromStage",$bind(this,this.dropDownPopUpAdapter_content_removedFromStageHandler));
		this.origin.removeEventListener("resize",$bind(this,this.dropDownPopUpAdapter_origin_resizeHandler));
		this.origin.removeEventListener("removedFromStage",$bind(this,this.dropDownPopUpAdapter_origin_removedFromStageHandler));
		var content = this.content;
		this.origin = null;
		this.content = null;
		this._stage = null;
		if(content.parent != null) {
			content.parent.removeChild(content);
		}
		this._contentMeasurements.restore(content);
		feathers_events_FeathersEvent.dispatch(this,"close");
	}
	,layout: function() {
		if(js_Boot.__implements(this.origin,feathers_core_IValidating)) {
			(js_Boot.__cast(this.origin , feathers_core_IValidating)).validateNow();
		}
		var popUpRoot = feathers_core_PopUpManager.forStage(this._stage).get_root();
		var originTopLeft = new openfl_geom_Point(this.origin.get_x(),this.origin.get_y());
		originTopLeft = this.origin.parent.localToGlobal(originTopLeft);
		originTopLeft = popUpRoot.globalToLocal(originTopLeft);
		var originBottomRight = new openfl_geom_Point(this.origin.get_x() + this.origin.get_width(),this.origin.get_y() + this.origin.get_height());
		originBottomRight = this.origin.parent.localToGlobal(originBottomRight);
		originBottomRight = popUpRoot.globalToLocal(originBottomRight);
		this._prevOriginX = originTopLeft.x;
		this._prevOriginY = originTopLeft.y;
		var originWidth = Math.max(0.0,originBottomRight.x - originTopLeft.x);
		var hasSetMinWidth = false;
		if(this._fitContentToOriginWidth && js_Boot.__implements(this.content,feathers_core_IMeasureObject)) {
			var measureContent = js_Boot.__cast(this.content , feathers_core_IMeasureObject);
			if(measureContent.get_minWidth() < originWidth) {
				measureContent.set_minWidth(originWidth);
				hasSetMinWidth = true;
			}
		}
		if(js_Boot.__implements(this.content,feathers_core_IValidating)) {
			(js_Boot.__cast(this.content , feathers_core_IValidating)).validateNow();
		}
		if(this._fitContentToOriginWidth && !hasSetMinWidth && this.content.get_width() < originWidth) {
			this.content.set_width(originWidth);
		}
		var stageTopLeft = popUpRoot.globalToLocal(new openfl_geom_Point());
		var stageBottomRight = popUpRoot.globalToLocal(new openfl_geom_Point(this._stage.stageWidth,this._stage.stageHeight));
		var contentX = originTopLeft.x;
		if(contentX < stageTopLeft.x) {
			contentX = stageTopLeft.x;
		} else if(contentX + this.content.get_width() > stageBottomRight.x) {
			contentX = Math.max(stageTopLeft.x,stageBottomRight.x - this.content.get_width());
		}
		this.content.set_x(contentX);
		var contentY = originBottomRight.y + this._gap;
		if(contentY + this.content.get_height() > stageBottomRight.y) {
			contentY = Math.max(stageTopLeft.y,originTopLeft.y - this._gap - this.content.get_height());
		}
		this.content.set_y(contentY);
	}
	,dropDownPopUpAdapter_origin_removedFromStageHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		this.close();
	}
	,dropDownPopUpAdapter_content_removedFromStageHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		this.close();
	}
	,dropDownPopUpAdapter_stage_resizeHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		feathers_core_ValidationQueue.forStage(stage).validateNow();
		this.layout();
	}
	,dropDownPopUpAdapter_content_resizeHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		this.layout();
	}
	,dropDownPopUpAdapter_origin_resizeHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		this.layout();
	}
	,dropDownPopUpAdapter_content_enterFrameHandler: function(event) {
		if(!this.get_active()) {
			return;
		}
		var popUpRoot = feathers_core_PopUpManager.forStage(this._stage).get_root();
		var originTopLeft = new openfl_geom_Point(this.origin.get_x(),this.origin.get_y());
		originTopLeft = this.origin.parent.localToGlobal(originTopLeft);
		originTopLeft = popUpRoot.globalToLocal(originTopLeft);
		if(originTopLeft.x != this._prevOriginX || originTopLeft.y != this._prevOriginY) {
			this.layout();
		}
	}
	,__class__: feathers_controls_popups_DropDownPopUpAdapter
	,__properties__: {get_persistent:"get_persistent",get_active:"get_active"}
});
var feathers_controls_supportClasses_IViewPort = function() { };
$hxClasses["feathers.controls.supportClasses.IViewPort"] = feathers_controls_supportClasses_IViewPort;
feathers_controls_supportClasses_IViewPort.__name__ = "feathers.controls.supportClasses.IViewPort";
feathers_controls_supportClasses_IViewPort.__isInterface__ = true;
feathers_controls_supportClasses_IViewPort.__interfaces__ = [feathers_core_IMeasureObject,feathers_core_IValidating,feathers_core_IUIControl];
feathers_controls_supportClasses_IViewPort.prototype = {
	__class__: feathers_controls_supportClasses_IViewPort
	,__properties__: {set_maxVisibleHeight:"set_maxVisibleHeight",get_maxVisibleHeight:"get_maxVisibleHeight",set_maxVisibleWidth:"set_maxVisibleWidth",get_maxVisibleWidth:"get_maxVisibleWidth",set_minVisibleHeight:"set_minVisibleHeight",get_minVisibleHeight:"get_minVisibleHeight",set_minVisibleWidth:"set_minVisibleWidth",get_minVisibleWidth:"get_minVisibleWidth",set_visibleHeight:"set_visibleHeight",get_visibleHeight:"get_visibleHeight",set_visibleWidth:"set_visibleWidth",get_visibleWidth:"get_visibleWidth",set_scrollY:"set_scrollY",set_scrollX:"set_scrollX"}
};
var feathers_controls_supportClasses_AdvancedLayoutViewPort = function() {
	this._snapPositionsY = null;
	this._snapPositionsX = null;
	this._scrollY = 0.0;
	this._scrollX = 0.0;
	this._ignoreLayoutChanges = false;
	this._layoutResult = new feathers_layout_LayoutBoundsResult();
	this._layoutMeasurements = new feathers_layout_Measurements();
	this._layoutItems = [];
	this._layout = null;
	this._explicitVisibleHeight = null;
	this._actualVisibleHeight = 0.0;
	this._maxVisibleHeight = 1.0 / 0.0;
	this._actualMinVisibleHeight = 0.0;
	this._explicitVisibleWidth = null;
	this._actualVisibleWidth = 0.0;
	this._maxVisibleWidth = 1.0 / 0.0;
	this._explicitMinVisibleWidth = null;
	this._actualMinVisibleWidth = 0.0;
	feathers_core_FeathersControl.call(this);
	this._viewPortBackground = new openfl_display_Sprite();
	this._viewPortBackground.get_graphics().beginFill(16711935,0.0);
	this._viewPortBackground.get_graphics().drawRect(0.0,0.0,1.0,1.0);
	this._viewPortBackground.get_graphics().endFill();
	this.addChildAt(this._viewPortBackground,0);
};
$hxClasses["feathers.controls.supportClasses.AdvancedLayoutViewPort"] = feathers_controls_supportClasses_AdvancedLayoutViewPort;
feathers_controls_supportClasses_AdvancedLayoutViewPort.__name__ = "feathers.controls.supportClasses.AdvancedLayoutViewPort";
feathers_controls_supportClasses_AdvancedLayoutViewPort.__interfaces__ = [feathers_controls_supportClasses_IViewPort];
feathers_controls_supportClasses_AdvancedLayoutViewPort.__super__ = feathers_core_FeathersControl;
feathers_controls_supportClasses_AdvancedLayoutViewPort.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_minVisibleWidth: function() {
		if(this._explicitMinVisibleWidth == null) {
			return this._actualMinVisibleWidth;
		}
		return this._explicitMinVisibleWidth;
	}
	,set_minVisibleWidth: function(value) {
		if(this._explicitMinVisibleWidth == value) {
			return this._explicitMinVisibleWidth;
		}
		var oldValue = this._explicitMinVisibleWidth;
		this._explicitMinVisibleWidth = value;
		if(value == null) {
			this._actualMinVisibleWidth = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleWidth = value;
			if(this._explicitVisibleWidth == null && (this._actualVisibleWidth < value || this._actualVisibleWidth == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleWidth;
	}
	,get_maxVisibleWidth: function() {
		return this._maxVisibleWidth;
	}
	,set_maxVisibleWidth: function(value) {
		if(this._maxVisibleWidth == value) {
			return this._maxVisibleWidth;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleWidth cannot be null"));
		}
		var oldValue = this._maxVisibleWidth;
		this._maxVisibleWidth = value;
		if(this._explicitVisibleWidth == null && (this._actualVisibleWidth > value || this._actualVisibleWidth == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleWidth;
	}
	,get_visibleWidth: function() {
		if(this._explicitVisibleWidth == null) {
			return this._actualVisibleWidth;
		}
		return this._explicitVisibleWidth;
	}
	,set_visibleWidth: function(value) {
		if(this._explicitVisibleWidth == value) {
			return this._explicitVisibleWidth;
		}
		this._explicitVisibleWidth = value;
		if(this._actualVisibleWidth != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,get_minVisibleHeight: function() {
		if(this._explicitMinVisibleHeight == null) {
			return this._actualMinVisibleHeight;
		}
		return this._explicitMinVisibleHeight;
	}
	,set_minVisibleHeight: function(value) {
		if(this._explicitMinVisibleHeight == value) {
			return this._explicitMinVisibleHeight;
		}
		var oldValue = this._explicitMinVisibleHeight;
		this._explicitMinVisibleHeight = value;
		if(value == null) {
			this._actualMinVisibleHeight = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleHeight = value;
			if(this._explicitVisibleHeight == null && (this._actualVisibleHeight < value || this._actualVisibleHeight == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleHeight;
	}
	,get_maxVisibleHeight: function() {
		return this._maxVisibleHeight;
	}
	,set_maxVisibleHeight: function(value) {
		if(this._maxVisibleHeight == value) {
			return this._maxVisibleHeight;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleHeight cannot be null"));
		}
		var oldValue = this._maxVisibleHeight;
		this._maxVisibleHeight = value;
		if(this._explicitVisibleHeight == null && (this._actualVisibleHeight > value || this._actualVisibleHeight == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleHeight;
	}
	,get_visibleHeight: function() {
		if(this._explicitVisibleHeight == null) {
			return this._actualVisibleHeight;
		}
		return this._explicitVisibleHeight;
	}
	,set_visibleHeight: function(value) {
		if(this._explicitVisibleHeight == value) {
			return this._explicitVisibleHeight;
		}
		this._explicitVisibleHeight = value;
		if(this._actualVisibleHeight != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,get_layout: function() {
		return this._layout;
	}
	,set_layout: function(value) {
		if(this._layout == value) {
			return this._layout;
		}
		if(this._layout != null) {
			this._layout.removeEventListener("change",$bind(this,this.layout_changeHandler));
		}
		this._layout = value;
		if(this._layout != null) {
			this._layout.addEventListener("change",$bind(this,this.layout_changeHandler));
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		return this._layout;
	}
	,get_scrollX: function() {
		return this._scrollX;
	}
	,set_scrollX: function(value) {
		if(this._scrollX == value) {
			return this._scrollX;
		}
		this._scrollX = value;
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		return this._scrollX;
	}
	,get_scrollY: function() {
		return this._scrollY;
	}
	,set_scrollY: function(value) {
		if(this._scrollY == value) {
			return this._scrollY;
		}
		this._scrollY = value;
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		return this._scrollY;
	}
	,get_snapPositionsX: function() {
		return this._snapPositionsX;
	}
	,get_snapPositionsY: function() {
		return this._snapPositionsY;
	}
	,refreshChildren: function(items) {
	}
	,update: function() {
		this.refreshLayoutMeasurements();
		this.refreshLayoutProperties();
		this.refreshChildren(this._layoutItems);
		this._layoutResult.reset();
		this._layout.layout(this._layoutItems,this._layoutMeasurements,this._layoutResult);
		this.handleLayoutResult();
	}
	,refreshLayoutProperties: function() {
		var oldIgnoreLayoutChanges = this._ignoreLayoutChanges;
		this._ignoreLayoutChanges = true;
		if(js_Boot.__implements(this._layout,feathers_layout_IScrollLayout)) {
			var scrollLayout = js_Boot.__cast(this._layout , feathers_layout_IScrollLayout);
			scrollLayout.set_scrollX(this._scrollX);
			scrollLayout.set_scrollY(this._scrollY);
		}
		this._ignoreLayoutChanges = oldIgnoreLayoutChanges;
	}
	,refreshLayoutMeasurements: function() {
		var needsMinWidth = this._explicitMinVisibleWidth == null;
		var needsMinHeight = this._explicitMinVisibleHeight == null;
		var needsMaxWidth = this._maxVisibleWidth == null;
		var needsMaxHeight = this._maxVisibleHeight == null;
		this._layoutMeasurements.width = this._explicitVisibleWidth;
		this._layoutMeasurements.height = this._explicitVisibleHeight;
		var viewPortMinWidth = this._explicitMinVisibleWidth;
		if(needsMinWidth) {
			viewPortMinWidth = 0.0;
		}
		var viewPortMinHeight = this._explicitMinVisibleHeight;
		if(needsMinHeight) {
			viewPortMinHeight = 0.0;
		}
		var viewPortMaxWidth = this._maxVisibleWidth;
		if(needsMaxWidth) {
			viewPortMaxWidth = 1.0 / 0.0;
		}
		var viewPortMaxHeight = this._maxVisibleHeight;
		if(needsMaxHeight) {
			viewPortMaxHeight = 1.0 / 0.0;
		}
		this._layoutMeasurements.minWidth = viewPortMinWidth;
		this._layoutMeasurements.minHeight = viewPortMinHeight;
		this._layoutMeasurements.maxWidth = viewPortMaxWidth;
		this._layoutMeasurements.maxHeight = viewPortMaxHeight;
	}
	,handleLayoutResult: function() {
		this.saveMeasurements(this._layoutResult.contentWidth,this._layoutResult.contentHeight,this._layoutResult.contentMinWidth,this._layoutResult.contentMinHeight);
		var viewPortWidth = this._layoutResult.viewPortWidth;
		var viewPortHeight = this._layoutResult.viewPortHeight;
		this._actualVisibleWidth = viewPortWidth;
		this._actualVisibleHeight = viewPortHeight;
		this._actualMinVisibleWidth = this._layoutResult.contentMinWidth;
		this._actualMinVisibleHeight = this._layoutResult.contentMinHeight;
		this._viewPortBackground.set_x(Math.min(this.get_scrollX(),0.0));
		this._viewPortBackground.set_y(Math.min(this.get_scrollY(),0.0));
		this._viewPortBackground.set_width(Math.max(this.actualWidth,this._actualVisibleWidth));
		this._viewPortBackground.set_height(Math.max(this.actualHeight,this._actualVisibleHeight));
		if(js_Boot.__implements(this.get_layout(),feathers_layout_ISnapLayout)) {
			var snapLayout = js_Boot.__cast(this.get_layout() , feathers_layout_ISnapLayout);
			this._snapPositionsX = snapLayout.getSnapPositionsX(this._layoutItems,this._actualVisibleWidth,this._actualVisibleHeight,this._snapPositionsX);
			this._snapPositionsY = snapLayout.getSnapPositionsY(this._layoutItems,this._actualVisibleWidth,this._actualVisibleHeight,this._snapPositionsY);
		} else {
			this._snapPositionsX = null;
			this._snapPositionsY = null;
		}
	}
	,layout_changeHandler: function(event) {
		if(this._ignoreLayoutChanges) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
	}
	,__class__: feathers_controls_supportClasses_AdvancedLayoutViewPort
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{get_snapPositionsY:"get_snapPositionsY",get_snapPositionsX:"get_snapPositionsX",set_scrollY:"set_scrollY",get_scrollY:"get_scrollY",set_scrollX:"set_scrollX",get_scrollX:"get_scrollX",set_layout:"set_layout",get_layout:"get_layout",set_visibleHeight:"set_visibleHeight",get_visibleHeight:"get_visibleHeight",set_maxVisibleHeight:"set_maxVisibleHeight",get_maxVisibleHeight:"get_maxVisibleHeight",set_minVisibleHeight:"set_minVisibleHeight",get_minVisibleHeight:"get_minVisibleHeight",set_visibleWidth:"set_visibleWidth",get_visibleWidth:"get_visibleWidth",set_maxVisibleWidth:"set_maxVisibleWidth",get_maxVisibleWidth:"get_maxVisibleWidth",set_minVisibleWidth:"set_minVisibleWidth",get_minVisibleWidth:"get_minVisibleWidth"})
});
var feathers_controls_supportClasses_LayoutViewPort = function() {
	this._snapPositionsY = null;
	this._snapPositionsX = null;
	this._scrollY = 0.0;
	this._scrollX = 0.0;
	this._explicitVisibleHeight = null;
	this._actualVisibleHeight = 0.0;
	this._maxVisibleHeight = 1.0 / 0.0;
	this._actualMinVisibleHeight = 0.0;
	this._explicitVisibleWidth = null;
	this._actualVisibleWidth = 0.0;
	this._maxVisibleWidth = 1.0 / 0.0;
	this._explicitMinVisibleWidth = null;
	this._actualMinVisibleWidth = 0.0;
	feathers_controls_LayoutGroup.call(this);
	this._viewPortBackground = new openfl_display_Sprite();
	this._viewPortBackground.get_graphics().beginFill(16711935,0.0);
	this._viewPortBackground.get_graphics().drawRect(0.0,0.0,1.0,1.0);
	this._viewPortBackground.get_graphics().endFill();
	this._addChildAt(this._viewPortBackground,0);
};
$hxClasses["feathers.controls.supportClasses.LayoutViewPort"] = feathers_controls_supportClasses_LayoutViewPort;
feathers_controls_supportClasses_LayoutViewPort.__name__ = "feathers.controls.supportClasses.LayoutViewPort";
feathers_controls_supportClasses_LayoutViewPort.__interfaces__ = [feathers_controls_supportClasses_IViewPort];
feathers_controls_supportClasses_LayoutViewPort.__super__ = feathers_controls_LayoutGroup;
feathers_controls_supportClasses_LayoutViewPort.prototype = $extend(feathers_controls_LayoutGroup.prototype,{
	get_minVisibleWidth: function() {
		if(this._explicitMinVisibleWidth == null) {
			return this._actualMinVisibleWidth;
		}
		return this._explicitMinVisibleWidth;
	}
	,set_minVisibleWidth: function(value) {
		if(this._explicitMinVisibleWidth == value) {
			return this._explicitMinVisibleWidth;
		}
		var oldValue = this._explicitMinVisibleWidth;
		this._explicitMinVisibleWidth = value;
		if(value == null) {
			this._actualMinVisibleWidth = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleWidth = value;
			if(this._explicitVisibleWidth == null && (this._actualVisibleWidth < value || this._actualVisibleWidth == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleWidth;
	}
	,get_maxVisibleWidth: function() {
		return this._maxVisibleWidth;
	}
	,set_maxVisibleWidth: function(value) {
		if(this._maxVisibleWidth == value) {
			return this._maxVisibleWidth;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleWidth cannot be null"));
		}
		var oldValue = this._maxVisibleWidth;
		this._maxVisibleWidth = value;
		if(this._explicitVisibleWidth == null && (this._actualVisibleWidth > value || this._actualVisibleWidth == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleWidth;
	}
	,get_visibleWidth: function() {
		if(this._explicitVisibleWidth == null) {
			return this._actualVisibleWidth;
		}
		return this._explicitVisibleWidth;
	}
	,set_visibleWidth: function(value) {
		if(this._explicitVisibleWidth == value) {
			return this._explicitVisibleWidth;
		}
		this._explicitVisibleWidth = value;
		if(this._actualVisibleWidth != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,get_minVisibleHeight: function() {
		if(this._explicitMinVisibleHeight == null) {
			return this._actualMinVisibleHeight;
		}
		return this._explicitMinVisibleHeight;
	}
	,set_minVisibleHeight: function(value) {
		if(this._explicitMinVisibleHeight == value) {
			return this._explicitMinVisibleHeight;
		}
		var oldValue = this._explicitMinVisibleHeight;
		this._explicitMinVisibleHeight = value;
		if(value == null) {
			this._actualMinVisibleHeight = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleHeight = value;
			if(this._explicitVisibleHeight == null && (this._actualVisibleHeight < value || this._actualVisibleHeight == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleHeight;
	}
	,get_maxVisibleHeight: function() {
		return this._maxVisibleHeight;
	}
	,set_maxVisibleHeight: function(value) {
		if(this._maxVisibleHeight == value) {
			return this._maxVisibleHeight;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleHeight cannot be null"));
		}
		var oldValue = this._maxVisibleHeight;
		this._maxVisibleHeight = value;
		if(this._explicitVisibleHeight == null && (this._actualVisibleHeight > value || this._actualVisibleHeight == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleHeight;
	}
	,get_visibleHeight: function() {
		if(this._explicitVisibleHeight == null) {
			return this._actualVisibleHeight;
		}
		return this._explicitVisibleHeight;
	}
	,set_visibleHeight: function(value) {
		if(this._explicitVisibleHeight == value) {
			return this._explicitVisibleHeight;
		}
		this._explicitVisibleHeight = value;
		if(this._actualVisibleHeight != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,get_scrollX: function() {
		return this._scrollX;
	}
	,set_scrollX: function(value) {
		if(this._scrollX == value) {
			return this._scrollX;
		}
		this._scrollX = value;
		if(js_Boot.__implements(this._currentLayout,feathers_layout_IScrollLayout)) {
			this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		}
		return this._scrollX;
	}
	,get_scrollY: function() {
		return this._scrollY;
	}
	,set_scrollY: function(value) {
		if(this._scrollY == value) {
			return this._scrollY;
		}
		this._scrollY = value;
		if(js_Boot.__implements(this._currentLayout,feathers_layout_IScrollLayout)) {
			this.setInvalid(feathers_core_InvalidationFlag.LAYOUT);
		}
		return this._scrollY;
	}
	,get_snapPositionsX: function() {
		return this._snapPositionsX;
	}
	,get_snapPositionsY: function() {
		return this._snapPositionsY;
	}
	,refreshViewPortBounds: function() {
		var needsWidth = this._explicitVisibleWidth == null;
		var needsHeight = this._explicitVisibleHeight == null;
		var needsMinWidth = this._explicitMinVisibleWidth == null;
		var needsMinHeight = this._explicitMinVisibleHeight == null;
		var needsMaxWidth = this._maxVisibleWidth == null;
		var needsMaxHeight = this._maxVisibleHeight == null;
		if(this._currentBackgroundSkin != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._backgroundSkinMeasurements,this._currentBackgroundSkin,this);
		}
		var needsToMeasureContent = this.get_autoSizeMode() == feathers_layout_AutoSizeMode.CONTENT || this.stage == null;
		var stageWidth = 0.0;
		var stageHeight = 0.0;
		if(!needsToMeasureContent) {
			var topLeft = this.globalToLocal(new openfl_geom_Point());
			var bottomRight = this.globalToLocal(new openfl_geom_Point(this.stage.stageWidth,this.stage.stageHeight));
			stageWidth = bottomRight.x - topLeft.x;
			stageHeight = bottomRight.y - topLeft.y;
		}
		if(needsWidth && !needsToMeasureContent) {
			this._layoutMeasurements.width = stageWidth;
		} else {
			this._layoutMeasurements.width = this._explicitVisibleWidth;
		}
		if(needsHeight && !needsToMeasureContent) {
			this._layoutMeasurements.height = stageHeight;
		} else {
			this._layoutMeasurements.height = this._explicitVisibleHeight;
		}
		var viewPortMinWidth = this._explicitMinVisibleWidth;
		if(needsMinWidth) {
			viewPortMinWidth = 0.0;
		}
		var viewPortMinHeight = this._explicitMinVisibleHeight;
		if(needsMinHeight) {
			viewPortMinHeight = 0.0;
		}
		var viewPortMaxWidth = this._maxVisibleWidth;
		if(needsMaxWidth) {
			viewPortMaxWidth = 1.0 / 0.0;
		}
		var viewPortMaxHeight = this._maxVisibleHeight;
		if(needsMaxHeight) {
			viewPortMaxHeight = 1.0 / 0.0;
		}
		if(this._currentBackgroundSkin != null) {
			if(this._currentBackgroundSkin.get_width() > viewPortMinWidth) {
				viewPortMinWidth = this._currentBackgroundSkin.get_width();
			}
			if(this._currentBackgroundSkin.get_height() > viewPortMinHeight) {
				viewPortMinHeight = this._currentBackgroundSkin.get_height();
			}
		}
		this._layoutMeasurements.minWidth = viewPortMinWidth;
		this._layoutMeasurements.minHeight = viewPortMinHeight;
		this._layoutMeasurements.maxWidth = viewPortMaxWidth;
		this._layoutMeasurements.maxHeight = viewPortMaxHeight;
	}
	,handleCustomLayout: function() {
		var oldIgnoreLayoutChanges = this._ignoreLayoutChanges;
		this._ignoreLayoutChanges = true;
		if(js_Boot.__implements(this._currentLayout,feathers_layout_IScrollLayout)) {
			var scrollLayout = js_Boot.__cast(this._currentLayout , feathers_layout_IScrollLayout);
			scrollLayout.set_scrollX(this._scrollX);
			scrollLayout.set_scrollY(this._scrollY);
		}
		this._ignoreLayoutChanges = oldIgnoreLayoutChanges;
		feathers_controls_LayoutGroup.prototype.handleCustomLayout.call(this);
	}
	,handleLayoutResult: function() {
		this.saveMeasurements(this._layoutResult.contentWidth,this._layoutResult.contentHeight,this._layoutResult.contentMinWidth,this._layoutResult.contentMinHeight);
		var viewPortWidth = this._layoutResult.viewPortWidth;
		var viewPortHeight = this._layoutResult.viewPortHeight;
		this._actualVisibleWidth = viewPortWidth;
		this._actualVisibleHeight = viewPortHeight;
		this._actualMinVisibleWidth = this._layoutResult.contentMinWidth;
		this._actualMinVisibleHeight = this._layoutResult.contentMinHeight;
		this._viewPortBackground.set_x(Math.min(this.get_scrollX(),0.0));
		this._viewPortBackground.set_y(Math.min(this.get_scrollY(),0.0));
		this._viewPortBackground.set_width(Math.max(this.actualWidth,this._actualVisibleWidth));
		this._viewPortBackground.set_height(Math.max(this.actualHeight,this._actualVisibleHeight));
		if(js_Boot.__implements(this.get_layout(),feathers_layout_ISnapLayout)) {
			var snapLayout = js_Boot.__cast(this.get_layout() , feathers_layout_ISnapLayout);
			this._snapPositionsX = snapLayout.getSnapPositionsX(this.items,this._actualVisibleWidth,this._actualVisibleHeight,this._snapPositionsX);
			this._snapPositionsY = snapLayout.getSnapPositionsY(this.items,this._actualVisibleWidth,this._actualVisibleHeight,this._snapPositionsY);
		} else {
			this._snapPositionsX = null;
			this._snapPositionsY = null;
		}
	}
	,__class__: feathers_controls_supportClasses_LayoutViewPort
	,__properties__: $extend(feathers_controls_LayoutGroup.prototype.__properties__,{get_snapPositionsY:"get_snapPositionsY",get_snapPositionsX:"get_snapPositionsX",set_scrollY:"set_scrollY",get_scrollY:"get_scrollY",set_scrollX:"set_scrollX",get_scrollX:"get_scrollX",set_visibleHeight:"set_visibleHeight",get_visibleHeight:"get_visibleHeight",set_maxVisibleHeight:"set_maxVisibleHeight",get_maxVisibleHeight:"get_maxVisibleHeight",set_minVisibleHeight:"set_minVisibleHeight",get_minVisibleHeight:"get_minVisibleHeight",set_visibleWidth:"set_visibleWidth",get_visibleWidth:"get_visibleWidth",set_maxVisibleWidth:"set_maxVisibleWidth",get_maxVisibleWidth:"get_maxVisibleWidth",set_minVisibleWidth:"set_minVisibleWidth",get_minVisibleWidth:"get_minVisibleWidth"})
});
var feathers_controls_supportClasses_TextFieldViewPort = function() {
	this._ignoreTextFieldScroll = false;
	this._textFieldHasFocus = false;
	this._pendingSelectionActiveIndex = -1;
	this._pendingSelectionAnchorIndex = -1;
	this._scrollY = 0.0;
	this._scrollX = 0.0;
	this._explicitVisibleHeight = null;
	this._actualVisibleHeight = 0.0;
	this._maxVisibleHeight = 1.0 / 0.0;
	this._actualMinVisibleHeight = 0.0;
	this._explicitVisibleWidth = null;
	this._actualVisibleWidth = 0.0;
	this._maxVisibleWidth = 1.0 / 0.0;
	this._explicitMinVisibleWidth = null;
	this._actualMinVisibleWidth = 0.0;
	this._paddingLeft = 0.0;
	this._paddingBottom = 0.0;
	this._paddingRight = 0.0;
	this._paddingTop = 0.0;
	this._embedFonts = false;
	this._savedLineMetrics = null;
	this._previousWidth = null;
	this._previousTextFormat = null;
	this._previousText = null;
	this._updatedTextStyles = false;
	this._smoothScrolling = false;
	this._selectable = true;
	this._maxChars = 0;
	this._displayAsPassword = false;
	this._multiline = false;
	this._wordWrap = false;
	this._textFieldType = 0;
	feathers_core_FeathersControl.call(this);
	this.addEventListener("focusIn",$bind(this,this.textFieldViewPort_focusInHandler));
};
$hxClasses["feathers.controls.supportClasses.TextFieldViewPort"] = feathers_controls_supportClasses_TextFieldViewPort;
feathers_controls_supportClasses_TextFieldViewPort.__name__ = "feathers.controls.supportClasses.TextFieldViewPort";
feathers_controls_supportClasses_TextFieldViewPort.__interfaces__ = [feathers_core_IStageFocusDelegate,feathers_core_IFocusManagerAware,feathers_core_ITextControl,feathers_controls_supportClasses_IViewPort];
feathers_controls_supportClasses_TextFieldViewPort.__super__ = feathers_core_FeathersControl;
feathers_controls_supportClasses_TextFieldViewPort.prototype = $extend(feathers_core_FeathersControl.prototype,{
	get_textField: function() {
		return this._textField;
	}
	,set_textFieldType: function(value) {
		if(this._textFieldType == value) {
			return this._textFieldType;
		}
		this._textFieldType = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._textFieldType;
	}
	,get_text: function() {
		return this._text;
	}
	,set_text: function(value) {
		if(this._text == value) {
			return this._text;
		}
		this._text = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._text;
	}
	,set_wordWrap: function(value) {
		if(this._wordWrap == value) {
			return this._wordWrap;
		}
		this._wordWrap = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._wordWrap;
	}
	,set_multiline: function(value) {
		if(this._multiline == value) {
			return this._multiline;
		}
		this._multiline = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._multiline;
	}
	,set_restrict: function(value) {
		if(this.__restrict == value) {
			return this.__restrict;
		}
		this.__restrict = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this.__restrict;
	}
	,set_displayAsPassword: function(value) {
		if(this._displayAsPassword == value) {
			return this._displayAsPassword;
		}
		this._displayAsPassword = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._displayAsPassword;
	}
	,set_maxChars: function(value) {
		if(this._maxChars == value) {
			return this._maxChars;
		}
		this._maxChars = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._maxChars;
	}
	,set_selectable: function(value) {
		if(this._selectable == value) {
			return this._selectable;
		}
		this._selectable = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._selectable;
	}
	,set_smoothScrolling: function(value) {
		if(this._smoothScrolling == value) {
			return this._smoothScrolling;
		}
		this._smoothScrolling = value;
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._smoothScrolling;
	}
	,set_textFormat: function(value) {
		if(this._textFormat == value) {
			return this._textFormat;
		}
		this._textFormat = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._textFormat;
	}
	,set_embedFonts: function(value) {
		if(this._embedFonts == value) {
			return this._embedFonts;
		}
		this._embedFonts = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._embedFonts;
	}
	,set_paddingTop: function(value) {
		if(this._paddingTop == value) {
			return this._paddingTop;
		}
		this._paddingTop = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._paddingTop;
	}
	,set_paddingRight: function(value) {
		if(this._paddingRight == value) {
			return this._paddingRight;
		}
		this._paddingRight = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._paddingRight;
	}
	,set_paddingBottom: function(value) {
		if(this._paddingBottom == value) {
			return this._paddingBottom;
		}
		this._paddingBottom = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._paddingBottom;
	}
	,set_paddingLeft: function(value) {
		if(this._paddingLeft == value) {
			return this._paddingLeft;
		}
		this._paddingLeft = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._paddingLeft;
	}
	,get_minVisibleWidth: function() {
		if(this._explicitMinVisibleWidth == null) {
			return this._actualMinVisibleWidth;
		}
		return this._explicitMinVisibleWidth;
	}
	,set_minVisibleWidth: function(value) {
		if(this._explicitMinVisibleWidth == value) {
			return this._explicitMinVisibleWidth;
		}
		var oldValue = this._explicitMinVisibleWidth;
		this._explicitMinVisibleWidth = value;
		if(value == null) {
			this._actualMinVisibleWidth = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleWidth = value;
			if(this._explicitVisibleWidth == null && (this._actualVisibleWidth < value || this._actualVisibleWidth == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleWidth;
	}
	,get_maxVisibleWidth: function() {
		return this._maxVisibleWidth;
	}
	,set_maxVisibleWidth: function(value) {
		if(this._maxVisibleWidth == value) {
			return this._maxVisibleWidth;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleWidth cannot be null"));
		}
		var oldValue = this._maxVisibleWidth;
		this._maxVisibleWidth = value;
		if(this._explicitVisibleWidth == null && (this._actualVisibleWidth > value || this._actualVisibleWidth == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleWidth;
	}
	,get_visibleWidth: function() {
		if(this._explicitVisibleWidth == null) {
			return this._actualVisibleWidth;
		}
		return this._explicitVisibleWidth;
	}
	,set_visibleWidth: function(value) {
		if(this._explicitVisibleWidth == value) {
			return this._explicitVisibleWidth;
		}
		this._explicitVisibleWidth = value;
		if(this._actualVisibleWidth != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,get_minVisibleHeight: function() {
		if(this._explicitMinVisibleHeight == null) {
			return this._actualMinVisibleHeight;
		}
		return this._explicitMinVisibleHeight;
	}
	,set_minVisibleHeight: function(value) {
		if(this._explicitMinVisibleHeight == value) {
			return this._explicitMinVisibleHeight;
		}
		var oldValue = this._explicitMinVisibleHeight;
		this._explicitMinVisibleHeight = value;
		if(value == null) {
			this._actualMinVisibleHeight = 0.0;
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		} else {
			this._actualMinVisibleHeight = value;
			if(this._explicitVisibleHeight == null && (this._actualVisibleHeight < value || this._actualVisibleHeight == oldValue)) {
				this.setInvalid(feathers_core_InvalidationFlag.SIZE);
			}
		}
		return this._explicitMinVisibleHeight;
	}
	,get_maxVisibleHeight: function() {
		return this._maxVisibleHeight;
	}
	,set_maxVisibleHeight: function(value) {
		if(this._maxVisibleHeight == value) {
			return this._maxVisibleHeight;
		}
		if(value == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("maxVisibleHeight cannot be null"));
		}
		var oldValue = this._maxVisibleHeight;
		this._maxVisibleHeight = value;
		if(this._explicitVisibleHeight == null && (this._actualVisibleHeight > value || this._actualVisibleHeight == oldValue)) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._maxVisibleHeight;
	}
	,get_visibleHeight: function() {
		if(this._explicitVisibleHeight == null) {
			return this._actualVisibleHeight;
		}
		return this._explicitVisibleHeight;
	}
	,set_visibleHeight: function(value) {
		if(this._explicitVisibleHeight == value) {
			return this._explicitVisibleHeight;
		}
		this._explicitVisibleHeight = value;
		if(this._actualVisibleHeight != value) {
			this.setInvalid(feathers_core_InvalidationFlag.SIZE);
		}
		return this._explicitVisibleWidth;
	}
	,set_scrollX: function(value) {
		if(this._scrollX == value) {
			return this._scrollX;
		}
		this._scrollX = value;
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		return this._scrollX;
	}
	,set_scrollY: function(value) {
		if(this._scrollY == value) {
			return this._scrollY;
		}
		this._scrollY = value;
		this.setInvalid(feathers_core_InvalidationFlag.SCROLL);
		return this._scrollY;
	}
	,selectRange: function(anchorIndex,activeIndex) {
		this._pendingSelectionAnchorIndex = anchorIndex;
		this._pendingSelectionActiveIndex = activeIndex;
		this.setInvalid(feathers_core_InvalidationFlag.SELECTION);
	}
	,initialize: function() {
		feathers_core_FeathersControl.prototype.initialize.call(this);
		if(this._textField == null) {
			this._textField = new openfl_text_TextField();
			this.addChild(this._textField);
		}
		this._textField.set_selectable(true);
		this._textField.set_tabEnabled(false);
		this._textField.set_mouseWheelEnabled(false);
		this._textField.addEventListener("change",$bind(this,this.textField_changeHandler));
		this._textField.addEventListener("scroll",$bind(this,this.textField_scrollHandler));
		this._textField.addEventListener("focusIn",$bind(this,this.textField_focusInHandler));
		this._textField.addEventListener("focusOut",$bind(this,this.textField_focusOutHandler));
	}
	,update: function() {
		var dataInvalid = this.isInvalid(feathers_core_InvalidationFlag.DATA);
		var selectionInvalid = this.isInvalid(feathers_core_InvalidationFlag.SELECTION);
		var sizeInvalid = this.isInvalid(feathers_core_InvalidationFlag.SIZE);
		var stylesInvalid = this.isInvalid(feathers_core_InvalidationFlag.STYLES);
		this._updatedTextStyles = false;
		var oldIgnoreTextFieldScroll = this._ignoreTextFieldScroll;
		this._ignoreTextFieldScroll = true;
		if(stylesInvalid) {
			this.refreshTextStyles();
		}
		if(dataInvalid || sizeInvalid || stylesInvalid) {
			this.refreshText();
		}
		this.measure();
		if(selectionInvalid) {
			this.refreshSelection();
		}
		this.layoutTextField();
		this._ignoreTextFieldScroll = oldIgnoreTextFieldScroll;
	}
	,measureSelf: function() {
		var needsWidth = this._explicitVisibleWidth == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this._explicitMinVisibleWidth == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		var newWidth = this._explicitVisibleWidth;
		if(needsWidth) {
			newWidth = this._paddingLeft + this._paddingRight;
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = this._textMeasuredHeight + this._paddingTop + this._paddingBottom;
		}
		var newMinWidth = this._explicitMinVisibleWidth;
		if(needsMinWidth) {
			newMinWidth = this._paddingLeft + this._paddingRight;
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = this._textMeasuredHeight + this._paddingTop + this._paddingBottom;
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			newMaxWidth = 1.0 / 0.0;
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			newMaxHeight = 1.0 / 0.0;
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,measure: function() {
		var result = this.measureSelf();
		var needsVisibleWidth = this._explicitVisibleWidth == null;
		var needsVisibleHeight = this._explicitVisibleHeight == null;
		var needsVisibleMinWidth = this._explicitMinVisibleWidth == null;
		var needsVisibleMinHeight = this._explicitMinVisibleHeight == null;
		if(needsVisibleWidth) {
			this._actualVisibleWidth = this.actualWidth;
		} else {
			this._actualVisibleWidth = this._explicitVisibleWidth;
		}
		if(needsVisibleHeight) {
			this._actualVisibleHeight = this.actualHeight;
		} else {
			this._actualVisibleHeight = this._explicitVisibleHeight;
		}
		if(needsVisibleMinWidth) {
			this._actualMinVisibleWidth = this.actualMinWidth;
		} else {
			this._actualMinVisibleWidth = this._explicitMinVisibleWidth;
		}
		if(needsVisibleMinHeight) {
			this._actualMinVisibleHeight = this.actualMinHeight;
		} else {
			this._actualMinVisibleHeight = this._explicitMinVisibleHeight;
		}
		return result;
	}
	,refreshTextStyles: function() {
		if(this._textField.get_embedFonts() != this._embedFonts) {
			this._textField.set_embedFonts(this._embedFonts);
			this._updatedTextStyles = true;
		}
		if(this._textFormat != this._previousTextFormat) {
			this._textField.set_defaultTextFormat(this._textFormat);
			this._updatedTextStyles = true;
			this._previousTextFormat = this._textFormat;
		}
	}
	,refreshText: function() {
		var textFieldType = this._enabled ? this._textFieldType : 0;
		if(this._textField.get_type() != textFieldType) {
			this._textField.set_type(textFieldType);
		}
		var calculatedWordWrap = this._explicitVisibleWidth != null && this._wordWrap;
		if(this._textField.get_wordWrap() != calculatedWordWrap) {
			this._textField.set_wordWrap(calculatedWordWrap);
			this._updatedTextStyles = true;
		}
		if(this._textField.get_multiline() != this._multiline) {
			this._textField.set_multiline(this._multiline);
			this._updatedTextStyles = true;
		}
		this._textField.set_restrict(this.__restrict);
		this._textField.set_displayAsPassword(this._displayAsPassword);
		this._textField.set_maxChars(this._maxChars);
		this._textField.set_selectable(this._selectable);
		var calculatedWidth = this._explicitVisibleWidth;
		if(calculatedWidth != null) {
			calculatedWidth -= this._paddingLeft + this._paddingRight;
		}
		if(this._text == this._previousText && !this._updatedTextStyles && calculatedWidth == this._previousWidth) {
			return;
		}
		if(calculatedWidth != null) {
			this._textField.set_width(calculatedWidth);
		}
		this._textField.set_autoSize(1);
		var hasText = this._text != null && this._text.length > 0;
		if(hasText) {
			this._textField.set_text(this._text);
		} else {
			this._textField.set_text("​");
		}
		this._savedLineMetrics = this._textField.getLineMetrics(0);
		this._textMeasuredWidth = this._textField.get_width();
		this._textMeasuredHeight = 4 + (this._savedLineMetrics.height + this._savedLineMetrics.leading) * this._textField.get_numLines();
		this._textField.set_autoSize(2);
		if(!hasText) {
			this._textField.set_text("");
		}
		this._previousText = this._text;
		this._previousWidth = calculatedWidth;
	}
	,refreshSelection: function() {
		if(this._pendingSelectionActiveIndex == -1 && this._pendingSelectionAnchorIndex == -1) {
			return;
		}
		var anchorIndex = this._pendingSelectionAnchorIndex;
		var activeIndex = this._pendingSelectionActiveIndex;
		this._pendingSelectionAnchorIndex = -1;
		this._pendingSelectionActiveIndex = -1;
		this._textField.setSelection(anchorIndex,activeIndex);
	}
	,layoutTextField: function() {
		if(this._smoothScrolling) {
			this._textField.set_x(this._paddingLeft);
			this._textField.set_y(this._paddingTop);
			var calculatedWidth = Math.max(this.actualWidth,this._actualVisibleWidth);
			var calculatedHeight = Math.max(this.actualHeight,this._actualVisibleHeight);
			this._textField.set_width(calculatedWidth - this._paddingLeft - this._paddingRight);
			this._textField.set_height(calculatedHeight - this._paddingTop - this._paddingBottom);
			this._textField.set_scrollV(1);
		} else {
			this._textField.set_x(this._paddingLeft + this._scrollX);
			this._textField.set_y(this._paddingTop + this._scrollY);
			this._textField.set_width(this._actualVisibleWidth - this._paddingLeft - this._paddingRight);
			this._textField.set_height(this._actualVisibleHeight - this._paddingTop - this._paddingBottom);
			var textFieldHeight = this._textField.get_textHeight();
			var maxScrollX = Math.max(0.0,this.actualWidth - this._actualVisibleWidth);
			var maxScrollY = Math.max(0.0,this.actualHeight - this._actualVisibleHeight);
			if(this._textField.get_maxScrollV() == 1 || maxScrollY == 0.0) {
				this._textField.set_scrollV(1);
			} else {
				this._textField.set_scrollV(1 + Math.ceil(this._scrollY / (this._savedLineMetrics.height + this._savedLineMetrics.leading)));
			}
			if(this._textField.get_maxScrollH() == 0 || maxScrollX == 0.0) {
				this._textField.set_scrollH(0);
			} else {
				this._textField.set_scrollH(Math.round(this._textField.get_maxScrollH() * (this._scrollX / maxScrollX)));
			}
		}
	}
	,textField_changeHandler: function(event) {
		event.stopPropagation();
		this.set_text(this._textField.get_text());
		if(this._textFieldHasFocus) {
			var container = js_Boot.__cast(this.parent , feathers_controls_supportClasses_BaseScrollContainer);
			container.validateNow();
			if(container.get_maxScrollY() > 0.0) {
				var lineIndex = -1;
				var caretIndex = this._textField.get_caretIndex();
				if(caretIndex == this._textField.get_length()) {
					if(caretIndex == 0) {
						return;
					}
					--caretIndex;
					lineIndex = this._textField.getLineIndexOfChar(caretIndex);
					var charAtIndex = this._textField.get_text().charAt(caretIndex);
					if(charAtIndex == "\n" || charAtIndex == "\r") {
						++lineIndex;
					}
				} else {
					lineIndex = this._textField.getLineIndexOfChar(caretIndex);
				}
				if(this._smoothScrolling) {
					var lineHeight = this._savedLineMetrics.height + this._savedLineMetrics.leading;
					var minScrollYForLine = container.get_maxScrollY() - (this._textField.get_numLines() - lineIndex - 1) * lineHeight;
					var maxScrollYForLine = minScrollYForLine + (this._textField.get_numLines() - Math.floor(this.get_visibleHeight() / lineHeight)) * lineHeight;
					var targetScrollY = this._scrollY;
					if(minScrollYForLine - targetScrollY > 0.0) {
						targetScrollY = minScrollYForLine;
					} else if(targetScrollY - maxScrollYForLine > 0.0) {
						targetScrollY = maxScrollYForLine;
					}
					container.set_scrollY(targetScrollY);
				} else if(this._textField.get_maxScrollV() > 1) {
					var minScrollVForLine = this._textField.get_maxScrollV() - (this._textField.get_numLines() - lineIndex - 1);
					var maxScrollVForLine = minScrollVForLine + (this._textField.get_numLines() - this._textField.get_maxScrollV());
					if(maxScrollVForLine > this._textField.get_maxScrollV()) {
						maxScrollVForLine = this._textField.get_maxScrollV();
					}
					var targetScrollV = this._textField.get_scrollV();
					if(minScrollVForLine - targetScrollV > 0) {
						targetScrollV = minScrollVForLine;
					} else if(targetScrollV - maxScrollVForLine > 0) {
						targetScrollV = maxScrollVForLine;
					}
					if(targetScrollV != this._textField.get_scrollV()) {
						container.set_scrollY((targetScrollV - 1) * (this._savedLineMetrics.height + this._savedLineMetrics.leading));
					}
				}
			}
		}
	}
	,textField_focusInHandler: function(event) {
		this._textFieldHasFocus = true;
	}
	,textField_focusOutHandler: function(event) {
		this._textFieldHasFocus = false;
	}
	,textField_scrollHandler: function(event) {
		if(this._ignoreTextFieldScroll || this._smoothScrolling) {
			return;
		}
		var container = js_Boot.__cast(this.parent , feathers_controls_supportClasses_BaseScrollContainer);
		if(container.get_maxScrollY() > 0.0 && this._textField.get_maxScrollV() > 1) {
			container.set_scrollY((this._textField.get_scrollV() - 1) * (this._savedLineMetrics.height + this._savedLineMetrics.leading));
		}
	}
	,textFieldViewPort_focusInHandler: function(event) {
		if(this.stage != null && this.stage.get_focus() != this._textField) {
			event.stopImmediatePropagation();
			this.stage.set_focus(this._textField);
		}
	}
	,__class__: feathers_controls_supportClasses_TextFieldViewPort
	,__properties__: $extend(feathers_core_FeathersControl.prototype.__properties__,{set_scrollY:"set_scrollY",set_scrollX:"set_scrollX",set_visibleHeight:"set_visibleHeight",get_visibleHeight:"get_visibleHeight",set_maxVisibleHeight:"set_maxVisibleHeight",get_maxVisibleHeight:"get_maxVisibleHeight",set_minVisibleHeight:"set_minVisibleHeight",get_minVisibleHeight:"get_minVisibleHeight",set_visibleWidth:"set_visibleWidth",get_visibleWidth:"get_visibleWidth",set_maxVisibleWidth:"set_maxVisibleWidth",get_maxVisibleWidth:"get_maxVisibleWidth",set_minVisibleWidth:"set_minVisibleWidth",get_minVisibleWidth:"get_minVisibleWidth",set_paddingLeft:"set_paddingLeft",set_paddingBottom:"set_paddingBottom",set_paddingRight:"set_paddingRight",set_paddingTop:"set_paddingTop",set_embedFonts:"set_embedFonts",set_textFormat:"set_textFormat",set_smoothScrolling:"set_smoothScrolling",set_selectable:"set_selectable",set_maxChars:"set_maxChars",set_displayAsPassword:"set_displayAsPassword",set_restrict:"set_restrict",set_multiline:"set_multiline",set_wordWrap:"set_wordWrap",set_text:"set_text",get_text:"get_text",set_textFieldType:"set_textFieldType",get_textField:"get_textField"})
});
var feathers_core_IPopUpManager = function() { };
$hxClasses["feathers.core.IPopUpManager"] = feathers_core_IPopUpManager;
feathers_core_IPopUpManager.__name__ = "feathers.core.IPopUpManager";
feathers_core_IPopUpManager.__isInterface__ = true;
feathers_core_IPopUpManager.prototype = {
	__class__: feathers_core_IPopUpManager
	,__properties__: {get_root:"get_root"}
};
var feathers_core_DefaultPopUpManager = function(root) {
	this._popUpToOverlay = new haxe_ds_ObjectMap();
	this._centeredPopUps = [];
	this.popUps = [];
	this._ignoreRemoval = false;
	this.set_root(root);
};
$hxClasses["feathers.core.DefaultPopUpManager"] = feathers_core_DefaultPopUpManager;
feathers_core_DefaultPopUpManager.__name__ = "feathers.core.DefaultPopUpManager";
feathers_core_DefaultPopUpManager.__interfaces__ = [feathers_core_IPopUpManager];
feathers_core_DefaultPopUpManager.defaultOverlayFactory = function() {
	var overlay = new openfl_display_Sprite();
	overlay.get_graphics().beginFill(8421504,0.75);
	overlay.get_graphics().drawRect(0,0,1,1);
	overlay.get_graphics().endFill();
	return overlay;
};
feathers_core_DefaultPopUpManager.prototype = {
	get_root: function() {
		return this._root;
	}
	,set_root: function(value) {
		if(this._root == value) {
			return this._root;
		}
		if(value.stage == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("DefaultPopUpManager root's stage property must not be null."));
		}
		var oldIgnoreRemoval = this._ignoreRemoval;
		this._ignoreRemoval = true;
		var _g = 0;
		var _g1 = this.popUps;
		while(_g < _g1.length) {
			var popUp = _g1[_g];
			++_g;
			this._root.removeChild(popUp);
			var overlay = this._popUpToOverlay.h[popUp.__id__];
			if(overlay != null) {
				this._root.removeChild(overlay);
			}
		}
		this._ignoreRemoval = oldIgnoreRemoval;
		this._root = value;
		var _g = 0;
		var _g1 = this.popUps;
		while(_g < _g1.length) {
			var popUp = _g1[_g];
			++_g;
			var overlay = this._popUpToOverlay.h[popUp.__id__];
			if(overlay != null) {
				this._root.addChild(overlay);
			}
			this._root.addChild(popUp);
		}
		return this._root;
	}
	,addPopUp: function(popUp,isModal,isCentered,customOverlayFactory) {
		if(isCentered == null) {
			isCentered = true;
		}
		if(isModal == null) {
			isModal = true;
		}
		var index = this.popUps.indexOf(popUp);
		if(index != -1) {
			this.cleanupOverlay(popUp);
			this.popUps.splice(index,1);
		}
		if(isModal) {
			if(customOverlayFactory == null) {
				customOverlayFactory = this._overlayFactory;
			}
			if(customOverlayFactory == null) {
				customOverlayFactory = feathers_core_DefaultPopUpManager.defaultOverlayFactory;
			}
			var overlay = customOverlayFactory();
			var stage = this._root.stage;
			var stageTopLeft = this._root.globalToLocal(new openfl_geom_Point());
			var stageBottomRight = this._root.globalToLocal(new openfl_geom_Point(stage.stageWidth,stage.stageHeight));
			overlay.set_x(stageTopLeft.x);
			overlay.set_y(stageTopLeft.y);
			overlay.set_width(stageBottomRight.x - stageTopLeft.x);
			overlay.set_height(stageBottomRight.y - stageTopLeft.y);
			this._root.addChild(overlay);
			this._popUpToOverlay.set(popUp,overlay);
		}
		this.popUps.push(popUp);
		var result = this._root.addChild(popUp);
		if(popUp.parent == null) {
			this.cleanupOverlay(popUp);
			HxOverrides.remove(this.popUps,popUp);
			return null;
		}
		popUp.addEventListener("removedFromStage",$bind(this,this.defaultPopUpManager_popUp_removedFromStageHandler));
		if(this.popUps.length == 1) {
			this._root.stage.addEventListener("resize",$bind(this,this.defaultPopUpManager_stage_resizeHandler),false,0,true);
		}
		if(isCentered) {
			if(js_Boot.__implements(popUp,feathers_core_IMeasureObject)) {
				var measurePopUp = js_Boot.__cast(popUp , feathers_core_IMeasureObject);
				measurePopUp.addEventListener("resize",$bind(this,this.defaultPopUpManager_popUp_resizeHandler));
			}
			this._centeredPopUps.push(popUp);
			this.centerPopUp(popUp);
		}
		return result;
	}
	,centerPopUp: function(popUp) {
		if(js_Boot.__implements(popUp,feathers_core_IValidating)) {
			(js_Boot.__cast(popUp , feathers_core_IValidating)).validateNow();
		}
		var stage = this._root.stage;
		var stageTopLeft = this._root.globalToLocal(new openfl_geom_Point());
		var stageBottomRight = this._root.globalToLocal(new openfl_geom_Point(stage.stageWidth,stage.stageHeight));
		popUp.set_x(stageTopLeft.x + (stageBottomRight.x - stageTopLeft.x - popUp.get_width()) / 2.0);
		popUp.set_y(stageTopLeft.y + (stageBottomRight.y - stageTopLeft.y - popUp.get_height()) / 2.0);
	}
	,cleanupOverlay: function(popUp) {
		var overlay = this._popUpToOverlay.h[popUp.__id__];
		if(overlay == null) {
			return;
		}
		this._root.removeChild(overlay);
		this._popUpToOverlay.remove(popUp);
	}
	,defaultPopUpManager_popUp_removedFromStageHandler: function(event) {
		if(this._ignoreRemoval) {
			return;
		}
		var popUp = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		popUp.removeEventListener("removedFromStage",$bind(this,this.defaultPopUpManager_popUp_removedFromStageHandler));
		HxOverrides.remove(this.popUps,popUp);
		this.cleanupOverlay(popUp);
		if(this.popUps.length == 0) {
			this._root.stage.removeEventListener("resize",$bind(this,this.defaultPopUpManager_stage_resizeHandler));
		}
	}
	,defaultPopUpManager_popUp_resizeHandler: function(event) {
		var popUp = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		this.centerPopUp(popUp);
	}
	,defaultPopUpManager_stage_resizeHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		var stageTopLeft = this._root.globalToLocal(new openfl_geom_Point());
		var stageBottomRight = this._root.globalToLocal(new openfl_geom_Point(stage.stageWidth,stage.stageHeight));
		var _g = 0;
		var _g1 = this.popUps;
		while(_g < _g1.length) {
			var popUp = _g1[_g];
			++_g;
			var overlay = this._popUpToOverlay.h[popUp.__id__];
			if(overlay != null) {
				overlay.set_x(stageTopLeft.x);
				overlay.set_y(stageTopLeft.y);
				overlay.set_width(stageBottomRight.x - stageTopLeft.x);
				overlay.set_height(stageBottomRight.y - stageTopLeft.y);
			}
		}
		var _g = 0;
		var _g1 = this._centeredPopUps;
		while(_g < _g1.length) {
			var popUp = _g1[_g];
			++_g;
			this.centerPopUp(popUp);
		}
	}
	,__class__: feathers_core_DefaultPopUpManager
	,__properties__: {set_root:"set_root",get_root:"get_root"}
};
var feathers_core__$FeathersControl_StyleDefinition = $hxEnums["feathers.core._FeathersControl.StyleDefinition"] = { __ename__:"feathers.core._FeathersControl.StyleDefinition",__constructs__:null
	,Name: ($_=function(name) { return {_hx_index:0,name:name,__enum__:"feathers.core._FeathersControl.StyleDefinition",toString:$estr}; },$_._hx_name="Name",$_.__params__ = ["name"],$_)
	,NameAndState: ($_=function(name,state) { return {_hx_index:1,name:name,state:state,__enum__:"feathers.core._FeathersControl.StyleDefinition",toString:$estr}; },$_._hx_name="NameAndState",$_.__params__ = ["name","state"],$_)
};
feathers_core__$FeathersControl_StyleDefinition.__constructs__ = [feathers_core__$FeathersControl_StyleDefinition.Name,feathers_core__$FeathersControl_StyleDefinition.NameAndState];
var feathers_core_IFocusManager = function() { };
$hxClasses["feathers.core.IFocusManager"] = feathers_core_IFocusManager;
feathers_core_IFocusManager.__name__ = "feathers.core.IFocusManager";
feathers_core_IFocusManager.__isInterface__ = true;
feathers_core_IFocusManager.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_core_IFocusManager.prototype = {
	__class__: feathers_core_IFocusManager
	,__properties__: {get_showFocusIndicator:"get_showFocusIndicator",get_focusPane:"get_focusPane",set_focus:"set_focus",get_focus:"get_focus"}
};
var feathers_core_IStateObserver = function() { };
$hxClasses["feathers.core.IStateObserver"] = feathers_core_IStateObserver;
feathers_core_IStateObserver.__name__ = "feathers.core.IStateObserver";
feathers_core_IStateObserver.__isInterface__ = true;
feathers_core_IStateObserver.prototype = {
	__class__: feathers_core_IStateObserver
	,__properties__: {set_stateContext:"set_stateContext"}
};
var feathers_core_PopUpManager = function() { };
$hxClasses["feathers.core.PopUpManager"] = feathers_core_PopUpManager;
feathers_core_PopUpManager.__name__ = "feathers.core.PopUpManager";
feathers_core_PopUpManager.forStage = function(stage) {
	if(stage == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("PopUpManager stage argument must not be null."));
	}
	var popUpManager = feathers_core_PopUpManager.stageToManager.h[stage.__id__];
	if(popUpManager == null) {
		var factory = feathers_core_PopUpManager.popUpManagerFactory;
		if(factory == null) {
			factory = feathers_core_PopUpManager.defaultPopUpManagerFactory;
		}
		popUpManager = factory(stage);
		feathers_core_PopUpManager.stageToManager.set(stage,popUpManager);
	}
	return popUpManager;
};
feathers_core_PopUpManager.addPopUp = function(popUp,parent,isModal,isCentered,customOverlayFactory) {
	if(isCentered == null) {
		isCentered = true;
	}
	if(isModal == null) {
		isModal = true;
	}
	if(parent == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("The pop-up's parent must not be null."));
	}
	var stage = parent.stage;
	if(stage == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("The stage property of a pop-up's parent must not be null."));
	}
	var popUpManager = feathers_core_PopUpManager.forStage(stage);
	return popUpManager.addPopUp(popUp,isModal,isCentered,customOverlayFactory);
};
feathers_core_PopUpManager.defaultPopUpManagerFactory = function(stage) {
	return new feathers_core_DefaultPopUpManager(stage);
};
var feathers_core_ValidationQueue = function(stage) {
	this._validating = false;
	this._queue = [];
	this._stage = null;
	this._stage = stage;
	this._stage.addEventListener("render",$bind(this,this.validationQueue_stage_renderHandler),false,-1000,true);
};
$hxClasses["feathers.core.ValidationQueue"] = feathers_core_ValidationQueue;
feathers_core_ValidationQueue.__name__ = "feathers.core.ValidationQueue";
feathers_core_ValidationQueue.forStage = function(stage) {
	if(stage == null) {
		return null;
	}
	if(feathers_core_ValidationQueue.STAGE_TO_VALIDATION_QUEUE.h.__keys__[stage.__id__] == null) {
		feathers_core_ValidationQueue.STAGE_TO_VALIDATION_QUEUE.set(stage,new feathers_core_ValidationQueue(stage));
	}
	return feathers_core_ValidationQueue.STAGE_TO_VALIDATION_QUEUE.h[stage.__id__];
};
feathers_core_ValidationQueue.prototype = {
	addControl: function(control) {
		if(this._queue.indexOf(control) != -1) {
			return;
		}
		var queueLength = this._queue.length;
		if(this._validating) {
			var depth = control.get_depth();
			var i = queueLength - 1;
			while(i >= 0) {
				var otherControl = this._queue[i];
				var otherDepth = otherControl.get_depth();
				if(depth >= otherDepth) {
					break;
				}
				--i;
			}
			++i;
			this._queue.splice(i,0,control);
		} else {
			this._queue[queueLength] = control;
			this._stage.invalidate();
		}
	}
	,validateNow: function() {
		if(this._validating) {
			return;
		}
		var queueLength = this._queue.length;
		if(queueLength == 0) {
			return;
		}
		this._validating = true;
		if(queueLength > 1) {
			this._queue.sort(function(first,second) {
				var difference = second.get_depth() - first.get_depth();
				if(difference > 0) {
					return -1;
				} else if(difference < 0) {
					return 1;
				}
				return 0;
			});
		}
		while(this._queue.length > 0) {
			var item = this._queue.shift();
			if(item.get_depth() < 0) {
				continue;
			}
			item.validateNow();
		}
		this._validating = false;
	}
	,validationQueue_stage_renderHandler: function(event) {
		this.validateNow();
	}
	,__class__: feathers_core_ValidationQueue
};
var openfl_utils_IExternalizable = function() { };
$hxClasses["openfl.utils.IExternalizable"] = openfl_utils_IExternalizable;
openfl_utils_IExternalizable.__name__ = "openfl.utils.IExternalizable";
openfl_utils_IExternalizable.__isInterface__ = true;
var feathers_data_IFlatCollection = function() { };
$hxClasses["feathers.data.IFlatCollection"] = feathers_data_IFlatCollection;
feathers_data_IFlatCollection.__name__ = "feathers.data.IFlatCollection";
feathers_data_IFlatCollection.__isInterface__ = true;
feathers_data_IFlatCollection.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_data_IFlatCollection.prototype = {
	__class__: feathers_data_IFlatCollection
	,__properties__: {get_length:"get_length",set_filterFunction:"set_filterFunction"}
};
var feathers_data_ArrayCollection = function(array) {
	this._sortCompareFunction = null;
	this._filterFunction = null;
	this._pendingRefresh = false;
	this._array = null;
	this._filterAndSortData = null;
	openfl_events_EventDispatcher.call(this);
	if(array == null) {
		array = [];
	}
	this.set_array(array);
};
$hxClasses["feathers.data.ArrayCollection"] = feathers_data_ArrayCollection;
feathers_data_ArrayCollection.__name__ = "feathers.data.ArrayCollection";
feathers_data_ArrayCollection.__interfaces__ = [openfl_utils_IExternalizable,feathers_data_IFlatCollection];
feathers_data_ArrayCollection.__super__ = openfl_events_EventDispatcher;
feathers_data_ArrayCollection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	set_array: function(value) {
		if(this._array == value) {
			return this._array;
		}
		if(value == null) {
			value = [];
		}
		this._array = value;
		feathers_events_FlatCollectionEvent.dispatch(this,"reset",-1);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._array;
	}
	,get_length: function() {
		if(this._pendingRefresh) {
			this.refreshFilterAndSort();
		}
		if(this._filterAndSortData != null) {
			return this._filterAndSortData.length;
		}
		return this._array.length;
	}
	,set_filterFunction: function(value) {
		if(this._filterFunction == value) {
			return this._filterFunction;
		}
		this._filterFunction = value;
		this._pendingRefresh = true;
		feathers_events_FlatCollectionEvent.dispatch(this,"filterChange",-1);
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._filterFunction;
	}
	,get: function(index) {
		if(this._pendingRefresh) {
			this.refreshFilterAndSort();
		}
		if(index < 0 || index >= this.get_length()) {
			throw haxe_Exception.thrown(new openfl_errors_RangeError("Failed to get item at index " + index + ". Expected a value between 0 and " + (this.get_length() - 1) + "."));
		}
		if(this._filterAndSortData != null) {
			return this._filterAndSortData[index];
		}
		return this._array[index];
	}
	,indexOf: function(item) {
		if(this._pendingRefresh) {
			this.refreshFilterAndSort();
		}
		if(this._filterAndSortData != null) {
			return this._filterAndSortData.indexOf(item);
		}
		return this._array.indexOf(item);
	}
	,iterator: function() {
		if(this._pendingRefresh) {
			this.refreshFilterAndSort();
		}
		if(this._filterAndSortData != null) {
			return new haxe_iterators_ArrayIterator(this._filterAndSortData);
		}
		return new haxe_iterators_ArrayIterator(this._array);
	}
	,refresh: function() {
		if(this._filterFunction == null && this._sortCompareFunction == null) {
			return;
		}
		this._pendingRefresh = true;
		if(this._filterFunction != null) {
			feathers_events_FlatCollectionEvent.dispatch(this,"filterChange",-1);
		}
		if(this._sortCompareFunction != null) {
			feathers_events_FlatCollectionEvent.dispatch(this,"sortChange",-1);
		}
		feathers_events_FeathersEvent.dispatch(this,"change");
	}
	,refreshFilterAndSort: function() {
		this._pendingRefresh = false;
		if(this._filterFunction != null) {
			var result = this._filterAndSortData;
			if(result != null) {
				result.length = 0;
			} else {
				result = [];
			}
			var _g = 0;
			var _g1 = this._array.length;
			while(_g < _g1) {
				var i = _g++;
				var item = this._array[i];
				if(this._filterFunction(item)) {
					result.push(item);
				}
			}
			this._filterAndSortData = result;
		} else if(this._sortCompareFunction != null) {
			var result = this._filterAndSortData;
			if(result != null) {
				result.length = this._array.length;
				var _g = 0;
				var _g1 = this._array.length;
				while(_g < _g1) {
					var i = _g++;
					result[i] = this._array[i];
				}
			} else {
				result = this._array.slice(0);
			}
			this._filterAndSortData = result;
		} else {
			this._filterAndSortData = null;
		}
		if(this._sortCompareFunction != null) {
			this._filterAndSortData.sort(this._sortCompareFunction);
		}
	}
	,__class__: feathers_data_ArrayCollection
	,__properties__: {set_filterFunction:"set_filterFunction",get_length:"get_length",set_array:"set_array"}
});
var feathers_events_FeathersEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["feathers.events.FeathersEvent"] = feathers_events_FeathersEvent;
feathers_events_FeathersEvent.__name__ = "feathers.events.FeathersEvent";
feathers_events_FeathersEvent.dispatch = function(dispatcher,type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	var event = feathers_events_FeathersEvent._pool.get();
	event.type = type;
	event.bubbles = bubbles;
	event.cancelable = cancelable;
	var result = dispatcher.dispatchEvent(event);
	feathers_events_FeathersEvent._pool.release(event);
	return result;
};
feathers_events_FeathersEvent.__super__ = openfl_events_Event;
feathers_events_FeathersEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_FeathersEvent
});
var feathers_events_FlatCollectionEvent = function(type,index,addedItem,removedItem,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.index = index;
	this.addedItem = addedItem;
	this.removedItem = removedItem;
};
$hxClasses["feathers.events.FlatCollectionEvent"] = feathers_events_FlatCollectionEvent;
feathers_events_FlatCollectionEvent.__name__ = "feathers.events.FlatCollectionEvent";
feathers_events_FlatCollectionEvent.dispatch = function(dispatcher,type,index,addedItem,removedItem,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	var event = feathers_events_FlatCollectionEvent._pool.get();
	event.type = type;
	event.index = index;
	event.addedItem = addedItem;
	event.removedItem = removedItem;
	event.bubbles = bubbles;
	event.cancelable = cancelable;
	var result = dispatcher.dispatchEvent(event);
	feathers_events_FlatCollectionEvent._pool.release(event);
	return result;
};
feathers_events_FlatCollectionEvent.__super__ = openfl_events_Event;
feathers_events_FlatCollectionEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_FlatCollectionEvent
});
var feathers_events_ListViewEvent = function(type,state) {
	openfl_events_Event.call(this,type,false,false);
	this.state = state;
};
$hxClasses["feathers.events.ListViewEvent"] = feathers_events_ListViewEvent;
feathers_events_ListViewEvent.__name__ = "feathers.events.ListViewEvent";
feathers_events_ListViewEvent.dispatch = function(dispatcher,type,state) {
	var event = feathers_events_ListViewEvent._pool.get();
	event.type = type;
	event.state = state;
	var result = dispatcher.dispatchEvent(event);
	feathers_events_ListViewEvent._pool.release(event);
	return result;
};
feathers_events_ListViewEvent.__super__ = openfl_events_Event;
feathers_events_ListViewEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_ListViewEvent
});
var feathers_events_ScrollEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["feathers.events.ScrollEvent"] = feathers_events_ScrollEvent;
feathers_events_ScrollEvent.__name__ = "feathers.events.ScrollEvent";
feathers_events_ScrollEvent.dispatch = function(dispatcher,type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	var event = feathers_events_ScrollEvent._pool.get();
	event.type = type;
	event.bubbles = bubbles;
	event.cancelable = cancelable;
	var result = dispatcher.dispatchEvent(event);
	feathers_events_ScrollEvent._pool.release(event);
	return result;
};
feathers_events_ScrollEvent.__super__ = openfl_events_Event;
feathers_events_ScrollEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_ScrollEvent
});
var feathers_events_StyleProviderEvent = function(type,affectsTarget) {
	openfl_events_Event.call(this,type);
	this.affectsTarget = affectsTarget != null ? affectsTarget : feathers_events_StyleProviderEvent.defaultAffectsTarget;
};
$hxClasses["feathers.events.StyleProviderEvent"] = feathers_events_StyleProviderEvent;
feathers_events_StyleProviderEvent.__name__ = "feathers.events.StyleProviderEvent";
feathers_events_StyleProviderEvent.dispatch = function(dispatcher,type,affectsTarget) {
	var event = feathers_events_StyleProviderEvent._pool.get();
	event.type = type;
	event.affectsTarget = affectsTarget != null ? affectsTarget : feathers_events_StyleProviderEvent.defaultAffectsTarget;
	var result = dispatcher.dispatchEvent(event);
	feathers_events_StyleProviderEvent._pool.release(event);
	return result;
};
feathers_events_StyleProviderEvent.defaultAffectsTarget = function(value) {
	return true;
};
feathers_events_StyleProviderEvent.__super__ = openfl_events_Event;
feathers_events_StyleProviderEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_StyleProviderEvent
});
var feathers_events_TriggerEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey) {
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 1.0;
	}
	if(sizeY == null) {
		sizeY = 0.0;
	}
	if(sizeX == null) {
		sizeX = 0.0;
	}
	if(localY == null) {
		localY = 0.0;
	}
	if(localX == null) {
		localX = 0.0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.stageX = NaN;
	this.stageY = NaN;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
};
$hxClasses["feathers.events.TriggerEvent"] = feathers_events_TriggerEvent;
feathers_events_TriggerEvent.__name__ = "feathers.events.TriggerEvent";
feathers_events_TriggerEvent.dispatchFromMouseEvent = function(dispatcher,mouseEvent) {
	var event = feathers_events_TriggerEvent._pool.get();
	event = feathers_events_TriggerEvent.fromMouseEvent(mouseEvent,event);
	var result = dispatcher.dispatchEvent(event);
	feathers_events_TriggerEvent._pool.release(event);
	return result;
};
feathers_events_TriggerEvent.dispatchFromTouchEvent = function(dispatcher,touchEvent) {
	var event = feathers_events_TriggerEvent._pool.get();
	event = feathers_events_TriggerEvent.fromTouchEvent(touchEvent,event);
	var result = dispatcher.dispatchEvent(event);
	feathers_events_TriggerEvent._pool.release(event);
	return result;
};
feathers_events_TriggerEvent.fromMouseEvent = function(event,existing) {
	if(event.type != "click") {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("TriggerEvent.fromMouseEvent() requires MouseEvent.CLICK"));
	}
	if(existing != null) {
		existing.type = "trigger";
		existing.bubbles = false;
		existing.cancelable = event.cancelable;
		existing.touchPointID = -1;
		existing.isPrimaryTouchPoint = false;
		existing.localX = event.localX;
		existing.localY = event.localY;
		existing.stageX = event.stageX;
		existing.stageY = event.stageY;
		existing.sizeX = 0.0;
		existing.sizeY = 0.0;
		existing.pressure = 1.0;
		existing.relatedObject = event.relatedObject;
		existing.ctrlKey = event.ctrlKey;
		existing.altKey = event.altKey;
		existing.shiftKey = event.shiftKey;
		existing.commandKey = event.commandKey;
		return existing;
	}
	var result = new feathers_events_TriggerEvent("trigger",false,event.cancelable,-1,false,event.localX,event.localY,0.0,0.0,1.0,event.relatedObject,event.ctrlKey,event.altKey,event.shiftKey,Object.prototype.hasOwnProperty.call(event,"commandKey") && Reflect.field(event,"commandKey"));
	result.stageX = event.stageX;
	result.stageY = event.stageY;
	return result;
};
feathers_events_TriggerEvent.fromTouchEvent = function(event,existing) {
	if(event.type != "touchTap") {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("TriggerEvent.fromTouchEvent() requires TouchEvent.TOUCH_TAP"));
	}
	if(existing != null) {
		existing.type = "trigger";
		existing.bubbles = false;
		existing.cancelable = event.cancelable;
		existing.touchPointID = event.touchPointID;
		existing.isPrimaryTouchPoint = event.isPrimaryTouchPoint;
		existing.localX = event.localX;
		existing.localY = event.localY;
		existing.stageX = event.stageX;
		existing.stageY = event.stageY;
		existing.sizeX = event.sizeX;
		existing.sizeY = event.sizeY;
		existing.pressure = event.pressure;
		existing.relatedObject = event.relatedObject;
		existing.ctrlKey = event.ctrlKey;
		existing.altKey = event.altKey;
		existing.shiftKey = event.shiftKey;
		existing.commandKey = event.commandKey;
		return existing;
	}
	var result = new feathers_events_TriggerEvent("trigger",false,event.cancelable,event.touchPointID,event.isPrimaryTouchPoint,event.localX,event.localY,event.sizeX,event.sizeY,event.pressure,event.relatedObject,event.ctrlKey,event.altKey,event.shiftKey,Object.prototype.hasOwnProperty.call(event,"commandKey") && Reflect.field(event,"commandKey"));
	result.stageX = event.stageX;
	result.stageY = event.stageY;
	return result;
};
feathers_events_TriggerEvent.__super__ = openfl_events_Event;
feathers_events_TriggerEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: feathers_events_TriggerEvent
});
var feathers_graphics_CreateGradientBoxMatrix = {};
feathers_graphics_CreateGradientBoxMatrix.fromRadians = function(radians) {
	return function(defaultWidth,defaultHeight,defaultRadians,defaultTx,defaultTy) {
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(defaultWidth,defaultHeight,radians,defaultTx,defaultTy);
		return matrix;
	};
};
var feathers_graphics_FillStyle = $hxEnums["feathers.graphics.FillStyle"] = { __ename__:"feathers.graphics.FillStyle",__constructs__:null
	,SolidColor: ($_=function(color,alpha) { return {_hx_index:0,color:color,alpha:alpha,__enum__:"feathers.graphics.FillStyle",toString:$estr}; },$_._hx_name="SolidColor",$_.__params__ = ["color","alpha"],$_)
	,Bitmap: ($_=function(bitmapData,matrix,repeat,smoothing) { return {_hx_index:1,bitmapData:bitmapData,matrix:matrix,repeat:repeat,smoothing:smoothing,__enum__:"feathers.graphics.FillStyle",toString:$estr}; },$_._hx_name="Bitmap",$_.__params__ = ["bitmapData","matrix","repeat","smoothing"],$_)
	,Gradient: ($_=function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { return {_hx_index:2,type:type,colors:colors,alphas:alphas,ratios:ratios,matrix:matrix,spreadMethod:spreadMethod,interpolationMethod:interpolationMethod,focalPointRatio:focalPointRatio,__enum__:"feathers.graphics.FillStyle",toString:$estr}; },$_._hx_name="Gradient",$_.__params__ = ["type","colors","alphas","ratios","matrix","spreadMethod","interpolationMethod","focalPointRatio"],$_)
	,None: {_hx_name:"None",_hx_index:3,__enum__:"feathers.graphics.FillStyle",toString:$estr}
};
feathers_graphics_FillStyle.__constructs__ = [feathers_graphics_FillStyle.SolidColor,feathers_graphics_FillStyle.Bitmap,feathers_graphics_FillStyle.Gradient,feathers_graphics_FillStyle.None];
var feathers_graphics_LineStyle = $hxEnums["feathers.graphics.LineStyle"] = { __ename__:"feathers.graphics.LineStyle",__constructs__:null
	,SolidColor: ($_=function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) { return {_hx_index:0,thickness:thickness,color:color,alpha:alpha,pixelHinting:pixelHinting,scaleMode:scaleMode,caps:caps,joints:joints,miterLimit:miterLimit,__enum__:"feathers.graphics.LineStyle",toString:$estr}; },$_._hx_name="SolidColor",$_.__params__ = ["thickness","color","alpha","pixelHinting","scaleMode","caps","joints","miterLimit"],$_)
	,Bitmap: ($_=function(thickness,bitmapData,matrix,repeat,smooth) { return {_hx_index:1,thickness:thickness,bitmapData:bitmapData,matrix:matrix,repeat:repeat,smooth:smooth,__enum__:"feathers.graphics.LineStyle",toString:$estr}; },$_._hx_name="Bitmap",$_.__params__ = ["thickness","bitmapData","matrix","repeat","smooth"],$_)
	,Gradient: ($_=function(thickness,type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) { return {_hx_index:2,thickness:thickness,type:type,colors:colors,alphas:alphas,ratios:ratios,matrix:matrix,spreadMethod:spreadMethod,interpolationMethod:interpolationMethod,focalPointRatio:focalPointRatio,__enum__:"feathers.graphics.LineStyle",toString:$estr}; },$_._hx_name="Gradient",$_.__params__ = ["thickness","type","colors","alphas","ratios","matrix","spreadMethod","interpolationMethod","focalPointRatio"],$_)
	,None: {_hx_name:"None",_hx_index:3,__enum__:"feathers.graphics.LineStyle",toString:$estr}
};
feathers_graphics_LineStyle.__constructs__ = [feathers_graphics_LineStyle.SolidColor,feathers_graphics_LineStyle.Bitmap,feathers_graphics_LineStyle.Gradient,feathers_graphics_LineStyle.None];
var feathers_layout_AutoSizeMode = $hxEnums["feathers.layout.AutoSizeMode"] = { __ename__:"feathers.layout.AutoSizeMode",__constructs__:null
	,STAGE: {_hx_name:"STAGE",_hx_index:0,__enum__:"feathers.layout.AutoSizeMode",toString:$estr}
	,CONTENT: {_hx_name:"CONTENT",_hx_index:1,__enum__:"feathers.layout.AutoSizeMode",toString:$estr}
};
feathers_layout_AutoSizeMode.__constructs__ = [feathers_layout_AutoSizeMode.STAGE,feathers_layout_AutoSizeMode.CONTENT];
var feathers_layout_Direction = $hxEnums["feathers.layout.Direction"] = { __ename__:"feathers.layout.Direction",__constructs__:null
	,VERTICAL: {_hx_name:"VERTICAL",_hx_index:0,__enum__:"feathers.layout.Direction",toString:$estr}
	,HORIZONTAL: {_hx_name:"HORIZONTAL",_hx_index:1,__enum__:"feathers.layout.Direction",toString:$estr}
	,NONE: {_hx_name:"NONE",_hx_index:2,__enum__:"feathers.layout.Direction",toString:$estr}
};
feathers_layout_Direction.__constructs__ = [feathers_layout_Direction.VERTICAL,feathers_layout_Direction.HORIZONTAL,feathers_layout_Direction.NONE];
var feathers_layout_HorizontalAlign = $hxEnums["feathers.layout.HorizontalAlign"] = { __ename__:"feathers.layout.HorizontalAlign",__constructs__:null
	,LEFT: {_hx_name:"LEFT",_hx_index:0,__enum__:"feathers.layout.HorizontalAlign",toString:$estr}
	,CENTER: {_hx_name:"CENTER",_hx_index:1,__enum__:"feathers.layout.HorizontalAlign",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:2,__enum__:"feathers.layout.HorizontalAlign",toString:$estr}
	,JUSTIFY: {_hx_name:"JUSTIFY",_hx_index:3,__enum__:"feathers.layout.HorizontalAlign",toString:$estr}
};
feathers_layout_HorizontalAlign.__constructs__ = [feathers_layout_HorizontalAlign.LEFT,feathers_layout_HorizontalAlign.CENTER,feathers_layout_HorizontalAlign.RIGHT,feathers_layout_HorizontalAlign.JUSTIFY];
var feathers_layout_ILayout = function() { };
$hxClasses["feathers.layout.ILayout"] = feathers_layout_ILayout;
feathers_layout_ILayout.__name__ = "feathers.layout.ILayout";
feathers_layout_ILayout.__isInterface__ = true;
feathers_layout_ILayout.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_layout_ILayout.prototype = {
	__class__: feathers_layout_ILayout
};
var feathers_layout_HorizontalLayout = function() {
	this._percentHeightResetEnabled = false;
	this._percentWidthResetEnabled = false;
	this._justifyResetEnabled = false;
	this._verticalAlign = feathers_layout_VerticalAlign.TOP;
	this._horizontalAlign = feathers_layout_HorizontalAlign.LEFT;
	this._minGap = 0.0;
	this._gap = 0.0;
	this._paddingLeft = 0.0;
	this._paddingBottom = 0.0;
	this._paddingRight = 0.0;
	this._paddingTop = 0.0;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["feathers.layout.HorizontalLayout"] = feathers_layout_HorizontalLayout;
feathers_layout_HorizontalLayout.__name__ = "feathers.layout.HorizontalLayout";
feathers_layout_HorizontalLayout.__interfaces__ = [feathers_layout_ILayout];
feathers_layout_HorizontalLayout.__super__ = openfl_events_EventDispatcher;
feathers_layout_HorizontalLayout.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	set_paddingTop: function(value) {
		if(this._paddingTop == value) {
			return this._paddingTop;
		}
		this._paddingTop = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._paddingTop;
	}
	,set_paddingRight: function(value) {
		if(this._paddingRight == value) {
			return this._paddingRight;
		}
		this._paddingRight = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._paddingRight;
	}
	,set_paddingBottom: function(value) {
		if(this._paddingBottom == value) {
			return this._paddingBottom;
		}
		this._paddingBottom = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._paddingBottom;
	}
	,set_paddingLeft: function(value) {
		if(this._paddingLeft == value) {
			return this._paddingLeft;
		}
		this._paddingLeft = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._paddingLeft;
	}
	,set_gap: function(value) {
		if(this._gap == value) {
			return this._gap;
		}
		this._gap = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._gap;
	}
	,set_horizontalAlign: function(value) {
		if(this._horizontalAlign == value) {
			return this._horizontalAlign;
		}
		this._horizontalAlign = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._horizontalAlign;
	}
	,set_verticalAlign: function(value) {
		if(this._verticalAlign == value) {
			return this._verticalAlign;
		}
		this._verticalAlign = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._verticalAlign;
	}
	,layout: function(items,measurements,result) {
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
		}
		var isJustified = this._verticalAlign == feathers_layout_VerticalAlign.JUSTIFY;
		var explicitContentWidth = measurements.width;
		if(explicitContentWidth != null) {
			explicitContentWidth -= this._paddingLeft + this._paddingRight;
		}
		var explicitContentHeight = measurements.height;
		if(explicitContentHeight != null) {
			explicitContentHeight -= this._paddingTop + this._paddingBottom;
		}
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var percentWidth = null;
			var percentHeight = null;
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				var layoutItem = js_Boot.__cast(item , feathers_layout_ILayoutObject);
				if(!layoutItem.get_includeInLayout()) {
					continue;
				}
				var value = layoutItem.get_layoutData();
				var layoutData = ((value) instanceof feathers_layout_HorizontalLayoutData) ? value : null;
				if(layoutData != null) {
					percentWidth = layoutData.get_percentWidth();
					percentHeight = layoutData.get_percentHeight();
				}
			}
			if(isJustified) {
				if(explicitContentHeight != null) {
					item.set_height(explicitContentHeight);
				} else if(this._justifyResetEnabled && js_Boot.__implements(item,feathers_core_IMeasureObject)) {
					(js_Boot.__cast(item , feathers_core_IMeasureObject)).resetHeight();
				}
			} else if(explicitContentHeight != null) {
				if(percentHeight != null) {
					if(percentHeight < 0.0) {
						percentHeight = 0.0;
					} else if(percentHeight > 100.0) {
						percentHeight = 100.0;
					}
					item.set_height(explicitContentHeight * (percentHeight / 100.0));
				}
			} else if(percentHeight != null && this._percentHeightResetEnabled && js_Boot.__implements(item,feathers_core_IMeasureObject)) {
				(js_Boot.__cast(item , feathers_core_IMeasureObject)).resetHeight();
			}
			if(percentWidth != null && this._percentWidthResetEnabled && explicitContentWidth == null && js_Boot.__implements(item,feathers_core_IMeasureObject)) {
				(js_Boot.__cast(item , feathers_core_IMeasureObject)).resetWidth();
			}
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			if(isJustified && explicitContentHeight == null && measurements.maxHeight != null) {
				var maxExplicitContentHeight = measurements.maxHeight - this._paddingTop - this._paddingBottom;
				if(item.get_height() > maxExplicitContentHeight) {
					item.set_height(maxExplicitContentHeight);
					if(js_Boot.__implements(item,feathers_core_IValidating)) {
						(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
					}
				}
			}
		}
		this.applyPercentWidth(items,measurements.width,measurements.minWidth,measurements.maxWidth,adjustedGap);
		var contentWidth = this._paddingLeft;
		var contentHeight = 0.0;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var layoutObject = null;
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				layoutObject = js_Boot.__cast(item , feathers_layout_ILayoutObject);
				if(!layoutObject.get_includeInLayout()) {
					continue;
				}
			}
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			if(contentHeight < item.get_height()) {
				contentHeight = item.get_height();
			}
			item.set_x(contentWidth);
			contentWidth += item.get_width() + adjustedGap;
		}
		var maxItemHeight = contentHeight;
		contentWidth += this._paddingRight;
		if(items.length > 0) {
			contentWidth -= adjustedGap;
		}
		contentHeight += this._paddingTop + this._paddingBottom;
		var viewPortWidth = contentWidth;
		if(measurements.width != null) {
			viewPortWidth = measurements.width;
		} else if(measurements.minWidth != null && viewPortWidth < measurements.minWidth) {
			viewPortWidth = measurements.minWidth;
		} else if(measurements.maxWidth != null && viewPortWidth > measurements.maxWidth) {
			viewPortWidth = measurements.maxWidth;
		}
		var viewPortHeight = contentHeight;
		if(measurements.height != null) {
			viewPortHeight = measurements.height;
		} else if(measurements.minHeight != null && viewPortHeight < measurements.minHeight) {
			viewPortHeight = measurements.minHeight;
		} else if(measurements.maxHeight != null && viewPortHeight > measurements.maxHeight) {
			viewPortHeight = measurements.maxHeight;
		}
		this.applyPercentHeight(items,viewPortHeight);
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			var layoutObject = null;
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				layoutObject = js_Boot.__cast(item , feathers_layout_ILayoutObject);
				if(!layoutObject.get_includeInLayout()) {
					continue;
				}
			}
			switch(this._verticalAlign._hx_index) {
			case 0:
				item.set_y(this._paddingTop);
				break;
			case 1:
				item.set_y(Math.max(this._paddingTop,this._paddingTop + (viewPortHeight - this._paddingTop - this._paddingBottom - item.get_height()) / 2.0));
				break;
			case 2:
				item.set_y(Math.max(this._paddingTop,this._paddingTop + (viewPortHeight - this._paddingTop - this._paddingBottom) - item.get_height()));
				break;
			case 3:
				item.set_y(this._paddingTop);
				item.set_height(viewPortHeight - this._paddingTop - this._paddingBottom);
				break;
			}
		}
		var contentWidth1 = contentWidth - this._paddingLeft - this._paddingRight;
		var alignOffset = 0.0;
		var gapOffset = 0.0;
		var maxAlignmentWidth = viewPortWidth - this._paddingLeft - this._paddingRight;
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
			if(items.length > 1 && maxAlignmentWidth > contentWidth1) {
				adjustedGap += (maxAlignmentWidth - contentWidth1) / (items.length - 1);
			}
			gapOffset = adjustedGap - this._minGap;
		} else {
			switch(this._horizontalAlign._hx_index) {
			case 0:
				alignOffset = 0.0;
				break;
			case 1:
				alignOffset = (maxAlignmentWidth - contentWidth1) / 2.0;
				break;
			case 2:
				alignOffset = maxAlignmentWidth - contentWidth1;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown horizontal align: " + Std.string(this._horizontalAlign)));
			}
			if(alignOffset < 0.0) {
				alignOffset = 0.0;
			}
		}
		if(!(alignOffset == 0.0 && gapOffset == 0.0)) {
			var totalOffset = alignOffset;
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				var layoutObject = null;
				if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
					layoutObject = js_Boot.__cast(item , feathers_layout_ILayoutObject);
					if(!layoutObject.get_includeInLayout()) {
						continue;
					}
				}
				item.set_x(Math.max(this._paddingLeft,item.get_x() + totalOffset));
				totalOffset += gapOffset;
			}
		}
		if(contentWidth < viewPortWidth) {
			contentWidth = viewPortWidth;
		}
		if(contentHeight < viewPortHeight) {
			contentHeight = viewPortHeight;
		}
		if(result == null) {
			result = new feathers_layout_LayoutBoundsResult();
		}
		result.contentX = 0.0;
		result.contentY = 0.0;
		result.contentWidth = contentWidth;
		result.contentHeight = contentHeight;
		result.viewPortWidth = viewPortWidth;
		result.viewPortHeight = viewPortHeight;
		return result;
	}
	,applyPercentWidth: function(items,explicitWidth,explicitMinWidth,explicitMaxWidth,adjustedGap) {
		var pendingItems = [];
		var totalMeasuredWidth = 0.0;
		var totalMinWidth = 0.0;
		var totalPercentWidth = 0.0;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				var layoutItem = js_Boot.__cast(item , feathers_layout_ILayoutObject);
				if(!layoutItem.get_includeInLayout()) {
					continue;
				}
				var value = layoutItem.get_layoutData();
				var layoutData = ((value) instanceof feathers_layout_HorizontalLayoutData) ? value : null;
				if(layoutData != null) {
					var percentWidth = layoutData.get_percentWidth();
					if(percentWidth != null) {
						if(percentWidth < 0.0) {
							percentWidth = 0.0;
						}
						if(js_Boot.__implements(layoutItem,feathers_core_IMeasureObject)) {
							var measureItem = js_Boot.__cast(layoutItem , feathers_core_IMeasureObject);
							totalMinWidth += measureItem.get_minWidth();
						}
						totalPercentWidth += percentWidth;
						totalMeasuredWidth += adjustedGap;
						pendingItems.push(layoutItem);
						continue;
					}
				}
			}
			totalMeasuredWidth += item.get_width() + adjustedGap;
		}
		totalMeasuredWidth -= adjustedGap;
		totalMeasuredWidth += this._paddingLeft + this._paddingRight;
		if(totalPercentWidth < 100.0) {
			totalPercentWidth = 100.0;
		}
		var remainingWidth = 0.0;
		if(explicitWidth != null) {
			remainingWidth = explicitWidth;
		} else {
			remainingWidth = totalMeasuredWidth + totalMinWidth;
			if(explicitMinWidth != null && remainingWidth < explicitMinWidth) {
				remainingWidth = explicitMinWidth;
			} else if(explicitMaxWidth != null && remainingWidth > explicitMaxWidth) {
				remainingWidth = explicitMaxWidth;
			}
		}
		remainingWidth -= totalMeasuredWidth;
		if(remainingWidth < 0.0) {
			remainingWidth = 0.0;
		}
		var needsAnotherPass = true;
		while(needsAnotherPass) {
			needsAnotherPass = false;
			var percentToPixels = remainingWidth / totalPercentWidth;
			var _g = 0;
			while(_g < pendingItems.length) {
				var layoutItem = pendingItems[_g];
				++_g;
				var layoutData = js_Boot.__cast(layoutItem.get_layoutData() , feathers_layout_HorizontalLayoutData);
				var percentWidth = layoutData.get_percentWidth();
				if(percentWidth < 0.0) {
					percentWidth = 0.0;
				}
				var itemWidth = percentToPixels * percentWidth;
				if(js_Boot.__implements(layoutItem,feathers_core_IMeasureObject)) {
					var measureItem = js_Boot.__cast(layoutItem , feathers_core_IMeasureObject);
					var itemMinWidth = measureItem.get_explicitMinWidth();
					if(itemMinWidth != null && itemMinWidth > remainingWidth) {
						itemMinWidth = remainingWidth;
					}
					if(itemWidth < itemMinWidth) {
						itemWidth = itemMinWidth;
						remainingWidth -= itemWidth;
						totalPercentWidth -= percentWidth;
						HxOverrides.remove(pendingItems,layoutItem);
						needsAnotherPass = true;
					}
				}
				(js_Boot.__cast(layoutItem , openfl_display_DisplayObject)).set_width(itemWidth);
				if(js_Boot.__implements(layoutItem,feathers_core_IValidating)) {
					(js_Boot.__cast(layoutItem , feathers_core_IValidating)).validateNow();
				}
			}
		}
	}
	,applyPercentHeight: function(items,viewPortHeight) {
		var availableHeight = viewPortHeight - this._paddingTop - this._paddingBottom;
		var _g = 0;
		while(_g < items.length) {
			var item = items[_g];
			++_g;
			if(!js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				continue;
			}
			var layoutItem = js_Boot.__cast(item , feathers_layout_ILayoutObject);
			if(!layoutItem.get_includeInLayout()) {
				continue;
			}
			var value = layoutItem.get_layoutData();
			var layoutData = ((value) instanceof feathers_layout_HorizontalLayoutData) ? value : null;
			if(layoutData == null) {
				continue;
			}
			var percentHeight = layoutData.get_percentHeight();
			if(percentHeight == null) {
				continue;
			}
			if(percentHeight < 0.0) {
				percentHeight = 0.0;
			} else if(percentHeight > 100.0) {
				percentHeight = 100.0;
			}
			var itemHeight = availableHeight * percentHeight / 100.0;
			if(js_Boot.__implements(item,feathers_core_IMeasureObject)) {
				var measureItem = js_Boot.__cast(item , feathers_core_IMeasureObject);
				var itemMinHeight = measureItem.get_explicitMinHeight();
				if(itemMinHeight != null) {
					if(itemMinHeight > availableHeight) {
						itemMinHeight = availableHeight;
					}
					if(itemHeight < itemMinHeight) {
						itemHeight = itemMinHeight;
					}
				}
				var itemMaxHeight = measureItem.get_explicitMaxHeight();
				if(itemMaxHeight != null && itemHeight > itemMaxHeight) {
					itemHeight = itemMaxHeight;
				}
			}
			item.set_height(itemHeight);
		}
	}
	,__class__: feathers_layout_HorizontalLayout
	,__properties__: {set_verticalAlign:"set_verticalAlign",set_horizontalAlign:"set_horizontalAlign",set_gap:"set_gap",set_paddingLeft:"set_paddingLeft",set_paddingBottom:"set_paddingBottom",set_paddingRight:"set_paddingRight",set_paddingTop:"set_paddingTop"}
});
var feathers_layout_ILayoutData = function() { };
$hxClasses["feathers.layout.ILayoutData"] = feathers_layout_ILayoutData;
feathers_layout_ILayoutData.__name__ = "feathers.layout.ILayoutData";
feathers_layout_ILayoutData.__isInterface__ = true;
feathers_layout_ILayoutData.__interfaces__ = [openfl_events_IEventDispatcher];
var feathers_layout_HorizontalLayoutData = function(percentWidth,percentHeight) {
	this._percentHeight = null;
	this._percentWidth = null;
	openfl_events_EventDispatcher.call(this);
	this.set_percentWidth(percentWidth);
	this.set_percentHeight(percentHeight);
};
$hxClasses["feathers.layout.HorizontalLayoutData"] = feathers_layout_HorizontalLayoutData;
feathers_layout_HorizontalLayoutData.__name__ = "feathers.layout.HorizontalLayoutData";
feathers_layout_HorizontalLayoutData.__interfaces__ = [feathers_layout_ILayoutData];
feathers_layout_HorizontalLayoutData.__super__ = openfl_events_EventDispatcher;
feathers_layout_HorizontalLayoutData.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_percentWidth: function() {
		return this._percentWidth;
	}
	,set_percentWidth: function(value) {
		if(this._percentWidth == value) {
			return this._percentWidth;
		}
		this._percentWidth = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._percentWidth;
	}
	,get_percentHeight: function() {
		return this._percentHeight;
	}
	,set_percentHeight: function(value) {
		if(this._percentHeight == value) {
			return this._percentHeight;
		}
		this._percentHeight = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._percentHeight;
	}
	,__class__: feathers_layout_HorizontalLayoutData
	,__properties__: {set_percentHeight:"set_percentHeight",get_percentHeight:"get_percentHeight",set_percentWidth:"set_percentWidth",get_percentWidth:"get_percentWidth"}
});
var feathers_layout_IKeyboardNavigationLayout = function() { };
$hxClasses["feathers.layout.IKeyboardNavigationLayout"] = feathers_layout_IKeyboardNavigationLayout;
feathers_layout_IKeyboardNavigationLayout.__name__ = "feathers.layout.IKeyboardNavigationLayout";
feathers_layout_IKeyboardNavigationLayout.__isInterface__ = true;
feathers_layout_IKeyboardNavigationLayout.__interfaces__ = [feathers_layout_ILayout];
feathers_layout_IKeyboardNavigationLayout.prototype = {
	__class__: feathers_layout_IKeyboardNavigationLayout
};
var feathers_layout_IScrollLayout = function() { };
$hxClasses["feathers.layout.IScrollLayout"] = feathers_layout_IScrollLayout;
feathers_layout_IScrollLayout.__name__ = "feathers.layout.IScrollLayout";
feathers_layout_IScrollLayout.__isInterface__ = true;
feathers_layout_IScrollLayout.__interfaces__ = [feathers_layout_ILayout];
feathers_layout_IScrollLayout.prototype = {
	__class__: feathers_layout_IScrollLayout
	,__properties__: {get_elasticLeft:"get_elasticLeft",get_elasticBottom:"get_elasticBottom",get_elasticRight:"get_elasticRight",get_elasticTop:"get_elasticTop",set_scrollY:"set_scrollY",set_scrollX:"set_scrollX"}
};
var feathers_layout_ISnapLayout = function() { };
$hxClasses["feathers.layout.ISnapLayout"] = feathers_layout_ISnapLayout;
feathers_layout_ISnapLayout.__name__ = "feathers.layout.ISnapLayout";
feathers_layout_ISnapLayout.__isInterface__ = true;
feathers_layout_ISnapLayout.__interfaces__ = [feathers_layout_ILayout];
feathers_layout_ISnapLayout.prototype = {
	__class__: feathers_layout_ISnapLayout
};
var feathers_layout_IVirtualLayout = function() { };
$hxClasses["feathers.layout.IVirtualLayout"] = feathers_layout_IVirtualLayout;
feathers_layout_IVirtualLayout.__name__ = "feathers.layout.IVirtualLayout";
feathers_layout_IVirtualLayout.__isInterface__ = true;
feathers_layout_IVirtualLayout.__interfaces__ = [feathers_layout_IScrollLayout];
feathers_layout_IVirtualLayout.prototype = {
	__class__: feathers_layout_IVirtualLayout
	,__properties__: {set_virtualCache:"set_virtualCache"}
};
var feathers_layout_VirtualLayoutRange = function(start,end) {
	this.start = start;
	this.end = end;
};
$hxClasses["feathers.layout.VirtualLayoutRange"] = feathers_layout_VirtualLayoutRange;
feathers_layout_VirtualLayoutRange.__name__ = "feathers.layout.VirtualLayoutRange";
feathers_layout_VirtualLayoutRange.prototype = {
	__class__: feathers_layout_VirtualLayoutRange
};
var feathers_layout_LayoutBoundsResult = function() {
	this.reset();
};
$hxClasses["feathers.layout.LayoutBoundsResult"] = feathers_layout_LayoutBoundsResult;
feathers_layout_LayoutBoundsResult.__name__ = "feathers.layout.LayoutBoundsResult";
feathers_layout_LayoutBoundsResult.prototype = {
	reset: function() {
		this.contentX = 0.0;
		this.contentY = 0.0;
		this.contentWidth = 0.0;
		this.contentHeight = 0.0;
		this.contentMinWidth = 0.0;
		this.contentMinHeight = 0.0;
		this.contentMaxWidth = 1.0 / 0.0;
		this.contentMaxHeight = 1.0 / 0.0;
		this.viewPortWidth = 0.0;
		this.viewPortHeight = 0.0;
	}
	,__class__: feathers_layout_LayoutBoundsResult
};
var feathers_layout_Measurements = function(target) {
	this.maxHeight = null;
	this.maxWidth = null;
	this.minHeight = null;
	this.minWidth = null;
	this.height = null;
	this.width = null;
	this.save(target);
};
$hxClasses["feathers.layout.Measurements"] = feathers_layout_Measurements;
feathers_layout_Measurements.__name__ = "feathers.layout.Measurements";
feathers_layout_Measurements.prototype = {
	save: function(target) {
		if(target == null) {
			this.width = null;
			this.height = null;
			this.minWidth = null;
			this.minHeight = null;
			this.maxWidth = null;
			this.maxHeight = null;
			return;
		}
		if(js_Boot.__implements(target,feathers_core_IMeasureObject)) {
			var measureTarget = js_Boot.__cast(target , feathers_core_IMeasureObject);
			this.width = measureTarget.get_explicitWidth();
			this.height = measureTarget.get_explicitHeight();
			this.minWidth = measureTarget.get_explicitMinWidth();
			this.minHeight = measureTarget.get_explicitMinHeight();
			this.maxWidth = measureTarget.get_explicitMaxWidth();
			this.maxHeight = measureTarget.get_explicitMaxHeight();
			return;
		}
		this.width = target.get_width();
		this.height = target.get_height();
		this.minWidth = this.width;
		this.minHeight = this.height;
		this.maxWidth = this.width;
		this.maxHeight = this.height;
	}
	,restore: function(target) {
		if(js_Boot.__implements(target,feathers_core_IMeasureObject)) {
			var measureTarget = js_Boot.__cast(target , feathers_core_IMeasureObject);
			if(this.width == null) {
				measureTarget.resetWidth();
			} else {
				measureTarget.set_width(this.width);
			}
			if(this.height == null) {
				measureTarget.resetHeight();
			} else {
				measureTarget.set_height(this.height);
			}
			if(this.minWidth == null) {
				measureTarget.resetMinWidth();
			} else {
				measureTarget.set_minWidth(this.minWidth);
			}
			if(this.minHeight == null) {
				measureTarget.resetMinHeight();
			} else {
				measureTarget.set_minHeight(this.minHeight);
			}
			if(this.maxWidth == null) {
				measureTarget.resetMaxWidth();
			} else {
				measureTarget.set_maxWidth(this.maxWidth);
			}
			if(this.maxHeight == null) {
				measureTarget.resetMaxHeight();
			} else {
				measureTarget.set_maxHeight(this.maxHeight);
			}
			return;
		}
		if(this.width != null) {
			target.set_width(this.width);
		}
		if(this.height != null) {
			target.set_height(this.height);
		}
	}
	,__class__: feathers_layout_Measurements
};
var feathers_layout_RelativePosition = $hxEnums["feathers.layout.RelativePosition"] = { __ename__:"feathers.layout.RelativePosition",__constructs__:null
	,TOP: {_hx_name:"TOP",_hx_index:0,__enum__:"feathers.layout.RelativePosition",toString:$estr}
	,RIGHT: {_hx_name:"RIGHT",_hx_index:1,__enum__:"feathers.layout.RelativePosition",toString:$estr}
	,BOTTOM: {_hx_name:"BOTTOM",_hx_index:2,__enum__:"feathers.layout.RelativePosition",toString:$estr}
	,LEFT: {_hx_name:"LEFT",_hx_index:3,__enum__:"feathers.layout.RelativePosition",toString:$estr}
	,MANUAL: {_hx_name:"MANUAL",_hx_index:4,__enum__:"feathers.layout.RelativePosition",toString:$estr}
};
feathers_layout_RelativePosition.__constructs__ = [feathers_layout_RelativePosition.TOP,feathers_layout_RelativePosition.RIGHT,feathers_layout_RelativePosition.BOTTOM,feathers_layout_RelativePosition.LEFT,feathers_layout_RelativePosition.MANUAL];
var feathers_layout_VerticalAlign = $hxEnums["feathers.layout.VerticalAlign"] = { __ename__:"feathers.layout.VerticalAlign",__constructs__:null
	,TOP: {_hx_name:"TOP",_hx_index:0,__enum__:"feathers.layout.VerticalAlign",toString:$estr}
	,MIDDLE: {_hx_name:"MIDDLE",_hx_index:1,__enum__:"feathers.layout.VerticalAlign",toString:$estr}
	,BOTTOM: {_hx_name:"BOTTOM",_hx_index:2,__enum__:"feathers.layout.VerticalAlign",toString:$estr}
	,JUSTIFY: {_hx_name:"JUSTIFY",_hx_index:3,__enum__:"feathers.layout.VerticalAlign",toString:$estr}
};
feathers_layout_VerticalAlign.__constructs__ = [feathers_layout_VerticalAlign.TOP,feathers_layout_VerticalAlign.MIDDLE,feathers_layout_VerticalAlign.BOTTOM,feathers_layout_VerticalAlign.JUSTIFY];
var feathers_layout_VerticalListLayout = function() {
	this._widthResetEnabled = true;
	this._contentJustify = false;
	this._verticalAlign = feathers_layout_VerticalAlign.TOP;
	this._minGap = 0.0;
	this._gap = 0.0;
	this._paddingLeft = 0.0;
	this._paddingBottom = 0.0;
	this._paddingRight = 0.0;
	this._paddingTop = 0.0;
	this._requestedMaxRowCount = null;
	this._requestedMinRowCount = null;
	this._requestedRowCount = null;
	this._scrollY = 0.0;
	this._scrollX = 0.0;
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["feathers.layout.VerticalListLayout"] = feathers_layout_VerticalListLayout;
feathers_layout_VerticalListLayout.__name__ = "feathers.layout.VerticalListLayout";
feathers_layout_VerticalListLayout.__interfaces__ = [feathers_layout_IKeyboardNavigationLayout,feathers_layout_IVirtualLayout];
feathers_layout_VerticalListLayout.__super__ = openfl_events_EventDispatcher;
feathers_layout_VerticalListLayout.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	set_scrollX: function(value) {
		this._scrollX = value;
		return this._scrollX;
	}
	,set_scrollY: function(value) {
		this._scrollY = value;
		return this._scrollY;
	}
	,set_virtualCache: function(value) {
		this._virtualCache = value;
		return this._virtualCache;
	}
	,get_elasticTop: function() {
		return true;
	}
	,get_elasticRight: function() {
		return false;
	}
	,get_elasticBottom: function() {
		return true;
	}
	,get_elasticLeft: function() {
		return false;
	}
	,set_requestedRowCount: function(value) {
		if(this._requestedRowCount == value) {
			return this._requestedRowCount;
		}
		this._requestedRowCount = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._requestedRowCount;
	}
	,set_requestedMinRowCount: function(value) {
		if(this._requestedMinRowCount == value) {
			return this._requestedMinRowCount;
		}
		this._requestedMinRowCount = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._requestedMinRowCount;
	}
	,set_requestedMaxRowCount: function(value) {
		if(this._requestedMaxRowCount == value) {
			return this._requestedMaxRowCount;
		}
		this._requestedMaxRowCount = value;
		feathers_events_FeathersEvent.dispatch(this,"change");
		return this._requestedMaxRowCount;
	}
	,layout: function(items,measurements,result) {
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
		}
		var maxItemWidth = this.calculateMaxItemWidth(items,measurements);
		var viewPortWidth = this.calculateViewPortWidth(maxItemWidth,measurements);
		var minItemWidth = viewPortWidth - this._paddingLeft - this._paddingRight;
		var itemWidth = maxItemWidth;
		if(!this._contentJustify || itemWidth < minItemWidth) {
			itemWidth = minItemWidth;
		}
		var virtualRowHeight = this.calculateVirtualRowHeight(items,itemWidth);
		var positionY = this._paddingTop;
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var item = items[i];
			if(item == null) {
				var itemHeight = virtualRowHeight;
				if(this._virtualCache != null) {
					var value = this._virtualCache[i];
					var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
					if(cacheItem != null) {
						itemHeight = cacheItem.itemHeight;
					}
				}
				positionY += itemHeight + adjustedGap;
				continue;
			}
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				if(!(js_Boot.__cast(item , feathers_layout_ILayoutObject)).get_includeInLayout()) {
					continue;
				}
			}
			item.set_x(this._paddingLeft);
			item.set_y(positionY);
			item.set_width(itemWidth);
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			var itemHeight1 = item.get_height();
			if(this._virtualCache != null) {
				var value1 = this._virtualCache[i];
				var cacheItem1 = ((value1) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value1 : null;
				if(cacheItem1 != null && cacheItem1.itemHeight != itemHeight1) {
					cacheItem1.itemHeight = itemHeight1;
					this._virtualCache[i] = cacheItem1;
					feathers_events_FeathersEvent.dispatch(this,"change");
				}
			}
			positionY += itemHeight1 + adjustedGap;
		}
		if(items.length > 0) {
			positionY -= adjustedGap;
		}
		var viewPortHeight = positionY += this._paddingBottom;
		if(measurements.height != null) {
			viewPortHeight = measurements.height;
		} else {
			if(this._requestedRowCount != null) {
				viewPortHeight = virtualRowHeight * this._requestedRowCount;
			} else if(this._requestedMinRowCount != null && items.length < this._requestedMinRowCount) {
				viewPortHeight = virtualRowHeight * this._requestedMinRowCount;
			} else if(this._requestedMaxRowCount != null && items.length > this._requestedMaxRowCount) {
				viewPortHeight = virtualRowHeight * this._requestedMaxRowCount;
			}
			if(measurements.minHeight != null && viewPortHeight < measurements.minHeight) {
				viewPortHeight = measurements.minHeight;
			} else if(measurements.maxHeight != null && viewPortHeight > measurements.maxHeight) {
				viewPortHeight = measurements.maxHeight;
			}
		}
		var contentHeight = positionY - this._paddingTop - this._paddingBottom;
		var alignOffset = 0.0;
		var gapOffset = 0.0;
		var maxAlignmentHeight = viewPortHeight - this._paddingTop - this._paddingBottom;
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
			if(items.length > 1 && maxAlignmentHeight > contentHeight) {
				adjustedGap += (maxAlignmentHeight - contentHeight) / (items.length - 1);
			}
			gapOffset = adjustedGap - this._minGap;
		} else {
			switch(this._verticalAlign._hx_index) {
			case 0:
				alignOffset = 0.0;
				break;
			case 1:
				alignOffset = (maxAlignmentHeight - contentHeight) / 2.0;
				break;
			case 2:
				alignOffset = maxAlignmentHeight - contentHeight;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Unknown vertical align: " + Std.string(this._verticalAlign)));
			}
			if(alignOffset < 0.0) {
				alignOffset = 0.0;
			}
		}
		if(!(alignOffset == 0.0 && gapOffset == 0.0)) {
			var totalOffset = alignOffset;
			var _g = 0;
			while(_g < items.length) {
				var item = items[_g];
				++_g;
				var layoutObject = null;
				if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
					layoutObject = js_Boot.__cast(item , feathers_layout_ILayoutObject);
					if(!layoutObject.get_includeInLayout()) {
						continue;
					}
				}
				if(item != null) {
					item.set_y(Math.max(this._paddingTop,item.get_y() + totalOffset));
				}
				totalOffset += gapOffset;
			}
		}
		if(result == null) {
			result = new feathers_layout_LayoutBoundsResult();
		}
		result.contentX = 0.0;
		result.contentY = 0.0;
		result.contentWidth = itemWidth + this._paddingLeft + this._paddingRight;
		result.contentHeight = positionY;
		result.viewPortWidth = viewPortWidth;
		result.viewPortHeight = viewPortHeight;
		return result;
	}
	,calculateMaxItemWidth: function(items,measurements) {
		var maxItemWidth = 0.0;
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var item = items[i];
			if(this._virtualCache != null && this._virtualCache.length > i) {
				var value = this._virtualCache[i];
				var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
				if(cacheItem != null) {
					var itemWidth = cacheItem.itemWidth;
					if(maxItemWidth < itemWidth) {
						maxItemWidth = itemWidth;
					}
					continue;
				}
			}
			if(item == null) {
				continue;
			}
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				if(!(js_Boot.__cast(item , feathers_layout_ILayoutObject)).get_includeInLayout()) {
					continue;
				}
			}
			if(this._widthResetEnabled && measurements.width == null && js_Boot.__implements(item,feathers_core_IMeasureObject)) {
				(js_Boot.__cast(item , feathers_core_IMeasureObject)).resetWidth();
			}
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			var itemWidth1 = item.get_width();
			if(maxItemWidth < itemWidth1) {
				maxItemWidth = itemWidth1;
			}
			if(this._virtualCache != null) {
				var value1 = this._virtualCache[i];
				var cacheItem1 = ((value1) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value1 : null;
				if(cacheItem1 == null) {
					if(js_Boot.__implements(item,feathers_core_IValidating)) {
						(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
					}
					cacheItem1 = new feathers_layout__$VerticalListLayout_VirtualCacheItem(itemWidth1,0.0);
					this._virtualCache[i] = cacheItem1;
				}
			}
		}
		if(measurements.maxWidth != null) {
			var maxJustifyWidth = measurements.maxWidth - this._paddingLeft - this._paddingRight;
			if(maxItemWidth > maxJustifyWidth) {
				maxItemWidth = maxJustifyWidth;
			}
		}
		return maxItemWidth;
	}
	,calculateViewPortWidth: function(maxItemWidth,measurements) {
		if(measurements.width != null) {
			return measurements.width;
		}
		return maxItemWidth + this._paddingLeft + this._paddingRight;
	}
	,calculateVirtualRowHeight: function(items,itemWidth) {
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var item = items[i];
			if(item == null) {
				if(this._virtualCache == null || this._virtualCache.length <= i) {
					continue;
				}
				var value = this._virtualCache[i];
				var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
				if(cacheItem == null) {
					continue;
				}
				return cacheItem.itemHeight;
			}
			if(js_Boot.__implements(item,feathers_layout_ILayoutObject)) {
				if(!(js_Boot.__cast(item , feathers_layout_ILayoutObject)).get_includeInLayout()) {
					continue;
				}
			}
			item.set_width(itemWidth);
			if(js_Boot.__implements(item,feathers_core_IValidating)) {
				(js_Boot.__cast(item , feathers_core_IValidating)).validateNow();
			}
			return item.get_height();
		}
		return 0.0;
	}
	,getVisibleIndices: function(itemCount,width,height,result) {
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
		}
		var startIndex = -1;
		var endIndex = -1;
		var estimatedItemHeight = null;
		var positionY = this._paddingTop;
		var scrollY = this._scrollY;
		if(scrollY < 0.0) {
			scrollY = 0.0;
		}
		var minItems = 0;
		var maxY = scrollY + height;
		var _g = 0;
		var _g1 = itemCount;
		while(_g < _g1) {
			var i = _g++;
			var itemHeight = 0.0;
			if(this._virtualCache != null) {
				var value = this._virtualCache[i];
				var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
				if(cacheItem != null) {
					itemHeight = cacheItem.itemHeight;
					if(estimatedItemHeight == null) {
						estimatedItemHeight = itemHeight;
						minItems = Math.ceil(height / (estimatedItemHeight + adjustedGap)) + 1;
					}
				} else if(estimatedItemHeight != null) {
					itemHeight = estimatedItemHeight;
				} else {
					startIndex = 0;
					endIndex = 0;
					break;
				}
			}
			positionY += itemHeight + adjustedGap;
			if(startIndex == -1 && positionY >= scrollY) {
				startIndex = i;
			}
			if(startIndex != -1) {
				endIndex = i;
				if(positionY >= maxY && endIndex - startIndex + 1 >= minItems) {
					break;
				}
			}
		}
		if(startIndex == -1 && this._verticalAlign != feathers_layout_VerticalAlign.TOP) {
			startIndex = itemCount - 1;
			endIndex = startIndex;
		}
		if((positionY < maxY || endIndex - startIndex + 1 < minItems) && startIndex > 0) {
			while(true) {
				--startIndex;
				var itemHeight = 0.0;
				if(this._virtualCache != null) {
					var value = this._virtualCache[startIndex];
					var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
					if(cacheItem != null) {
						itemHeight = cacheItem.itemHeight;
						if(estimatedItemHeight == null) {
							estimatedItemHeight = itemHeight;
							minItems = Math.ceil(height / (estimatedItemHeight + adjustedGap)) + 1;
						}
					} else if(estimatedItemHeight != null) {
						itemHeight = estimatedItemHeight;
					}
				}
				positionY += itemHeight + adjustedGap;
				if(positionY >= maxY && endIndex - startIndex + 1 >= minItems) {
					break;
				}
				if(!(startIndex > 0)) {
					break;
				}
			}
		}
		if(startIndex < 0) {
			startIndex = 0;
		}
		if(estimatedItemHeight == null) {
			endIndex = startIndex;
		} else if(endIndex < 0) {
			endIndex = startIndex;
		}
		if(result == null) {
			return new feathers_layout_VirtualLayoutRange(startIndex,endIndex);
		}
		result.start = startIndex;
		result.end = endIndex;
		return result;
	}
	,getNearestScrollPositionForIndex: function(index,itemCount,width,height,result) {
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
		}
		var estimatedItemHeight = null;
		var minY = 0.0;
		var maxY = 0.0;
		var positionY = this._paddingTop;
		var _g = 0;
		var _g1 = itemCount;
		while(_g < _g1) {
			var i = _g++;
			var itemHeight = 0.0;
			if(this._virtualCache != null) {
				var value = this._virtualCache[i];
				var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
				if(cacheItem != null) {
					itemHeight = cacheItem.itemHeight;
					if(estimatedItemHeight == null) {
						estimatedItemHeight = itemHeight;
					}
				} else if(estimatedItemHeight != null) {
					itemHeight = estimatedItemHeight;
				}
			}
			if(i == index) {
				maxY = positionY;
				minY = maxY + itemHeight - height;
				break;
			}
			positionY += itemHeight + adjustedGap;
		}
		var targetY = this._scrollY;
		if(targetY < minY) {
			targetY = minY;
		} else if(targetY > maxY) {
			targetY = maxY;
		}
		if(result == null) {
			result = new openfl_geom_Point();
		}
		result.x = this._scrollX;
		result.y = targetY;
		return result;
	}
	,findNextKeyboardIndex: function(startIndex,event,wrapArrowKeys,items,indicesToSkip,viewPortWidth,viewPortHeight) {
		if(items.length == 0) {
			return -1;
		}
		var adjustedGap = this._gap;
		var hasFlexGap = this._gap == 1.0 / 0.0;
		if(hasFlexGap) {
			adjustedGap = this._minGap;
		}
		var estimatedItemHeight = null;
		var _g = 0;
		var _g1 = items.length;
		while(_g < _g1) {
			var i = _g++;
			var itemHeight = 0.0;
			if(this._virtualCache != null) {
				var value = this._virtualCache[i];
				var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
				if(cacheItem != null) {
					itemHeight = cacheItem.itemHeight;
					if(estimatedItemHeight == null) {
						estimatedItemHeight = itemHeight;
						break;
					}
				}
			}
		}
		var maxIndex = items.length - 1;
		var result = startIndex;
		if(result == -1) {
			switch(event.keyCode) {
			case 38:
				result = wrapArrowKeys ? maxIndex : -1;
				break;
			case 40:
				result = 0;
				break;
			default:
				result = -1;
			}
			if(result == -1) {
				return result;
			}
			if(indicesToSkip == null || indicesToSkip.indexOf(result) == -1) {
				return result;
			}
		}
		var needsAnotherPass = true;
		var nextKeyCode = event.keyCode;
		var lastResult = result;
		while(needsAnotherPass) {
			needsAnotherPass = false;
			switch(nextKeyCode) {
			case 33:
				var yPosition = 0.0;
				var i = startIndex;
				while(i >= 0) {
					var item = items[i];
					var itemHeight = estimatedItemHeight;
					if(item == null) {
						if(this._virtualCache != null) {
							var value = this._virtualCache[i];
							var cacheItem = ((value) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value : null;
							if(cacheItem != null) {
								itemHeight = cacheItem.itemHeight;
							}
						}
					} else {
						itemHeight = item.get_height();
					}
					yPosition += itemHeight;
					if(indicesToSkip != null && indicesToSkip.indexOf(i) != -1) {
						yPosition += adjustedGap;
						--i;
						continue;
					}
					if(yPosition > viewPortHeight) {
						break;
					}
					yPosition += adjustedGap;
					result = i;
					--i;
				}
				nextKeyCode = 38;
				break;
			case 34:
				var yPosition1 = 0.0;
				var _g = startIndex;
				var _g1 = items.length;
				while(_g < _g1) {
					var i1 = _g++;
					var item1 = items[i1];
					var itemHeight1 = estimatedItemHeight;
					if(item1 == null) {
						if(this._virtualCache != null) {
							var value1 = this._virtualCache[i1];
							var cacheItem1 = ((value1) instanceof feathers_layout__$VerticalListLayout_VirtualCacheItem) ? value1 : null;
							if(cacheItem1 != null) {
								itemHeight1 = cacheItem1.itemHeight;
							}
						}
					} else {
						itemHeight1 = item1.get_height();
					}
					yPosition1 += itemHeight1;
					if(indicesToSkip != null && indicesToSkip.indexOf(i1) != -1) {
						yPosition1 += adjustedGap;
						continue;
					}
					if(yPosition1 > viewPortHeight) {
						break;
					}
					yPosition1 += adjustedGap;
					result = i1;
				}
				nextKeyCode = 40;
				break;
			case 35:
				var i2 = maxIndex;
				while(i2 > startIndex) {
					if(indicesToSkip == null || indicesToSkip.indexOf(i2) == -1) {
						result = i2;
						break;
					}
					--i2;
				}
				break;
			case 36:
				var _g2 = 0;
				var _g3 = startIndex;
				while(_g2 < _g3) {
					var i3 = _g2++;
					if(indicesToSkip == null || indicesToSkip.indexOf(i3) == -1) {
						result = i3;
						break;
					}
				}
				break;
			case 38:
				--result;
				break;
			case 40:
				++result;
				break;
			default:
				return startIndex;
			}
			if(result < 0) {
				if(wrapArrowKeys) {
					result = maxIndex;
				} else {
					result = 0;
				}
			} else if(result > maxIndex) {
				if(wrapArrowKeys) {
					result = 0;
				} else {
					result = maxIndex;
				}
			}
			if(indicesToSkip != null && indicesToSkip.indexOf(result) != -1) {
				if(result == lastResult) {
					return startIndex;
				}
				needsAnotherPass = true;
			}
			lastResult = result;
		}
		return result;
	}
	,__class__: feathers_layout_VerticalListLayout
	,__properties__: {set_requestedMaxRowCount:"set_requestedMaxRowCount",set_requestedMinRowCount:"set_requestedMinRowCount",set_requestedRowCount:"set_requestedRowCount",get_elasticLeft:"get_elasticLeft",get_elasticBottom:"get_elasticBottom",get_elasticRight:"get_elasticRight",get_elasticTop:"get_elasticTop",set_virtualCache:"set_virtualCache",set_scrollY:"set_scrollY",set_scrollX:"set_scrollX"}
});
var feathers_layout__$VerticalListLayout_VirtualCacheItem = function(itemWidth,itemHeight) {
	this.itemWidth = itemWidth;
	this.itemHeight = itemHeight;
};
$hxClasses["feathers.layout._VerticalListLayout.VirtualCacheItem"] = feathers_layout__$VerticalListLayout_VirtualCacheItem;
feathers_layout__$VerticalListLayout_VirtualCacheItem.__name__ = "feathers.layout._VerticalListLayout.VirtualCacheItem";
feathers_layout__$VerticalListLayout_VirtualCacheItem.prototype = {
	__class__: feathers_layout__$VerticalListLayout_VirtualCacheItem
};
var feathers_skins_IProgrammaticSkin = function() { };
$hxClasses["feathers.skins.IProgrammaticSkin"] = feathers_skins_IProgrammaticSkin;
feathers_skins_IProgrammaticSkin.__name__ = "feathers.skins.IProgrammaticSkin";
feathers_skins_IProgrammaticSkin.__isInterface__ = true;
feathers_skins_IProgrammaticSkin.__interfaces__ = [feathers_core_IMeasureObject];
feathers_skins_IProgrammaticSkin.prototype = {
	__class__: feathers_skins_IProgrammaticSkin
	,__properties__: {set_uiContext:"set_uiContext"}
};
var feathers_skins_ProgrammaticSkin = function() {
	feathers_core_MeasureSprite.call(this);
	this.mouseChildren = false;
	this.set_tabEnabled(false);
	this.set_tabChildren(false);
};
$hxClasses["feathers.skins.ProgrammaticSkin"] = feathers_skins_ProgrammaticSkin;
feathers_skins_ProgrammaticSkin.__name__ = "feathers.skins.ProgrammaticSkin";
feathers_skins_ProgrammaticSkin.__interfaces__ = [feathers_core_IStateObserver,feathers_skins_IProgrammaticSkin];
feathers_skins_ProgrammaticSkin.__super__ = feathers_core_MeasureSprite;
feathers_skins_ProgrammaticSkin.prototype = $extend(feathers_core_MeasureSprite.prototype,{
	set_uiContext: function(value) {
		if(this._uiContext == value) {
			return this._uiContext;
		}
		if(this._uiContext != null) {
			this._uiContext.removeEventListener("stateChange",$bind(this,this.uiContext_stateChangeHandler));
			if(js_Boot.__implements(this._uiContext,feathers_controls_IToggle)) {
				this._uiContext.removeEventListener("change",$bind(this,this.uiContextToggle_changeHandler));
			}
			this.onRemoveUIContext();
		}
		this._uiContext = value;
		if(this._uiContext != null) {
			this._uiContext.addEventListener("stateChange",$bind(this,this.uiContext_stateChangeHandler),false,0,true);
			if(js_Boot.__implements(this._uiContext,feathers_controls_IToggle)) {
				this._uiContext.addEventListener("change",$bind(this,this.uiContextToggle_changeHandler));
			}
			this.onAddUIContext();
		}
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._uiContext;
	}
	,set_stateContext: function(value) {
		if(this._stateContext == value) {
			return this._stateContext;
		}
		if(this._stateContext != null) {
			this._stateContext.removeEventListener("stateChange",$bind(this,this.stateContext_stateChangeHandler));
		}
		this._stateContext = value;
		if(this._stateContext != null) {
			this._stateContext.addEventListener("stateChange",$bind(this,this.stateContext_stateChangeHandler),false,0,true);
		}
		this.setInvalid(feathers_core_InvalidationFlag.DATA);
		return this._stateContext;
	}
	,onAddUIContext: function() {
	}
	,onRemoveUIContext: function() {
	}
	,update: function() {
	}
	,needsStateUpdate: function() {
		return true;
	}
	,checkForStateChange: function() {
		if(!this.needsStateUpdate()) {
			return;
		}
		this.setInvalid(feathers_core_InvalidationFlag.STATE);
	}
	,uiContext_stateChangeHandler: function(event) {
		this.checkForStateChange();
	}
	,uiContextToggle_changeHandler: function(event) {
		this.checkForStateChange();
	}
	,stateContext_stateChangeHandler: function(event) {
		this.checkForStateChange();
	}
	,__class__: feathers_skins_ProgrammaticSkin
	,__properties__: $extend(feathers_core_MeasureSprite.prototype.__properties__,{set_stateContext:"set_stateContext",set_uiContext:"set_uiContext"})
});
var feathers_skins_BaseGraphicsPathSkin = function(fill,border) {
	this._previousFill = null;
	this._previousBorder = null;
	feathers_skins_ProgrammaticSkin.call(this);
	this.set_fill(fill);
	this.set_border(border);
};
$hxClasses["feathers.skins.BaseGraphicsPathSkin"] = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_BaseGraphicsPathSkin.__name__ = "feathers.skins.BaseGraphicsPathSkin";
feathers_skins_BaseGraphicsPathSkin.__super__ = feathers_skins_ProgrammaticSkin;
feathers_skins_BaseGraphicsPathSkin.prototype = $extend(feathers_skins_ProgrammaticSkin.prototype,{
	set_fill: function(value) {
		if(this._fill == value) {
			return this._fill;
		}
		if(this._previousFill == this._fill) {
			this._previousFill = null;
		}
		this._fill = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._fill;
	}
	,set_disabledFill: function(value) {
		if(this._disabledFill == value) {
			return this._disabledFill;
		}
		if(this._previousFill == this._disabledFill) {
			this._previousFill = null;
		}
		this._disabledFill = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._disabledFill;
	}
	,set_selectedFill: function(value) {
		if(this._selectedFill == value) {
			return this._selectedFill;
		}
		if(this._previousFill == this._selectedFill) {
			this._previousFill = null;
		}
		this._selectedFill = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._selectedFill;
	}
	,set_border: function(value) {
		if(this._border == value) {
			return this._border;
		}
		if(this._previousBorder == this._border) {
			this._previousBorder = null;
		}
		this._border = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._border;
	}
	,set_disabledBorder: function(value) {
		if(this._disabledBorder == value) {
			return this._disabledBorder;
		}
		if(this._previousBorder == this._disabledBorder) {
			this._previousBorder = null;
		}
		this._disabledBorder = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._disabledBorder;
	}
	,set_selectedBorder: function(value) {
		if(this._selectedBorder == value) {
			return this._selectedBorder;
		}
		if(this._previousBorder == this._selectedBorder) {
			this._previousBorder = null;
		}
		this._selectedBorder = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._selectedBorder;
	}
	,setFillForState: function(state,fill) {
		if(this._stateToFill == null) {
			this._stateToFill = new haxe_ds_EnumValueMap();
		}
		var oldFill = this._stateToFill.get(state);
		if(oldFill == fill) {
			return;
		}
		if(this._previousFill == oldFill) {
			this._previousFill = null;
		}
		this._stateToFill.set(state,fill);
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,setBorderForState: function(state,border) {
		if(this._stateToBorder == null) {
			this._stateToBorder = new haxe_ds_EnumValueMap();
		}
		var oldBorder = this._stateToBorder.get(state);
		if(oldBorder == border) {
			return;
		}
		if(this._previousBorder == oldBorder) {
			this._previousBorder = null;
		}
		this._stateToBorder.set(state,border);
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,update: function() {
		this._previousBorder = this.getCurrentBorder();
		this._previousFill = this.getCurrentFill();
		this.get_graphics().clear();
		this.draw();
	}
	,draw: function() {
		this.applyLineStyle(this.getCurrentBorder());
		var currentFill = this.getCurrentFill();
		this.applyFillStyle(currentFill);
		this.drawPath();
		if(currentFill != null && currentFill != feathers_graphics_FillStyle.None) {
			this.get_graphics().endFill();
		}
	}
	,drawPath: function() {
	}
	,applyLineStyle: function(lineStyle) {
		if(lineStyle == null) {
			return;
		}
		switch(lineStyle._hx_index) {
		case 0:
			var thickness = lineStyle.thickness;
			var color = lineStyle.color;
			var alpha = lineStyle.alpha;
			var pixelHinting = lineStyle.pixelHinting;
			var scaleMode = lineStyle.scaleMode;
			var caps = lineStyle.caps;
			var joints = lineStyle.joints;
			var miterLimit = lineStyle.miterLimit;
			if(color == null) {
				color = 0;
			}
			if(alpha == null) {
				alpha = 1.0;
			}
			if(pixelHinting == null) {
				pixelHinting = false;
			}
			if(scaleMode == null) {
				scaleMode = 2;
			}
			if(miterLimit == null) {
				miterLimit = 3.0;
			}
			this.get_graphics().lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
			break;
		case 1:
			var thickness = lineStyle.thickness;
			var bitmapData = lineStyle.bitmapData;
			var matrix = lineStyle.matrix;
			var repeat = lineStyle.repeat;
			var smooth = lineStyle.smooth;
			if(repeat == null) {
				repeat = true;
			}
			if(smooth == null) {
				smooth = false;
			}
			this.get_graphics().lineStyle(thickness);
			this.get_graphics().lineBitmapStyle(bitmapData,matrix,repeat,smooth);
			break;
		case 2:
			var thickness = lineStyle.thickness;
			var type = lineStyle.type;
			var colors = lineStyle.colors;
			var alphas = lineStyle.alphas;
			var ratios = lineStyle.ratios;
			var matrixCallback = lineStyle.matrix;
			var spreadMethod = lineStyle.spreadMethod;
			var interpolationMethod = lineStyle.interpolationMethod;
			var focalPointRatio = lineStyle.focalPointRatio;
			var callback = matrixCallback;
			if(callback == null) {
				callback = $bind(this,this.getDefaultGradientMatrix);
			}
			if(spreadMethod == null) {
				spreadMethod = 0;
			}
			if(interpolationMethod == null) {
				interpolationMethod = 1;
			}
			if(focalPointRatio == null) {
				focalPointRatio = 0.0;
			}
			var matrix = callback(this.getDefaultGradientMatrixWidth(),this.getDefaultGradientMatrixHeight(),this.getDefaultGradientMatrixRadians(),this.getDefaultGradientMatrixTx(),this.getDefaultGradientMatrixTy());
			this.get_graphics().lineStyle(thickness);
			this.get_graphics().lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			break;
		case 3:
			this.get_graphics().lineStyle(NaN,0,0.0);
			break;
		}
	}
	,applyFillStyle: function(fillStyle) {
		if(fillStyle == null) {
			return;
		}
		switch(fillStyle._hx_index) {
		case 0:
			var color = fillStyle.color;
			var alpha = fillStyle.alpha;
			if(alpha == null) {
				alpha = 1.0;
			}
			this.get_graphics().beginFill(color,alpha);
			break;
		case 1:
			var bitmapData = fillStyle.bitmapData;
			var matrix = fillStyle.matrix;
			var repeat = fillStyle.repeat;
			var smooth = fillStyle.smoothing;
			if(repeat == null) {
				repeat = true;
			}
			if(smooth == null) {
				smooth = false;
			}
			this.get_graphics().beginBitmapFill(bitmapData,matrix,repeat,smooth);
			break;
		case 2:
			var type = fillStyle.type;
			var colors = fillStyle.colors;
			var alphas = fillStyle.alphas;
			var ratios = fillStyle.ratios;
			var matrixCallback = fillStyle.matrix;
			var spreadMethod = fillStyle.spreadMethod;
			var interpolationMethod = fillStyle.interpolationMethod;
			var focalPointRatio = fillStyle.focalPointRatio;
			var callback = matrixCallback;
			if(callback == null) {
				callback = $bind(this,this.getDefaultGradientMatrix);
			}
			if(spreadMethod == null) {
				spreadMethod = 0;
			}
			if(interpolationMethod == null) {
				interpolationMethod = 1;
			}
			if(focalPointRatio == null) {
				focalPointRatio = 0.0;
			}
			var matrix = callback(this.getDefaultGradientMatrixWidth(),this.getDefaultGradientMatrixHeight(),this.getDefaultGradientMatrixRadians(),this.getDefaultGradientMatrixTx(),this.getDefaultGradientMatrixTy());
			this.get_graphics().beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
			break;
		case 3:
			return;
		}
	}
	,getLineThickness: function(lineStyle) {
		if(lineStyle == null) {
			return 0;
		}
		switch(lineStyle._hx_index) {
		case 0:
			var _g = lineStyle.color;
			var _g = lineStyle.alpha;
			var _g = lineStyle.pixelHinting;
			var _g = lineStyle.scaleMode;
			var _g = lineStyle.caps;
			var _g = lineStyle.joints;
			var _g = lineStyle.miterLimit;
			var thickness = lineStyle.thickness;
			return thickness;
		case 2:
			var _g = lineStyle.matrix;
			var _g = lineStyle.spreadMethod;
			var _g = lineStyle.interpolationMethod;
			var _g = lineStyle.focalPointRatio;
			var thickness = lineStyle.thickness;
			var colors = lineStyle.type;
			var alphas = lineStyle.colors;
			var ratios = lineStyle.alphas;
			var matrixCallback = lineStyle.ratios;
			return thickness;
		default:
			return 0;
		}
	}
	,getDefaultGradientMatrix: function(width,height,radians,tx,ty) {
		if(ty == null) {
			ty = 0.0;
		}
		if(tx == null) {
			tx = 0.0;
		}
		if(radians == null) {
			radians = 0.0;
		}
		var matrix = new openfl_geom_Matrix();
		matrix.createGradientBox(width,height,radians,tx,ty);
		return matrix;
	}
	,getDefaultGradientMatrixWidth: function() {
		return this.actualWidth;
	}
	,getDefaultGradientMatrixHeight: function() {
		return this.actualHeight;
	}
	,getDefaultGradientMatrixRadians: function() {
		return 0.0;
	}
	,getDefaultGradientMatrixTx: function() {
		return 0.0;
	}
	,getDefaultGradientMatrixTy: function() {
		return 0.0;
	}
	,getCurrentBorder: function() {
		if(this._previousBorder != null) {
			return this._previousBorder;
		}
		return this.getCurrentBorderWithoutCache();
	}
	,getCurrentBorderWithoutCache: function() {
		var stateContext = this._stateContext;
		if(stateContext == null && js_Boot.__implements(this._uiContext,feathers_core_IStateContext)) {
			stateContext = js_Boot.__cast(this._uiContext , feathers_core_IStateContext);
		}
		if(this._stateToBorder != null && stateContext != null) {
			var result = this._stateToBorder.get(stateContext.get_currentState());
			if(result != null) {
				return result;
			}
		}
		if(this._uiContext == null) {
			return this._border;
		}
		if(this._disabledBorder != null) {
			if(!this._uiContext.get_enabled()) {
				return this._disabledBorder;
			}
		}
		if(this._selectedBorder != null && js_Boot.__implements(this._uiContext,feathers_controls_IToggle)) {
			var toggle = js_Boot.__cast(this._uiContext , feathers_controls_IToggle);
			if(toggle.get_selected()) {
				return this._selectedBorder;
			}
		}
		return this._border;
	}
	,getCurrentFill: function() {
		if(this._previousFill != null) {
			return this._previousFill;
		}
		return this.getCurrentFillWithoutCache();
	}
	,getCurrentFillWithoutCache: function() {
		var stateContext = this._stateContext;
		if(stateContext == null && js_Boot.__implements(this._uiContext,feathers_core_IStateContext)) {
			stateContext = js_Boot.__cast(this._uiContext , feathers_core_IStateContext);
		}
		if(this._stateToFill != null && stateContext != null) {
			var result = this._stateToFill.get(stateContext.get_currentState());
			if(result != null) {
				return result;
			}
		}
		if(this._uiContext == null) {
			return this._fill;
		}
		if(this._disabledFill != null) {
			if(!this._uiContext.get_enabled()) {
				return this._disabledFill;
			}
		}
		if(this._selectedFill != null && js_Boot.__implements(this._uiContext,feathers_controls_IToggle)) {
			var toggle = js_Boot.__cast(this._uiContext , feathers_controls_IToggle);
			if(toggle.get_selected()) {
				return this._selectedFill;
			}
		}
		return this._fill;
	}
	,needsStateUpdate: function() {
		var updated = false;
		if(this._previousBorder != this.getCurrentBorderWithoutCache()) {
			this._previousBorder = null;
			updated = true;
		}
		if(this._previousFill != this.getCurrentFillWithoutCache()) {
			this._previousFill = null;
			updated = true;
		}
		return updated;
	}
	,__class__: feathers_skins_BaseGraphicsPathSkin
	,__properties__: $extend(feathers_skins_ProgrammaticSkin.prototype.__properties__,{set_selectedBorder:"set_selectedBorder",set_disabledBorder:"set_disabledBorder",set_border:"set_border",set_selectedFill:"set_selectedFill",set_disabledFill:"set_disabledFill",set_fill:"set_fill"})
});
var feathers_skins_CircleSkin = function(fill,border) {
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
};
$hxClasses["feathers.skins.CircleSkin"] = feathers_skins_CircleSkin;
feathers_skins_CircleSkin.__name__ = "feathers.skins.CircleSkin";
feathers_skins_CircleSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_CircleSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	drawPath: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var shorterSide = this.actualWidth;
		if(shorterSide > this.actualHeight) {
			shorterSide = this.actualHeight;
		}
		var radius = shorterSide / 2.0 - thicknessOffset;
		var radius1 = Math.max(0.0,radius);
		this.get_graphics().drawCircle(this.actualWidth / 2.0,this.actualHeight / 2.0,radius1);
	}
	,getDefaultGradientMatrixWidth: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var shorterSide = this.actualWidth;
		if(shorterSide > this.actualHeight) {
			shorterSide = this.actualHeight;
		}
		var radius = shorterSide / 2.0 - thicknessOffset;
		return Math.max(0.0,radius);
	}
	,getDefaultGradientMatrixHeight: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var shorterSide = this.actualWidth;
		if(shorterSide > this.actualHeight) {
			shorterSide = this.actualHeight;
		}
		var radius = shorterSide / 2.0 - thicknessOffset;
		return Math.max(0.0,radius);
	}
	,getDefaultGradientMatrixTx: function() {
		var drawWidth = this.actualWidth;
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var shorterSide = this.actualWidth;
		if(shorterSide > this.actualHeight) {
			shorterSide = this.actualHeight;
		}
		var radius = shorterSide / 2.0 - thicknessOffset;
		var drawWidth1 = Math.max(0.0,drawWidth - Math.max(0.0,radius));
		return drawWidth1 / 2.0;
	}
	,getDefaultGradientMatrixTy: function() {
		var drawHeight = this.actualHeight;
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var shorterSide = this.actualWidth;
		if(shorterSide > this.actualHeight) {
			shorterSide = this.actualHeight;
		}
		var radius = shorterSide / 2.0 - thicknessOffset;
		var drawHeight1 = Math.max(0.0,drawHeight - Math.max(0.0,radius));
		return drawHeight1 / 2.0;
	}
	,__class__: feathers_skins_CircleSkin
});
var feathers_skins_MultiSkin = function(defaultView) {
	feathers_skins_ProgrammaticSkin.call(this);
	this.mouseChildren = false;
	this.set_defaultView(defaultView);
};
$hxClasses["feathers.skins.MultiSkin"] = feathers_skins_MultiSkin;
feathers_skins_MultiSkin.__name__ = "feathers.skins.MultiSkin";
feathers_skins_MultiSkin.__super__ = feathers_skins_ProgrammaticSkin;
feathers_skins_MultiSkin.prototype = $extend(feathers_skins_ProgrammaticSkin.prototype,{
	set_defaultView: function(value) {
		if(this._defaultView == value) {
			return this._defaultView;
		}
		this._defaultView = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._defaultView;
	}
	,set_selectedView: function(value) {
		if(this._selectedView == value) {
			return this._disabledView;
		}
		this._selectedView = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._selectedView;
	}
	,setViewForState: function(state,view) {
		if(this._stateToView == null) {
			this._stateToView = new haxe_ds_EnumValueMap();
		}
		if(this._stateToView.get(state) == view) {
			return;
		}
		this._stateToView.set(state,view);
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
	}
	,update: function() {
		this.refreshView();
		this.measure();
		this.layoutView();
		this._previousView = this._currentView;
	}
	,refreshView: function() {
		var oldView = this._currentView;
		this._currentView = this.getCurrentView();
		if(this._currentView == oldView) {
			return;
		}
		this.removeCurrentView(oldView);
		if(this._currentView == null) {
			this._currentViewMeasurements = null;
			return;
		}
		if(js_Boot.__implements(this._currentView,feathers_core_IUIControl)) {
			(js_Boot.__cast(this._currentView , feathers_core_IUIControl)).initializeNow();
		}
		if(this._currentViewMeasurements == null) {
			this._currentViewMeasurements = new feathers_layout_Measurements(this._currentView);
		} else {
			this._currentViewMeasurements.save(this._currentView);
		}
		if(js_Boot.__implements(this._currentView,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(this._currentView , feathers_skins_IProgrammaticSkin)).set_uiContext(this._uiContext);
		}
		if(js_Boot.__implements(this._currentView,feathers_core_IStateObserver)) {
			(js_Boot.__cast(this._currentView , feathers_core_IStateObserver)).set_stateContext(this._stateContext);
		}
		this.addChild(this._currentView);
	}
	,removeCurrentView: function(view) {
		if(view == null) {
			return;
		}
		if(js_Boot.__implements(view,feathers_skins_IProgrammaticSkin)) {
			(js_Boot.__cast(view , feathers_skins_IProgrammaticSkin)).set_uiContext(null);
		}
		if(js_Boot.__implements(view,feathers_core_IStateObserver)) {
			(js_Boot.__cast(view , feathers_core_IStateObserver)).set_stateContext(null);
		}
		this._currentViewMeasurements.restore(view);
		if(view.parent == this) {
			this.removeChild(view);
		}
	}
	,getCurrentView: function() {
		if(this._previousView != null) {
			return this._previousView;
		}
		return this.getCurrentViewWithoutCache();
	}
	,getCurrentViewWithoutCache: function() {
		var stateContext = this._stateContext;
		if(stateContext == null && js_Boot.__implements(this._uiContext,feathers_core_IStateContext)) {
			stateContext = js_Boot.__cast(this._uiContext , feathers_core_IStateContext);
		}
		if(this._stateToView != null && stateContext != null) {
			var result = this._stateToView.get(stateContext.get_currentState());
			if(result != null) {
				return result;
			}
		}
		if(this._uiContext == null) {
			return this._defaultView;
		}
		if(this._disabledView != null) {
			if(!this._uiContext.get_enabled()) {
				return this._disabledView;
			}
		}
		if(this._selectedView != null && js_Boot.__implements(this._uiContext,feathers_controls_IToggle)) {
			var toggle = js_Boot.__cast(this._uiContext , feathers_controls_IToggle);
			if(toggle.get_selected()) {
				return this._selectedView;
			}
		}
		return this._defaultView;
	}
	,measure: function() {
		var needsWidth = this.get_explicitWidth() == null;
		var needsHeight = this.get_explicitHeight() == null;
		var needsMinWidth = this.get_explicitMinWidth() == null;
		var needsMinHeight = this.get_explicitMinHeight() == null;
		var needsMaxWidth = this.get_explicitMaxWidth() == null;
		var needsMaxHeight = this.get_explicitMaxHeight() == null;
		if(!needsWidth && !needsHeight && !needsMinWidth && !needsMinHeight && !needsMaxWidth && !needsMaxHeight) {
			return false;
		}
		if(this._currentView != null) {
			feathers_utils_MeasurementsUtil.resetFluidlyWithParent(this._currentViewMeasurements,this._currentView,this);
		}
		var measureSkin = null;
		if(js_Boot.__implements(this._currentView,feathers_core_IMeasureObject)) {
			measureSkin = js_Boot.__cast(this._currentView , feathers_core_IMeasureObject);
		}
		if(js_Boot.__implements(this._currentView,feathers_core_IValidating)) {
			(js_Boot.__cast(this._currentView , feathers_core_IValidating)).validateNow();
		}
		var newWidth = this.get_explicitWidth();
		if(needsWidth) {
			newWidth = 0.0;
			if(this._currentView != null) {
				newWidth = Math.max(this._currentView.get_width(),newWidth);
			}
		}
		var newHeight = this.get_explicitHeight();
		if(needsHeight) {
			newHeight = 0.0;
			if(this._currentView != null) {
				newHeight = Math.max(this._currentView.get_height(),newHeight);
			}
		}
		var newMinWidth = this.get_explicitMinWidth();
		if(needsMinWidth) {
			newMinWidth = 0.0;
			if(measureSkin != null) {
				newMinWidth = Math.max(measureSkin.get_minWidth(),newMinWidth);
			} else if(this._currentViewMeasurements != null) {
				newMinWidth = Math.max(this._currentViewMeasurements.minWidth,newMinWidth);
			}
		}
		var newMinHeight = this.get_explicitMinHeight();
		if(needsMinHeight) {
			newMinHeight = 0.0;
			if(measureSkin != null) {
				newMinHeight = Math.max(measureSkin.get_minHeight(),newMinHeight);
			} else if(this._currentViewMeasurements != null) {
				newMinHeight = Math.max(this._currentViewMeasurements.minHeight,newMinHeight);
			}
		}
		var newMaxWidth = this.get_explicitMaxWidth();
		if(needsMaxWidth) {
			newMaxWidth = 1.0 / 0.0;
			if(measureSkin != null) {
				newMaxWidth = measureSkin.get_maxWidth();
			} else if(this._currentViewMeasurements != null) {
				newMaxWidth = this._currentViewMeasurements.maxWidth;
			}
		}
		var newMaxHeight = this.get_explicitMaxHeight();
		if(needsMaxHeight) {
			newMaxHeight = 1.0 / 0.0;
			if(measureSkin != null) {
				newMaxHeight = measureSkin.get_maxHeight();
			} else if(this._currentViewMeasurements != null) {
				newMaxHeight = this._currentViewMeasurements.maxHeight;
			}
		}
		return this.saveMeasurements(newWidth,newHeight,newMinWidth,newMinHeight,newMaxWidth,newMaxHeight);
	}
	,layoutView: function() {
		if(this._currentView == null) {
			return;
		}
		if(this._currentView.get_width() != this.actualWidth) {
			this._currentView.set_width(this.actualWidth);
		}
		if(this._currentView.get_height() != this.actualHeight) {
			this._currentView.set_height(this.actualHeight);
		}
	}
	,needsStateUpdate: function() {
		var updated = false;
		if(this._previousView != this.getCurrentViewWithoutCache()) {
			this._previousView = null;
			updated = true;
		}
		return updated;
	}
	,__class__: feathers_skins_MultiSkin
	,__properties__: $extend(feathers_skins_ProgrammaticSkin.prototype.__properties__,{set_selectedView:"set_selectedView",set_defaultView:"set_defaultView"})
});
var feathers_skins_PillSkin = function(fill,border,capDirection) {
	if(capDirection == null) {
		capDirection = feathers_layout_Direction.HORIZONTAL;
	}
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
	this._capDirection = capDirection;
};
$hxClasses["feathers.skins.PillSkin"] = feathers_skins_PillSkin;
feathers_skins_PillSkin.__name__ = "feathers.skins.PillSkin";
feathers_skins_PillSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_PillSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	get_capDirection: function() {
		return this._capDirection;
	}
	,set_capDirection: function(value) {
		if(this._capDirection == value) {
			return this._capDirection;
		}
		this._capDirection = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._capDirection;
	}
	,drawPath: function() {
		var currentBorder = this.getCurrentBorder();
		var thickness = this.getLineThickness(currentBorder);
		var thicknessOffset = thickness / 2.0;
		var drawWidth = Math.max(0.0,this.actualWidth - thickness);
		var drawHeight = Math.max(0.0,this.actualHeight - thickness);
		var ellipseSize = this.get_capDirection() == feathers_layout_Direction.VERTICAL ? this.actualWidth : this.actualHeight;
		this.get_graphics().drawRoundRect(thicknessOffset,thicknessOffset,drawWidth,drawHeight,ellipseSize);
	}
	,__class__: feathers_skins_PillSkin
	,__properties__: $extend(feathers_skins_BaseGraphicsPathSkin.prototype.__properties__,{set_capDirection:"set_capDirection",get_capDirection:"get_capDirection"})
});
var feathers_skins_RectangleSkin = function(fill,border) {
	this._cornerRadius = 0.0;
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
};
$hxClasses["feathers.skins.RectangleSkin"] = feathers_skins_RectangleSkin;
feathers_skins_RectangleSkin.__name__ = "feathers.skins.RectangleSkin";
feathers_skins_RectangleSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_RectangleSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	set_cornerRadius: function(value) {
		if(this._cornerRadius == value) {
			return this._cornerRadius;
		}
		this._cornerRadius = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._cornerRadius;
	}
	,drawPath: function() {
		var currentBorder = this.getCurrentBorder();
		var thickness = this.getLineThickness(currentBorder);
		var thicknessOffset = thickness / 2.0;
		var drawWidth = Math.max(0.0,this.actualWidth - thickness);
		var drawHeight = Math.max(0.0,this.actualHeight - thickness);
		if(this._cornerRadius == 0.0) {
			this.get_graphics().drawRect(thicknessOffset,thicknessOffset,drawWidth,drawHeight);
		} else {
			var ellipseSize = this._cornerRadius * 2.0;
			ellipseSize = Math.min(ellipseSize,Math.min(this.actualWidth,this.actualHeight));
			this.get_graphics().drawRoundRect(thicknessOffset,thicknessOffset,drawWidth,drawHeight,ellipseSize);
		}
	}
	,__class__: feathers_skins_RectangleSkin
	,__properties__: $extend(feathers_skins_BaseGraphicsPathSkin.prototype.__properties__,{set_cornerRadius:"set_cornerRadius"})
});
var feathers_skins_TabSkin = function(fill,border,cornerRadius) {
	if(cornerRadius == null) {
		cornerRadius = 0.0;
	}
	this._cornerRadius = 0.0;
	this._drawBaseBorder = true;
	this._cornerRadiusPosition = feathers_layout_RelativePosition.TOP;
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
	this._cornerRadius = cornerRadius;
};
$hxClasses["feathers.skins.TabSkin"] = feathers_skins_TabSkin;
feathers_skins_TabSkin.__name__ = "feathers.skins.TabSkin";
feathers_skins_TabSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_TabSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	set_cornerRadiusPosition: function(value) {
		if(this._cornerRadiusPosition == value) {
			return this._cornerRadiusPosition;
		}
		this._cornerRadiusPosition = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._cornerRadiusPosition;
	}
	,set_drawBaseBorder: function(value) {
		if(this._drawBaseBorder == value) {
			return this._drawBaseBorder;
		}
		this._drawBaseBorder = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._drawBaseBorder;
	}
	,set_cornerRadius: function(value) {
		if(this._cornerRadius == value) {
			return this._cornerRadius;
		}
		this._cornerRadius = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._cornerRadius;
	}
	,drawPath: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var drawWidth = Math.max(0.0,this.actualWidth - thicknessOffset);
		var drawHeight = Math.max(0.0,this.actualHeight - thicknessOffset);
		var adjustedCornerRadius = Math.min(this._cornerRadius,Math.min(this.actualWidth / 2.0,this.actualHeight / 2.0));
		if(adjustedCornerRadius == 0.0 && this._drawBaseBorder) {
			this.get_graphics().drawRect(thicknessOffset,thicknessOffset,drawWidth,drawHeight);
		} else {
			switch(this._cornerRadiusPosition._hx_index) {
			case 0:
				this.get_graphics().moveTo(thicknessOffset + adjustedCornerRadius,thicknessOffset);
				this.get_graphics().lineTo(drawWidth - adjustedCornerRadius,thicknessOffset);
				this.get_graphics().curveTo(drawWidth,thicknessOffset,drawWidth,thicknessOffset + adjustedCornerRadius);
				if(this._drawBaseBorder) {
					this.get_graphics().lineTo(drawWidth,drawHeight);
					this.get_graphics().lineTo(thicknessOffset,drawHeight);
				} else {
					this.get_graphics().lineTo(drawWidth,this.actualHeight);
					this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
					this.get_graphics().lineTo(thicknessOffset,this.actualHeight);
					this.applyLineStyle(currentBorder);
				}
				this.get_graphics().lineTo(thicknessOffset,thicknessOffset + adjustedCornerRadius);
				this.get_graphics().curveTo(thicknessOffset,thicknessOffset,thicknessOffset + adjustedCornerRadius,thicknessOffset);
				break;
			case 1:
				this.get_graphics().moveTo(thicknessOffset,thicknessOffset);
				this.get_graphics().lineTo(drawWidth - adjustedCornerRadius,thicknessOffset);
				this.get_graphics().curveTo(drawWidth,thicknessOffset,drawWidth,thicknessOffset + adjustedCornerRadius);
				this.get_graphics().lineTo(drawWidth,drawHeight - adjustedCornerRadius);
				this.get_graphics().curveTo(drawWidth,drawHeight,drawWidth - adjustedCornerRadius,drawHeight);
				if(this._drawBaseBorder) {
					this.get_graphics().lineTo(thicknessOffset,drawHeight);
					this.get_graphics().lineTo(thicknessOffset,thicknessOffset);
				} else {
					this.get_graphics().lineTo(0.0,drawHeight);
					this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
					this.get_graphics().lineTo(0.0,thicknessOffset);
					this.applyLineStyle(currentBorder);
				}
				break;
			case 2:
				if(this._drawBaseBorder) {
					this.get_graphics().moveTo(thicknessOffset,thicknessOffset);
					this.get_graphics().lineTo(drawWidth,thicknessOffset);
				} else {
					this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
					this.get_graphics().moveTo(thicknessOffset,0.0);
					this.get_graphics().lineTo(drawWidth,0.0);
					this.applyLineStyle(currentBorder);
				}
				this.get_graphics().lineTo(drawWidth,drawHeight - adjustedCornerRadius);
				this.get_graphics().curveTo(drawWidth,drawHeight,drawWidth - adjustedCornerRadius,drawHeight);
				this.get_graphics().lineTo(thicknessOffset + adjustedCornerRadius,drawHeight);
				this.get_graphics().curveTo(thicknessOffset,drawHeight,thicknessOffset,drawHeight - adjustedCornerRadius);
				this.get_graphics().lineTo(thicknessOffset,thicknessOffset);
				break;
			case 3:
				this.get_graphics().moveTo(thicknessOffset + adjustedCornerRadius,thicknessOffset);
				if(this._drawBaseBorder) {
					this.get_graphics().lineTo(drawWidth,thicknessOffset);
					this.get_graphics().lineTo(drawWidth,drawHeight);
				} else {
					this.get_graphics().lineTo(this.actualWidth,thicknessOffset);
					this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
					this.get_graphics().lineTo(this.actualWidth,drawHeight);
					this.applyLineStyle(currentBorder);
				}
				this.get_graphics().lineTo(thicknessOffset + adjustedCornerRadius,drawHeight);
				this.get_graphics().curveTo(thicknessOffset,drawHeight,thicknessOffset,drawHeight - adjustedCornerRadius);
				this.get_graphics().lineTo(thicknessOffset,thicknessOffset + adjustedCornerRadius);
				this.get_graphics().curveTo(thicknessOffset,thicknessOffset,thicknessOffset + adjustedCornerRadius,thicknessOffset);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Tab cornerRadiusPosition not supported: " + Std.string(this._cornerRadiusPosition)));
			}
		}
	}
	,__class__: feathers_skins_TabSkin
	,__properties__: $extend(feathers_skins_BaseGraphicsPathSkin.prototype.__properties__,{set_cornerRadius:"set_cornerRadius",set_drawBaseBorder:"set_drawBaseBorder",set_cornerRadiusPosition:"set_cornerRadiusPosition"})
});
var feathers_skins_TriangleSkin = function(fill,border) {
	this._drawBaseBorder = true;
	this._pointPosition = feathers_layout_RelativePosition.TOP;
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
};
$hxClasses["feathers.skins.TriangleSkin"] = feathers_skins_TriangleSkin;
feathers_skins_TriangleSkin.__name__ = "feathers.skins.TriangleSkin";
feathers_skins_TriangleSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_TriangleSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	set_pointPosition: function(value) {
		if(this._pointPosition == value) {
			return this._pointPosition;
		}
		this._pointPosition = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._pointPosition;
	}
	,set_drawBaseBorder: function(value) {
		if(this._drawBaseBorder == value) {
			return this._drawBaseBorder;
		}
		this._drawBaseBorder = value;
		this.setInvalid(feathers_core_InvalidationFlag.STYLES);
		return this._drawBaseBorder;
	}
	,drawPath: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var maxX = Math.max(0.0,this.actualWidth - thicknessOffset);
		var maxY = Math.max(0.0,this.actualHeight - thicknessOffset);
		switch(this._pointPosition._hx_index) {
		case 0:
			this.get_graphics().moveTo(this.actualWidth / 2.0,thicknessOffset);
			if(this._drawBaseBorder) {
				this.get_graphics().lineTo(maxX,maxY);
				this.get_graphics().lineTo(thicknessOffset,maxY);
			} else {
				this.get_graphics().lineTo(maxX,this.actualHeight);
				this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
				this.get_graphics().lineTo(thicknessOffset,this.actualHeight);
				this.applyLineStyle(currentBorder);
			}
			this.get_graphics().lineTo(this.actualWidth / 2.0,thicknessOffset);
			break;
		case 1:
			if(this._drawBaseBorder) {
				this.get_graphics().moveTo(thicknessOffset,thicknessOffset);
			} else {
				this.get_graphics().moveTo(0.0,thicknessOffset);
			}
			this.get_graphics().lineTo(maxX,this.actualHeight / 2.0);
			if(this._drawBaseBorder) {
				this.get_graphics().lineTo(thicknessOffset,maxY);
				this.get_graphics().lineTo(thicknessOffset,thicknessOffset);
			} else {
				this.get_graphics().lineTo(0.0,maxY);
				this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
				this.get_graphics().lineTo(0.0,thicknessOffset);
				this.applyLineStyle(currentBorder);
			}
			break;
		case 2:
			if(this._drawBaseBorder) {
				this.get_graphics().moveTo(thicknessOffset,thicknessOffset);
				this.get_graphics().lineTo(maxX,thicknessOffset);
			} else {
				this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
				this.get_graphics().moveTo(thicknessOffset,0.0);
				this.get_graphics().lineTo(maxX,0.0);
				this.applyLineStyle(currentBorder);
			}
			this.get_graphics().lineTo(this.actualWidth / 2.0,maxY);
			if(this._drawBaseBorder) {
				this.get_graphics().lineTo(thicknessOffset,thicknessOffset);
			} else {
				this.get_graphics().lineTo(thicknessOffset,0.0);
			}
			break;
		case 3:
			if(this._drawBaseBorder) {
				this.get_graphics().moveTo(maxX,thicknessOffset);
				this.get_graphics().lineTo(maxX,maxY);
			} else {
				this.get_graphics().moveTo(this.actualWidth,thicknessOffset);
				this.get_graphics().lineStyle(0.0,null,0.0,null,null,null,null,0.0);
				this.get_graphics().lineTo(this.actualWidth,maxY);
				this.applyLineStyle(currentBorder);
			}
			this.get_graphics().lineTo(thicknessOffset,this.actualHeight / 2.0);
			if(this._drawBaseBorder) {
				this.get_graphics().lineTo(maxX,thicknessOffset);
			} else {
				this.get_graphics().lineTo(this.actualWidth,thicknessOffset);
			}
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Triangle pointPosition not supported: " + Std.string(this._pointPosition)));
		}
	}
	,__class__: feathers_skins_TriangleSkin
	,__properties__: $extend(feathers_skins_BaseGraphicsPathSkin.prototype.__properties__,{set_drawBaseBorder:"set_drawBaseBorder",set_pointPosition:"set_pointPosition"})
});
var feathers_skins_UnderlineSkin = function(fill,border) {
	feathers_skins_BaseGraphicsPathSkin.call(this,fill,border);
};
$hxClasses["feathers.skins.UnderlineSkin"] = feathers_skins_UnderlineSkin;
feathers_skins_UnderlineSkin.__name__ = "feathers.skins.UnderlineSkin";
feathers_skins_UnderlineSkin.__super__ = feathers_skins_BaseGraphicsPathSkin;
feathers_skins_UnderlineSkin.prototype = $extend(feathers_skins_BaseGraphicsPathSkin.prototype,{
	draw: function() {
		var currentBorder = this.getCurrentBorder();
		var thicknessOffset = this.getLineThickness(currentBorder) / 2.0;
		var currentFill = this.getCurrentFill();
		if(currentFill != null) {
			this.applyFillStyle(currentFill);
			this.get_graphics().drawRect(0.0,0.0,this.actualWidth,Math.max(0.0,this.actualHeight - thicknessOffset));
			this.get_graphics().endFill();
		}
		var minLineX = Math.min(this.actualWidth,thicknessOffset);
		var minLineY = Math.min(this.actualHeight,thicknessOffset);
		var maxLineX = Math.max(minLineX,this.actualWidth - thicknessOffset);
		var maxLineY = Math.max(minLineY,this.actualHeight - thicknessOffset);
		this.applyLineStyle(currentBorder);
		this.get_graphics().moveTo(minLineX,maxLineY);
		this.get_graphics().lineTo(maxLineX,maxLineY);
	}
	,__class__: feathers_skins_UnderlineSkin
});
var feathers_style_IStyleProvider = function() { };
$hxClasses["feathers.style.IStyleProvider"] = feathers_style_IStyleProvider;
feathers_style_IStyleProvider.__name__ = "feathers.style.IStyleProvider";
feathers_style_IStyleProvider.__isInterface__ = true;
feathers_style_IStyleProvider.__interfaces__ = [openfl_events_IEventDispatcher];
feathers_style_IStyleProvider.prototype = {
	__class__: feathers_style_IStyleProvider
};
var feathers_style_ClassVariantStyleProvider = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["feathers.style.ClassVariantStyleProvider"] = feathers_style_ClassVariantStyleProvider;
feathers_style_ClassVariantStyleProvider.__name__ = "feathers.style.ClassVariantStyleProvider";
feathers_style_ClassVariantStyleProvider.__interfaces__ = [feathers_style_IStyleProvider];
feathers_style_ClassVariantStyleProvider.__super__ = openfl_events_EventDispatcher;
feathers_style_ClassVariantStyleProvider.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	setStyleFunction: function(type,variant,callback) {
		var _gthis = this;
		if(this.styleTargets == null) {
			this.styleTargets = new haxe_ds_EnumValueMap();
		}
		var typeName = type.__name__;
		var styleTarget = variant == null ? feathers_style__$ClassVariantStyleProvider_StyleTarget.Class(typeName) : feathers_style__$ClassVariantStyleProvider_StyleTarget.ClassAndVariant(typeName,variant);
		if(callback == null) {
			if(!this.styleTargets.exists(styleTarget)) {
				return;
			}
			this.styleTargets.remove(styleTarget);
		} else {
			var oldCallback = this.styleTargets.get(styleTarget);
			if(Reflect.compareMethods(callback,oldCallback) || Reflect.compare(callback,oldCallback) == 0) {
				return;
			}
			this.styleTargets.set(styleTarget,callback);
		}
		feathers_events_StyleProviderEvent.dispatch(this,"stylesChange",function(target) {
			var styleContext = _gthis.getStyleContext(target);
			var variant = _gthis.getVariant(target);
			var otherCallback = _gthis.getStyleFunctionInternal(styleContext,variant,false);
			if(!Reflect.compareMethods(callback,otherCallback)) {
				return Reflect.compare(callback,otherCallback) == 0;
			} else {
				return true;
			}
		});
	}
	,getStyleFunction: function(type,variant) {
		return this.getStyleFunctionInternal(type,variant,true);
	}
	,applyStyles: function(target) {
		if(this.styleTargets == null) {
			return;
		}
		var styleContext = this.getStyleContext(target);
		var variant = this.getVariant(target);
		var callback = this.getStyleFunctionInternal(styleContext,variant,false);
		if(callback == null) {
			return;
		}
		callback(target);
	}
	,getStyleContext: function(target) {
		var styleContext = null;
		if(js_Boot.__implements(target,feathers_style_IVariantStyleObject)) {
			var variantObject = js_Boot.__cast(target , feathers_style_IVariantStyleObject);
			styleContext = variantObject.get_styleContext();
		}
		if(styleContext == null) {
			styleContext = js_Boot.getClass(target);
		}
		return styleContext;
	}
	,getVariant: function(target) {
		var variant = null;
		if(js_Boot.__implements(target,feathers_style_IVariantStyleObject)) {
			var variantObject = js_Boot.__cast(target , feathers_style_IVariantStyleObject);
			variant = variantObject.get_variant();
		}
		return variant;
	}
	,getStyleFunctionInternal: function(type,variant,strict) {
		if(this.styleTargets == null) {
			return null;
		}
		var typeName = type.__name__;
		var styleTarget = variant == null ? feathers_style__$ClassVariantStyleProvider_StyleTarget.Class(typeName) : feathers_style__$ClassVariantStyleProvider_StyleTarget.ClassAndVariant(typeName,variant);
		var result = this.styleTargets.get(styleTarget);
		if(result != null || strict) {
			return result;
		}
		return this.styleTargets.get(feathers_style__$ClassVariantStyleProvider_StyleTarget.Class(typeName));
	}
	,__class__: feathers_style_ClassVariantStyleProvider
});
var feathers_style__$ClassVariantStyleProvider_StyleTarget = $hxEnums["feathers.style._ClassVariantStyleProvider.StyleTarget"] = { __ename__:"feathers.style._ClassVariantStyleProvider.StyleTarget",__constructs__:null
	,Class: ($_=function(type) { return {_hx_index:0,type:type,__enum__:"feathers.style._ClassVariantStyleProvider.StyleTarget",toString:$estr}; },$_._hx_name="Class",$_.__params__ = ["type"],$_)
	,ClassAndVariant: ($_=function(type,variant) { return {_hx_index:1,type:type,variant:variant,__enum__:"feathers.style._ClassVariantStyleProvider.StyleTarget",toString:$estr}; },$_._hx_name="ClassAndVariant",$_.__params__ = ["type","variant"],$_)
};
feathers_style__$ClassVariantStyleProvider_StyleTarget.__constructs__ = [feathers_style__$ClassVariantStyleProvider_StyleTarget.Class,feathers_style__$ClassVariantStyleProvider_StyleTarget.ClassAndVariant];
var feathers_style_ITheme = function() { };
$hxClasses["feathers.style.ITheme"] = feathers_style_ITheme;
feathers_style_ITheme.__name__ = "feathers.style.ITheme";
feathers_style_ITheme.__isInterface__ = true;
feathers_style_ITheme.prototype = {
	__class__: feathers_style_ITheme
};
var feathers_style_IDarkModeTheme = function() { };
$hxClasses["feathers.style.IDarkModeTheme"] = feathers_style_IDarkModeTheme;
feathers_style_IDarkModeTheme.__name__ = "feathers.style.IDarkModeTheme";
feathers_style_IDarkModeTheme.__isInterface__ = true;
feathers_style_IDarkModeTheme.__interfaces__ = [feathers_style_ITheme];
var feathers_style_Theme = function() { };
$hxClasses["feathers.style.Theme"] = feathers_style_Theme;
feathers_style_Theme.__name__ = "feathers.style.Theme";
feathers_style_Theme.__properties__ = {get_fallbackTheme:"get_fallbackTheme"};
feathers_style_Theme.get_fallbackTheme = function() {
	if(feathers_style_Theme._fallbackTheme == null) {
		feathers_style_Theme._fallbackTheme = new feathers_themes_steel_DefaultSteelTheme();
	}
	return feathers_style_Theme._fallbackTheme;
};
feathers_style_Theme.getTheme = function(object) {
	if(((object) instanceof openfl_display_DisplayObject)) {
		var current = js_Boot.__cast(object , openfl_display_DisplayObject);
		while(current != null) {
			if(js_Boot.__implements(current,feathers_style_IStyleObject)) {
				var currentStylable = js_Boot.__cast(current , feathers_style_IStyleObject);
				if(!currentStylable.get_themeEnabled()) {
					return null;
				}
			}
			current = current.parent;
		}
		if(feathers_style_Theme.roots != null) {
			var displayObject = js_Boot.__cast(object , openfl_display_DisplayObject);
			var _g = 0;
			var _g1 = feathers_style_Theme.roots;
			while(_g < _g1.length) {
				var root = _g1[_g];
				++_g;
				if(root.contains(displayObject)) {
					return feathers_style_Theme.rootToTheme.h[root.__id__];
				}
			}
		}
	} else if(object != null && !object.get_themeEnabled()) {
		return null;
	}
	if(feathers_style_Theme.primaryTheme != null) {
		return feathers_style_Theme.primaryTheme;
	}
	return feathers_style_Theme.get_fallbackTheme();
};
var feathers_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	openfl_events_EventDispatcher.call(this);
	this._textFormat = new openfl_text_TextFormat(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading);
};
$hxClasses["feathers.text.TextFormat"] = feathers_text_TextFormat;
feathers_text_TextFormat.__name__ = "feathers.text.TextFormat";
feathers_text_TextFormat.__super__ = openfl_events_EventDispatcher;
feathers_text_TextFormat.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	toSimpleTextFormat: function() {
		return this._textFormat;
	}
	,__class__: feathers_text_TextFormat
});
var feathers_themes_ClassVariantTheme = function() {
	this.styleProvider = new feathers_style_ClassVariantStyleProvider();
};
$hxClasses["feathers.themes.ClassVariantTheme"] = feathers_themes_ClassVariantTheme;
feathers_themes_ClassVariantTheme.__name__ = "feathers.themes.ClassVariantTheme";
feathers_themes_ClassVariantTheme.__interfaces__ = [feathers_style_ITheme];
feathers_themes_ClassVariantTheme.prototype = {
	getStyleProvider: function(target) {
		var styleContext = null;
		var variant = null;
		if(js_Boot.__implements(target,feathers_style_IVariantStyleObject)) {
			var variantObject = js_Boot.__cast(target , feathers_style_IVariantStyleObject);
			styleContext = variantObject.get_styleContext();
			variant = variantObject.get_variant();
		}
		if(styleContext == null) {
			styleContext = js_Boot.getClass(target);
		}
		var styleFunction = this.styleProvider.getStyleFunction(styleContext,variant);
		if(styleFunction != null) {
			return this.styleProvider;
		}
		if(variant == null) {
			return null;
		}
		var fallbackTheme = feathers_style_Theme.get_fallbackTheme();
		if(fallbackTheme != null && fallbackTheme != this && ((fallbackTheme) instanceof feathers_themes_ClassVariantTheme)) {
			var value = fallbackTheme.getStyleProvider(target);
			var fallbackStyleProvider = ((value) instanceof feathers_style_ClassVariantStyleProvider) ? value : null;
			if(fallbackStyleProvider != null) {
				var styleFunction1 = fallbackStyleProvider.getStyleFunction(styleContext,variant);
				if(styleFunction1 != null) {
					return null;
				}
			}
		}
		styleFunction = this.styleProvider.getStyleFunction(styleContext,null);
		if(styleFunction != null) {
			return this.styleProvider;
		}
		return null;
	}
	,__class__: feathers_themes_ClassVariantTheme
};
var feathers_themes_steel_BaseSteelTheme = function(themeColor,darkThemeColor) {
	this._darkMode = false;
	feathers_themes_ClassVariantTheme.call(this);
	this.customThemeColor = themeColor;
	this.customDarkThemeColor = darkThemeColor;
	this.refreshColors();
	this.refreshFonts();
	this.styleProvider = new feathers_style_ClassVariantStyleProvider();
	var htmlWindow = js_Boot.__cast($global , Window);
	this.mediaQueryList = htmlWindow.matchMedia("(hover: hover) and (pointer: fine)");
	this.mediaQueryList.addListener($bind(this,this.mediaQueryList_changeHandler));
};
$hxClasses["feathers.themes.steel.BaseSteelTheme"] = feathers_themes_steel_BaseSteelTheme;
feathers_themes_steel_BaseSteelTheme.__name__ = "feathers.themes.steel.BaseSteelTheme";
feathers_themes_steel_BaseSteelTheme.__interfaces__ = [feathers_style_IDarkModeTheme];
feathers_themes_steel_BaseSteelTheme.__super__ = feathers_themes_ClassVariantTheme;
feathers_themes_steel_BaseSteelTheme.prototype = $extend(feathers_themes_ClassVariantTheme.prototype,{
	refreshColors: function() {
		if(this._darkMode) {
			if(this.customDarkThemeColor != null) {
				this.themeColor = this.customDarkThemeColor;
			} else if(this.customThemeColor != null) {
				this.themeColor = this.customThemeColor;
			} else {
				this.themeColor = 5205919;
			}
			this.offsetThemeColor = this.darken(this.themeColor,986895);
			this.rootFillColor = 3684408;
			this.controlFillColor1 = 6250335;
			this.controlFillColor2 = 5000268;
			this.controlDisabledFillColor = 3158064;
			this.scrollBarThumbFillColor = 7303023;
			this.scrollBarThumbDisabledFillColor = 4144959;
			this.insetFillColor = 1579032;
			this.disabledInsetFillColor = 2631720;
			this.insetBorderColor = 4737096;
			this.disabledInsetBorderColor = 3684408;
			this.selectedInsetBorderColor = this.themeColor;
			this.activeFillBorderColor = this.darken(this.themeColor,3092271);
			this.selectedBorderColor = this.lighten(this.themeColor,986895);
			this.focusBorderColor = this.lighten(this.themeColor,986895);
			this.containerFillColor = 3684408;
			this.headerFillColor = 4144959;
			this.overlayFillColor = 7303023;
			this.subHeadingFillColor = 2894892;
			this.dangerFillColor = 10440527;
			this.offsetDangerFillColor = this.darken(this.dangerFillColor,986895);
			this.dangerBorderColor = this.darken(this.dangerFillColor,3092271);
			this.borderColor = 526344;
			this.dividerColor = 2631720;
			this.subHeadingDividerColor = 789516;
			this.textColor = 15856113;
			this.disabledTextColor = 9408399;
			this.secondaryTextColor = 11513775;
			this.dangerTextColor = 13385535;
		} else {
			if(this.customThemeColor != null) {
				this.themeColor = this.customThemeColor;
			} else {
				this.themeColor = 10535152;
			}
			this.offsetThemeColor = this.darken(this.themeColor,986895);
			this.rootFillColor = 16316664;
			this.controlFillColor1 = 16777215;
			this.controlFillColor2 = 15263976;
			this.controlDisabledFillColor = 15724527;
			this.scrollBarThumbFillColor = 9408399;
			this.scrollBarThumbDisabledFillColor = 13619151;
			this.insetFillColor = 16579836;
			this.disabledInsetFillColor = 15856113;
			this.insetBorderColor = 11316396;
			this.disabledInsetBorderColor = 13421772;
			this.selectedInsetBorderColor = this.darken(this.themeColor,3092271);
			this.activeFillBorderColor = this.darken(this.themeColor,3092271);
			this.selectedBorderColor = this.darken(this.themeColor,3092271);
			this.focusBorderColor = this.darken(this.themeColor,3092271);
			this.containerFillColor = 16316664;
			this.headerFillColor = 15527148;
			this.overlayFillColor = 9408399;
			this.subHeadingFillColor = 14671839;
			this.dangerFillColor = 15769760;
			this.offsetDangerFillColor = this.darken(this.dangerFillColor,986895);
			this.dangerBorderColor = this.darken(this.dangerFillColor,3092271);
			this.borderColor = 11316396;
			this.dividerColor = 14671839;
			this.subHeadingDividerColor = 13619151;
			this.textColor = 2039583;
			this.disabledTextColor = 10461087;
			this.secondaryTextColor = 7303023;
			this.dangerTextColor = 13385535;
		}
	}
	,refreshFonts: function() {
		this.fontName = "_sans";
		this.refreshFontSizes();
	}
	,refreshFontSizes: function() {
		this.fontSize = 14;
		this.headerFontSize = 18;
		this.detailFontSize = 12;
	}
	,getThemeFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.themeColor);
	}
	,getControlFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.controlFillColor2);
	}
	,getControlDisabledFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.controlDisabledFillColor,0.7);
	}
	,getButtonFill: function() {
		return feathers_graphics_FillStyle.Gradient(0,[this.controlFillColor1,this.controlFillColor2],[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getButtonDownFill: function() {
		return feathers_graphics_FillStyle.Gradient(0,[this.controlFillColor2,this.controlFillColor1],[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getButtonDisabledFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.controlDisabledFillColor,0.7);
	}
	,getScrollBarThumbFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.scrollBarThumbFillColor);
	}
	,getScrollBarThumbDisabledFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.scrollBarThumbDisabledFillColor,0.7);
	}
	,getButtonBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.borderColor);
	}
	,getInsetBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.insetBorderColor);
	}
	,getDisabledInsetBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.disabledInsetBorderColor);
	}
	,getSelectedInsetBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.selectedInsetBorderColor);
	}
	,getThemeBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.themeColor);
	}
	,getSelectedBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.selectedBorderColor);
	}
	,getActiveFillBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.activeFillBorderColor);
	}
	,getContainerBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.borderColor);
	}
	,getDividerBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.dividerColor);
	}
	,getFocusBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.focusBorderColor);
	}
	,getInsetFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.insetFillColor);
	}
	,getDisabledInsetFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.disabledInsetFillColor);
	}
	,getActiveThemeFill: function() {
		var colors = [this.themeColor,this.offsetThemeColor];
		return feathers_graphics_FillStyle.Gradient(0,colors,[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getReversedActiveThemeFill: function() {
		var colors = [this.offsetThemeColor,this.themeColor];
		return feathers_graphics_FillStyle.Gradient(0,colors,[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getDangerFill: function() {
		var colors = [this.dangerFillColor,this.offsetDangerFillColor];
		return feathers_graphics_FillStyle.Gradient(0,colors,[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getReversedDangerFill: function() {
		var colors = [this.offsetDangerFillColor,this.dangerFillColor];
		return feathers_graphics_FillStyle.Gradient(0,colors,[1.0,1.0],[0,255],feathers_graphics_CreateGradientBoxMatrix.fromRadians(Math.PI / 2.0));
	}
	,getDangerBorder: function(thickness) {
		if(thickness == null) {
			thickness = 1.0;
		}
		return feathers_graphics_LineStyle.SolidColor(thickness,this.dangerBorderColor);
	}
	,getContainerFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.containerFillColor);
	}
	,getTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.fontSize,this.textColor,null,null,null,null,null,align);
	}
	,getDisabledTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.fontSize,this.disabledTextColor,null,null,null,null,null,align);
	}
	,getSecondaryTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.fontSize,this.secondaryTextColor,null,null,null,null,null,align);
	}
	,getHeaderTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.headerFontSize,this.textColor,null,null,null,null,null,align);
	}
	,getDisabledHeaderTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.headerFontSize,this.disabledTextColor,null,null,null,null,null,align);
	}
	,getDetailTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.detailFontSize,this.secondaryTextColor,null,null,null,null,null,align);
	}
	,getDisabledDetailTextFormat: function(align) {
		if(align == null) {
			align = 3;
		}
		return new feathers_text_TextFormat(this.fontName,this.detailFontSize,this.disabledTextColor,null,null,null,null,null,align);
	}
	,getHeaderFill: function() {
		return feathers_graphics_FillStyle.SolidColor(this.headerFillColor);
	}
	,lighten: function(color,offset) {
		var r1 = color >> 16 & 255;
		var g1 = color >> 8 & 255;
		var b1 = color & 255;
		var r2 = offset >> 16 & 255;
		var g2 = offset >> 8 & 255;
		var b2 = offset & 255;
		r1 += r2;
		if(r1 > 255) {
			r1 = 255;
		}
		g1 += g2;
		if(g1 > 255) {
			g1 = 255;
		}
		b1 += b2;
		if(b1 > 255) {
			b1 = 255;
		}
		return (r1 << 16) + (g1 << 8) + b1;
	}
	,darken: function(color,offset) {
		var r1 = color >> 16 & 255;
		var g1 = color >> 8 & 255;
		var b1 = color & 255;
		var r2 = offset >> 16 & 255;
		var g2 = offset >> 8 & 255;
		var b2 = offset & 255;
		r1 -= r2;
		if(r1 < 0) {
			r1 = 0;
		}
		g1 -= g2;
		if(g1 < 0) {
			g1 = 0;
		}
		b1 -= b2;
		if(b1 < 0) {
			b1 = 0;
		}
		return (r1 << 16) + (g1 << 8) + b1;
	}
	,mediaQueryList_changeHandler: function(event) {
		feathers_events_StyleProviderEvent.dispatch(this.styleProvider,"stylesChange");
	}
	,__class__: feathers_themes_steel_BaseSteelTheme
});
var feathers_themes_steel_DefaultSteelTheme = function(themeColor,darkThemeColor) {
	feathers_themes_steel_BaseSteelTheme.call(this,themeColor,darkThemeColor);
};
$hxClasses["feathers.themes.steel.DefaultSteelTheme"] = feathers_themes_steel_DefaultSteelTheme;
feathers_themes_steel_DefaultSteelTheme.__name__ = "feathers.themes.steel.DefaultSteelTheme";
feathers_themes_steel_DefaultSteelTheme.__super__ = feathers_themes_steel_BaseSteelTheme;
feathers_themes_steel_DefaultSteelTheme.prototype = $extend(feathers_themes_steel_BaseSteelTheme.prototype,{
	__class__: feathers_themes_steel_DefaultSteelTheme
});
var feathers_themes_steel_components_SteelButtonStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelButtonStyles"] = feathers_themes_steel_components_SteelButtonStyles;
feathers_themes_steel_components_SteelButtonStyles.__name__ = "feathers.themes.steel.components.SteelButtonStyles";
feathers_themes_steel_components_SteelButtonStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_Button,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_Button,null,function(button) {
			if(button.get_backgroundSkin() == null) {
				var skin = new feathers_skins_RectangleSkin();
				skin.set_fill(theme.getButtonFill());
				skin.set_disabledFill(theme.getButtonDisabledFill());
				skin.setFillForState(feathers_controls_ButtonState.DOWN,theme.getReversedActiveThemeFill());
				skin.set_border(theme.getButtonBorder());
				skin.setBorderForState(feathers_controls_ButtonState.DOWN,theme.getActiveFillBorder());
				skin.set_cornerRadius(3.0);
				button.set_backgroundSkin(skin);
			}
			if(button.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				focusRectSkin.set_cornerRadius(3.0);
				button.set_focusRectSkin(focusRectSkin);
			}
			if(button.get_textFormat() == null) {
				button.set_textFormat(theme.getTextFormat());
			}
			if(button.get_disabledTextFormat() == null) {
				button.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			button.set_paddingTop(4.0);
			button.set_paddingRight(10.0);
			button.set_paddingBottom(4.0);
			button.set_paddingLeft(10.0);
			button.set_gap(4.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_Button,feathers_controls_Button.VARIANT_PRIMARY) == null) {
		styleProvider.setStyleFunction(feathers_controls_Button,feathers_controls_Button.VARIANT_PRIMARY,function(button) {
			if(button.get_backgroundSkin() == null) {
				var skin = new feathers_skins_RectangleSkin();
				skin.set_fill(theme.getActiveThemeFill());
				skin.set_disabledFill(theme.getButtonDisabledFill());
				skin.setFillForState(feathers_controls_ButtonState.DOWN,theme.getReversedActiveThemeFill());
				skin.set_border(theme.getActiveFillBorder());
				skin.set_disabledBorder(theme.getButtonBorder());
				skin.set_cornerRadius(3.0);
				button.set_backgroundSkin(skin);
			}
			if(button.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				focusRectSkin.set_cornerRadius(3.0);
				button.set_focusRectSkin(focusRectSkin);
			}
			if(button.get_textFormat() == null) {
				button.set_textFormat(theme.getTextFormat());
			}
			if(button.get_disabledTextFormat() == null) {
				button.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			button.set_paddingTop(4.0);
			button.set_paddingRight(10.0);
			button.set_paddingBottom(4.0);
			button.set_paddingLeft(10.0);
			button.set_gap(4.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_Button,feathers_controls_Button.VARIANT_DANGER) == null) {
		styleProvider.setStyleFunction(feathers_controls_Button,feathers_controls_Button.VARIANT_DANGER,function(button) {
			if(button.get_backgroundSkin() == null) {
				var skin = new feathers_skins_RectangleSkin();
				skin.set_fill(theme.getDangerFill());
				skin.set_disabledFill(theme.getButtonDisabledFill());
				skin.setFillForState(feathers_controls_ButtonState.DOWN,theme.getReversedDangerFill());
				skin.set_border(theme.getDangerBorder());
				skin.set_disabledBorder(theme.getButtonBorder());
				skin.set_cornerRadius(3.0);
				button.set_backgroundSkin(skin);
			}
			if(button.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				focusRectSkin.set_cornerRadius(3.0);
				button.set_focusRectSkin(focusRectSkin);
			}
			if(button.get_textFormat() == null) {
				button.set_textFormat(theme.getTextFormat());
			}
			if(button.get_disabledTextFormat() == null) {
				button.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			button.set_paddingTop(4.0);
			button.set_paddingRight(10.0);
			button.set_paddingBottom(4.0);
			button.set_paddingLeft(10.0);
			button.set_gap(4.0);
		});
	}
};
var feathers_themes_steel_components_SteelCalloutStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelCalloutStyles"] = feathers_themes_steel_components_SteelCalloutStyles;
feathers_themes_steel_components_SteelCalloutStyles.__name__ = "feathers.themes.steel.components.SteelCalloutStyles";
feathers_themes_steel_components_SteelCalloutStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_Callout,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_Callout,null,function(callout) {
			if(callout.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(theme.getContainerFill());
				backgroundSkin.set_border(theme.getContainerBorder());
				callout.set_backgroundSkin(backgroundSkin);
			}
			if(callout.get_topArrowSkin() == null) {
				var topArrowSkin = new feathers_skins_TriangleSkin();
				topArrowSkin.set_pointPosition(feathers_layout_RelativePosition.TOP);
				topArrowSkin.set_drawBaseBorder(false);
				topArrowSkin.set_fill(theme.getContainerFill());
				topArrowSkin.set_border(theme.getContainerBorder());
				topArrowSkin.set_width(14.0);
				topArrowSkin.set_height(8.0);
				callout.set_topArrowSkin(topArrowSkin);
			}
			if(callout.get_rightArrowSkin() == null) {
				var rightArrowSkin = new feathers_skins_TriangleSkin();
				rightArrowSkin.set_pointPosition(feathers_layout_RelativePosition.RIGHT);
				rightArrowSkin.set_drawBaseBorder(false);
				rightArrowSkin.set_fill(theme.getContainerFill());
				rightArrowSkin.set_border(theme.getContainerBorder());
				rightArrowSkin.set_width(8.0);
				rightArrowSkin.set_height(14.0);
				callout.set_rightArrowSkin(rightArrowSkin);
			}
			if(callout.get_bottomArrowSkin() == null) {
				var bottomArrowSkin = new feathers_skins_TriangleSkin();
				bottomArrowSkin.set_pointPosition(feathers_layout_RelativePosition.BOTTOM);
				bottomArrowSkin.set_drawBaseBorder(false);
				bottomArrowSkin.set_fill(theme.getContainerFill());
				bottomArrowSkin.set_border(theme.getContainerBorder());
				bottomArrowSkin.set_width(14.0);
				bottomArrowSkin.set_height(8.0);
				callout.set_bottomArrowSkin(bottomArrowSkin);
			}
			if(callout.get_leftArrowSkin() == null) {
				var leftArrowSkin = new feathers_skins_TriangleSkin();
				leftArrowSkin.set_pointPosition(feathers_layout_RelativePosition.LEFT);
				leftArrowSkin.set_drawBaseBorder(false);
				leftArrowSkin.set_fill(theme.getContainerFill());
				leftArrowSkin.set_border(theme.getContainerBorder());
				leftArrowSkin.set_width(8.0);
				leftArrowSkin.set_height(14.0);
				callout.set_leftArrowSkin(leftArrowSkin);
			}
			callout.set_topArrowGap(-1.0);
			callout.set_rightArrowGap(-1.0);
			callout.set_bottomArrowGap(-1.0);
			callout.set_leftArrowGap(-1.0);
			callout.set_paddingTop(1.0);
			callout.set_paddingRight(1.0);
			callout.set_paddingBottom(1.0);
			callout.set_paddingLeft(1.0);
			callout.set_marginTop(10.0);
			callout.set_marginRight(10.0);
			callout.set_marginBottom(10.0);
			callout.set_marginLeft(10.0);
		});
	}
};
var feathers_themes_steel_components_SteelCheckStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelCheckStyles"] = feathers_themes_steel_components_SteelCheckStyles;
feathers_themes_steel_components_SteelCheckStyles.__name__ = "feathers.themes.steel.components.SteelCheckStyles";
feathers_themes_steel_components_SteelCheckStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_Check,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_Check,null,function(check) {
			if(check.get_textFormat() == null) {
				check.set_textFormat(theme.getTextFormat());
			}
			if(check.get_disabledTextFormat() == null) {
				check.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(check.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(feathers_graphics_FillStyle.SolidColor(0,0.0));
				backgroundSkin.set_border(null);
				check.set_backgroundSkin(backgroundSkin);
			}
			if(check.get_icon() == null) {
				var icon = new feathers_skins_MultiSkin();
				check.set_icon(icon);
				var defaultIcon = new feathers_skins_RectangleSkin();
				defaultIcon.set_width(20.0);
				defaultIcon.set_height(20.0);
				defaultIcon.set_minWidth(20.0);
				defaultIcon.set_minHeight(20.0);
				defaultIcon.set_border(theme.getInsetBorder());
				defaultIcon.set_disabledBorder(theme.getDisabledInsetBorder());
				defaultIcon.setBorderForState(feathers_controls_ToggleButtonState.DOWN(false),theme.getSelectedInsetBorder());
				defaultIcon.set_fill(theme.getInsetFill());
				defaultIcon.set_disabledFill(theme.getDisabledInsetFill());
				icon.set_defaultView(defaultIcon);
				var selectedIcon = new feathers_skins_RectangleSkin();
				selectedIcon.set_width(20.0);
				selectedIcon.set_height(20.0);
				selectedIcon.set_minWidth(20.0);
				selectedIcon.set_minHeight(20.0);
				selectedIcon.set_border(theme.getSelectedInsetBorder());
				selectedIcon.set_disabledBorder(theme.getDisabledInsetBorder());
				selectedIcon.setBorderForState(feathers_controls_ToggleButtonState.DOWN(true),theme.getSelectedInsetBorder());
				selectedIcon.set_fill(theme.getReversedActiveThemeFill());
				selectedIcon.set_disabledFill(theme.getDisabledInsetFill());
				var checkMark = new openfl_display_Shape();
				checkMark.get_graphics().beginFill(theme.textColor);
				checkMark.get_graphics().drawRect(-1.0,-8.0,3.0,14.0);
				checkMark.get_graphics().endFill();
				checkMark.get_graphics().beginFill(theme.textColor);
				checkMark.get_graphics().drawRect(-5.0,3.0,5.0,3.0);
				checkMark.get_graphics().endFill();
				checkMark.set_rotation(45.0);
				checkMark.set_x(10.0);
				checkMark.set_y(10.0);
				selectedIcon.addChild(checkMark);
				icon.set_selectedView(selectedIcon);
				var disabledAndSelectedIcon = new feathers_skins_RectangleSkin();
				disabledAndSelectedIcon.set_width(20.0);
				disabledAndSelectedIcon.set_height(20.0);
				disabledAndSelectedIcon.set_minWidth(20.0);
				disabledAndSelectedIcon.set_minHeight(20.0);
				disabledAndSelectedIcon.set_border(theme.getDisabledInsetBorder());
				disabledAndSelectedIcon.set_fill(theme.getDisabledInsetFill());
				var disabledCheckMark = new openfl_display_Shape();
				disabledCheckMark.get_graphics().beginFill(theme.disabledTextColor);
				disabledCheckMark.get_graphics().drawRect(-1.0,-8.0,3.0,14.0);
				disabledCheckMark.get_graphics().endFill();
				disabledCheckMark.get_graphics().beginFill(theme.disabledTextColor);
				disabledCheckMark.get_graphics().drawRect(-5.0,3.0,5.0,3.0);
				disabledCheckMark.get_graphics().endFill();
				disabledCheckMark.set_rotation(45.0);
				disabledCheckMark.set_x(10.0);
				disabledCheckMark.set_y(10.0);
				disabledAndSelectedIcon.addChild(disabledCheckMark);
				icon.setViewForState(feathers_controls_ToggleButtonState.DISABLED(true),disabledAndSelectedIcon);
			}
			if(check.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				focusRectSkin.set_cornerRadius(3.0);
				check.set_focusRectSkin(focusRectSkin);
				check.set_focusPaddingTop(3.0);
				check.set_focusPaddingRight(3.0);
				check.set_focusPaddingBottom(3.0);
				check.set_focusPaddingLeft(3.0);
			}
			check.set_horizontalAlign(feathers_layout_HorizontalAlign.LEFT);
			check.set_gap(4.0);
		});
	}
};
var feathers_themes_steel_components_SteelComboBoxStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelComboBoxStyles"] = feathers_themes_steel_components_SteelComboBoxStyles;
feathers_themes_steel_components_SteelComboBoxStyles.__name__ = "feathers.themes.steel.components.SteelComboBoxStyles";
feathers_themes_steel_components_SteelComboBoxStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_Button,feathers_controls_ComboBox.CHILD_VARIANT_BUTTON) == null) {
		styleProvider.setStyleFunction(feathers_controls_Button,feathers_controls_ComboBox.CHILD_VARIANT_BUTTON,function(button) {
			if(button.get_backgroundSkin() == null) {
				var skin = new feathers_skins_TabSkin();
				skin.set_cornerRadiusPosition(feathers_layout_RelativePosition.RIGHT);
				skin.set_fill(theme.getButtonFill());
				skin.set_disabledFill(theme.getButtonDisabledFill());
				skin.setFillForState(feathers_controls_ButtonState.DOWN,theme.getReversedActiveThemeFill());
				skin.set_border(theme.getButtonBorder());
				skin.setBorderForState(feathers_controls_ButtonState.DOWN,theme.getActiveFillBorder());
				skin.set_cornerRadius(3.0);
				button.set_backgroundSkin(skin);
			}
			if(button.get_icon() == null) {
				var icon = new feathers_skins_TriangleSkin();
				icon.set_pointPosition(feathers_layout_RelativePosition.BOTTOM);
				icon.set_fill(feathers_graphics_FillStyle.SolidColor(theme.textColor));
				icon.set_disabledFill(feathers_graphics_FillStyle.SolidColor(theme.disabledTextColor));
				icon.set_width(8.0);
				icon.set_height(4.0);
				button.set_icon(icon);
			}
			button.set_paddingTop(4.0);
			button.set_paddingRight(10.0);
			button.set_paddingBottom(4.0);
			button.set_paddingLeft(10.0);
			button.set_gap(4.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_TextInput,feathers_controls_ComboBox.CHILD_VARIANT_TEXT_INPUT) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextInput,feathers_controls_ComboBox.CHILD_VARIANT_TEXT_INPUT,function(input) {
			if(input.get_backgroundSkin() == null) {
				var inputSkin = new feathers_skins_TabSkin();
				inputSkin.set_cornerRadiusPosition(feathers_layout_RelativePosition.LEFT);
				inputSkin.set_cornerRadius(3.0);
				inputSkin.set_drawBaseBorder(false);
				inputSkin.set_width(160.0);
				inputSkin.set_fill(theme.getInsetFill());
				inputSkin.set_border(theme.getInsetBorder());
				inputSkin.set_disabledFill(theme.getDisabledInsetFill());
				inputSkin.setBorderForState(feathers_controls_TextInputState.FOCUSED,theme.getThemeBorder());
				input.set_backgroundSkin(inputSkin);
			}
			if(input.get_textFormat() == null) {
				input.set_textFormat(theme.getTextFormat());
			}
			if(input.get_disabledTextFormat() == null) {
				input.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(input.get_promptTextFormat() == null) {
				input.set_promptTextFormat(theme.getSecondaryTextFormat());
			}
			input.set_paddingTop(6.0);
			input.set_paddingRight(10.0);
			input.set_paddingBottom(6.0);
			input.set_paddingLeft(10.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_ListView,feathers_controls_ComboBox.CHILD_VARIANT_LIST_VIEW) == null) {
		styleProvider.setStyleFunction(feathers_controls_ListView,feathers_controls_ComboBox.CHILD_VARIANT_LIST_VIEW,function(listView) {
			(theme.styleProvider.getStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_POP_UP))(listView);
		});
	}
};
var feathers_themes_steel_components_SteelHScrollBarStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelHScrollBarStyles"] = feathers_themes_steel_components_SteelHScrollBarStyles;
feathers_themes_steel_components_SteelHScrollBarStyles.__name__ = "feathers.themes.steel.components.SteelHScrollBarStyles";
feathers_themes_steel_components_SteelHScrollBarStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_HScrollBar,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_HScrollBar,null,function(scrollBar) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			if(scrollBar.get_thumbSkin() == null) {
				var thumbSkin = new feathers_skins_RectangleSkin();
				thumbSkin.set_fill(theme.getScrollBarThumbFill());
				thumbSkin.set_disabledFill(theme.getScrollBarThumbDisabledFill());
				var size = isDesktop ? 6.0 : 4.0;
				thumbSkin.set_width(size);
				thumbSkin.set_height(size);
				thumbSkin.set_minWidth(size);
				thumbSkin.set_minHeight(size);
				thumbSkin.set_cornerRadius(size / 2.0);
				var thumb = new feathers_controls_BasicButton();
				thumb.set_keepDownStateOnRollOut(true);
				thumb.set_backgroundSkin(thumbSkin);
				scrollBar.set_thumbSkin(thumb);
			}
			if(isDesktop && scrollBar.get_trackSkin() == null) {
				var trackSkin = new feathers_skins_RectangleSkin();
				trackSkin.set_fill(theme.getControlFill());
				trackSkin.set_disabledFill(theme.getControlDisabledFill());
				trackSkin.set_width(12.0);
				trackSkin.set_height(12.0);
				trackSkin.set_minWidth(12.0);
				trackSkin.set_minHeight(12.0);
				scrollBar.set_trackSkin(trackSkin);
			}
			scrollBar.set_paddingTop(2.0);
			scrollBar.set_paddingRight(2.0);
			scrollBar.set_paddingBottom(2.0);
			scrollBar.set_paddingLeft(2.0);
		});
	}
};
var feathers_themes_steel_components_SteelHSliderStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelHSliderStyles"] = feathers_themes_steel_components_SteelHSliderStyles;
feathers_themes_steel_components_SteelHSliderStyles.__name__ = "feathers.themes.steel.components.SteelHSliderStyles";
feathers_themes_steel_components_SteelHSliderStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_HSlider,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_HSlider,null,function(slider) {
			if(slider.get_thumbSkin() == null) {
				var thumb = new feathers_controls_Button();
				thumb.set_styleProvider(null);
				thumb.set_keepDownStateOnRollOut(true);
				var backgroundSkin = new feathers_skins_CircleSkin();
				backgroundSkin.set_fill(theme.getButtonFill());
				backgroundSkin.set_border(theme.getButtonBorder());
				backgroundSkin.setFillForState(feathers_controls_ButtonState.DOWN,theme.getButtonDownFill());
				backgroundSkin.setFillForState(feathers_controls_ButtonState.DISABLED,theme.getButtonDisabledFill());
				backgroundSkin.set_width(24.0);
				backgroundSkin.set_height(24.0);
				thumb.set_backgroundSkin(backgroundSkin);
				var focusRectSkin = new feathers_skins_CircleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				thumb.set_focusRectSkin(focusRectSkin);
				slider.set_thumbSkin(thumb);
			}
			if(slider.get_trackSkin() == null) {
				var trackSkin = new feathers_skins_TabSkin();
				trackSkin.set_fill(theme.getActiveThemeFill());
				trackSkin.set_border(theme.getActiveFillBorder());
				trackSkin.set_cornerRadius(8.0);
				trackSkin.set_cornerRadiusPosition(feathers_layout_RelativePosition.LEFT);
				trackSkin.set_width(100.0);
				trackSkin.set_height(8.0);
				slider.set_trackSkin(trackSkin);
				if(slider.get_secondaryTrackSkin() == null) {
					var secondaryTrackSkin = new feathers_skins_TabSkin();
					secondaryTrackSkin.set_fill(theme.getInsetFill());
					secondaryTrackSkin.set_border(theme.getInsetBorder());
					secondaryTrackSkin.set_cornerRadius(8.0);
					secondaryTrackSkin.set_cornerRadiusPosition(feathers_layout_RelativePosition.RIGHT);
					secondaryTrackSkin.set_width(100.0);
					secondaryTrackSkin.set_height(8.0);
					slider.set_secondaryTrackSkin(secondaryTrackSkin);
				}
			}
		});
	}
};
var feathers_themes_steel_components_SteelItemRendererStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelItemRendererStyles"] = feathers_themes_steel_components_SteelItemRendererStyles;
feathers_themes_steel_components_SteelItemRendererStyles.__name__ = "feathers.themes.steel.components.SteelItemRendererStyles";
feathers_themes_steel_components_SteelItemRendererStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_dataRenderers_ItemRenderer,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_dataRenderers_ItemRenderer,null,function(itemRenderer) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			if(itemRenderer.get_backgroundSkin() == null) {
				var skin = new feathers_skins_UnderlineSkin();
				skin.set_fill(theme.getContainerFill());
				skin.set_border(theme.getDividerBorder());
				skin.set_selectedFill(theme.getActiveThemeFill());
				skin.setFillForState(feathers_controls_ToggleButtonState.DOWN(false),theme.getActiveThemeFill());
				if(isDesktop) {
					skin.set_width(32.0);
					skin.set_height(32.0);
					skin.set_minWidth(32.0);
					skin.set_minHeight(32.0);
				} else {
					skin.set_width(44.0);
					skin.set_height(44.0);
					skin.set_minWidth(44.0);
					skin.set_minHeight(44.0);
				}
				itemRenderer.set_backgroundSkin(skin);
			}
			if(itemRenderer.get_textFormat() == null) {
				itemRenderer.set_textFormat(theme.getTextFormat());
			}
			if(itemRenderer.get_disabledTextFormat() == null) {
				itemRenderer.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(itemRenderer.get_secondaryTextFormat() == null) {
				itemRenderer.set_secondaryTextFormat(theme.getDetailTextFormat());
			}
			if(itemRenderer.get_disabledSecondaryTextFormat() == null) {
				itemRenderer.set_disabledSecondaryTextFormat(theme.getDisabledDetailTextFormat());
			}
			itemRenderer.set_paddingTop(4.0);
			itemRenderer.set_paddingRight(10.0);
			itemRenderer.set_paddingBottom(4.0);
			itemRenderer.set_paddingLeft(10.0);
			itemRenderer.set_gap(4.0);
			itemRenderer.set_horizontalAlign(feathers_layout_HorizontalAlign.LEFT);
		});
	}
};
var feathers_themes_steel_components_SteelLabelStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelLabelStyles"] = feathers_themes_steel_components_SteelLabelStyles;
feathers_themes_steel_components_SteelLabelStyles.__name__ = "feathers.themes.steel.components.SteelLabelStyles";
feathers_themes_steel_components_SteelLabelStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_Label,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_Label,null,function(label) {
			if(label.get_textFormat() == null) {
				label.set_textFormat(theme.getTextFormat());
			}
			if(label.get_disabledTextFormat() == null) {
				label.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_Label,feathers_controls_Label.VARIANT_HEADING) == null) {
		styleProvider.setStyleFunction(feathers_controls_Label,feathers_controls_Label.VARIANT_HEADING,function(label) {
			if(label.get_textFormat() == null) {
				label.set_textFormat(theme.getHeaderTextFormat());
			}
			if(label.get_disabledTextFormat() == null) {
				label.set_disabledTextFormat(theme.getDisabledHeaderTextFormat());
			}
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_Label,feathers_controls_Label.VARIANT_DETAIL) == null) {
		styleProvider.setStyleFunction(feathers_controls_Label,feathers_controls_Label.VARIANT_DETAIL,function(label) {
			if(label.get_textFormat() == null) {
				label.set_textFormat(theme.getDetailTextFormat());
			}
			if(label.get_disabledTextFormat() == null) {
				label.set_disabledTextFormat(theme.getDisabledDetailTextFormat());
			}
		});
	}
};
var feathers_themes_steel_components_SteelLayoutGroupStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelLayoutGroupStyles"] = feathers_themes_steel_components_SteelLayoutGroupStyles;
feathers_themes_steel_components_SteelLayoutGroupStyles.__name__ = "feathers.themes.steel.components.SteelLayoutGroupStyles";
feathers_themes_steel_components_SteelLayoutGroupStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_LayoutGroup,feathers_controls_LayoutGroup.VARIANT_TOOL_BAR) == null) {
		styleProvider.setStyleFunction(feathers_controls_LayoutGroup,feathers_controls_LayoutGroup.VARIANT_TOOL_BAR,function(group) {
			if(group.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(theme.getHeaderFill());
				backgroundSkin.set_width(44.0);
				backgroundSkin.set_height(44.0);
				backgroundSkin.set_minHeight(44.0);
				group.set_backgroundSkin(backgroundSkin);
			}
			if(group.get_layout() == null) {
				var layout = new feathers_layout_HorizontalLayout();
				layout.set_horizontalAlign(feathers_layout_HorizontalAlign.LEFT);
				layout.set_verticalAlign(feathers_layout_VerticalAlign.MIDDLE);
				layout.set_paddingTop(4.0);
				layout.set_paddingRight(10.0);
				layout.set_paddingBottom(4.0);
				layout.set_paddingLeft(10.0);
				layout.set_gap(4.0);
				group.set_layout(layout);
			}
		});
	}
};
var feathers_themes_steel_components_SteelListViewStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelListViewStyles"] = feathers_themes_steel_components_SteelListViewStyles;
feathers_themes_steel_components_SteelListViewStyles.__name__ = "feathers.themes.steel.components.SteelListViewStyles";
feathers_themes_steel_components_SteelListViewStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleListViewWithBorderVariant = function(listView) {
		var isDesktop = feathers_utils_DeviceUtil.isDesktop();
		listView.set_autoHideScrollBars(!isDesktop);
		listView.set_fixedScrollBars(isDesktop);
		if(listView.get_layout() == null) {
			var layout = new feathers_layout_VerticalListLayout();
			layout.set_requestedRowCount(5.0);
			listView.set_layout(layout);
		}
		if(listView.get_backgroundSkin() == null) {
			var backgroundSkin = new feathers_skins_RectangleSkin();
			backgroundSkin.set_fill(theme.getContainerFill());
			backgroundSkin.set_border(theme.getContainerBorder());
			backgroundSkin.set_width(10.0);
			backgroundSkin.set_height(10.0);
			listView.set_backgroundSkin(backgroundSkin);
		}
		if(listView.get_focusRectSkin() == null) {
			var focusRectSkin = new feathers_skins_RectangleSkin();
			focusRectSkin.set_fill(null);
			focusRectSkin.set_border(theme.getFocusBorder());
			listView.set_focusRectSkin(focusRectSkin);
		}
		listView.set_paddingTop(1.0);
		listView.set_paddingRight(1.0);
		listView.set_paddingBottom(1.0);
		listView.set_paddingLeft(1.0);
	};
	var styleListViewWithBorderlessVariant = function(listView) {
		var isDesktop = feathers_utils_DeviceUtil.isDesktop();
		listView.set_autoHideScrollBars(!isDesktop);
		listView.set_fixedScrollBars(isDesktop);
		if(listView.get_layout() == null) {
			var layout = new feathers_layout_VerticalListLayout();
			layout.set_requestedRowCount(5.0);
			listView.set_layout(layout);
		}
		if(listView.get_backgroundSkin() == null) {
			var backgroundSkin = new feathers_skins_RectangleSkin();
			backgroundSkin.set_fill(theme.getContainerFill());
			backgroundSkin.set_width(10.0);
			backgroundSkin.set_height(10.0);
			listView.set_backgroundSkin(backgroundSkin);
		}
		if(listView.get_focusRectSkin() == null) {
			var focusRectSkin = new feathers_skins_RectangleSkin();
			focusRectSkin.set_fill(null);
			focusRectSkin.set_border(theme.getFocusBorder());
			listView.set_focusRectSkin(focusRectSkin);
		}
	};
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_ListView,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_ListView,null,function(listView) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			if(isDesktop) {
				styleListViewWithBorderVariant(listView);
			} else {
				styleListViewWithBorderlessVariant(listView);
			}
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_BORDER) == null) {
		styleProvider.setStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_BORDER,styleListViewWithBorderVariant);
	}
	if(styleProvider.getStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_BORDERLESS) == null) {
		styleProvider.setStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_BORDERLESS,styleListViewWithBorderlessVariant);
	}
	if(styleProvider.getStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_POP_UP) == null) {
		styleProvider.setStyleFunction(feathers_controls_ListView,feathers_controls_ListView.VARIANT_POP_UP,function(listView) {
			if(listView.get_layout() == null) {
				var layout = new feathers_layout_VerticalListLayout();
				layout.set_requestedMinRowCount(1.0);
				layout.set_requestedMaxRowCount(5.0);
				listView.set_layout(layout);
			}
			styleListViewWithBorderVariant(listView);
		});
	}
};
var feathers_themes_steel_components_SteelScrollContainerStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelScrollContainerStyles"] = feathers_themes_steel_components_SteelScrollContainerStyles;
feathers_themes_steel_components_SteelScrollContainerStyles.__name__ = "feathers.themes.steel.components.SteelScrollContainerStyles";
feathers_themes_steel_components_SteelScrollContainerStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_ScrollContainer,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_ScrollContainer,null,function(container) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			container.set_autoHideScrollBars(!isDesktop);
			container.set_fixedScrollBars(isDesktop);
			if(container.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(theme.getContainerFill());
				container.set_backgroundSkin(backgroundSkin);
			}
			if(container.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				container.set_focusRectSkin(focusRectSkin);
			}
		});
	}
};
var feathers_themes_steel_components_SteelTextAreaStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelTextAreaStyles"] = feathers_themes_steel_components_SteelTextAreaStyles;
feathers_themes_steel_components_SteelTextAreaStyles.__name__ = "feathers.themes.steel.components.SteelTextAreaStyles";
feathers_themes_steel_components_SteelTextAreaStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_TextArea,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextArea,null,function(textArea) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			textArea.set_autoHideScrollBars(!isDesktop);
			textArea.set_fixedScrollBars(isDesktop);
			if(textArea.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_cornerRadius(3.0);
				backgroundSkin.set_width(160.0);
				backgroundSkin.set_height(120.0);
				backgroundSkin.set_fill(theme.getInsetFill());
				backgroundSkin.set_border(theme.getInsetBorder());
				backgroundSkin.setBorderForState(feathers_controls_TextInputState.FOCUSED,theme.getThemeBorder());
				backgroundSkin.setBorderForState(feathers_controls_TextInputState.ERROR,theme.getDangerBorder());
				textArea.set_backgroundSkin(backgroundSkin);
			}
			if(textArea.get_textFormat() == null) {
				textArea.set_textFormat(theme.getTextFormat());
			}
			if(textArea.get_disabledTextFormat() == null) {
				textArea.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(textArea.get_promptTextFormat() == null) {
				textArea.set_promptTextFormat(theme.getSecondaryTextFormat());
			}
			textArea.set_paddingTop(1.0);
			textArea.set_paddingRight(1.0);
			textArea.set_paddingBottom(1.0);
			textArea.set_paddingLeft(1.0);
			textArea.set_textPaddingTop(4.0);
			textArea.set_textPaddingRight(9.0);
			textArea.set_textPaddingBottom(5.0);
			textArea.set_textPaddingLeft(9.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_TextCallout,feathers_controls_TextArea.CHILD_VARIANT_ERROR_CALLOUT) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextCallout,feathers_controls_TextArea.CHILD_VARIANT_ERROR_CALLOUT,function(callout) {
			(theme.styleProvider.getStyleFunction(feathers_controls_TextCallout,feathers_controls_TextCallout.VARIANT_DANGER))(callout);
		});
	}
};
var feathers_themes_steel_components_SteelTextCalloutStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelTextCalloutStyles"] = feathers_themes_steel_components_SteelTextCalloutStyles;
feathers_themes_steel_components_SteelTextCalloutStyles.__name__ = "feathers.themes.steel.components.SteelTextCalloutStyles";
feathers_themes_steel_components_SteelTextCalloutStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_TextCallout,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextCallout,null,function(callout) {
			if(callout.get_textFormat() == null) {
				callout.set_textFormat(theme.getTextFormat());
			}
			if(callout.get_disabledTextFormat() == null) {
				callout.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(callout.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(theme.getContainerFill());
				backgroundSkin.set_border(theme.getContainerBorder());
				callout.set_backgroundSkin(backgroundSkin);
			}
			if(callout.get_topArrowSkin() == null) {
				var topArrowSkin = new feathers_skins_TriangleSkin();
				topArrowSkin.set_pointPosition(feathers_layout_RelativePosition.TOP);
				topArrowSkin.set_drawBaseBorder(false);
				topArrowSkin.set_fill(theme.getContainerFill());
				topArrowSkin.set_border(theme.getContainerBorder());
				topArrowSkin.set_width(10.0);
				topArrowSkin.set_height(6.0);
				callout.set_topArrowSkin(topArrowSkin);
			}
			if(callout.get_rightArrowSkin() == null) {
				var rightArrowSkin = new feathers_skins_TriangleSkin();
				rightArrowSkin.set_pointPosition(feathers_layout_RelativePosition.RIGHT);
				rightArrowSkin.set_drawBaseBorder(false);
				rightArrowSkin.set_fill(theme.getContainerFill());
				rightArrowSkin.set_border(theme.getContainerBorder());
				rightArrowSkin.set_width(6.0);
				rightArrowSkin.set_height(10.0);
				callout.set_rightArrowSkin(rightArrowSkin);
			}
			if(callout.get_bottomArrowSkin() == null) {
				var bottomArrowSkin = new feathers_skins_TriangleSkin();
				bottomArrowSkin.set_pointPosition(feathers_layout_RelativePosition.BOTTOM);
				bottomArrowSkin.set_drawBaseBorder(false);
				bottomArrowSkin.set_fill(theme.getContainerFill());
				bottomArrowSkin.set_border(theme.getContainerBorder());
				bottomArrowSkin.set_width(10.0);
				bottomArrowSkin.set_height(6.0);
				callout.set_bottomArrowSkin(bottomArrowSkin);
			}
			if(callout.get_leftArrowSkin() == null) {
				var leftArrowSkin = new feathers_skins_TriangleSkin();
				leftArrowSkin.set_pointPosition(feathers_layout_RelativePosition.LEFT);
				leftArrowSkin.set_drawBaseBorder(false);
				leftArrowSkin.set_fill(theme.getContainerFill());
				leftArrowSkin.set_border(theme.getContainerBorder());
				leftArrowSkin.set_width(6.0);
				leftArrowSkin.set_height(10.0);
				callout.set_leftArrowSkin(leftArrowSkin);
			}
			callout.set_topArrowGap(-1.0);
			callout.set_rightArrowGap(-1.0);
			callout.set_bottomArrowGap(-1.0);
			callout.set_leftArrowGap(-1.0);
			callout.set_paddingTop(1.0);
			callout.set_paddingRight(1.0);
			callout.set_paddingBottom(1.0);
			callout.set_paddingLeft(1.0);
			callout.set_marginTop(10.0);
			callout.set_marginRight(10.0);
			callout.set_marginBottom(10.0);
			callout.set_marginLeft(10.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_TextCallout,feathers_controls_TextCallout.VARIANT_DANGER) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextCallout,feathers_controls_TextCallout.VARIANT_DANGER,function(callout) {
			if(callout.get_textFormat() == null) {
				callout.set_textFormat(theme.getTextFormat());
			}
			if(callout.get_disabledTextFormat() == null) {
				callout.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(callout.get_backgroundSkin() == null) {
				var backgroundSkin = new feathers_skins_RectangleSkin();
				backgroundSkin.set_fill(theme.getDangerFill());
				backgroundSkin.set_border(theme.getDangerBorder());
				callout.set_backgroundSkin(backgroundSkin);
			}
			if(callout.get_topArrowSkin() == null) {
				var topArrowSkin = new feathers_skins_TriangleSkin();
				topArrowSkin.set_pointPosition(feathers_layout_RelativePosition.TOP);
				topArrowSkin.set_drawBaseBorder(false);
				topArrowSkin.set_fill(theme.getDangerFill());
				topArrowSkin.set_border(theme.getDangerBorder());
				topArrowSkin.set_width(10.0);
				topArrowSkin.set_height(6.0);
				callout.set_topArrowSkin(topArrowSkin);
			}
			if(callout.get_rightArrowSkin() == null) {
				var rightArrowSkin = new feathers_skins_TriangleSkin();
				rightArrowSkin.set_pointPosition(feathers_layout_RelativePosition.RIGHT);
				rightArrowSkin.set_drawBaseBorder(false);
				rightArrowSkin.set_fill(theme.getDangerFill());
				rightArrowSkin.set_border(theme.getDangerBorder());
				rightArrowSkin.set_width(6.0);
				rightArrowSkin.set_height(10.0);
				callout.set_rightArrowSkin(rightArrowSkin);
			}
			if(callout.get_bottomArrowSkin() == null) {
				var bottomArrowSkin = new feathers_skins_TriangleSkin();
				bottomArrowSkin.set_pointPosition(feathers_layout_RelativePosition.BOTTOM);
				bottomArrowSkin.set_drawBaseBorder(false);
				bottomArrowSkin.set_fill(theme.getDangerFill());
				bottomArrowSkin.set_border(theme.getDangerBorder());
				bottomArrowSkin.set_width(10.0);
				bottomArrowSkin.set_height(6.0);
				callout.set_bottomArrowSkin(bottomArrowSkin);
			}
			if(callout.get_leftArrowSkin() == null) {
				var leftArrowSkin = new feathers_skins_TriangleSkin();
				leftArrowSkin.set_pointPosition(feathers_layout_RelativePosition.LEFT);
				leftArrowSkin.set_drawBaseBorder(false);
				leftArrowSkin.set_fill(theme.getDangerFill());
				leftArrowSkin.set_border(theme.getDangerBorder());
				leftArrowSkin.set_width(6.0);
				leftArrowSkin.set_height(10.0);
				callout.set_leftArrowSkin(leftArrowSkin);
			}
			callout.set_topArrowGap(-1.0);
			callout.set_rightArrowGap(-1.0);
			callout.set_bottomArrowGap(-1.0);
			callout.set_leftArrowGap(-1.0);
			callout.set_paddingTop(1.0);
			callout.set_paddingRight(1.0);
			callout.set_paddingBottom(1.0);
			callout.set_paddingLeft(1.0);
			callout.set_marginTop(10.0);
			callout.set_marginRight(10.0);
			callout.set_marginBottom(10.0);
			callout.set_marginLeft(10.0);
		});
	}
};
var feathers_themes_steel_components_SteelTextInputStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelTextInputStyles"] = feathers_themes_steel_components_SteelTextInputStyles;
feathers_themes_steel_components_SteelTextInputStyles.__name__ = "feathers.themes.steel.components.SteelTextInputStyles";
feathers_themes_steel_components_SteelTextInputStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_TextInput,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextInput,null,function(input) {
			if(input.get_backgroundSkin() == null) {
				var inputSkin = new feathers_skins_RectangleSkin();
				inputSkin.set_cornerRadius(3.0);
				inputSkin.set_width(160.0);
				inputSkin.set_fill(theme.getInsetFill());
				inputSkin.set_border(theme.getInsetBorder());
				inputSkin.set_disabledFill(theme.getDisabledInsetFill());
				inputSkin.setBorderForState(feathers_controls_TextInputState.FOCUSED,theme.getThemeBorder());
				inputSkin.setBorderForState(feathers_controls_TextInputState.ERROR,theme.getDangerBorder());
				input.set_backgroundSkin(inputSkin);
			}
			if(input.get_textFormat() == null) {
				input.set_textFormat(theme.getTextFormat());
			}
			if(input.get_disabledTextFormat() == null) {
				input.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(input.get_promptTextFormat() == null) {
				input.set_promptTextFormat(theme.getSecondaryTextFormat());
			}
			input.set_paddingTop(6.0);
			input.set_paddingRight(10.0);
			input.set_paddingBottom(6.0);
			input.set_paddingLeft(10.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_TextInput,feathers_controls_TextInput.VARIANT_SEARCH) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextInput,feathers_controls_TextInput.VARIANT_SEARCH,function(input) {
			if(input.get_backgroundSkin() == null) {
				var inputSkin = new feathers_skins_PillSkin();
				inputSkin.set_capDirection(feathers_layout_Direction.HORIZONTAL);
				inputSkin.set_width(160.0);
				inputSkin.set_fill(theme.getInsetFill());
				inputSkin.set_border(theme.getInsetBorder());
				inputSkin.set_disabledFill(theme.getDisabledInsetFill());
				inputSkin.setBorderForState(feathers_controls_TextInputState.FOCUSED,theme.getThemeBorder());
				input.set_backgroundSkin(inputSkin);
			}
			if(input.get_textFormat() == null) {
				input.set_textFormat(theme.getTextFormat());
			}
			if(input.get_disabledTextFormat() == null) {
				input.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			if(input.get_promptTextFormat() == null) {
				input.set_promptTextFormat(theme.getSecondaryTextFormat());
			}
			input.set_paddingTop(6.0);
			input.set_paddingRight(10.0);
			input.set_paddingBottom(6.0);
			input.set_paddingLeft(10.0);
		});
	}
	if(styleProvider.getStyleFunction(feathers_controls_TextCallout,feathers_controls_TextInput.CHILD_VARIANT_ERROR_CALLOUT) == null) {
		styleProvider.setStyleFunction(feathers_controls_TextCallout,feathers_controls_TextInput.CHILD_VARIANT_ERROR_CALLOUT,function(callout) {
			(theme.styleProvider.getStyleFunction(feathers_controls_TextCallout,feathers_controls_TextCallout.VARIANT_DANGER))(callout);
		});
	}
};
var feathers_themes_steel_components_SteelToggleButtonStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelToggleButtonStyles"] = feathers_themes_steel_components_SteelToggleButtonStyles;
feathers_themes_steel_components_SteelToggleButtonStyles.__name__ = "feathers.themes.steel.components.SteelToggleButtonStyles";
feathers_themes_steel_components_SteelToggleButtonStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_ToggleButton,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_ToggleButton,null,function(button) {
			if(button.get_backgroundSkin() == null) {
				var skin = new feathers_skins_RectangleSkin();
				skin.set_fill(theme.getButtonFill());
				skin.set_disabledFill(theme.getButtonDisabledFill());
				skin.set_selectedFill(theme.getThemeFill());
				skin.setFillForState(feathers_controls_ToggleButtonState.DOWN(false),theme.getReversedActiveThemeFill());
				skin.setFillForState(feathers_controls_ToggleButtonState.DOWN(false),theme.getReversedActiveThemeFill());
				skin.set_border(theme.getButtonBorder());
				skin.set_selectedBorder(theme.getSelectedBorder());
				skin.setBorderForState(feathers_controls_ToggleButtonState.DOWN(false),theme.getActiveFillBorder());
				skin.setBorderForState(feathers_controls_ToggleButtonState.DOWN(true),theme.getActiveFillBorder());
				skin.set_cornerRadius(3.0);
				button.set_backgroundSkin(skin);
			}
			if(button.get_focusRectSkin() == null) {
				var focusRectSkin = new feathers_skins_RectangleSkin();
				focusRectSkin.set_fill(null);
				focusRectSkin.set_border(theme.getFocusBorder());
				focusRectSkin.set_cornerRadius(3.0);
				button.set_focusRectSkin(focusRectSkin);
			}
			if(button.get_textFormat() == null) {
				button.set_textFormat(theme.getTextFormat());
			}
			if(button.get_disabledTextFormat() == null) {
				button.set_disabledTextFormat(theme.getDisabledTextFormat());
			}
			button.set_paddingTop(4.0);
			button.set_paddingRight(10.0);
			button.set_paddingBottom(4.0);
			button.set_paddingLeft(10.0);
			button.set_gap(4.0);
		});
	}
};
var feathers_themes_steel_components_SteelVScrollBarStyles = function() { };
$hxClasses["feathers.themes.steel.components.SteelVScrollBarStyles"] = feathers_themes_steel_components_SteelVScrollBarStyles;
feathers_themes_steel_components_SteelVScrollBarStyles.__name__ = "feathers.themes.steel.components.SteelVScrollBarStyles";
feathers_themes_steel_components_SteelVScrollBarStyles.initialize = function(theme) {
	if(theme == null) {
		var value = feathers_style_Theme.get_fallbackTheme();
		theme = ((value) instanceof feathers_themes_steel_BaseSteelTheme) ? value : null;
	}
	if(theme == null) {
		return;
	}
	var styleProvider = theme.styleProvider;
	if(styleProvider.getStyleFunction(feathers_controls_VScrollBar,null) == null) {
		styleProvider.setStyleFunction(feathers_controls_VScrollBar,null,function(scrollBar) {
			var isDesktop = feathers_utils_DeviceUtil.isDesktop();
			if(scrollBar.get_thumbSkin() == null) {
				var thumbSkin = new feathers_skins_RectangleSkin();
				thumbSkin.set_fill(theme.getScrollBarThumbFill());
				thumbSkin.set_disabledFill(theme.getScrollBarThumbDisabledFill());
				var size = isDesktop ? 6.0 : 4.0;
				thumbSkin.set_width(size);
				thumbSkin.set_height(size);
				thumbSkin.set_minWidth(size);
				thumbSkin.set_minHeight(size);
				thumbSkin.set_cornerRadius(size / 2.0);
				var thumb = new feathers_controls_BasicButton();
				thumb.set_keepDownStateOnRollOut(true);
				thumb.set_backgroundSkin(thumbSkin);
				scrollBar.set_thumbSkin(thumb);
			}
			if(isDesktop && scrollBar.get_trackSkin() == null) {
				var trackSkin = new feathers_skins_RectangleSkin();
				trackSkin.set_fill(theme.getControlFill());
				trackSkin.set_disabledFill(theme.getControlDisabledFill());
				trackSkin.set_width(12.0);
				trackSkin.set_height(12.0);
				trackSkin.set_minWidth(12.0);
				trackSkin.set_minHeight(12.0);
				scrollBar.set_trackSkin(trackSkin);
			}
			scrollBar.set_paddingTop(2.0);
			scrollBar.set_paddingRight(2.0);
			scrollBar.set_paddingBottom(2.0);
			scrollBar.set_paddingLeft(2.0);
		});
	}
};
var feathers_utils_DeviceUtil = function() { };
$hxClasses["feathers.utils.DeviceUtil"] = feathers_utils_DeviceUtil;
feathers_utils_DeviceUtil.__name__ = "feathers.utils.DeviceUtil";
feathers_utils_DeviceUtil.isDesktop = function() {
	var htmlWindow = js_Boot.__cast($global , Window);
	return htmlWindow.matchMedia(feathers_utils_DeviceUtil.MEDIA_QUERY_DESKTOP).matches;
};
var feathers_utils_DisplayObjectRecycler = function() {
	feathers_utils_DisplayObjectFactory.call(this);
};
$hxClasses["feathers.utils.DisplayObjectRecycler"] = feathers_utils_DisplayObjectRecycler;
feathers_utils_DisplayObjectRecycler.__name__ = "feathers.utils.DisplayObjectRecycler";
feathers_utils_DisplayObjectRecycler.withClass = function(displayObjectType,update,reset,destroy) {
	var item = new feathers_utils_DisplayObjectRecycler();
	item.create = function() {
		return Type.createInstance(displayObjectType,[]);
	};
	item.update = update;
	item.reset = reset;
	item.destroy = destroy;
	return item;
};
feathers_utils_DisplayObjectRecycler.__super__ = feathers_utils_DisplayObjectFactory;
feathers_utils_DisplayObjectRecycler.prototype = $extend(feathers_utils_DisplayObjectFactory.prototype,{
	update: function(target,state) {
	}
	,reset: function(target,state) {
	}
	,__class__: feathers_utils_DisplayObjectRecycler
});
var feathers_utils_DisplayUtil = function() { };
$hxClasses["feathers.utils.DisplayUtil"] = feathers_utils_DisplayUtil;
feathers_utils_DisplayUtil.__name__ = "feathers.utils.DisplayUtil";
feathers_utils_DisplayUtil.getDisplayObjectDepthFromStage = function(target) {
	if(target.stage == null) {
		return -1;
	}
	var count = 0;
	while(target.parent != null) {
		target = target.parent;
		++count;
	}
	return count;
};
feathers_utils_DisplayUtil.getConcatenatedScaleX = function(target) {
	if(target == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("getConcatenatedScaleX target must not be null"));
	}
	var result = 1.0;
	var current = target;
	while(true) {
		result /= current.get_scaleX();
		current = current.parent;
		if(!(current != null && current != current.stage)) {
			break;
		}
	}
	return result;
};
feathers_utils_DisplayUtil.getConcatenatedScaleY = function(target) {
	if(target == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("getConcatenatedScaleY target must not be null"));
	}
	var result = 1.0;
	var current = target;
	while(true) {
		result /= current.get_scaleY();
		current = current.parent;
		if(!(current != null && current != current.stage)) {
			break;
		}
	}
	return result;
};
var feathers_utils_ExclusivePointer = function(stage) {
	this._touchClaims = new haxe_ds_IntMap();
	this._mouseClaim = null;
	this._stageListenerCount = 0;
	if(stage == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Stage cannot be null."));
	}
	this._stage = stage;
};
$hxClasses["feathers.utils.ExclusivePointer"] = feathers_utils_ExclusivePointer;
feathers_utils_ExclusivePointer.__name__ = "feathers.utils.ExclusivePointer";
feathers_utils_ExclusivePointer.forStage = function(stage) {
	if(stage == null) {
		throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Stage cannot be null."));
	}
	var exclusivePointer = feathers_utils_ExclusivePointer.stageToObject.h[stage.__id__];
	if(exclusivePointer != null) {
		return exclusivePointer;
	}
	exclusivePointer = new feathers_utils_ExclusivePointer(stage);
	feathers_utils_ExclusivePointer.stageToObject.set(stage,exclusivePointer);
	return exclusivePointer;
};
feathers_utils_ExclusivePointer.prototype = {
	claimTouch: function(touchPointID,target) {
		if(target == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Target cannot be null."));
		}
		if(target.stage != this._stage) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Target cannot claim a pointer on the selected stage because it appears on a different stage."));
		}
		var existingTarget = this._touchClaims.h[touchPointID];
		if(existingTarget != null) {
			return false;
		}
		this._touchClaims.h[touchPointID] = target;
		target.addEventListener("removedFromStage",$bind(this,this.exclusivePointer_target_removedFromStageHandler),false,0,true);
		if(this._stageListenerCount == 0) {
			this._stage.addEventListener("mouseUp",$bind(this,this.exclusivePointer_stage_mouseUpHandler),false,0,true);
			this._stage.addEventListener("touchEnd",$bind(this,this.exclusivePointer_stage_touchEndHandler),false,0,true);
		}
		this._stageListenerCount++;
		return true;
	}
	,claimMouse: function(target) {
		if(target == null) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Target cannot be null."));
		}
		if(target.stage != this._stage) {
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Target cannot claim a pointer on the selected stage because it appears on a different stage."));
		}
		if(this._mouseClaim != null) {
			return false;
		}
		this._mouseClaim = target;
		target.addEventListener("removedFromStage",$bind(this,this.exclusivePointer_target_removedFromStageHandler),false,0,true);
		if(this._stageListenerCount == 0) {
			this._stage.addEventListener("mouseUp",$bind(this,this.exclusivePointer_stage_mouseUpHandler),false,0,true);
			this._stage.addEventListener("touchEnd",$bind(this,this.exclusivePointer_stage_touchEndHandler),false,0,true);
		}
		this._stageListenerCount++;
		return true;
	}
	,removeTouchClaim: function(touchPointID) {
		var existingTarget = this._touchClaims.h[touchPointID];
		if(existingTarget == null) {
			return;
		}
		this._touchClaims.remove(touchPointID);
		if(!this.hasClaimOn(existingTarget)) {
			existingTarget.removeEventListener("removedFromStage",$bind(this,this.exclusivePointer_target_removedFromStageHandler));
		}
		this._stageListenerCount--;
		if(this._stageListenerCount == 0) {
			this._stage.removeEventListener("mouseUp",$bind(this,this.exclusivePointer_stage_mouseUpHandler));
			this._stage.removeEventListener("touchEnd",$bind(this,this.exclusivePointer_stage_touchEndHandler));
		}
	}
	,removeMouseClaim: function() {
		var existingTarget = this._mouseClaim;
		if(existingTarget == null) {
			return;
		}
		this._mouseClaim = null;
		if(!this.hasClaimOn(existingTarget)) {
			existingTarget.removeEventListener("removedFromStage",$bind(this,this.exclusivePointer_target_removedFromStageHandler));
		}
		this._stageListenerCount--;
		if(this._stageListenerCount == 0) {
			this._stage.removeEventListener("mouseUp",$bind(this,this.exclusivePointer_stage_mouseUpHandler));
			this._stage.removeEventListener("touchEnd",$bind(this,this.exclusivePointer_stage_touchEndHandler));
		}
	}
	,getTouchClaim: function(touchPointID) {
		return this._touchClaims.h[touchPointID];
	}
	,getMouseClaim: function() {
		return this._mouseClaim;
	}
	,hasClaimOn: function(target) {
		if(this._mouseClaim == target) {
			return true;
		}
		var map = this._touchClaims;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var touchPointID = _g1_key;
			var existingTarget = _g1_value;
			if(existingTarget == target) {
				return true;
			}
		}
		return false;
	}
	,exclusivePointer_target_removedFromStageHandler: function(event) {
		var target = js_Boot.__cast(event.currentTarget , openfl_display_DisplayObject);
		if(this._mouseClaim == target) {
			this.removeMouseClaim();
		}
		var map = this._touchClaims;
		var _g_map = map;
		var _g_keys = map.keys();
		while(_g_keys.hasNext()) {
			var key = _g_keys.next();
			var _g1_value = _g_map.get(key);
			var _g1_key = key;
			var touchPointID = _g1_key;
			var existingTarget = _g1_value;
			if(existingTarget == target) {
				this.removeTouchClaim(touchPointID);
			}
		}
	}
	,exclusivePointer_stage_mouseUpHandler: function(event) {
		this.removeMouseClaim();
	}
	,exclusivePointer_stage_touchEndHandler: function(event) {
		this.removeTouchClaim(event.touchPointID);
	}
	,__class__: feathers_utils_ExclusivePointer
};
var feathers_utils_KeyToState = function(target,callback,upState,downState) {
	this._downKeyCode = null;
	this._enabled = true;
	this._downState = null;
	this._upState = null;
	this._callback = null;
	this._target = null;
	this.set_target(target);
	if(upState != null) {
		this._upState = upState;
	}
	if(downState != null) {
		this.set_downState(downState);
	}
	this._currentState = this._upState;
	this.set_callback(callback);
};
$hxClasses["feathers.utils.KeyToState"] = feathers_utils_KeyToState;
feathers_utils_KeyToState.__name__ = "feathers.utils.KeyToState";
feathers_utils_KeyToState.prototype = {
	set_target: function(value) {
		if(this._target == value) {
			return this._target;
		}
		if(this._target != null) {
			this._target.removeEventListener("removedFromStage",$bind(this,this.keyToState_target_removedFromStageHandler));
			this._target.removeEventListener("focusOut",$bind(this,this.keyToState_target_focusOutHandler));
			this._target.removeEventListener("keyDown",$bind(this,this.keyToState_target_keyDownHandler));
			this._target.removeEventListener("keyUp",$bind(this,this.keyToState_target_keyUpHandler));
		}
		this._target = value;
		if(this._target != null) {
			this._currentState = this._upState;
			this._target.addEventListener("removedFromStage",$bind(this,this.keyToState_target_removedFromStageHandler));
			this._target.addEventListener("focusOut",$bind(this,this.keyToState_target_focusOutHandler));
			this._target.addEventListener("keyDown",$bind(this,this.keyToState_target_keyDownHandler));
			this._target.addEventListener("keyUp",$bind(this,this.keyToState_target_keyUpHandler));
		}
		return this._target;
	}
	,set_callback: function(value) {
		if(this._callback == value) {
			return this._callback;
		}
		this._callback = value;
		if(this._callback != null) {
			this._callback(this._currentState);
		}
		return this._callback;
	}
	,set_downState: function(value) {
		this._downState = value;
		return this._downState;
	}
	,set_enabled: function(value) {
		if(this._enabled == value) {
			return this._enabled;
		}
		this._enabled = value;
		if(!this._enabled) {
			this.resetKeyState();
		}
		return this._enabled;
	}
	,changeState: function(value) {
		var oldState = this._currentState;
		if(js_Boot.__implements(this._target,feathers_core_IStateContext)) {
			oldState = (js_Boot.__cast(this._target , feathers_core_IStateContext)).get_currentState();
		}
		this._currentState = value;
		if(oldState == value) {
			return;
		}
		if(this._callback != null) {
			this._callback(value);
		}
	}
	,resetKeyState: function() {
		if(this._downKeyCode == null) {
			return;
		}
		this._downKeyCode = null;
		this.changeState(this._upState);
	}
	,keyToState_target_removedFromStageHandler: function(event) {
		this.resetKeyState();
	}
	,keyToState_target_focusOutHandler: function(event) {
		this.resetKeyState();
	}
	,keyToState_target_keyDownHandler: function(event) {
		if(js_Boot.__implements(this._target,feathers_core_IFocusObject)) {
			var focusObject = js_Boot.__cast(this._target , feathers_core_IFocusObject);
			var focusManager = focusObject.get_focusManager();
			if(focusManager != null && focusManager.get_focus() != focusObject) {
				return;
			}
		}
		if(!this._enabled || this._downKeyCode != null || event.keyCode != 32 && event.keyCode != 13) {
			return;
		}
		this._downKeyCode = event.keyCode;
		this.changeState(this._downState);
	}
	,keyToState_target_keyUpHandler: function(event) {
		if(event.keyCode != this._downKeyCode) {
			return;
		}
		this.resetKeyState();
	}
	,__class__: feathers_utils_KeyToState
	,__properties__: {set_enabled:"set_enabled",set_downState:"set_downState",set_callback:"set_callback",set_target:"set_target"}
};
var feathers_utils_MathUtil = function() { };
$hxClasses["feathers.utils.MathUtil"] = feathers_utils_MathUtil;
feathers_utils_MathUtil.__name__ = "feathers.utils.MathUtil";
feathers_utils_MathUtil.roundToNearest = function(number,nearest) {
	if(nearest == null) {
		nearest = 1.0;
	}
	if(nearest == 0) {
		return number;
	}
	return Math.round(feathers_utils_MathUtil.roundToPrecision(number / nearest,10)) * nearest;
};
feathers_utils_MathUtil.roundToPrecision = function(number,precision) {
	if(precision == null) {
		precision = 0;
	}
	var decimalPlaces = Math.pow(10,precision);
	return Math.round(decimalPlaces * number) / decimalPlaces;
};
feathers_utils_MathUtil.fuzzyEquals = function(n1,n2,maxDifference) {
	if(maxDifference == null) {
		maxDifference = 0.000001;
	}
	return Math.abs(n1 - n2) <= maxDifference;
};
var feathers_utils_MeasurementsUtil = function() { };
$hxClasses["feathers.utils.MeasurementsUtil"] = feathers_utils_MeasurementsUtil;
feathers_utils_MeasurementsUtil.__name__ = "feathers.utils.MeasurementsUtil";
feathers_utils_MeasurementsUtil.resetFluidlyWithParentValues = function(measurements,target,parentExplicitWidth,parentExplicitHeight,parentExplicitMinWidth,parentExplicitMinHeight,parentExplicitMaxWidth,parentExplicitMaxHeight) {
	if(target == null) {
		return;
	}
	if(js_Boot.__implements(target,feathers_core_IMeasureObject)) {
		var measureTarget = js_Boot.__cast(target , feathers_core_IMeasureObject);
		var width = parentExplicitWidth;
		if(width == null) {
			width = measurements.width;
		}
		if(width == null) {
			measureTarget.resetWidth();
		} else {
			measureTarget.set_width(width);
		}
		var height = parentExplicitHeight;
		if(height == null) {
			height = measurements.height;
		}
		if(height == null) {
			measureTarget.resetHeight();
		} else {
			measureTarget.set_height(height);
		}
		var minWidth = parentExplicitMinWidth;
		if(minWidth == null || measureTarget.get_explicitMinWidth() != null && measureTarget.get_explicitMinWidth() > minWidth) {
			minWidth = measureTarget.get_explicitMinWidth();
		}
		if(minWidth == null) {
			minWidth = 0.0;
		}
		measureTarget.set_minWidth(minWidth);
		var minHeight = parentExplicitMinHeight;
		if(minHeight == null || measureTarget.get_explicitMinHeight() != null && measureTarget.get_explicitMinHeight() > minHeight) {
			minHeight = measureTarget.get_explicitMinHeight();
		}
		if(minHeight == null) {
			minHeight = 0.0;
		}
		measureTarget.set_minHeight(minHeight);
		var maxWidth = parentExplicitMaxWidth;
		if(maxWidth == null || measureTarget.get_explicitMaxWidth() != null && measureTarget.get_explicitMaxWidth() < maxWidth) {
			maxWidth = measureTarget.get_explicitMaxWidth();
		}
		if(maxWidth == null) {
			maxWidth = 1.0 / 0.0;
		}
		measureTarget.set_maxWidth(maxWidth);
		var maxHeight = parentExplicitMaxHeight;
		if(maxHeight == null || measureTarget.get_explicitMaxHeight() != null && measureTarget.get_explicitMaxHeight() < maxHeight) {
			maxHeight = measureTarget.get_explicitMaxHeight();
		}
		if(maxHeight == null) {
			maxHeight = 1.0 / 0.0;
		}
		measureTarget.set_maxHeight(maxHeight);
		return;
	}
	if(parentExplicitWidth != null) {
		target.set_width(parentExplicitWidth);
	} else if(measurements.width != null) {
		target.set_width(measurements.width);
	}
	if(parentExplicitHeight != null) {
		target.set_height(parentExplicitHeight);
	} else if(measurements.height != null) {
		target.set_height(measurements.height);
	}
};
feathers_utils_MeasurementsUtil.resetFluidlyWithParent = function(measurements,target,parent) {
	feathers_utils_MeasurementsUtil.resetFluidlyWithParentValues(measurements,target,parent.get_explicitWidth(),parent.get_explicitHeight(),parent.get_explicitMinWidth(),parent.get_explicitMinHeight(),parent.get_explicitMaxWidth(),parent.get_explicitMaxHeight());
};
var feathers_utils_PointerToState = function(target,callback,upState,downState,hoverState) {
	this._down = false;
	this._hoverBeforeDown = false;
	this._keepDownStateOnRollOut = false;
	this._enabled = true;
	this._hoverState = null;
	this._downState = null;
	this._upState = null;
	this._callback = null;
	this._stateContext = null;
	this._target = null;
	this.set_target(target);
	if(upState != null) {
		this.set_upState(upState);
	}
	if(downState != null) {
		this.set_downState(downState);
	}
	if(hoverState != null) {
		this.set_hoverState(hoverState);
	}
	this._currentState = this._upState;
	this.set_callback(callback);
};
$hxClasses["feathers.utils.PointerToState"] = feathers_utils_PointerToState;
feathers_utils_PointerToState.__name__ = "feathers.utils.PointerToState";
feathers_utils_PointerToState.prototype = {
	set_target: function(value) {
		if(this._target == value) {
			return this._target;
		}
		if(this._target != null) {
			this._target.removeEventListener("removedFromStage",$bind(this,this.pointerToState_target_removedFromStageHandler));
			this._target.removeEventListener("rollOver",$bind(this,this.pointerToState_target_rollOverHandler));
			this._target.removeEventListener("rollOut",$bind(this,this.pointerToState_target_rollOutHandler));
			this._target.removeEventListener("mouseDown",$bind(this,this.pointerToState_target_mouseDownHandler));
		}
		this._target = value;
		if(this._target != null) {
			this._currentState = this._upState;
			this._target.addEventListener("removedFromStage",$bind(this,this.pointerToState_target_removedFromStageHandler));
			this._target.addEventListener("rollOver",$bind(this,this.pointerToState_target_rollOverHandler));
			this._target.addEventListener("rollOut",$bind(this,this.pointerToState_target_rollOutHandler));
			this._target.addEventListener("mouseDown",$bind(this,this.pointerToState_target_mouseDownHandler));
		}
		return this._target;
	}
	,set_callback: function(value) {
		if(this._callback == value) {
			return this._callback;
		}
		this._callback = value;
		if(this._callback != null) {
			this._callback(this._currentState);
		}
		return this._callback;
	}
	,set_upState: function(value) {
		this._upState = value;
		return this._upState;
	}
	,set_downState: function(value) {
		this._downState = value;
		return this._downState;
	}
	,set_hoverState: function(value) {
		this._hoverState = value;
		return this._hoverState;
	}
	,set_keepDownStateOnRollOut: function(value) {
		this._keepDownStateOnRollOut = value;
		return this._keepDownStateOnRollOut;
	}
	,set_customHitTest: function(value) {
		this._customHitTest = value;
		return this._customHitTest;
	}
	,changeState: function(value) {
		var oldState = this._currentState;
		var targetStateContext = this._stateContext;
		if(targetStateContext == null && js_Boot.__implements(this._target,feathers_core_IStateContext)) {
			targetStateContext = this._target;
		}
		if(targetStateContext != null) {
			oldState = targetStateContext.get_currentState();
		}
		this._currentState = value;
		if(oldState == value) {
			return;
		}
		if(this._callback != null) {
			this._callback(value);
		}
	}
	,resetTouchState: function() {
		this._hoverBeforeDown = false;
		this.changeState(this._upState);
	}
	,pointerToState_target_removedFromStageHandler: function(event) {
		if(this._target.stage != null) {
			this._target.stage.removeEventListener("mouseUp",$bind(this,this.pointerToState_stage_mouseUpHandler));
		}
		this.resetTouchState();
	}
	,pointerToState_target_rollOverHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(this._customHitTest != null && !this._customHitTest(event.stageX,event.stageY)) {
			return;
		}
		this._hoverBeforeDown = true;
		if(this._down) {
			this.changeState(this._downState);
		} else {
			this.changeState(this._hoverState);
		}
	}
	,pointerToState_target_rollOutHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		this._hoverBeforeDown = false;
		if(this._keepDownStateOnRollOut && this._down) {
			this.changeState(this._downState);
			return;
		}
		this.changeState(this._upState);
	}
	,pointerToState_target_mouseDownHandler: function(event) {
		if(!this._enabled || this._target.stage == null) {
			return;
		}
		if(this._customHitTest != null && !this._customHitTest(event.stageX,event.stageY)) {
			return;
		}
		this._down = true;
		this._target.stage.addEventListener("mouseUp",$bind(this,this.pointerToState_stage_mouseUpHandler),false,0,true);
		this.changeState(this._downState);
	}
	,pointerToState_stage_mouseUpHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		this._down = false;
		stage.removeEventListener("mouseUp",$bind(this,this.pointerToState_stage_mouseUpHandler));
		if(this._hoverBeforeDown && this._target.hitTestPoint(event.stageX,event.stageY)) {
			this.changeState(this._hoverState);
		} else {
			this.resetTouchState();
		}
	}
	,__class__: feathers_utils_PointerToState
	,__properties__: {set_customHitTest:"set_customHitTest",set_keepDownStateOnRollOut:"set_keepDownStateOnRollOut",set_hoverState:"set_hoverState",set_downState:"set_downState",set_upState:"set_upState",set_callback:"set_callback",set_target:"set_target"}
};
var feathers_utils_PointerTrigger = function(target,eventFactory) {
	this._enabled = true;
	this._eventFactory = null;
	this._target = null;
	this.set_target(target);
	this.set_eventFactory(eventFactory);
};
$hxClasses["feathers.utils.PointerTrigger"] = feathers_utils_PointerTrigger;
feathers_utils_PointerTrigger.__name__ = "feathers.utils.PointerTrigger";
feathers_utils_PointerTrigger.prototype = {
	set_target: function(value) {
		if(this._target == value) {
			return this._target;
		}
		if(this._target != null) {
			this._target.removeEventListener("click",$bind(this,this.pointerTrigger_target_clickHandler));
			this._target.removeEventListener("touchTap",$bind(this,this.pointerTrigger_target_touchTapHandler));
		}
		this._target = value;
		if(this._target != null) {
			this._target.addEventListener("click",$bind(this,this.pointerTrigger_target_clickHandler));
			this._target.addEventListener("touchTap",$bind(this,this.pointerTrigger_target_touchTapHandler));
		}
		return this._target;
	}
	,set_eventFactory: function(value) {
		if(this._eventFactory == value) {
			return this._eventFactory;
		}
		this._eventFactory = value;
		return this._eventFactory;
	}
	,set_customHitTest: function(value) {
		this._customHitTest = value;
		return this._customHitTest;
	}
	,pointerTrigger_target_clickHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(this._customHitTest != null && !this._customHitTest(event.stageX,event.stageY)) {
			return;
		}
		if(this._eventFactory != null) {
			this._target.dispatchEvent(this._eventFactory());
			return;
		}
		feathers_events_TriggerEvent.dispatchFromMouseEvent(this._target,event);
	}
	,pointerTrigger_target_touchTapHandler: function(event) {
		if(!this._enabled) {
			return;
		}
		if(event.isPrimaryTouchPoint) {
			return;
		}
		if(this._customHitTest != null && !this._customHitTest(event.stageX,event.stageY)) {
			return;
		}
		if(this._eventFactory != null) {
			this._target.dispatchEvent(this._eventFactory());
			return;
		}
		feathers_events_TriggerEvent.dispatchFromTouchEvent(this._target,event);
	}
	,__class__: feathers_utils_PointerTrigger
	,__properties__: {set_customHitTest:"set_customHitTest",set_eventFactory:"set_eventFactory",set_target:"set_target"}
};
var feathers_utils_Scroller = function(target) {
	this._touchPointIsSimulated = false;
	this._touchPointID = null;
	this._previousTouchPointID = null;
	this.targetScrollY = 0.0;
	this.targetScrollX = 0.0;
	this.animateScrollYEndRatio = 1.0;
	this.animateScrollXEndRatio = 1.0;
	this._animateScrollYEase = null;
	this._animateScrollXEase = null;
	this.animateScrollY = null;
	this.animateScrollX = null;
	this.savedScrollMoves = [];
	this.startScrollY = 0.0;
	this.startScrollX = 0.0;
	this.startTouchY = 0.0;
	this.startTouchX = 0.0;
	this.restoreMouseChildren = false;
	this._fixedThrowDuration = 2.996998998998728;
	this._logDecelerationRate = -0.0020020026706730793;
	this.snapPositionsY = null;
	this.snapPositionsX = null;
	this.simulateTouch = false;
	this.mouseWheelDuration = 0.0;
	this._mouseWheelDeltaMode = 1;
	this.mouseWheelYScrollsX = false;
	this.mouseWheelDeltaY = 10.0;
	this.mouseWheelDeltaX = 10.0;
	this.bounceEase = null;
	this.ease = motion_easing_Quart.easeOut;
	this.elasticSnapDuration = 0.5;
	this.throwElasticity = 0.05;
	this.elasticity = 0.33;
	this.forceElasticLeft = false;
	this.forceElasticBottom = false;
	this.forceElasticRight = false;
	this.forceElasticTop = false;
	this.elasticEdges = true;
	this.minDragDistance = 6.0;
	this._draggingY = false;
	this._draggingX = false;
	this._scrolling = false;
	this._contentHeight = 0.0;
	this._contentWidth = 0.0;
	this._visibleHeight = 0.0;
	this._visibleWidth = 0.0;
	this._maxScrollY = 0.0;
	this._maxScrollX = 0.0;
	this._minScrollY = 0.0;
	this._minScrollX = 0.0;
	this._scrollY = 0.0;
	this._scrollX = 0.0;
	this.enabledY = true;
	this.enabledX = true;
	openfl_events_EventDispatcher.call(this);
	this.set_target(target);
};
$hxClasses["feathers.utils.Scroller"] = feathers_utils_Scroller;
feathers_utils_Scroller.__name__ = "feathers.utils.Scroller";
feathers_utils_Scroller.__super__ = openfl_events_EventDispatcher;
feathers_utils_Scroller.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	get_scrollX: function() {
		return this._scrollX;
	}
	,set_scrollX: function(value) {
		if(this._scrollX == value) {
			return this._scrollX;
		}
		this._scrollX = value;
		feathers_events_ScrollEvent.dispatch(this,"scroll");
		return this._scrollX;
	}
	,get_scrollY: function() {
		return this._scrollY;
	}
	,set_scrollY: function(value) {
		if(this._scrollY == value) {
			return this._scrollY;
		}
		this._scrollY = value;
		feathers_events_ScrollEvent.dispatch(this,"scroll");
		return this._scrollY;
	}
	,set_restrictedScrollX: function(value) {
		if(value < this._minScrollX) {
			value = this._minScrollX;
		} else if(value > this._maxScrollX) {
			value = this._maxScrollX;
		}
		if(this._scrollX == value) {
			return this._scrollX;
		}
		this._scrollX = value;
		feathers_events_ScrollEvent.dispatch(this,"scroll");
		return this._scrollX;
	}
	,set_restrictedScrollY: function(value) {
		if(value < this._minScrollY) {
			value = this._minScrollY;
		} else if(value > this._maxScrollY) {
			value = this._maxScrollY;
		}
		if(this._scrollY == value) {
			return this._scrollY;
		}
		this._scrollY = value;
		feathers_events_ScrollEvent.dispatch(this,"scroll");
		return this._scrollY;
	}
	,get_minScrollX: function() {
		return this._minScrollX;
	}
	,get_minScrollY: function() {
		return this._minScrollY;
	}
	,get_maxScrollX: function() {
		return this._maxScrollX;
	}
	,get_maxScrollY: function() {
		return this._maxScrollY;
	}
	,get_scrolling: function() {
		return this._scrolling;
	}
	,get_draggingX: function() {
		return this._draggingX;
	}
	,get_draggingY: function() {
		return this._draggingY;
	}
	,set_target: function(value) {
		if(this._target == value) {
			return this._target;
		}
		if(this._target != null) {
			this.cleanupAfterDrag();
			this._target.removeEventListener("removedFromStage",$bind(this,this.scroller_target_removedFromStageHandler));
			this._target.removeEventListener("mouseDown",$bind(this,this.scroller_target_mouseDownHandler));
			this._target.removeEventListener("mouseDown",$bind(this,this.scroller_target_mouseDownCaptureHandler),true);
			this._target.removeEventListener("mouseWheel",$bind(this,this.scroller_target_mouseWheelHandler));
			var $window = js_Boot.__cast($global , Window);
			$window.removeEventListener("wheel",$bind(this,this.scroller_window_wheelCaptureHandler),{ capture : true});
			this._target.removeEventListener("touchBegin",$bind(this,this.scroller_target_touchBeginHandler));
			this._target.removeEventListener("touchBegin",$bind(this,this.scroller_target_touchBeginCaptureHandler),true);
			this._target.removeEventListener("click",$bind(this,this.scroller_target_clickCaptureHandler),true);
			this._target.removeEventListener("touchTap",$bind(this,this.scroller_target_touchTapCaptureHandler),true);
		}
		this._target = value;
		if(this._target != null) {
			this._target.addEventListener("mouseDown",$bind(this,this.scroller_target_mouseDownHandler),false,0,true);
			this._target.addEventListener("mouseDown",$bind(this,this.scroller_target_mouseDownCaptureHandler),true,0,true);
			this._target.addEventListener("mouseWheel",$bind(this,this.scroller_target_mouseWheelHandler),false,0,true);
			var $window = js_Boot.__cast($global , Window);
			$window.addEventListener("wheel",$bind(this,this.scroller_window_wheelCaptureHandler),{ capture : true});
			this._target.addEventListener("touchBegin",$bind(this,this.scroller_target_touchBeginHandler),false,0,true);
			this._target.addEventListener("touchBegin",$bind(this,this.scroller_target_touchBeginCaptureHandler),true,0,true);
			this._target.addEventListener("click",$bind(this,this.scroller_target_clickCaptureHandler),true,0,true);
			this._target.addEventListener("touchTap",$bind(this,this.scroller_target_touchTapCaptureHandler),true,0,true);
		}
		return this._target;
	}
	,get_touchPointID: function() {
		return this._touchPointID;
	}
	,get_touchPointIsSimulated: function() {
		return this._touchPointIsSimulated;
	}
	,setDimensions: function(visibleWidth,visibleHeight,contentWidth,contentHeight) {
		this._visibleWidth = visibleWidth != null ? visibleWidth : 0.0;
		this._visibleHeight = visibleHeight != null ? visibleHeight : 0.0;
		this._contentWidth = contentWidth != null ? contentWidth : 0.0;
		this._contentHeight = contentHeight != null ? contentHeight : 0.0;
		this.calculateMinAndMax();
	}
	,stop: function() {
		if(this.animateScrollX != null) {
			motion_Actuate.stop(this.animateScrollX,null,false,false);
			this.animateScrollX = null;
			this._animateScrollXEase = null;
		}
		if(this.animateScrollY != null) {
			motion_Actuate.stop(this.animateScrollY,null,false,false);
			this.animateScrollY = null;
			this._animateScrollYEase = null;
		}
		this.cleanupAfterDrag();
		this._draggingX = false;
		this._draggingY = false;
		this.completeScroll();
	}
	,throwTo: function(scrollX,scrollY,duration,ease) {
		var _gthis = this;
		if(duration == null) {
			duration = this._fixedThrowDuration;
		}
		if(ease == null) {
			ease = this.ease;
		}
		var scrollChanged = false;
		if(scrollX != null) {
			if(this.animateScrollX != null) {
				motion_Actuate.stop(this.animateScrollX,null,false,false);
				this.animateScrollX = null;
				this._animateScrollXEase = null;
			}
			if(this._scrollX != scrollX) {
				scrollChanged = true;
				this.startScroll();
				if(duration == 0.0) {
					this.set_scrollX(scrollX);
				} else {
					this.startScrollX = this._scrollX;
					this.targetScrollX = scrollX;
					this._animateScrollXEase = ease;
					var tween = motion_Actuate.update(function(scrollX) {
						if(scrollX == null) {
							scrollX = _gthis.targetScrollX;
						}
						return _gthis.set_scrollX(scrollX);
					},duration,[this._scrollX],[this.targetScrollX],true);
					this.animateScrollX = js_Boot.__cast(tween , motion_actuators_SimpleActuator);
					this.animateScrollX.ease(this._animateScrollXEase);
					this.animateScrollX.onComplete($bind(this,this.animateScrollX_onComplete));
					this.refreshAnimateScrollXEndRatio();
				}
			} else {
				this.finishScrollX();
			}
		}
		if(scrollY != null) {
			if(this.animateScrollY != null) {
				motion_Actuate.stop(this.animateScrollY,null,false,false);
				this.animateScrollY = null;
				this._animateScrollYEase = null;
			}
			if(this._scrollY != scrollY) {
				scrollChanged = true;
				this.startScroll();
				if(duration == 0.0) {
					this.set_scrollY(scrollY);
				} else {
					this.startScrollY = this._scrollY;
					this.targetScrollY = scrollY;
					this._animateScrollYEase = ease;
					var tween = motion_Actuate.update(function(scrollY) {
						if(scrollY == null) {
							scrollY = _gthis.targetScrollY;
						}
						return _gthis.set_scrollY(scrollY);
					},duration,[this._scrollY],[this.targetScrollY],true);
					this.animateScrollY = js_Boot.__cast(tween , motion_actuators_SimpleActuator);
					this.animateScrollY.ease(this._animateScrollYEase);
					this.animateScrollY.onComplete($bind(this,this.animateScrollY_onComplete));
					this.refreshAnimateScrollYEndRatio();
				}
			} else {
				this.finishScrollY();
			}
		}
		if(scrollChanged && duration == 0.0) {
			this.completeScroll();
		}
	}
	,throwWithVelocity: function(velocityX,velocityY) {
		var targetX = null;
		var targetY = null;
		if(velocityX != null) {
			if(Math.abs(velocityX) <= feathers_utils_Scroller.MINIMUM_VELOCITY) {
				this.finishScrollX();
			} else if(this.snapPositionsX != null) {
				var _g = 0;
				var _g1 = this.snapPositionsX.length;
				while(_g < _g1) {
					var i = _g++;
					var posX = this.snapPositionsX[i];
					if(velocityX < 0.0) {
						targetX = posX;
						if(posX > this._scrollX) {
							break;
						}
					}
					if(velocityX > 0.0) {
						targetX = i == 0 ? posX : this.snapPositionsX[i - 1];
						if(posX >= this._scrollX) {
							break;
						}
					}
				}
			} else {
				targetX = this._scrollX + this.calculateDistanceFromVelocity(velocityX);
			}
		}
		if(velocityY != null) {
			if(Math.abs(velocityY) <= feathers_utils_Scroller.MINIMUM_VELOCITY) {
				this.finishScrollY();
			} else if(this.snapPositionsY != null) {
				var _g = 0;
				var _g1 = this.snapPositionsY.length;
				while(_g < _g1) {
					var i = _g++;
					var posY = this.snapPositionsY[i];
					if(velocityY < 0.0) {
						targetY = posY;
						if(posY > this._scrollY) {
							break;
						}
					}
					if(velocityY > 0.0) {
						targetY = i == 0 ? posY : this.snapPositionsY[i - 1];
						if(posY >= this._scrollY) {
							break;
						}
					}
				}
			} else {
				targetY = this._scrollY + this.calculateDistanceFromVelocity(velocityY);
			}
		}
		this.throwTo(targetX,targetY,this._fixedThrowDuration);
	}
	,calculateDistanceFromVelocity: function(velocity) {
		return (velocity - feathers_utils_Scroller.MINIMUM_VELOCITY) / this._logDecelerationRate;
	}
	,refreshAnimateScrollXEndRatio: function() {
		var distance = Math.abs(this.targetScrollX - this.startScrollX);
		var ratioOutOfBounds = 0.0;
		if(this.targetScrollX > this._maxScrollX) {
			ratioOutOfBounds = (this.targetScrollX - this._maxScrollX) / distance;
		} else if(this.targetScrollX < this._minScrollX) {
			ratioOutOfBounds = (this._minScrollX - this.targetScrollX) / distance;
		}
		if(ratioOutOfBounds > 0.0) {
			if(this.elasticEdges) {
				this.animateScrollXEndRatio = 1.0 - ratioOutOfBounds + ratioOutOfBounds * this.throwElasticity;
			} else {
				this.animateScrollXEndRatio = 1.0 - ratioOutOfBounds;
			}
		} else {
			this.animateScrollXEndRatio = 1.0;
		}
		if(this.animateScrollX != null) {
			if(this.animateScrollXEndRatio < 1.0) {
				this.animateScrollX.onUpdate($bind(this,this.animateScrollX_endRatio_onUpdate));
			} else {
				this.animateScrollX.onUpdate(null);
			}
		}
	}
	,refreshAnimateScrollYEndRatio: function() {
		var distance = Math.abs(this.targetScrollY - this.startScrollY);
		var ratioOutOfBounds = 0.0;
		if(this.targetScrollY > this._maxScrollY) {
			ratioOutOfBounds = (this.targetScrollY - this._maxScrollY) / distance;
		} else if(this.targetScrollY < this._minScrollY) {
			ratioOutOfBounds = (this._minScrollY - this.targetScrollY) / distance;
		}
		if(ratioOutOfBounds > 0.0) {
			if(this.elasticEdges) {
				this.animateScrollYEndRatio = 1.0 - ratioOutOfBounds + ratioOutOfBounds * this.throwElasticity;
			} else {
				this.animateScrollYEndRatio = 1.0 - ratioOutOfBounds;
			}
		} else {
			this.animateScrollYEndRatio = 1.0;
		}
		if(this.animateScrollY != null) {
			if(this.animateScrollYEndRatio < 1.0) {
				this.animateScrollY.onUpdate($bind(this,this.animateScrollY_endRatio_onUpdate));
			} else {
				this.animateScrollY.onUpdate(null);
			}
		}
	}
	,calculateMinAndMax: function() {
		var oldMinScrollX = this._minScrollX;
		var oldMaxScrollX = this._maxScrollX;
		var oldMinScrollY = this._minScrollY;
		var oldMaxScrollY = this._maxScrollY;
		this._minScrollX = 0.0;
		this._minScrollY = 0.0;
		this._maxScrollX = Math.max(this._contentWidth,this._visibleWidth) - this._visibleWidth;
		this._maxScrollY = Math.max(this._contentHeight,this._visibleHeight) - this._visibleHeight;
		if(oldMinScrollX != this._minScrollX || oldMaxScrollX != this._maxScrollX) {
			this.refreshAnimateScrollXEndRatio();
		}
		if(oldMinScrollY != this._minScrollY || oldMaxScrollY != this._maxScrollY) {
			this.refreshAnimateScrollYEndRatio();
		}
	}
	,startScroll: function() {
		if(this._scrolling) {
			return;
		}
		this._scrolling = true;
		if(((this._target) instanceof openfl_display_DisplayObjectContainer)) {
			var container = js_Boot.__cast(this._target , openfl_display_DisplayObjectContainer);
			this.restoreMouseChildren = container.mouseChildren;
			container.mouseChildren = false;
		}
		feathers_events_ScrollEvent.dispatch(this,"scrollStart");
	}
	,completeScroll: function() {
		if(!this._scrolling || this._draggingX || this._draggingY || this.animateScrollX != null || this.animateScrollY != null) {
			return;
		}
		this._scrolling = false;
		if(((this._target) instanceof openfl_display_DisplayObjectContainer)) {
			var container = js_Boot.__cast(this._target , openfl_display_DisplayObjectContainer);
			container.mouseChildren = this.restoreMouseChildren;
		}
		feathers_events_ScrollEvent.dispatch(this,"scrollComplete");
	}
	,finishScrollX: function() {
		this._draggingX = false;
		var targetScrollX = null;
		if(this.snapPositionsX != null) {
			var minOffsetX = Infinity;
			var _g = 0;
			var _g1 = this.snapPositionsX;
			while(_g < _g1.length) {
				var snapX = _g1[_g];
				++_g;
				var offsetX = Math.abs(snapX - this._scrollX);
				if(minOffsetX > offsetX) {
					minOffsetX = offsetX;
					targetScrollX = snapX;
				}
			}
			if(targetScrollX == this._scrollX) {
				targetScrollX = null;
			}
		}
		if(this._scrollX < this._minScrollX) {
			targetScrollX = this._minScrollX;
		} else if(this._scrollX > this._maxScrollX) {
			targetScrollX = this._maxScrollX;
		}
		if(targetScrollX == null) {
			this.completeScroll();
		} else {
			var duration = Math.abs(this._scrollX - targetScrollX) >= 1.0 ? this.elasticSnapDuration : 0.0;
			this.throwTo(targetScrollX,null,duration,this.bounceEase);
		}
	}
	,finishScrollY: function() {
		this._draggingY = false;
		var targetScrollY = null;
		if(this.snapPositionsY != null) {
			var minOffsetY = Infinity;
			var _g = 0;
			var _g1 = this.snapPositionsY;
			while(_g < _g1.length) {
				var snapY = _g1[_g];
				++_g;
				var offsetY = Math.abs(snapY - this._scrollY);
				if(minOffsetY > offsetY) {
					minOffsetY = offsetY;
					targetScrollY = snapY;
				}
			}
			if(targetScrollY == this._scrollY) {
				targetScrollY = null;
			}
		}
		if(this._scrollY < this._minScrollY) {
			targetScrollY = this._minScrollY;
		} else if(this._scrollY > this._maxScrollY) {
			targetScrollY = this._maxScrollY;
		}
		if(targetScrollY == null) {
			this.completeScroll();
		} else {
			var duration = Math.abs(this._scrollY - targetScrollY) >= 1.0 ? this.elasticSnapDuration : 0.0;
			this.throwTo(null,targetScrollY,duration,this.bounceEase);
		}
	}
	,animateScrollX_endRatio_onUpdate: function() {
		var time = openfl_Lib.getTimer() / 1000.0;
		var currentTime = time - this.animateScrollX.startTime;
		var ratio = currentTime / this.animateScrollX.duration;
		ratio = this._animateScrollXEase.calculate(ratio);
		if(ratio >= this.animateScrollXEndRatio && currentTime < this.animateScrollX.duration) {
			if(!this.elasticEdges) {
				if(this._scrollX < this._minScrollX) {
					this.set_scrollX(this._minScrollX);
				} else if(this._scrollX > this._maxScrollX) {
					this.set_scrollX(this._maxScrollX);
				}
			}
			motion_Actuate.stop(this.animateScrollX,null,false,false);
			this.animateScrollX = null;
			this._animateScrollXEase = null;
			this.finishScrollX();
			return;
		}
	}
	,animateScrollX_onComplete: function() {
		this.animateScrollX = null;
		this._animateScrollXEase = null;
		this.finishScrollX();
	}
	,animateScrollY_endRatio_onUpdate: function() {
		var time = openfl_Lib.getTimer() / 1000.0;
		var currentTime = time - this.animateScrollY.startTime;
		var ratio = currentTime / this.animateScrollY.duration;
		ratio = this._animateScrollYEase.calculate(ratio);
		if(ratio >= this.animateScrollYEndRatio && currentTime < this.animateScrollY.duration) {
			if(!this.elasticEdges) {
				if(this._scrollY < this._minScrollY) {
					this.set_scrollY(this._minScrollY);
				} else if(this._scrollY > this._maxScrollY) {
					this.set_scrollY(this._maxScrollY);
				}
			}
			motion_Actuate.stop(this.animateScrollY,null,false,false);
			this.animateScrollY = null;
			this._animateScrollYEase = null;
			this.finishScrollY();
			return;
		}
	}
	,animateScrollY_onComplete: function() {
		this.animateScrollY = null;
		this._animateScrollYEase = null;
		this.finishScrollY();
	}
	,cleanupAfterDrag: function() {
		if(this._touchPointID == null) {
			return;
		}
		this._previousTouchPointID = this._scrolling ? this._touchPointID : null;
		this._touchPointID = null;
		this._touchPointIsSimulated = false;
		this._target.removeEventListener("removedFromStage",$bind(this,this.scroller_target_removedFromStageHandler));
		if(this._target.stage != null) {
			this._target.stage.removeEventListener("mouseMove",$bind(this,this.scroller_target_stage_mouseMoveHandler));
			this._target.stage.removeEventListener("mouseUp",$bind(this,this.scroller_target_stage_mouseUpHandler));
			this._target.stage.removeEventListener("touchMove",$bind(this,this.scroller_target_stage_touchMoveHandler));
			this._target.stage.removeEventListener("touchEnd",$bind(this,this.scroller_target_stage_touchEndHandler));
		}
	}
	,scroller_target_removedFromStageHandler: function(event) {
		this.cleanupAfterDrag();
	}
	,touchBegin: function(touchPointID,simulatedTouch,stageX,stageY) {
		if(simulatedTouch && !this.simulateTouch) {
			return;
		}
		if(this._touchPointID != null) {
			return;
		}
		if(this.animateScrollX != null) {
			motion_Actuate.stop(this.animateScrollX,null,false,false);
			this.animateScrollX = null;
			this._animateScrollXEase = null;
		}
		if(this.animateScrollY != null) {
			motion_Actuate.stop(this.animateScrollY,null,false,false);
			this.animateScrollY = null;
			this._animateScrollYEase = null;
		}
		this._target.addEventListener("removedFromStage",$bind(this,this.scroller_target_removedFromStageHandler),false,0,true);
		this._target.stage.addEventListener("mouseMove",$bind(this,this.scroller_target_stage_mouseMoveHandler),false,0,true);
		this._target.stage.addEventListener("mouseUp",$bind(this,this.scroller_target_stage_mouseUpHandler),false,0,true);
		this._target.stage.addEventListener("touchMove",$bind(this,this.scroller_target_stage_touchMoveHandler),false,0,true);
		this._target.stage.addEventListener("touchEnd",$bind(this,this.scroller_target_stage_touchEndHandler),false,0,true);
		if(((this._target) instanceof openfl_display_DisplayObjectContainer)) {
			var container = js_Boot.__cast(this._target , openfl_display_DisplayObjectContainer);
			if(this._scrolling) {
				container.mouseChildren = false;
			}
		}
		this._previousTouchPointID = null;
		this._touchPointID = touchPointID;
		this._touchPointIsSimulated = simulatedTouch;
		this.startTouchX = stageX;
		this.startTouchY = stageY;
		this.startScrollX = this._scrollX;
		this.startScrollY = this._scrollY;
		this.savedScrollMoves.length = 0;
	}
	,touchMove: function(touchPointID,simulatedTouch,stageX,stageY) {
		if(this._touchPointID == null) {
			return;
		}
		if(this._touchPointID != touchPointID) {
			return;
		}
		if(this._touchPointIsSimulated != simulatedTouch) {
			return;
		}
		var touchOffsetX = stageX - this.startTouchX;
		var touchOffsetY = stageY - this.startTouchY;
		var scaleX = 1.0;
		var scaleY = 1.0;
		var current = this._target;
		while(current != current.stage) {
			scaleX /= current.get_scaleX();
			scaleY /= current.get_scaleY();
			current = current.parent;
		}
		touchOffsetX *= scaleX;
		touchOffsetY *= scaleY;
		var canDragX = this.canDragX();
		var canDragY = this.canDragY();
		if(!this._draggingX && canDragX && Math.abs(touchOffsetX) > this.minDragDistance) {
			this.startTouchX = stageX;
			touchOffsetX = 0.0;
			this._draggingX = true;
			if(!this._draggingY) {
				this.startScroll();
				if(this._touchPointID == null) {
					return;
				}
			}
		}
		if(!this._draggingY && canDragY && Math.abs(touchOffsetY) > this.minDragDistance) {
			this.startTouchY = stageY;
			touchOffsetY = 0.0;
			this._draggingY = true;
			if(!this._draggingX) {
				this.startScroll();
				if(this._touchPointID == null) {
					return;
				}
			}
		}
		if(!this._draggingX && !this._draggingY) {
			return;
		}
		var scrollX = this.startScrollX;
		if(canDragX) {
			scrollX -= touchOffsetX;
			if(this.elasticEdges) {
				var minElasticScrollX = this._minScrollX;
				if(minElasticScrollX > this.startScrollX) {
					minElasticScrollX = this.startScrollX;
				}
				var maxElasticScrollX = this._maxScrollX;
				if(maxElasticScrollX < this.startScrollX) {
					maxElasticScrollX = this.startScrollX;
				}
				if(scrollX < this._minScrollX) {
					if(this._maxScrollX > this._minScrollX || this.forceElasticLeft) {
						scrollX -= (scrollX - minElasticScrollX) * (1.0 - this.elasticity);
					} else {
						scrollX = this._minScrollX;
					}
				} else if(scrollX > this._maxScrollX) {
					if(this._maxScrollX > this._minScrollX || this.forceElasticRight) {
						scrollX -= (scrollX - maxElasticScrollX) * (1.0 - this.elasticity);
					} else {
						scrollX = this._maxScrollX;
					}
				}
			} else if(scrollX < this._minScrollX) {
				scrollX = this._minScrollX;
			} else if(scrollX > this._maxScrollX) {
				scrollX = this._maxScrollX;
			}
		}
		var scrollY = this.startScrollY;
		if(canDragY) {
			scrollY -= touchOffsetY;
			if(this.elasticEdges) {
				var minElasticScrollY = this._minScrollY;
				if(minElasticScrollY > this.startScrollY) {
					minElasticScrollY = this.startScrollY;
				}
				var maxElasticScrollY = this._maxScrollY;
				if(maxElasticScrollY < this.startScrollY) {
					maxElasticScrollY = this.startScrollY;
				}
				if(scrollY < this._minScrollY) {
					if(this._maxScrollY > this._minScrollY || this.forceElasticTop) {
						scrollY -= (scrollY - minElasticScrollY) * (1.0 - this.elasticity);
					} else {
						scrollY = this._minScrollY;
					}
				} else if(scrollY > this._maxScrollY) {
					if(this._maxScrollY > this._minScrollY || this.forceElasticBottom) {
						scrollY -= (scrollY - maxElasticScrollY) * (1.0 - this.elasticity);
					} else {
						scrollY = this._maxScrollY;
					}
				}
			} else if(scrollY < this._minScrollY) {
				scrollY = this._minScrollY;
			} else if(scrollY > this._maxScrollY) {
				scrollY = this._maxScrollY;
			}
		}
		this.set_scrollX(scrollX);
		this.set_scrollY(scrollY);
		if(this.savedScrollMoves.length > 60) {
			this.savedScrollMoves.length = 30;
		}
		this.savedScrollMoves.push(scrollX);
		this.savedScrollMoves.push(scrollY);
		this.savedScrollMoves.push(openfl_Lib.getTimer());
	}
	,touchEnd: function(touchPointID,simulatedTouch) {
		if(this._touchPointID == null) {
			return;
		}
		if(this._touchPointID != touchPointID) {
			return;
		}
		if(this._touchPointIsSimulated != simulatedTouch) {
			return;
		}
		this.cleanupAfterDrag();
		var finishingX = !this.canDragX();
		var finishingY = !this.canDragY();
		if(this._scrollX < this._minScrollX || this._scrollX > this._maxScrollX) {
			finishingX = true;
			this.finishScrollX();
		}
		if(this._scrollY < this._minScrollY || this._scrollY > this._maxScrollY) {
			finishingY = true;
			this.finishScrollY();
		}
		if(finishingX && finishingY) {
			return;
		}
		if(!this._draggingX && !this._draggingY) {
			return;
		}
		var targetTime = openfl_Lib.getTimer() - 100;
		var endIndex = this.savedScrollMoves.length - 1;
		var startIndex = endIndex;
		var i = endIndex;
		while(endIndex > 0 && this.savedScrollMoves[i] > targetTime) {
			startIndex = i;
			i -= 3;
		}
		if(startIndex == endIndex) {
			if(!finishingX && this._draggingX) {
				this.finishScrollX();
			}
			if(!finishingY && this._draggingY) {
				this.finishScrollY();
			}
			return;
		}
		var timeOffset = this.savedScrollMoves[endIndex] - this.savedScrollMoves[startIndex];
		var velocityX = null;
		var velocityY = null;
		if(timeOffset > 0.0) {
			if(!finishingX && this._draggingX) {
				var movedX = this._scrollX - this.savedScrollMoves[startIndex - 2];
				velocityX = -movedX / timeOffset;
			}
			if(!finishingY && this._draggingY) {
				var movedY = this._scrollY - this.savedScrollMoves[startIndex - 1];
				velocityY = -movedY / timeOffset;
			}
		}
		if(velocityX != null || velocityY != null) {
			this.throwWithVelocity(velocityX,velocityY);
		}
		if(velocityX == null && this._draggingX) {
			this.finishScrollX();
		}
		if(velocityY == null && this._draggingY) {
			this.finishScrollY();
		}
	}
	,canDragX: function() {
		if(this.enabledX) {
			if(!(this._maxScrollX > this._minScrollX || this.forceElasticLeft)) {
				return this.forceElasticRight;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,canDragY: function() {
		if(this.enabledY) {
			if(!(this._maxScrollY > this._minScrollY || this.forceElasticTop)) {
				return this.forceElasticBottom;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,scroller_target_touchBeginCaptureHandler: function(event) {
		if(!this._scrolling) {
			return;
		}
		event.stopImmediatePropagation();
		this.scroller_target_touchBeginHandler(event);
	}
	,scroller_target_touchBeginHandler: function(event) {
		if(this.simulateTouch && event.isPrimaryTouchPoint) {
			return;
		}
		this.touchBegin(event.touchPointID,false,event.stageX,event.stageY);
	}
	,scroller_target_mouseDownCaptureHandler: function(event) {
		if(!this._scrolling) {
			return;
		}
		event.stopImmediatePropagation();
		this.scroller_target_mouseDownHandler(event);
	}
	,scroller_target_mouseDownHandler: function(event) {
		var stage = this._target.stage;
		if(stage == null) {
			return;
		}
		this.touchBegin(feathers_utils_Scroller.POINTER_ID_MOUSE,true,stage.get_mouseX(),stage.get_mouseY());
	}
	,scroller_target_stage_touchMoveHandler: function(event) {
		this.touchMove(event.touchPointID,false,event.stageX,event.stageY);
	}
	,scroller_target_stage_mouseMoveHandler: function(event) {
		var stage = js_Boot.__cast(event.currentTarget , openfl_display_Stage);
		this.touchMove(feathers_utils_Scroller.POINTER_ID_MOUSE,true,stage.get_mouseX(),stage.get_mouseY());
	}
	,scroller_target_stage_touchEndHandler: function(event) {
		this.touchEnd(event.touchPointID,false);
	}
	,scroller_target_clickCaptureHandler: function(event) {
		if(this._previousTouchPointID == null) {
			return;
		}
		this._previousTouchPointID = null;
		event.stopImmediatePropagation();
	}
	,scroller_target_touchTapCaptureHandler: function(event) {
		if(this._previousTouchPointID == null || this._previousTouchPointID != event.touchPointID) {
			return;
		}
		if(event.isPrimaryTouchPoint) {
			this._previousTouchPointID = feathers_utils_Scroller.POINTER_ID_MOUSE;
			return;
		}
		this._previousTouchPointID = null;
		event.stopImmediatePropagation();
	}
	,scroller_target_stage_mouseUpHandler: function(event) {
		this.touchEnd(feathers_utils_Scroller.POINTER_ID_MOUSE,true);
	}
	,scroller_window_wheelCaptureHandler: function(event) {
		this._mouseWheelDeltaMode = event.deltaMode;
	}
	,scroller_target_mouseWheelHandler: function(event) {
		if(this._scrolling) {
			event.stopImmediatePropagation();
			this.stop();
		}
		var deltaLines = event.delta;
		switch(this._mouseWheelDeltaMode) {
		case 0:
			deltaLines = deltaLines / 40 | 0;
			break;
		case 2:
			deltaLines *= 16;
			break;
		}
		var newScrollX = null;
		var newScrollY = null;
		if(this.mouseWheelYScrollsX) {
			var targetScrollX = this._scrollX;
			if(this.animateScrollX != null) {
				targetScrollX = this.targetScrollX;
			}
			newScrollX = targetScrollX - deltaLines * this.mouseWheelDeltaX;
			if(newScrollX < this._minScrollX) {
				newScrollX = this._minScrollX;
			} else if(newScrollX > this._maxScrollX) {
				newScrollX = this._maxScrollX;
			}
		} else {
			var targetScrollY = this._scrollY;
			if(this.animateScrollY != null) {
				targetScrollY = this.targetScrollY;
			}
			newScrollY = targetScrollY - deltaLines * this.mouseWheelDeltaY;
			if(newScrollY < this._minScrollY) {
				newScrollY = this._minScrollY;
			} else if(newScrollY > this._maxScrollY) {
				newScrollY = this._maxScrollY;
			}
		}
		if((newScrollX == null || newScrollX == this._scrollX) && (newScrollY == null || newScrollY == this._scrollY)) {
			return;
		}
		if(!this._scrolling) {
			event.stopImmediatePropagation();
			this.stop();
		}
		if(newScrollX != null) {
			this._draggingX = true;
		}
		if(newScrollY != null) {
			this._draggingY = true;
		}
		if(this.mouseWheelDuration > 0.0) {
			this.throwTo(newScrollX,newScrollY,this.mouseWheelDuration,this.ease);
		} else {
			this.startScroll();
			if(newScrollX != null) {
				this.set_scrollX(newScrollX);
			}
			if(newScrollY != null) {
				this.set_scrollY(newScrollY);
			}
			this._draggingX = false;
			this._draggingY = false;
			this.completeScroll();
		}
	}
	,__class__: feathers_utils_Scroller
	,__properties__: {get_touchPointIsSimulated:"get_touchPointIsSimulated",get_touchPointID:"get_touchPointID",set_target:"set_target",get_draggingY:"get_draggingY",get_draggingX:"get_draggingX",get_scrolling:"get_scrolling",get_maxScrollY:"get_maxScrollY",get_maxScrollX:"get_maxScrollX",get_minScrollY:"get_minScrollY",get_minScrollX:"get_minScrollX",set_restrictedScrollY:"set_restrictedScrollY",set_restrictedScrollX:"set_restrictedScrollX",set_scrollY:"set_scrollY",get_scrollY:"get_scrollY",set_scrollX:"set_scrollX",get_scrollX:"get_scrollX"}
});
var haxe_StackItem = $hxEnums["haxe.StackItem"] = { __ename__:"haxe.StackItem",__constructs__:null
	,CFunction: {_hx_name:"CFunction",_hx_index:0,__enum__:"haxe.StackItem",toString:$estr}
	,Module: ($_=function(m) { return {_hx_index:1,m:m,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Module",$_.__params__ = ["m"],$_)
	,FilePos: ($_=function(s,file,line,column) { return {_hx_index:2,s:s,file:file,line:line,column:column,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="FilePos",$_.__params__ = ["s","file","line","column"],$_)
	,Method: ($_=function(classname,method) { return {_hx_index:3,classname:classname,method:method,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="Method",$_.__params__ = ["classname","method"],$_)
	,LocalFunction: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"haxe.StackItem",toString:$estr}; },$_._hx_name="LocalFunction",$_.__params__ = ["v"],$_)
};
haxe_StackItem.__constructs__ = [haxe_StackItem.CFunction,haxe_StackItem.Module,haxe_StackItem.FilePos,haxe_StackItem.Method,haxe_StackItem.LocalFunction];
var haxe_CallStack = {};
haxe_CallStack.callStack = function() {
	return haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.callStack());
};
haxe_CallStack.exceptionStack = function(fullStack) {
	if(fullStack == null) {
		fullStack = false;
	}
	var eStack = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.exceptionStack());
	return fullStack ? eStack : haxe_CallStack.subtract(eStack,haxe_CallStack.callStack());
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	var _g1 = stack;
	while(_g < _g1.length) {
		var s = _g1[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.subtract = function(this1,stack) {
	var startIndex = -1;
	var i = -1;
	while(++i < this1.length) {
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var j = _g++;
			if(haxe_CallStack.equalItems(this1[i],stack[j])) {
				if(startIndex < 0) {
					startIndex = i;
				}
				++i;
				if(i >= this1.length) {
					break;
				}
			} else {
				startIndex = -1;
			}
		}
		if(startIndex >= 0) {
			break;
		}
	}
	if(startIndex >= 0) {
		return this1.slice(0,startIndex);
	} else {
		return this1;
	}
};
haxe_CallStack.equalItems = function(item1,item2) {
	if(item1 == null) {
		if(item2 == null) {
			return true;
		} else {
			return false;
		}
	} else {
		switch(item1._hx_index) {
		case 0:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 0) {
				return true;
			} else {
				return false;
			}
			break;
		case 1:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 1) {
				var m2 = item2.m;
				var m1 = item1.m;
				return m1 == m2;
			} else {
				return false;
			}
			break;
		case 2:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 2) {
				var item21 = item2.s;
				var file2 = item2.file;
				var line2 = item2.line;
				var col2 = item2.column;
				var col1 = item1.column;
				var line1 = item1.line;
				var file1 = item1.file;
				var item11 = item1.s;
				if(file1 == file2 && line1 == line2 && col1 == col2) {
					return haxe_CallStack.equalItems(item11,item21);
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 3:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 3) {
				var class2 = item2.classname;
				var method2 = item2.method;
				var method1 = item1.method;
				var class1 = item1.classname;
				if(class1 == class2) {
					return method1 == method2;
				} else {
					return false;
				}
			} else {
				return false;
			}
			break;
		case 4:
			if(item2 == null) {
				return false;
			} else if(item2._hx_index == 4) {
				var v2 = item2.v;
				var v1 = item1.v;
				return v1 == v2;
			} else {
				return false;
			}
			break;
		}
	}
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s._hx_index) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s.m;
		b.b += "module ";
		b.b += m == null ? "null" : "" + m;
		break;
	case 2:
		var s1 = s.s;
		var file = s.file;
		var line = s.line;
		var col = s.column;
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null ? "null" : "" + file;
		b.b += " line ";
		b.b += line == null ? "null" : "" + line;
		if(col != null) {
			b.b += " column ";
			b.b += col == null ? "null" : "" + col;
		}
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var cname = s.classname;
		var meth = s.method;
		b.b += Std.string(cname == null ? "<unknown>" : cname);
		b.b += ".";
		b.b += meth == null ? "null" : "" + meth;
		break;
	case 4:
		var n = s.v;
		b.b += "local function #";
		b.b += n == null ? "null" : "" + n;
		break;
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
	this.__skipStack = 0;
	var old = Error.prepareStackTrace;
	Error.prepareStackTrace = function(e) { return e.stack; }
	if(((native) instanceof Error)) {
		this.stack = native.stack;
	} else {
		var e = null;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,haxe_Exception);
			e = this;
		} else {
			e = new Error();
			if(typeof(e.stack) == "undefined") {
				try { throw e; } catch(_) {}
				this.__skipStack++;
			}
		}
		this.stack = e.stack;
	}
	Error.prepareStackTrace = old;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		e.__skipStack++;
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,toString: function() {
		return this.get_message();
	}
	,__shiftStack: function() {
		this.__skipStack++;
	}
	,get_message: function() {
		return this.message;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,get_stack: function() {
		var _g = this.__exceptionStack;
		if(_g == null) {
			var value = haxe_NativeStackTrace.toHaxe(haxe_NativeStackTrace.normalize(this.stack),this.__skipStack);
			this.setProperty("__exceptionStack",value);
			return value;
		} else {
			var s = _g;
			return s;
		}
	}
	,setProperty: function(name,value) {
		try {
			Object.defineProperty(this,name,{ value : value});
		} catch( _g ) {
			this[name] = value;
		}
	}
	,__class__: haxe_Exception
	,__properties__: {get_native:"get_native",get_stack:"get_stack",get_message:"get_message"}
});
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = "haxe._Int64.___Int64";
haxe__$Int64__$_$_$Int64.prototype = {
	__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_NativeStackTrace = function() { };
$hxClasses["haxe.NativeStackTrace"] = haxe_NativeStackTrace;
haxe_NativeStackTrace.__name__ = "haxe.NativeStackTrace";
haxe_NativeStackTrace.saveStack = function(e) {
	haxe_NativeStackTrace.lastError = e;
};
haxe_NativeStackTrace.callStack = function() {
	var e = new Error("");
	var stack = haxe_NativeStackTrace.tryHaxeStack(e);
	if(typeof(stack) == "undefined") {
		try {
			throw e;
		} catch( _g ) {
		}
		stack = e.stack;
	}
	return haxe_NativeStackTrace.normalize(stack,2);
};
haxe_NativeStackTrace.exceptionStack = function() {
	return haxe_NativeStackTrace.normalize(haxe_NativeStackTrace.tryHaxeStack(haxe_NativeStackTrace.lastError));
};
haxe_NativeStackTrace.toHaxe = function(s,skip) {
	if(skip == null) {
		skip = 0;
	}
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var _g = 0;
		var _g1 = stack.length;
		while(_g < _g1) {
			var i = _g++;
			if(skip > i) {
				continue;
			}
			var line = stack[i];
			var matched = line.match(/^    at ([A-Za-z0-9_. ]+) \(([^)]+):([0-9]+):([0-9]+)\)$/);
			if(matched != null) {
				var path = matched[1].split(".");
				if(path[0] == "$hxClasses") {
					path.shift();
				}
				var meth = path.pop();
				var file = matched[2];
				var line1 = Std.parseInt(matched[3]);
				var column = Std.parseInt(matched[4]);
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function" ? haxe_StackItem.LocalFunction() : meth == "Global code" ? null : haxe_StackItem.Method(path.join("."),meth),file,line1,column));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else if(skip > 0 && Array.isArray(s)) {
		return s.slice(skip);
	} else {
		return s;
	}
};
haxe_NativeStackTrace.tryHaxeStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = haxe_NativeStackTrace.prepareHxStackTrace;
	var stack = e.stack;
	Error.prepareStackTrace = oldValue;
	return stack;
};
haxe_NativeStackTrace.prepareHxStackTrace = function(e,callsites) {
	var stack = [];
	var _g = 0;
	while(_g < callsites.length) {
		var site = callsites[_g];
		++_g;
		if(haxe_NativeStackTrace.wrapCallSite != null) {
			site = haxe_NativeStackTrace.wrapCallSite(site);
		}
		var method = null;
		var fullName = site.getFunctionName();
		if(fullName != null) {
			var idx = fullName.lastIndexOf(".");
			if(idx >= 0) {
				var className = fullName.substring(0,idx);
				var methodName = fullName.substring(idx + 1);
				method = haxe_StackItem.Method(className,methodName);
			} else {
				method = haxe_StackItem.Method(null,fullName);
			}
		}
		var fileName = site.getFileName();
		var fileAddr = fileName == null ? -1 : fileName.indexOf("file:");
		if(haxe_NativeStackTrace.wrapCallSite != null && fileAddr > 0) {
			fileName = fileName.substring(fileAddr + 6);
		}
		stack.push(haxe_StackItem.FilePos(method,fileName,site.getLineNumber(),site.getColumnNumber()));
	}
	return stack;
};
haxe_NativeStackTrace.normalize = function(stack,skipItems) {
	if(skipItems == null) {
		skipItems = 0;
	}
	if(Array.isArray(stack) && skipItems > 0) {
		return stack.slice(skipItems);
	} else if(typeof(stack) == "string") {
		switch(stack.substring(0,6)) {
		case "Error\n":case "Error:":
			++skipItems;
			break;
		default:
		}
		return haxe_NativeStackTrace.skipLines(stack,skipItems);
	} else {
		return stack;
	}
};
haxe_NativeStackTrace.skipLines = function(stack,skip,pos) {
	if(pos == null) {
		pos = 0;
	}
	if(skip > 0) {
		pos = stack.indexOf("\n",pos);
		if(pos < 0) {
			return "";
		} else {
			return haxe_NativeStackTrace.skipLines(stack,--skip,pos + 1);
		}
	} else {
		return stack.substring(pos);
	}
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = "haxe.Serializer";
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var x = this.shash.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null ? "null" : "" + x;
			return;
		}
		this.shash.h[s] = this.scount++;
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null ? "null" : "" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g = 0;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null ? "null" : "" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type.typeof(v);
		switch(_g._hx_index) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null ? "null" : "" + v1;
			break;
		case 2:
			var v1 = v;
			if(isNaN(v1)) {
				this.buf.b += "k";
			} else if(!isFinite(v1)) {
				this.buf.b += v1 < 0 ? "m" : "p";
			} else {
				this.buf.b += "d";
				this.buf.b += v1 == null ? "null" : "" + v1;
			}
			break;
		case 3:
			this.buf.b += v ? "t" : "f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = v.__name__;
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(v.__ename__);
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw haxe_Exception.thrown("Cannot serialize function");
		case 6:
			var c = _g.c;
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v["length"];
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null ? "null" : "" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null ? "null" : "" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					this.buf.b += ":";
					this.buf.b += k1 == null ? "null" : "" + k1;
					this.serialize(v1.h[k1]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_List:
				this.buf.b += "l";
				var v1 = v;
				var _g_head = v1.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					var i = val;
					this.serialize(i);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v1 = v;
				var k = v1.keys();
				while(k.hasNext()) {
					var k1 = k.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1["__id__"] = id;
					this.serialize(v1.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v1 = v;
				var h = v1.h;
				var _g_h = h;
				var _g_keys = Object.keys(h);
				var _g_length = _g_keys.length;
				var _g_current = 0;
				while(_g_current < _g_length) {
					var k = _g_keys[_g_current++];
					this.serializeString(k);
					this.serialize(v1.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v1 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v1.length * 8 / 6));
				this.buf.b += ":";
				var i = 0;
				var max = v1.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var this1 = new Array(haxe_Serializer.BASE64.length);
					b64 = this1;
					var _g1 = 0;
					var _g2 = haxe_Serializer.BASE64.length;
					while(_g1 < _g2) {
						var i1 = _g1++;
						b64[i1] = HxOverrides.cca(haxe_Serializer.BASE64,i1);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i < max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					var b3 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCodePoint(b64[b3 & 63]);
				}
				if(i == max) {
					var b1 = v1.b[i++];
					var b2 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCodePoint(b64[b2 << 2 & 63]);
				} else if(i == max + 1) {
					var b1 = v1.b[i++];
					this.buf.b += String.fromCodePoint(b64[b1 >> 2]);
					this.buf.b += String.fromCodePoint(b64[b1 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(c.__name__);
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			var e = _g.e;
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex ? "j" : "w");
			this.serializeString(e.__ename__);
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v._hx_index);
			} else {
				var e = v;
				this.serializeString($hxEnums[e.__enum__].__constructs__[e._hx_index]._hx_name);
			}
			this.buf.b += ":";
			var params = Type.enumParameters(v);
			this.buf.b += Std.string(params.length);
			var _g = 0;
			while(_g < params.length) {
				var p = params[_g];
				++_g;
				this.serialize(p);
			}
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = this.buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var _this = edecl.__constructs__;
			var result = new Array(_this.length);
			var _g = 0;
			var _g1 = _this.length;
			while(_g < _g1) {
				var i = _g++;
				result[i] = _this[i]._hx_name;
			}
			var tag = result[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = (c1 << 2 | c2 >> 4) & 255;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = "haxe._Unserializer.NullResolver";
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
	this.__skipStack++;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = _$String_String_$Impl_$.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				var c2 = b[i++];
				s += fcc((c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127);
			} else {
				var c21 = b[i++];
				var c3 = b[i++];
				var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,encodeString: function(s) {
		return this.encodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,decodeString: function(s) {
		return this.decodeBytes(haxe_io_Bytes.ofString(s)).toString();
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,remove: function(key) {
		try {
			this.root = this.removeLoop(key,this.root);
			return true;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
				return false;
			} else {
				throw _g;
			}
		}
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,keys: function() {
		var ret = [];
		this.keysLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,removeLoop: function(k,node) {
		if(node == null) {
			throw haxe_Exception.thrown("Not_found");
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return this.merge(node.left,node.right);
		} else if(c < 0) {
			return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right);
		} else {
			return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right));
		}
	}
	,keysLoop: function(node,acc) {
		if(node != null) {
			this.keysLoop(node.left,acc);
			acc.push(node.key);
			this.keysLoop(node.right,acc);
		}
	}
	,merge: function(t1,t2) {
		if(t1 == null) {
			return t2;
		}
		if(t2 == null) {
			return t1;
		}
		var t = this.minBinding(t2);
		return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
	}
	,minBinding: function(t) {
		if(t == null) {
			throw haxe_Exception.thrown("Not_found");
		} else if(t.left == null) {
			return t;
		} else {
			return this.minBinding(t.left);
		}
	}
	,removeMinBinding: function(t) {
		if(t.left == null) {
			return t.right;
		} else {
			return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	set: function(key,value) {
		this.h[key] = value;
	}
	,get: function(key) {
		return this.h[key];
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds__$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["haxe.ds._List.ListIterator"] = haxe_ds__$List_ListIterator;
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
haxe_ds__$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: haxe_ds__$List_ListIterator
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.stringify = function(h) {
	var s = "{";
	var first = true;
	for (var key in h) {
		if (first) first = false; else s += ',';
		s += key + ' => ' + Std.string(h[key]);
	}
	return s + "}";
};
haxe_ds_StringMap.prototype = {
	get: function(key) {
		return this.h[key];
	}
	,set: function(key,value) {
		this.h[key] = value;
	}
	,remove: function(key) {
		if(Object.prototype.hasOwnProperty.call(this.h,key)) {
			delete(this.h[key]);
			return true;
		} else {
			return false;
		}
	}
	,keys: function() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$StringMap_StringMapKeyIterator = function(h) {
	this.h = h;
	this.keys = Object.keys(h);
	this.length = this.keys.length;
	this.current = 0;
};
$hxClasses["haxe.ds._StringMap.StringMapKeyIterator"] = haxe_ds__$StringMap_StringMapKeyIterator;
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
haxe_ds__$StringMap_StringMapKeyIterator.prototype = {
	hasNext: function() {
		return this.current < this.length;
	}
	,next: function() {
		return this.keys[this.current++];
	}
	,__class__: haxe_ds__$StringMap_StringMapKeyIterator
};
var haxe_exceptions_PosException = function(message,previous,pos) {
	haxe_Exception.call(this,message,previous);
	if(pos == null) {
		this.posInfos = { fileName : "(unknown)", lineNumber : 0, className : "(unknown)", methodName : "(unknown)"};
	} else {
		this.posInfos = pos;
	}
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.PosException"] = haxe_exceptions_PosException;
haxe_exceptions_PosException.__name__ = "haxe.exceptions.PosException";
haxe_exceptions_PosException.__super__ = haxe_Exception;
haxe_exceptions_PosException.prototype = $extend(haxe_Exception.prototype,{
	toString: function() {
		return "" + haxe_Exception.prototype.toString.call(this) + " in " + this.posInfos.className + "." + this.posInfos.methodName + " at " + this.posInfos.fileName + ":" + this.posInfos.lineNumber;
	}
	,__class__: haxe_exceptions_PosException
});
var haxe_exceptions_NotImplementedException = function(message,previous,pos) {
	if(message == null) {
		message = "Not implemented";
	}
	haxe_exceptions_PosException.call(this,message,previous,pos);
	this.__skipStack++;
};
$hxClasses["haxe.exceptions.NotImplementedException"] = haxe_exceptions_NotImplementedException;
haxe_exceptions_NotImplementedException.__name__ = "haxe.exceptions.NotImplementedException";
haxe_exceptions_NotImplementedException.__super__ = haxe_exceptions_PosException;
haxe_exceptions_NotImplementedException.prototype = $extend(haxe_exceptions_PosException.prototype,{
	__class__: haxe_exceptions_NotImplementedException
});
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw new haxe_exceptions_NotImplementedException(null,null,{ fileName : "haxe/io/Input.hx", lineNumber : 53, className : "haxe.io.Input", methodName : "readByte"});
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__:"haxe.io.Encoding",__constructs__:null
	,UTF8: {_hx_name:"UTF8",_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_name:"RawNative",_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:"haxe.io.Error",__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.withoutDirectory = function(path) {
	var s = new haxe_io_Path(path);
	s.dir = null;
	return s.toString();
};
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.extension = function(path) {
	var s = new haxe_io_Path(path);
	if(s.ext == null) {
		return "";
	}
	return s.ext;
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(p < str.length) {
		var c = str.charCodeAt(p);
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		++p;
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_ExtraField = $hxEnums["haxe.zip.ExtraField"] = { __ename__:"haxe.zip.ExtraField",__constructs__:null
	,FUnknown: ($_=function(tag,bytes) { return {_hx_index:0,tag:tag,bytes:bytes,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FUnknown",$_.__params__ = ["tag","bytes"],$_)
	,FInfoZipUnicodePath: ($_=function(name,crc) { return {_hx_index:1,name:name,crc:crc,__enum__:"haxe.zip.ExtraField",toString:$estr}; },$_._hx_name="FInfoZipUnicodePath",$_.__params__ = ["name","crc"],$_)
	,FUtf8: {_hx_name:"FUtf8",_hx_index:2,__enum__:"haxe.zip.ExtraField",toString:$estr}
};
haxe_zip_ExtraField.__constructs__ = [haxe_zip_ExtraField.FUnknown,haxe_zip_ExtraField.FInfoZipUnicodePath,haxe_zip_ExtraField.FUtf8];
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__:"haxe.zip.Huffman",__constructs__:null
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="Found",$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBit",$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_._hx_name="NeedBits",$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__constructs__ = [haxe_zip_Huffman.Found,haxe_zip_Huffman.NeedBit,haxe_zip_Huffman.NeedBits];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var a = t.left;
			var b = t.right;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.n;
			var _g = t.table;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var a = t.left;
				var b = t.right;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var a = t.left;
			var b = t.right;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c & 255;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__:"haxe.zip._InflateImpl.State",__constructs__:null
	,Head: {_hx_name:"Head",_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_name:"Block",_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_name:"CData",_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_name:"Flat",_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_name:"Crc",_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_name:"Dist",_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_name:"DistOne",_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_name:"Done",_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b & 255;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var a = h.left;
			var b = h.right;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var n = h.n;
			var tbl = h.table;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Reader = function(i) {
	this.i = i;
};
$hxClasses["haxe.zip.Reader"] = haxe_zip_Reader;
haxe_zip_Reader.__name__ = "haxe.zip.Reader";
haxe_zip_Reader.readZip = function(i) {
	var r = new haxe_zip_Reader(i);
	return r.read();
};
haxe_zip_Reader.prototype = {
	readZipDate: function() {
		var t = this.i.readUInt16();
		var hour = t >> 11 & 31;
		var min = t >> 5 & 63;
		var sec = t & 31;
		var d = this.i.readUInt16();
		var year = d >> 9;
		var month = d >> 5 & 15;
		var day = d & 31;
		return new Date(year + 1980,month - 1,day,hour,min,sec << 1);
	}
	,readExtraFields: function(length) {
		var fields = new haxe_ds_List();
		while(length > 0) {
			if(length < 4) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			var tag = this.i.readUInt16();
			var len = this.i.readUInt16();
			if(length < len) {
				throw haxe_Exception.thrown("Invalid extra fields data");
			}
			if(tag == 28789) {
				var version = this.i.readByte();
				if(version != 1) {
					var data = new haxe_io_BytesBuffer();
					data.addByte(version);
					data.add(this.i.read(len - 1));
					fields.add(haxe_zip_ExtraField.FUnknown(tag,data.getBytes()));
				} else {
					var crc = this.i.readInt32();
					var name = this.i.read(len - 5).toString();
					fields.add(haxe_zip_ExtraField.FInfoZipUnicodePath(name,crc));
				}
			} else {
				fields.add(haxe_zip_ExtraField.FUnknown(tag,this.i.read(len)));
			}
			length -= 4 + len;
		}
		return fields;
	}
	,readEntryHeader: function() {
		var i = this.i;
		var h = i.readInt32();
		if(h == 33639248 || h == 101010256) {
			return null;
		}
		if(h != 67324752) {
			throw haxe_Exception.thrown("Invalid Zip Data");
		}
		var version = i.readUInt16();
		var flags = i.readUInt16();
		var utf8 = (flags & 2048) != 0;
		var compression = i.readUInt16();
		var compressed = compression != 0;
		if(compressed && compression != 8) {
			throw haxe_Exception.thrown("Unsupported compression " + compression);
		}
		var mtime = this.readZipDate();
		var crc32 = i.readInt32();
		var csize = i.readInt32();
		var usize = i.readInt32();
		var fnamelen = i.readInt16();
		var elen = i.readInt16();
		var fname = i.readString(fnamelen);
		var fields = this.readExtraFields(elen);
		if(utf8) {
			fields.push(haxe_zip_ExtraField.FUtf8);
		}
		var data = null;
		if((flags & 8) != 0) {
			csize = -1;
		}
		return { fileName : fname, fileSize : usize, fileTime : mtime, compressed : compressed, dataSize : csize, data : data, crc32 : crc32, extraFields : fields};
	}
	,read: function() {
		var l = new haxe_ds_List();
		var buf = null;
		var tmp = null;
		while(true) {
			var e = this.readEntryHeader();
			if(e == null) {
				break;
			}
			if(e.dataSize < 0) {
				var bufSize = 65536;
				if(tmp == null) {
					tmp = new haxe_io_Bytes(new ArrayBuffer(bufSize));
				}
				var out = new haxe_io_BytesBuffer();
				var z = new haxe_zip_InflateImpl(this.i,false,false);
				while(true) {
					var n = z.readBytes(tmp,0,bufSize);
					out.addBytes(tmp,0,n);
					if(n < bufSize) {
						break;
					}
				}
				e.data = out.getBytes();
				e.crc32 = this.i.readInt32();
				if(e.crc32 == 134695760) {
					e.crc32 = this.i.readInt32();
				}
				e.dataSize = this.i.readInt32();
				e.fileSize = this.i.readInt32();
				e.dataSize = e.fileSize;
				e.compressed = false;
			} else {
				e.data = this.i.read(e.dataSize);
			}
			l.add(e);
		}
		return l;
	}
	,__class__: haxe_zip_Reader
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var con = e.__constructs__[o._hx_index];
			var n = con._hx_name;
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__implements = function(o,iface) {
	return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = "js.Browser";
js_Browser.__properties__ = {get_supported:"get_supported"};
js_Browser.get_supported = function() {
	if(typeof(window) != "undefined" && typeof(window.location) != "undefined") {
		return typeof(window.location.protocol) == "string";
	} else {
		return false;
	}
};
js_Browser.getLocalStorage = function() {
	try {
		var s = window.localStorage;
		s.getItem("");
		if(s.length == 0) {
			var key = "_hx_" + Math.random();
			s.setItem(key,key);
			s.removeItem(key);
		}
		return s;
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		return null;
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var js_lib__$ArrayBuffer_ArrayBufferCompat = function() { };
$hxClasses["js.lib._ArrayBuffer.ArrayBufferCompat"] = js_lib__$ArrayBuffer_ArrayBufferCompat;
js_lib__$ArrayBuffer_ArrayBufferCompat.__name__ = "js.lib._ArrayBuffer.ArrayBufferCompat";
js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var resultArray = new Uint8Array(u.byteLength);
	resultArray.set(u);
	return resultArray.buffer;
};
var lime__$internal_backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._internal.backend.html5.GameDeviceData"] = lime__$internal_backend_html5_GameDeviceData;
lime__$internal_backend_html5_GameDeviceData.__name__ = "lime._internal.backend.html5.GameDeviceData";
lime__$internal_backend_html5_GameDeviceData.prototype = {
	__class__: lime__$internal_backend_html5_GameDeviceData
};
var lime__$internal_backend_html5_HTML5AudioSource = function(parent) {
	this.parent = parent;
	this.id = -1;
	this.gain = 1;
	this.position = new lime_math_Vector4();
};
$hxClasses["lime._internal.backend.html5.HTML5AudioSource"] = lime__$internal_backend_html5_HTML5AudioSource;
lime__$internal_backend_html5_HTML5AudioSource.__name__ = "lime._internal.backend.html5.HTML5AudioSource";
lime__$internal_backend_html5_HTML5AudioSource.prototype = {
	dispose: function() {
	}
	,init: function() {
	}
	,play: function() {
		if(this.playing || this.parent.buffer == null || this.parent.buffer.__srcHowl == null) {
			return;
		}
		this.playing = true;
		var time = this.getCurrentTime();
		this.completed = false;
		var cacheVolume = this.parent.buffer.__srcHowl._volume;
		this.parent.buffer.__srcHowl._volume = this.parent.get_gain();
		this.id = this.parent.buffer.__srcHowl.play();
		this.parent.buffer.__srcHowl._volume = cacheVolume;
		this.setPosition(this.parent.get_position());
		this.parent.buffer.__srcHowl.on("end",$bind(this,this.howl_onEnd),this.id);
		this.setCurrentTime(time);
	}
	,stop: function() {
		this.playing = false;
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
	}
	,howl_onEnd: function() {
		this.playing = false;
		if(this.loops > 0) {
			this.loops--;
			this.stop();
			this.play();
			return;
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			this.parent.buffer.__srcHowl.stop(this.id);
			this.parent.buffer.__srcHowl.off("end",$bind(this,this.howl_onEnd),this.id);
		}
		this.completed = true;
		this.parent.onComplete.dispatch();
	}
	,getCurrentTime: function() {
		if(this.id == -1) {
			return 0;
		}
		if(this.completed) {
			return this.getLength();
		} else if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var time = (this.parent.buffer.__srcHowl.seek(this.id) * 1000 | 0) - this.parent.offset;
			if(time < 0) {
				return 0;
			}
			return time;
		}
		return 0;
	}
	,setCurrentTime: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			var pos = (value + this.parent.offset) / 1000;
			if(pos < 0) {
				pos = 0;
			}
			this.parent.buffer.__srcHowl.seek(pos,this.id);
		}
		return value;
	}
	,getGain: function() {
		return this.gain;
	}
	,setGain: function(value) {
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null && this.id != -1) {
			this.parent.buffer.__srcHowl.volume(value,this.id);
		}
		return this.gain = value;
	}
	,getLength: function() {
		if(this.length != 0) {
			return this.length;
		}
		if(this.parent.buffer != null && this.parent.buffer.__srcHowl != null) {
			return this.parent.buffer.__srcHowl.duration() * 1000 | 0;
		}
		return 0;
	}
	,setLength: function(value) {
		return this.length = value;
	}
	,setLoops: function(value) {
		return this.loops = value;
	}
	,getPosition: function() {
		return this.position;
	}
	,setPosition: function(value) {
		this.position.x = value.x;
		this.position.y = value.y;
		this.position.z = value.z;
		this.position.w = value.w;
		if(this.parent.buffer.__srcHowl != null && this.parent.buffer.__srcHowl.pos != null) {
			this.parent.buffer.__srcHowl.pos(this.position.x,this.position.y,this.position.z,this.id);
		}
		return this.position;
	}
	,__class__: lime__$internal_backend_html5_HTML5AudioSource
};
var lime__$internal_backend_html5_HTML5HTTPRequest = function() {
	this.validStatus0 = new EReg("Tizen","gi").match(window.navigator.userAgent);
};
$hxClasses["lime._internal.backend.html5.HTML5HTTPRequest"] = lime__$internal_backend_html5_HTML5HTTPRequest;
lime__$internal_backend_html5_HTML5HTTPRequest.__name__ = "lime._internal.backend.html5.HTML5HTTPRequest";
lime__$internal_backend_html5_HTML5HTTPRequest.loadImage = function(uri) {
	var promise = new lime_app_Promise();
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,0);
	} else {
		lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 0});
	}
	return promise.future;
};
lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes = function(bytes,type) {
	var uri = URL.createObjectURL(new Blob([bytes.b.bufferValue],{ type : type}));
	if(uri != null) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(uri,promise,1);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : null, uri : uri, promise : promise, type : "IMAGE", options : 1});
		}
		return promise.future;
	} else {
		return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage("data:" + type + ";base64," + lime__$internal_format_Base64.encode(bytes));
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.processQueue = function() {
	if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit && lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.length > 0) {
		lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
		var queueItem = lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.pop();
		switch(queueItem.type) {
		case "BINARY":
			queueItem.instance.__loadData(queueItem.uri,queueItem.promise);
			break;
		case "IMAGE":
			lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage(queueItem.uri,queueItem.promise,queueItem.options);
			break;
		case "TEXT":
			queueItem.instance.__loadText(queueItem.uri,queueItem.promise);
			break;
		default:
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
		}
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname = function(hostname) {
	if(hostname == null) {
		return "";
	} else {
		return hostname;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort = function(port,protocol) {
	if(port == null || port == "") {
		switch(protocol) {
		case "ftp:":
			return "21";
		case "gopher:":
			return "70";
		case "http:":
			return "80";
		case "https:":
			return "443";
		case "ws:":
			return "80";
		case "wss:":
			return "443";
		default:
			return "";
		}
	}
	return port;
};
lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol = function(protocol) {
	if(protocol == null || protocol == "") {
		return "http:";
	} else {
		return protocol;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI = function(uri) {
	if(!StringTools.startsWith(uri,"data:")) {
		return StringTools.startsWith(uri,"blob:");
	} else {
		return true;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin = function(path) {
	if(path == null || path == "") {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(path)) {
		return true;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.originElement == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.originElement = window.document.createElement("a");
		lime__$internal_backend_html5_HTML5HTTPRequest.originHostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname($global.location.hostname);
		lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol($global.location.protocol);
		lime__$internal_backend_html5_HTML5HTTPRequest.originPort = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort($global.location.port,lime__$internal_backend_html5_HTML5HTTPRequest.originProtocol);
	}
	var a = lime__$internal_backend_html5_HTML5HTTPRequest.originElement;
	a.href = path;
	if(a.hostname == "") {
		a.href = a.href;
	}
	var hostname = lime__$internal_backend_html5_HTML5HTTPRequest.__fixHostname(a.hostname);
	var protocol = lime__$internal_backend_html5_HTML5HTTPRequest.__fixProtocol(a.protocol);
	var port = lime__$internal_backend_html5_HTML5HTTPRequest.__fixPort(a.port,protocol);
	var sameHost = hostname == "" || hostname == lime__$internal_backend_html5_HTML5HTTPRequest.originHostname;
	var samePort = port == "" || port == lime__$internal_backend_html5_HTML5HTTPRequest.originPort;
	if(protocol != "file:" && sameHost) {
		return samePort;
	} else {
		return false;
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__loadImage = function(uri,promise,options) {
	var image = new Image();
	if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(uri)) {
		image.crossOrigin = "Anonymous";
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress == null) {
		lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress = 'onprogress' in image;
	}
	if(lime__$internal_backend_html5_HTML5HTTPRequest.supportsImageProgress || lime__$internal_backend_html5_HTML5HTTPRequest.__isInMemoryURI(uri)) {
		image.addEventListener("load",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			buffer.__srcImage = image;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.complete(new lime_graphics_Image(buffer));
		},false);
		image.addEventListener("progress",function(event) {
			promise.progress(event.loaded,event.total);
		},false);
		image.addEventListener("error",function(event) {
			lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI(uri,options);
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			promise.error(event.detail);
		},false);
		image.src = uri;
	} else {
		var request = new XMLHttpRequest();
		request.onload = function(_) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
			var img = new lime_graphics_Image();
			img.__fromBytes(haxe_io_Bytes.ofData(request.response),function(img) {
				promise.complete(img);
			});
		};
		request.onerror = function(event) {
			promise.error(event.message);
		};
		request.onprogress = function(event) {
			if(event.lengthComputable) {
				promise.progress(event.loaded,event.total);
			}
		};
		request.open("GET",uri,true);
		request.responseType = "arraybuffer";
		request.overrideMimeType("text/plain; charset=x-user-defined");
		request.send(null);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.__revokeBlobURI = function(uri,options) {
	if((options & 1) != 0) {
		URL.revokeObjectURL(uri);
	}
};
lime__$internal_backend_html5_HTML5HTTPRequest.prototype = {
	init: function(parent) {
		this.parent = parent;
	}
	,load: function(uri,progress,readyStateChange) {
		this.request = new XMLHttpRequest();
		if(this.parent.method == "POST") {
			this.request.upload.addEventListener("progress",progress,false);
		} else {
			this.request.addEventListener("progress",progress,false);
		}
		this.request.onreadystatechange = readyStateChange;
		var query = "";
		if(this.parent.data == null) {
			var h = this.parent.formData.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(query.length > 0) {
					query += "&";
				}
				var value = this.parent.formData.h[key];
				if(key.indexOf("[]") > -1 && ((value) instanceof Array)) {
					var _g = [];
					var x = $getIterator(value);
					while(x.hasNext()) {
						var x1 = x.next();
						_g.push(encodeURIComponent(x1));
					}
					var arrayValue = _g.join("&amp;" + key + "=");
					query += encodeURIComponent(key) + "=" + arrayValue;
				} else {
					var query1 = encodeURIComponent(key) + "=";
					var s = Std.string(value);
					query += query1 + encodeURIComponent(s);
				}
			}
			if(this.parent.method == "GET" && query != "") {
				if(uri.indexOf("?") > -1) {
					uri += "&" + query;
				} else {
					uri += "?" + query;
				}
				query = "";
			}
		}
		this.request.open(Std.string(this.parent.method),uri,true);
		if(this.parent.timeout > 0) {
			this.request.timeout = this.parent.timeout;
		}
		if(this.binary) {
			this.request.responseType = "arraybuffer";
		}
		var contentType = null;
		var _g = 0;
		var _g1 = this.parent.headers;
		while(_g < _g1.length) {
			var header = _g1[_g];
			++_g;
			if(header.name == "Content-Type") {
				contentType = header.value;
			} else {
				this.request.setRequestHeader(header.name,header.value);
			}
		}
		if(this.parent.contentType != null) {
			contentType = this.parent.contentType;
		}
		if(contentType == null) {
			if(this.parent.data != null) {
				contentType = "application/octet-stream";
			} else if(query != "") {
				contentType = "application/x-www-form-urlencoded";
			}
		}
		if(contentType != null) {
			this.request.setRequestHeader("Content-Type",contentType);
		}
		if(this.parent.withCredentials) {
			this.request.withCredentials = true;
		}
		if(this.parent.data != null) {
			this.request.send(this.parent.data.b.bufferValue);
		} else {
			this.request.send(query);
		}
	}
	,loadData: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadData(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "BINARY", options : 0});
		}
		return promise.future;
	}
	,loadText: function(uri) {
		var promise = new lime_app_Promise();
		if(lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests < lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit) {
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests++;
			this.__loadText(uri,promise);
		} else {
			lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue.add({ instance : this, uri : uri, promise : promise, type : "TEXT", options : 0});
		}
		return promise.future;
	}
	,processResponse: function() {
		if(this.parent.enableResponseHeaders) {
			this.parent.responseHeaders = [];
			var name;
			var value;
			var _g = 0;
			var _g1 = this.request.getAllResponseHeaders().split("\n");
			while(_g < _g1.length) {
				var line = _g1[_g];
				++_g;
				name = StringTools.trim(HxOverrides.substr(line,0,line.indexOf(":")));
				value = StringTools.trim(HxOverrides.substr(line,line.indexOf(":") + 1,null));
				if(name != "") {
					this.parent.responseHeaders.push(new lime_net_HTTPRequestHeader(name,value));
				}
			}
		}
		this.parent.responseStatus = this.request.status;
	}
	,__loadData: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status < 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				var bytes = null;
				if(_gthis.request.responseType == "") {
					if(_gthis.request.responseText != null) {
						bytes = haxe_io_Bytes.ofString(_gthis.request.responseText);
					}
				} else if(_gthis.request.response != null) {
					bytes = haxe_io_Bytes.ofData(_gthis.request.response);
				}
				_gthis.processResponse();
				promise.complete(bytes);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = true;
		this.load(uri,progress,readyStateChange);
	}
	,__loadText: function(uri,promise) {
		var _gthis = this;
		var progress = function(event) {
			promise.progress(event.loaded,event.total);
		};
		var readyStateChange = function(event) {
			if(_gthis.request.readyState != 4) {
				return;
			}
			if(_gthis.request.status != null && (_gthis.request.status >= 200 && _gthis.request.status <= 400 || _gthis.validStatus0 && _gthis.request.status == 0)) {
				_gthis.processResponse();
				promise.complete(_gthis.request.responseText);
			} else {
				_gthis.processResponse();
				promise.error(_gthis.request.status);
			}
			_gthis.request = null;
			lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests--;
			lime__$internal_backend_html5_HTML5HTTPRequest.processQueue();
		};
		this.binary = false;
		this.load(uri,progress,readyStateChange);
	}
	,__class__: lime__$internal_backend_html5_HTML5HTTPRequest
};
var lime__$internal_backend_html5_HTML5Window = function(parent) {
	this.inputing = false;
	this.unusedTouchesPool = new haxe_ds_List();
	this.scale = 1.0;
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	this.cursor = lime_ui_MouseCursor.DEFAULT;
	this.cacheMouseX = 0;
	this.cacheMouseY = 0;
	var attributes = parent.__attributes;
	if(!Object.prototype.hasOwnProperty.call(attributes,"context")) {
		attributes.context = { };
	}
	this.renderType = attributes.context.type;
	if(Object.prototype.hasOwnProperty.call(attributes,"element")) {
		parent.element = attributes.element;
	}
	var element = parent.element;
	if(Object.prototype.hasOwnProperty.call(attributes,"allowHighDPI") && attributes.allowHighDPI && this.renderType != "dom") {
		this.scale = window.devicePixelRatio;
	}
	parent.__scale = this.scale;
	this.setWidth = Object.prototype.hasOwnProperty.call(attributes,"width") ? attributes.width : 0;
	this.setHeight = Object.prototype.hasOwnProperty.call(attributes,"height") ? attributes.height : 0;
	parent.__width = this.setWidth;
	parent.__height = this.setHeight;
	parent.id = lime__$internal_backend_html5_HTML5Window.windowID++;
	if(((element) instanceof HTMLCanvasElement)) {
		this.canvas = element;
	} else if(this.renderType == "dom") {
		this.div = window.document.createElement("div");
	} else {
		this.canvas = window.document.createElement("canvas");
	}
	if(this.canvas != null) {
		var style = this.canvas.style;
		style.setProperty("-webkit-transform","translateZ(0)",null);
		style.setProperty("transform","translateZ(0)",null);
	} else if(this.div != null) {
		var style = this.div.style;
		style.setProperty("-webkit-transform","translate3D(0,0,0)",null);
		style.setProperty("transform","translate3D(0,0,0)",null);
		style.position = "relative";
		style.overflow = "hidden";
		style.setProperty("-webkit-user-select","none",null);
		style.setProperty("-moz-user-select","none",null);
		style.setProperty("-ms-user-select","none",null);
		style.setProperty("-o-user-select","none",null);
	}
	if(parent.__width == 0 && parent.__height == 0) {
		if(element != null) {
			parent.__width = element.clientWidth;
			parent.__height = element.clientHeight;
		} else {
			parent.__width = window.innerWidth;
			parent.__height = window.innerHeight;
		}
		this.cacheElementWidth = parent.__width;
		this.cacheElementHeight = parent.__height;
		this.resizeElement = true;
	}
	if(this.canvas != null) {
		this.canvas.width = Math.round(parent.__width * this.scale);
		this.canvas.height = Math.round(parent.__height * this.scale);
		this.canvas.style.width = parent.__width + "px";
		this.canvas.style.height = parent.__height + "px";
	} else {
		this.div.style.width = parent.__width + "px";
		this.div.style.height = parent.__height + "px";
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && attributes.resizable || !Object.prototype.hasOwnProperty.call(attributes,"width") && this.setWidth == 0 && this.setHeight == 0) {
		parent.__resizable = true;
	}
	this.updateSize();
	if(element != null) {
		if(this.canvas != null) {
			if(element != this.canvas) {
				element.appendChild(this.canvas);
			}
		} else {
			element.appendChild(this.div);
		}
		var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
		var _g = 0;
		while(_g < events.length) {
			var event = events[_g];
			++_g;
			element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
		}
		element.addEventListener("contextmenu",$bind(this,this.handleContextMenuEvent),true);
		element.addEventListener("dragstart",$bind(this,this.handleDragEvent),true);
		element.addEventListener("dragover",$bind(this,this.handleDragEvent),true);
		element.addEventListener("drop",$bind(this,this.handleDragEvent),true);
		element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("touchcancel",$bind(this,this.handleTouchEvent),true);
		element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
		element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
	}
	this.createContext();
	if(parent.context.type == "webgl") {
		this.canvas.addEventListener("webglcontextlost",$bind(this,this.handleContextEvent),false);
		this.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleContextEvent),false);
	}
};
$hxClasses["lime._internal.backend.html5.HTML5Window"] = lime__$internal_backend_html5_HTML5Window;
lime__$internal_backend_html5_HTML5Window.__name__ = "lime._internal.backend.html5.HTML5Window";
lime__$internal_backend_html5_HTML5Window.prototype = {
	close: function() {
		this.parent.application.__removeWindow(this.parent);
	}
	,createContext: function() {
		var context = new lime_graphics_RenderContext();
		var contextAttributes = this.parent.__attributes.context;
		context.window = this.parent;
		context.attributes = contextAttributes;
		if(this.div != null) {
			context.dom = this.div;
			context.type = "dom";
			context.version = "";
		} else if(this.canvas != null) {
			var webgl = null;
			var forceCanvas = this.renderType == "canvas";
			var forceWebGL = this.renderType == "opengl" || this.renderType == "opengles" || this.renderType == "webgl";
			var allowWebGL2 = !Object.prototype.hasOwnProperty.call(contextAttributes,"version") || contextAttributes.version != "1";
			var isWebGL2 = false;
			if(forceWebGL || !forceCanvas && (!Object.prototype.hasOwnProperty.call(contextAttributes,"hardware") || contextAttributes.hardware)) {
				var transparentBackground = Object.prototype.hasOwnProperty.call(contextAttributes,"background") && contextAttributes.background == null;
				var colorDepth = Object.prototype.hasOwnProperty.call(contextAttributes,"colorDepth") ? contextAttributes.colorDepth : 16;
				var options = Object.prototype.hasOwnProperty.call(contextAttributes,"antialiasing") && contextAttributes.antialiasing > 0;
				var options1 = Object.prototype.hasOwnProperty.call(contextAttributes,"depth") ? contextAttributes.depth : true;
				var options2 = Object.prototype.hasOwnProperty.call(contextAttributes,"stencil") && contextAttributes.stencil;
				var options3 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : options1, premultipliedAlpha : true, stencil : options2, preserveDrawingBuffer : false, failIfMajorPerformanceCaveat : false};
				var glContextType = ["webgl","experimental-webgl"];
				if(allowWebGL2) {
					glContextType.unshift("webgl2");
				}
				var _g = 0;
				while(_g < glContextType.length) {
					var name = glContextType[_g];
					++_g;
					webgl = this.canvas.getContext(name,options3);
					if(webgl != null && name == "webgl2") {
						isWebGL2 = true;
					}
					if(webgl != null) {
						break;
					}
				}
			}
			if(webgl == null) {
				context.canvas2D = this.canvas.getContext("2d");
				context.type = "canvas";
				context.version = "";
			} else {
				context.webgl = lime_graphics_WebGLRenderContext.fromWebGL2RenderContext(webgl);
				if(isWebGL2) {
					context.webgl2 = webgl;
				}
				if(lime_graphics_opengl_GL.context == null) {
					lime_graphics_opengl_GL.context = webgl;
					lime_graphics_opengl_GL.type = "webgl";
					lime_graphics_opengl_GL.version = isWebGL2 ? 2 : 1;
				}
				context.type = "webgl";
				context.version = isWebGL2 ? "2" : "1";
			}
		}
		this.parent.context = context;
	}
	,getFrameRate: function() {
		if(this.parent.application == null) {
			return 0;
		}
		if(this.parent.application.__backend.framePeriod < 0) {
			return 60;
		} else if(this.parent.application.__backend.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.parent.application.__backend.framePeriod;
		}
	}
	,handleContextEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			if(event.cancelable) {
				event.preventDefault();
			}
			var tmp = lime_graphics_opengl_GL.context != null;
			this.parent.context = null;
			this.parent.onRenderContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onRenderContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,handleContextMenuEvent: function(event) {
		if((this.parent.onMouseUp.canceled || this.parent.onMouseDown.canceled) && event.cancelable) {
			event.preventDefault();
		}
	}
	,handleCutOrCopyEvent: function(event) {
		event.clipboardData.setData("text/plain",lime_system_Clipboard.get_text());
		if(event.cancelable) {
			event.preventDefault();
		}
	}
	,handleDragEvent: function(event) {
		switch(event.type) {
		case "dragover":
			event.preventDefault();
			return false;
		case "dragstart":
			if((js_Boot.__cast(event.target , HTMLElement)).nodeName.toLowerCase() == "img" && event.cancelable) {
				event.preventDefault();
				return false;
			}
			break;
		case "drop":
			if(event.dataTransfer != null && event.dataTransfer.files.length > 0) {
				this.parent.onDropFile.dispatch(event.dataTransfer.files);
				event.preventDefault();
				return false;
			}
			break;
		}
		return true;
	}
	,handleFocusEvent: function(event) {
		var _gthis = this;
		if(this.textInputEnabled) {
			if(event.relatedTarget == null || this.isDescendent(event.relatedTarget)) {
				haxe_Timer.delay(function() {
					if(_gthis.textInputEnabled) {
						lime__$internal_backend_html5_HTML5Window.textInput.focus();
					}
				},20);
			}
		}
	}
	,handleFullscreenEvent: function(event) {
		var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
		if(fullscreenElement != null) {
			this.isFullscreen = true;
			this.parent.__fullscreen = true;
			if(this.requestedFullscreen) {
				this.requestedFullscreen = false;
				this.parent.onFullscreen.dispatch();
			}
		} else {
			this.isFullscreen = false;
			this.parent.__fullscreen = false;
			this.parent.onRestore.dispatch();
			var changeEvents = ["fullscreenchange","mozfullscreenchange","webkitfullscreenchange","MSFullscreenChange"];
			var errorEvents = ["fullscreenerror","mozfullscreenerror","webkitfullscreenerror","MSFullscreenError"];
			var _g = 0;
			var _g1 = changeEvents.length;
			while(_g < _g1) {
				var i = _g++;
				window.document.removeEventListener(changeEvents[i],$bind(this,this.handleFullscreenEvent),false);
				window.document.removeEventListener(errorEvents[i],$bind(this,this.handleFullscreenEvent),false);
			}
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(this.inputing) {
			return;
		}
		if(lime__$internal_backend_html5_HTML5Window.textInput.value != lime__$internal_backend_html5_HTML5Window.dummyCharacter) {
			var value = StringTools.replace(lime__$internal_backend_html5_HTML5Window.textInput.value,lime__$internal_backend_html5_HTML5Window.dummyCharacter,"");
			if(value.length > 0) {
				this.parent.onTextInput.dispatch(value);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.parent.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect = this.div.getBoundingClientRect();
					x = event.clientX - rect.left;
					y = event.clientY - rect.top;
				} else {
					var rect = this.parent.element.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			switch(event.type) {
			case "mousedown":
				if(event.currentTarget == this.parent.element) {
					window.addEventListener("mouseup",$bind(this,this.handleMouseEvent));
				}
				this.parent.onMouseDown.dispatch(x,y,event.button);
				if(this.parent.onMouseDown.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			case "mouseenter":
				if(event.target == this.parent.element) {
					this.parent.onEnter.dispatch();
					if(this.parent.onEnter.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseleave":
				if(event.target == this.parent.element) {
					this.parent.onLeave.dispatch();
					if(this.parent.onLeave.canceled && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mousemove":
				if(x != this.cacheMouseX || y != this.cacheMouseY) {
					this.parent.onMouseMove.dispatch(x,y);
					this.parent.onMouseMoveRelative.dispatch(x - this.cacheMouseX,y - this.cacheMouseY);
					if((this.parent.onMouseMove.canceled || this.parent.onMouseMoveRelative.canceled) && event.cancelable) {
						event.preventDefault();
					}
				}
				break;
			case "mouseup":
				window.removeEventListener("mouseup",$bind(this,this.handleMouseEvent));
				if(event.currentTarget == this.parent.element) {
					event.stopPropagation();
				}
				this.parent.onMouseUp.dispatch(x,y,event.button);
				if(this.parent.onMouseUp.canceled && event.cancelable) {
					event.preventDefault();
				}
				break;
			default:
			}
			this.cacheMouseX = x;
			this.cacheMouseY = y;
		} else {
			var deltaMode;
			switch(event.deltaMode) {
			case 0:
				deltaMode = lime_ui_MouseWheelMode.PIXELS;
				break;
			case 1:
				deltaMode = lime_ui_MouseWheelMode.LINES;
				break;
			case 2:
				deltaMode = lime_ui_MouseWheelMode.PAGES;
				break;
			default:
				deltaMode = lime_ui_MouseWheelMode.UNKNOWN;
			}
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY,deltaMode);
			if(this.parent.onMouseWheel.canceled && event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handlePasteEvent: function(event) {
		if(event.clipboardData.types.indexOf("text/plain") > -1) {
			var text = event.clipboardData.getData("text/plain");
			lime_system_Clipboard.set_text(text);
			if(this.textInputEnabled) {
				this.parent.onTextInput.dispatch(text);
			}
			if(event.cancelable) {
				event.preventDefault();
			}
		}
	}
	,handleResizeEvent: function(event) {
		this.primaryTouch = null;
		this.updateSize();
	}
	,handleTouchEvent: function(event) {
		if(event.cancelable) {
			event.preventDefault();
		}
		var rect = null;
		if(this.parent.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.parent.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var touch;
		var x;
		var y;
		var cacheX;
		var cacheY;
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			x = 0.0;
			y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			if(event.type == "touchstart") {
				touch = this.unusedTouchesPool.pop();
				if(touch == null) {
					touch = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.id = data.identifier;
					touch.dx = 0;
					touch.dy = 0;
					touch.pressure = data.force;
					touch.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch;
				lime_ui_Touch.onStart.dispatch(touch);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch;
				}
				if(touch == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
			} else {
				touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					cacheX = touch.x;
					cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					switch(event.type) {
					case "touchcancel":
						lime_ui_Touch.onCancel.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.primaryTouch = null;
						}
						break;
					case "touchend":
						lime_ui_Touch.onEnd.dispatch(touch);
						this.currentTouches.remove(data.identifier);
						this.unusedTouchesPool.add(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseUp.dispatch(x,y,0);
							this.primaryTouch = null;
						}
						break;
					case "touchmove":
						lime_ui_Touch.onMove.dispatch(touch);
						if(touch == this.primaryTouch) {
							this.parent.onMouseMove.dispatch(x,y);
						}
						break;
					default:
					}
				}
			}
		}
	}
	,isDescendent: function(node) {
		if(node == this.parent.element) {
			return true;
		}
		while(node != null) {
			if(node.parentNode == this.parent.element) {
				return true;
			}
			node = node.parentNode;
		}
		return false;
	}
	,setClipboard: function(value) {
		if(lime__$internal_backend_html5_HTML5Window.textArea == null) {
			lime__$internal_backend_html5_HTML5Window.textArea = window.document.createElement("textarea");
			lime__$internal_backend_html5_HTML5Window.textArea.style.height = "0px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.left = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.opacity = "0";
			lime__$internal_backend_html5_HTML5Window.textArea.style.position = "fixed";
			lime__$internal_backend_html5_HTML5Window.textArea.style.top = "-100px";
			lime__$internal_backend_html5_HTML5Window.textArea.style.width = "0px";
			window.document.body.appendChild(lime__$internal_backend_html5_HTML5Window.textArea);
		}
		lime__$internal_backend_html5_HTML5Window.textArea.value = value;
		lime__$internal_backend_html5_HTML5Window.textArea.focus();
		lime__$internal_backend_html5_HTML5Window.textArea.select();
		if(window.document.queryCommandEnabled("copy")) {
			window.document.execCommand("copy");
		}
	}
	,setCursor: function(value) {
		if(this.cursor != value) {
			if(value == null) {
				this.parent.element.style.cursor = "none";
			} else {
				var tmp;
				switch(value._hx_index) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				this.parent.element.style.cursor = tmp;
			}
			this.cursor = value;
		}
		return this.cursor;
	}
	,setFullscreen: function(value) {
		if(value) {
			if(!this.requestedFullscreen && !this.isFullscreen) {
				this.requestedFullscreen = true;
				if(($_=this.parent.element,$bind($_,$_.requestFullscreen))) {
					document.addEventListener("fullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("fullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.requestFullscreen();
				} else if(this.parent.element.mozRequestFullScreen) {
					document.addEventListener("mozfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("mozfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.mozRequestFullScreen();
				} else if(this.parent.element.webkitRequestFullscreen) {
					document.addEventListener("webkitfullscreenchange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("webkitfullscreenerror",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.webkitRequestFullscreen();
				} else if(this.parent.element.msRequestFullscreen) {
					document.addEventListener("MSFullscreenChange",$bind(this,this.handleFullscreenEvent),false);
					document.addEventListener("MSFullscreenError",$bind(this,this.handleFullscreenEvent),false);
					this.parent.element.msRequestFullscreen();
				}
			}
		} else if(this.isFullscreen) {
			this.requestedFullscreen = false;
			if(document.exitFullscreen) {
				document.exitFullscreen();
			} else if(document.mozCancelFullScreen) {
				document.mozCancelFullScreen();
			} else if(document.webkitExitFullscreen) {
				document.webkitExitFullscreen();
			} else if(document.msExitFullscreen) {
				document.msExitFullscreen();
			}
		}
		return value;
	}
	,setTextInputEnabled: function(value) {
		if(value) {
			if(lime__$internal_backend_html5_HTML5Window.textInput == null) {
				lime__$internal_backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$internal_backend_html5_HTML5Window.textInput.type = "text";
				lime__$internal_backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$internal_backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$internal_backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$internal_backend_html5_HTML5Window.textInput.value = lime__$internal_backend_html5_HTML5Window.dummyCharacter;
				lime__$internal_backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$internal_backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$internal_backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$internal_backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$internal_backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$internal_backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$internal_backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$internal_backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
			}
			if(lime__$internal_backend_html5_HTML5Window.textInput.parentNode == null) {
				this.parent.element.appendChild(lime__$internal_backend_html5_HTML5Window.textInput);
			}
			if(!this.textInputEnabled) {
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("paste",$bind(this,this.handlePasteEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
				lime__$internal_backend_html5_HTML5Window.textInput.addEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			}
			lime__$internal_backend_html5_HTML5Window.textInput.focus();
			lime__$internal_backend_html5_HTML5Window.textInput.select();
		} else if(lime__$internal_backend_html5_HTML5Window.textInput != null) {
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("cut",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("copy",$bind(this,this.handleCutOrCopyEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("paste",$bind(this,this.handlePasteEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionstart",$bind(this,this.handleCompositionstartEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.removeEventListener("compositionend",$bind(this,this.handleCompositionendEvent),true);
			lime__$internal_backend_html5_HTML5Window.textInput.blur();
		}
		return this.textInputEnabled = value;
	}
	,handleCompositionstartEvent: function(e) {
		this.inputing = true;
	}
	,handleCompositionendEvent: function(e) {
		this.inputing = false;
		this.handleInputEvent(e);
	}
	,updateSize: function() {
		if(!this.parent.__resizable) {
			return;
		}
		var elementWidth;
		var elementHeight;
		if(this.parent.element != null) {
			elementWidth = this.parent.element.clientWidth;
			elementHeight = this.parent.element.clientHeight;
		} else {
			elementWidth = window.innerWidth;
			elementHeight = window.innerHeight;
		}
		if(elementWidth != this.cacheElementWidth || elementHeight != this.cacheElementHeight) {
			this.cacheElementWidth = elementWidth;
			this.cacheElementHeight = elementHeight;
			var stretch = this.resizeElement || this.setWidth == 0 && this.setHeight == 0;
			if(this.parent.element != null && (this.div == null || this.div != null && stretch)) {
				if(stretch) {
					if(this.parent.__width != elementWidth || this.parent.__height != elementHeight) {
						this.parent.__width = elementWidth;
						this.parent.__height = elementHeight;
						if(this.canvas != null) {
							if(this.parent.element != this.canvas) {
								this.canvas.width = Math.round(elementWidth * this.scale);
								this.canvas.height = Math.round(elementHeight * this.scale);
								this.canvas.style.width = elementWidth + "px";
								this.canvas.style.height = elementHeight + "px";
							}
						} else {
							this.div.style.width = elementWidth + "px";
							this.div.style.height = elementHeight + "px";
						}
						this.parent.onResize.dispatch(elementWidth,elementHeight);
					}
				} else {
					var scaleX = this.setWidth != 0 ? elementWidth / this.setWidth : 1;
					var scaleY = this.setHeight != 0 ? elementHeight / this.setHeight : 1;
					var targetWidth = elementWidth;
					var targetHeight = elementHeight;
					var marginLeft = 0;
					var marginTop = 0;
					if(scaleX < scaleY) {
						targetHeight = Math.floor(this.setHeight * scaleX);
						marginTop = Math.floor((elementHeight - targetHeight) / 2);
					} else {
						targetWidth = Math.floor(this.setWidth * scaleY);
						marginLeft = Math.floor((elementWidth - targetWidth) / 2);
					}
					if(this.canvas != null) {
						if(this.parent.element != this.canvas) {
							this.canvas.style.width = targetWidth + "px";
							this.canvas.style.height = targetHeight + "px";
							this.canvas.style.marginLeft = marginLeft + "px";
							this.canvas.style.marginTop = marginTop + "px";
						}
					} else {
						this.div.style.width = targetWidth + "px";
						this.div.style.height = targetHeight + "px";
						this.div.style.marginLeft = marginLeft + "px";
						this.div.style.marginTop = marginTop + "px";
					}
				}
			}
		}
	}
	,__class__: lime__$internal_backend_html5_HTML5Window
};
var lime__$internal_format_Base64 = function() { };
$hxClasses["lime._internal.format.Base64"] = lime__$internal_format_Base64;
lime__$internal_format_Base64.__name__ = "lime._internal.format.Base64";
lime__$internal_format_Base64.encode = function(source) {
	var result = [];
	var dictionary = lime__$internal_format_Base64.DICTIONARY;
	var extendedDictionary = lime__$internal_format_Base64.EXTENDED_DICTIONARY;
	var numBytes = source.length;
	var numInputTriplets = Math.floor(numBytes / 3);
	var numChunksToWrite = numInputTriplets * 2;
	result.length = Math.ceil(numBytes / 3) * 2;
	var numBytesRead = 0;
	var numChunksWritten = 0;
	var inputTriplet;
	while(numChunksWritten < numChunksToWrite) {
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8 | source.b[numBytesRead + 2];
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = extendedDictionary[inputTriplet & 4095];
		numBytesRead += 3;
		numChunksWritten += 2;
	}
	switch(numBytes - numInputTriplets * 3) {
	case 1:
		inputTriplet = source.b[numBytesRead] << 16;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = "==";
		break;
	case 2:
		inputTriplet = source.b[numBytesRead] << 16 | source.b[numBytesRead + 1] << 8;
		result[numChunksWritten] = extendedDictionary[inputTriplet >> 12 & 4095];
		result[numChunksWritten + 1] = dictionary[inputTriplet >> 6 & 63] + "=";
		break;
	default:
	}
	return result.join("");
};
var lime__$internal_format_Deflate = function() { };
$hxClasses["lime._internal.format.Deflate"] = lime__$internal_format_Deflate;
lime__$internal_format_Deflate.__name__ = "lime._internal.format.Deflate";
lime__$internal_format_Deflate.decompress = function(bytes) {
	var data = pako.inflateRaw(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_GZip = function() { };
$hxClasses["lime._internal.format.GZip"] = lime__$internal_format_GZip;
lime__$internal_format_GZip.__name__ = "lime._internal.format.GZip";
lime__$internal_format_GZip.decompress = function(bytes) {
	var data = pako.ungzip(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_format_LZMA = function() { };
$hxClasses["lime._internal.format.LZMA"] = lime__$internal_format_LZMA;
lime__$internal_format_LZMA.__name__ = "lime._internal.format.LZMA";
lime__$internal_format_LZMA.decompress = function(bytes) {
	return null;
};
var lime__$internal_format_Zlib = function() { };
$hxClasses["lime._internal.format.Zlib"] = lime__$internal_format_Zlib;
lime__$internal_format_Zlib.__name__ = "lime._internal.format.Zlib";
lime__$internal_format_Zlib.decompress = function(bytes) {
	var data = pako.inflate(bytes.b.bufferValue);
	return haxe_io_Bytes.ofData(data);
};
var lime__$internal_graphics_ImageCanvasUtil = function() { };
$hxClasses["lime._internal.graphics.ImageCanvasUtil"] = lime__$internal_graphics_ImageCanvasUtil;
lime__$internal_graphics_ImageCanvasUtil.__name__ = "lime._internal.graphics.ImageCanvasUtil";
lime__$internal_graphics_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime__$internal_graphics_ImageCanvasUtil.convertToCanvas = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.__srcCanvas == null && buffer.data != null) {
		image.set_transparent(true);
		lime__$internal_graphics_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
	} else if(image.type == lime_graphics_ImageType.DATA && buffer.__srcImageData != null && image.dirty) {
		buffer.__srcContext.putImageData(buffer.__srcImageData,0,0);
		image.dirty = false;
	}
	if(clear) {
		buffer.data = null;
		buffer.__srcImageData = null;
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
	image.type = lime_graphics_ImageType.CANVAS;
};
lime__$internal_graphics_ImageCanvasUtil.convertToData = function(image,clear) {
	if(clear == null) {
		clear = false;
	}
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	if(buffer.__srcCanvas != null && buffer.data == null) {
		lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		if(image.type == lime_graphics_ImageType.CANVAS) {
			image.dirty = false;
		}
	} else if(image.type == lime_graphics_ImageType.CANVAS && buffer.__srcCanvas != null && image.dirty) {
		if(buffer.__srcImageData == null) {
			lime__$internal_graphics_ImageCanvasUtil.createImageData(image);
		} else {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
			var elements = buffer.__srcImageData.data.buffer;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
		}
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
	image.type = lime_graphics_ImageType.DATA;
};
lime__$internal_graphics_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	lime__$internal_graphics_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime__$internal_graphics_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = sourceImage.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(sourceRect.x + alphaPoint.x,sourceRect.y + alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.globalCompositeOperation = "source-over";
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
	}
};
lime__$internal_graphics_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Uint8Array(buffer1,0);
			} else {
				this1 = new Uint8Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		buffer.data = this1;
	}
};
lime__$internal_graphics_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		a = image.get_transparent() ? color >> 24 & 255 : 255;
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		a = image.get_transparent() ? color & 255 : 255;
	}
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && a == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	if(a < 255) {
		image.buffer.__srcContext.clearRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	if(a > 0) {
		image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
		image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime__$internal_graphics_ImageCanvasUtil.convertToData(image);
	return lime__$internal_graphics_ImageDataUtil.getPixel(image,x,y,format);
};
lime__$internal_graphics_ImageCanvasUtil.sync = function(image,clear) {
	if(image == null) {
		return;
	}
	if(image.type == lime_graphics_ImageType.CANVAS && (image.buffer.__srcCanvas != null || image.buffer.data != null)) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image,clear);
	} else if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToData(image,clear);
	}
};
var lime__$internal_graphics_ImageDataUtil = function() { };
$hxClasses["lime._internal.graphics.ImageDataUtil"] = lime__$internal_graphics_ImageDataUtil;
lime__$internal_graphics_ImageDataUtil.__name__ = "lime._internal.graphics.ImageDataUtil";
lime__$internal_graphics_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math_ColorMatrix.getAlphaTable(colorMatrix);
	var redTable = lime_math_ColorMatrix.getRedTable(colorMatrix);
	var greenTable = lime_math_ColorMatrix.getGreenTable(colorMatrix);
	var blueTable = lime_math_ColorMatrix.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel = 0;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			offset = row + x * 4;
			var format1 = format;
			var premultiplied1 = premultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >>> 24 & 255] & 255) << 24 | (greenTable[pixel >>> 16 & 255] & 255) << 16 | (blueTable[pixel >>> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			var format2 = format;
			var premultiplied2 = premultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
					pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				data[offset] = pixel >>> 24 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >>> 24 & 255;
				data[offset + 2] = pixel >>> 16 & 255;
				data[offset + 3] = pixel >>> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >>> 8 & 255;
				data[offset + 1] = pixel >>> 16 & 255;
				data[offset + 2] = pixel >>> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel._hx_index) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel._hx_index) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel = 0;
	var destPixel = 0;
	var value = 0;
	var _g = 0;
	var _g1 = destView.height;
	while(_g < _g1) {
		var y = _g++;
		srcPosition = srcView.byteOffset + srcView.stride * y;
		destPosition = destView.byteOffset + destView.stride * y;
		var _g2 = 0;
		var _g3 = destView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var format = srcFormat;
			var premultiplied = srcPremultiplied;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format == null) {
				format = 0;
			}
			switch(format) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((srcPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			var format1 = destFormat;
			var premultiplied1 = destPremultiplied;
			if(premultiplied1 == null) {
				premultiplied1 = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			switch(format1) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(premultiplied1) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >>> 24 & 255;
				break;
			case 1:
				value = srcPixel >>> 16 & 255;
				break;
			case 2:
				value = srcPixel >>> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			var format2 = destFormat;
			var premultiplied2 = destPremultiplied;
			if(premultiplied2 == null) {
				premultiplied2 = false;
			}
			if(format2 == null) {
				format2 = 0;
			}
			if(premultiplied2) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
					destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(format2) {
			case 0:
				destData[destPosition] = destPixel >>> 24 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >>> 24 & 255;
				destData[destPosition + 2] = destPixel >>> 16 & 255;
				destData[destPosition + 3] = destPixel >>> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >>> 8 & 255;
				destData[destPosition + 1] = destPixel >>> 16 & 255;
				destData[destPosition + 2] = destPixel >>> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(image.width == sourceImage.width && image.height == sourceImage.height && sourceRect.width == sourceImage.width && sourceRect.height == sourceImage.height && sourceRect.x == 0 && sourceRect.y == 0 && destPoint.x == 0 && destPoint.y == 0 && alphaImage == null && alphaPoint == null && mergeAlpha == false && image.get_format() == sourceImage.get_format()) {
		image.buffer.data.set(sourceImage.buffer.data);
	} else {
		var sourceData = sourceImage.buffer.data;
		var destData = image.buffer.data;
		if(sourceData == null || destData == null) {
			return;
		}
		var sourceView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
		var destRect = new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height);
		var destView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,destRect);
		var sourceFormat = sourceImage.buffer.format;
		var destFormat = image.buffer.format;
		var sourcePosition;
		var destPosition;
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var sourcePixel = 0;
		var destPixel = 0;
		var sourcePremultiplied = sourceImage.buffer.premultiplied;
		var destPremultiplied = image.buffer.premultiplied;
		var sourceBytesPerPixel = sourceImage.buffer.bitsPerPixel / 8 | 0;
		var destBytesPerPixel = image.buffer.bitsPerPixel / 8 | 0;
		var useAlphaImage = alphaImage != null && alphaImage.get_transparent();
		var blend = mergeAlpha || useAlphaImage && !image.get_transparent() || !mergeAlpha && !image.get_transparent() && sourceImage.get_transparent();
		if(!useAlphaImage) {
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						sourceAlpha = (sourcePixel & 255) / 255.0;
						destAlpha = (destPixel & 255) / 255.0;
						oneMinusSourceAlpha = 1 - sourceAlpha;
						blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
						if(blendAlpha == 0) {
							destPixel = 0;
						} else {
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
						}
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((destPixel & 255) == 0) {
								if(destPixel != 0) {
									destPixel = 0;
								}
							} else if((destPixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
								destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = destPixel >>> 24 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 8 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						case 1:
							destData[destPosition] = destPixel & 255;
							destData[destPosition + 1] = destPixel >>> 24 & 255;
							destData[destPosition + 2] = destPixel >>> 16 & 255;
							destData[destPosition + 3] = destPixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = destPixel >>> 8 & 255;
							destData[destPosition + 1] = destPixel >>> 16 & 255;
							destData[destPosition + 2] = destPixel >>> 24 & 255;
							destData[destPosition + 3] = destPixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			} else if(sourceFormat == destFormat && sourcePremultiplied == destPremultiplied && sourceBytesPerPixel == destBytesPerPixel) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					destData.set(sourceData.subarray(sourcePosition,sourcePosition + destView.width * destBytesPerPixel),destPosition);
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						if(premultiplied1) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format1) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
					}
				}
			}
		} else {
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPosition;
			var alphaPixel = 0;
			var alphaView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(sourceView.x + (alphaPoint == null ? 0 : alphaPoint.x),sourceView.y + (alphaPoint == null ? 0 : alphaPoint.y),sourceView.width,sourceView.height));
			destView.clip(destPoint.x | 0,destPoint.y | 0,alphaView.width,alphaView.height);
			if(blend) {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = destFormat;
						var premultiplied1 = destPremultiplied;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						case 1:
							destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
							break;
						case 2:
							destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (destPixel & 255);
								destPixel = (lime_math_RGBA.__clamp[Math.round((destPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((destPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | destPixel & 255 & 255;
							}
						}
						var format2 = alphaFormat;
						var premultiplied2 = false;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						switch(format2) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied2) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						sourceAlpha = (alphaPixel & 255) / 255.0 * ((sourcePixel & 255) / 255.0);
						if(sourceAlpha > 0) {
							destAlpha = (destPixel & 255) / 255.0;
							oneMinusSourceAlpha = 1 - sourceAlpha;
							blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
							var value = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 24 & 255) * sourceAlpha + (destPixel >>> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (value & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value1 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 16 & 255) * sourceAlpha + (destPixel >>> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (value1 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
							var value2 = lime_math_RGBA.__clamp[Math.round(((sourcePixel >>> 8 & 255) * sourceAlpha + (destPixel >>> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (value2 & 255) << 8 | destPixel & 255 & 255;
							var value3 = lime_math_RGBA.__clamp[Math.round(blendAlpha * 255.0)];
							destPixel = (destPixel >>> 24 & 255 & 255) << 24 | (destPixel >>> 16 & 255 & 255) << 16 | (destPixel >>> 8 & 255 & 255) << 8 | value3 & 255;
							var format3 = destFormat;
							var premultiplied3 = destPremultiplied;
							if(premultiplied3 == null) {
								premultiplied3 = false;
							}
							if(format3 == null) {
								format3 = 0;
							}
							if(premultiplied3) {
								if((destPixel & 255) == 0) {
									if(destPixel != 0) {
										destPixel = 0;
									}
								} else if((destPixel & 255) != 255) {
									lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[destPixel & 255];
									destPixel = ((destPixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((destPixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((destPixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
								}
							}
							switch(format3) {
							case 0:
								destData[destPosition] = destPixel >>> 24 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 8 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							case 1:
								destData[destPosition] = destPixel & 255;
								destData[destPosition + 1] = destPixel >>> 24 & 255;
								destData[destPosition + 2] = destPixel >>> 16 & 255;
								destData[destPosition + 3] = destPixel >>> 8 & 255;
								break;
							case 2:
								destData[destPosition] = destPixel >>> 8 & 255;
								destData[destPosition + 1] = destPixel >>> 16 & 255;
								destData[destPosition + 2] = destPixel >>> 24 & 255;
								destData[destPosition + 3] = destPixel & 255;
								break;
							}
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			} else {
				var _g = 0;
				var _g1 = destView.height;
				while(_g < _g1) {
					var y = _g++;
					sourcePosition = sourceView.byteOffset + sourceView.stride * y;
					destPosition = destView.byteOffset + destView.stride * y;
					alphaPosition = alphaView.byteOffset + alphaView.stride * y;
					var _g2 = 0;
					var _g3 = destView.width;
					while(_g2 < _g3) {
						var x = _g2++;
						var format = sourceFormat;
						var premultiplied = sourcePremultiplied;
						if(premultiplied == null) {
							premultiplied = false;
						}
						if(format == null) {
							format = 0;
						}
						switch(format) {
						case 0:
							sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						case 1:
							sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
							break;
						case 2:
							sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
							break;
						}
						if(premultiplied) {
							if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (sourcePixel & 255);
								sourcePixel = (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((sourcePixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						var format1 = alphaFormat;
						var premultiplied1 = false;
						if(premultiplied1 == null) {
							premultiplied1 = false;
						}
						if(format1 == null) {
							format1 = 0;
						}
						switch(format1) {
						case 0:
							alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						case 1:
							alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
							break;
						case 2:
							alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
							break;
						}
						if(premultiplied1) {
							if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
								lime_math_RGBA.unmult = 255.0 / (alphaPixel & 255);
								alphaPixel = (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((alphaPixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
							}
						}
						var value = Math.round((sourcePixel & 255) * ((alphaPixel & 255) / 255));
						sourcePixel = (sourcePixel >>> 24 & 255 & 255) << 24 | (sourcePixel >>> 16 & 255 & 255) << 16 | (sourcePixel >>> 8 & 255 & 255) << 8 | value & 255;
						var format2 = destFormat;
						var premultiplied2 = destPremultiplied;
						if(premultiplied2 == null) {
							premultiplied2 = false;
						}
						if(format2 == null) {
							format2 = 0;
						}
						if(premultiplied2) {
							if((sourcePixel & 255) == 0) {
								if(sourcePixel != 0) {
									sourcePixel = 0;
								}
							} else if((sourcePixel & 255) != 255) {
								lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[sourcePixel & 255];
								sourcePixel = ((sourcePixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((sourcePixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((sourcePixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
							}
						}
						switch(format2) {
						case 0:
							destData[destPosition] = sourcePixel >>> 24 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 8 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						case 1:
							destData[destPosition] = sourcePixel & 255;
							destData[destPosition + 1] = sourcePixel >>> 24 & 255;
							destData[destPosition + 2] = sourcePixel >>> 16 & 255;
							destData[destPosition + 3] = sourcePixel >>> 8 & 255;
							break;
						case 2:
							destData[destPosition] = sourcePixel >>> 8 & 255;
							destData[destPosition + 1] = sourcePixel >>> 16 & 255;
							destData[destPosition + 2] = sourcePixel >>> 24 & 255;
							destData[destPosition + 3] = sourcePixel & 255;
							break;
						}
						sourcePosition += 4;
						destPosition += 4;
						alphaPosition += 4;
					}
				}
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (argb >>> 16 & 255 & 255) << 24 | (argb >>> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >>> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var this1 = 0;
		var rgba = this1;
		rgba = (bgra >>> 8 & 255 & 255) << 24 | (bgra >>> 16 & 255 & 255) << 16 | (bgra >>> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >>> 24 & 255 & 255) << 24 | (fillColor >>> 16 & 255 & 255) << 16 | (fillColor >>> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied) {
		if((fillColor & 255) == 0) {
			if(fillColor != 0) {
				fillColor = 0;
			}
		} else if((fillColor & 255) != 255) {
			lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
			fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
		}
	}
	var dataView = new lime__$internal_graphics__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g = 0;
	var _g1 = dataView.height;
	while(_g < _g1) {
		var y = _g++;
		row = dataView.byteOffset + dataView.stride * y;
		var _g2 = 0;
		var _g3 = dataView.width;
		while(_g2 < _g3) {
			var x = _g2++;
			var offset = row + x * 4;
			var format1 = format;
			var premultiplied = false;
			if(premultiplied == null) {
				premultiplied = false;
			}
			if(format1 == null) {
				format1 = 0;
			}
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[fillColor & 255];
					fillColor = ((fillColor >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((fillColor >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((fillColor >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >>> 24 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >>> 24 & 255;
				data[offset + 2] = fillColor >>> 16 & 255;
				data[offset + 3] = fillColor >>> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >>> 8 & 255;
				data[offset + 1] = fillColor >>> 16 & 255;
				data[offset + 2] = fillColor >>> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.gaussianBlur = function(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality,strength,color) {
	if(strength == null) {
		strength = 1;
	}
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	var imagePremultiplied = image.get_premultiplied();
	if(imagePremultiplied) {
		image.set_premultiplied(false);
	}
	lime__$internal_graphics_StackBlur.blur(image,sourceImage,sourceRect,destPoint,blurX,blurY,quality);
	image.dirty = true;
	image.version++;
	if(imagePremultiplied) {
		image.set_premultiplied(true);
	}
	return image;
};
lime__$internal_graphics_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format1 == null) {
		format1 = 0;
	}
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_RGBA.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >>> 24 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var this1 = 0;
		var argb = this1;
		argb = (pixel & 255 & 255) << 24 | (pixel >>> 24 & 255 & 255) << 16 | (pixel >>> 16 & 255 & 255) << 8 | pixel >>> 8 & 255 & 255;
		return argb;
	case 2:
		var this1 = 0;
		var bgra = this1;
		bgra = (pixel >>> 8 & 255 & 255) << 24 | (pixel >>> 16 & 255 & 255) << 16 | (pixel >>> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime__$internal_graphics_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = false;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = true;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var a16;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		index = i * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
	image.version++;
};
lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel = 0;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		var offset = i * 4;
		var format1 = format;
		var premultiplied = true;
		if(premultiplied == null) {
			premultiplied = false;
		}
		if(format1 == null) {
			format1 = 0;
		}
		switch(format1) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if(premultiplied) {
			if((pixel & 255) != 0 && (pixel & 255) != 255) {
				lime_math_RGBA.unmult = 255.0 / (pixel & 255);
				pixel = (lime_math_RGBA.__clamp[Math.round((pixel >>> 24 & 255) * lime_math_RGBA.unmult)] & 255) << 24 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 16 & 255) * lime_math_RGBA.unmult)] & 255) << 16 | (lime_math_RGBA.__clamp[Math.round((pixel >>> 8 & 255) * lime_math_RGBA.unmult)] & 255) << 8 | pixel & 255 & 255;
			}
		}
		var offset1 = i * 4;
		var format2 = format;
		var premultiplied1 = false;
		if(premultiplied1 == null) {
			premultiplied1 = false;
		}
		if(format2 == null) {
			format2 = 0;
		}
		if(premultiplied1) {
			if((pixel & 255) == 0) {
				if(pixel != 0) {
					pixel = 0;
				}
			} else if((pixel & 255) != 255) {
				lime_math_RGBA.a16 = lime_math_RGBA.__alpha16[pixel & 255];
				pixel = ((pixel >>> 24 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 24 | ((pixel >>> 16 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 16 | ((pixel >>> 8 & 255) * lime_math_RGBA.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
			}
		}
		switch(format2) {
		case 0:
			data[offset1] = pixel >>> 24 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >>> 24 & 255;
			data[offset1 + 2] = pixel >>> 16 & 255;
			data[offset1 + 3] = pixel >>> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >>> 8 & 255;
			data[offset1 + 1] = pixel >>> 16 & 255;
			data[offset1 + 2] = pixel >>> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
	image.version++;
};
var lime__$internal_graphics__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.__update();
};
$hxClasses["lime._internal.graphics._ImageDataUtil.ImageDataView"] = lime__$internal_graphics__$ImageDataUtil_ImageDataView;
lime__$internal_graphics__$ImageDataUtil_ImageDataView.__name__ = "lime._internal.graphics._ImageDataUtil.ImageDataView";
lime__$internal_graphics__$ImageDataUtil_ImageDataView.prototype = {
	clip: function(x,y,width,height) {
		if(this.tempRect == null) {
			this.tempRect = new lime_math_Rectangle();
		}
		this.tempRect.setTo(x,y,width,height);
		this.rect.intersection(this.tempRect,this.rect);
		this.__update();
	}
	,__update: function() {
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.byteOffset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,__class__: lime__$internal_graphics__$ImageDataUtil_ImageDataView
};
var lime__$internal_graphics_StackBlur = function() { };
$hxClasses["lime._internal.graphics.StackBlur"] = lime__$internal_graphics_StackBlur;
lime__$internal_graphics_StackBlur.__name__ = "lime._internal.graphics.StackBlur";
lime__$internal_graphics_StackBlur.blur = function(dest,source,sourceRect,destPoint,blurX,blurY,quality) {
	dest.copyPixels(source,sourceRect,destPoint);
	lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA(dest,sourceRect.width | 0,sourceRect.height | 0,blurX,blurY,quality);
};
lime__$internal_graphics_StackBlur.__stackBlurCanvasRGBA = function(image,width,height,blurX,blurY,quality) {
	var radiusX = Math.round(blurX) >> 1;
	var radiusY = Math.round(blurY) >> 1;
	if(lime__$internal_graphics_StackBlur.MUL_TABLE == null) {
		return;
	}
	if(radiusX >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusX = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusY >= lime__$internal_graphics_StackBlur.MUL_TABLE.length) {
		radiusY = lime__$internal_graphics_StackBlur.MUL_TABLE.length - 1;
	}
	if(radiusX < 0 || radiusY < 0) {
		return;
	}
	var iterations = quality;
	if(iterations < 1) {
		iterations = 1;
	}
	if(iterations > 3) {
		iterations = 3;
	}
	var px = image.get_data();
	var x;
	var y;
	var i;
	var p;
	var yp;
	var yi;
	var yw;
	var r;
	var g;
	var b;
	var a;
	var pr;
	var pg;
	var pb;
	var pa;
	var f;
	var divx = radiusX + radiusX + 1;
	var divy = radiusY + radiusY + 1;
	var w = width;
	var h = height;
	var w1 = w - 1;
	var h1 = h - 1;
	var rxp1 = radiusX + 1;
	var ryp1 = radiusY + 1;
	var ssx = new lime__$internal_graphics_BlurStack();
	var sx = ssx;
	var _g = 1;
	var _g1 = divx;
	while(_g < _g1) {
		var i1 = _g++;
		sx = sx.n = new lime__$internal_graphics_BlurStack();
	}
	sx.n = ssx;
	var ssy = new lime__$internal_graphics_BlurStack();
	var sy = ssy;
	var _g = 1;
	var _g1 = divy;
	while(_g < _g1) {
		var i1 = _g++;
		sy = sy.n = new lime__$internal_graphics_BlurStack();
	}
	sy.n = ssy;
	var si = null;
	var mtx = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusX];
	var stx = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusX];
	var mty = lime__$internal_graphics_StackBlur.MUL_TABLE[radiusY];
	var sty = lime__$internal_graphics_StackBlur.SHG_TABLE[radiusY];
	while(iterations > 0) {
		--iterations;
		yi = 0;
		yw = yi;
		var ms = mtx;
		var ss = stx;
		y = h;
		while(true) {
			pr = px[yi];
			r = rxp1 * pr;
			pg = px[yi + 1];
			g = rxp1 * pg;
			pb = px[yi + 2];
			b = rxp1 * pb;
			pa = px[yi + 3];
			a = rxp1 * pa;
			sx = ssx;
			i = rxp1;
			while(true) {
				sx.r = pr;
				sx.g = pg;
				sx.b = pb;
				sx.a = pa;
				sx = sx.n;
				if(!(--i > -1)) {
					break;
				}
			}
			var _g = 1;
			var _g1 = rxp1;
			while(_g < _g1) {
				var i1 = _g++;
				p = yi + ((w1 < i1 ? w1 : i1) << 2);
				r += sx.r = px[p];
				g += sx.g = px[p + 1];
				b += sx.b = px[p + 2];
				a += sx.a = px[p + 3];
				sx = sx.n;
			}
			si = ssx;
			var _g2 = 0;
			var _g3 = w;
			while(_g2 < _g3) {
				var x = _g2++;
				px[yi++] = r * ms >>> ss;
				px[yi++] = g * ms >>> ss;
				px[yi++] = b * ms >>> ss;
				px[yi++] = a * ms >>> ss;
				p = x + radiusX + 1;
				p = yw + (p < w1 ? p : w1) << 2;
				r -= si.r - (si.r = px[p]);
				g -= si.g - (si.g = px[p + 1]);
				b -= si.b - (si.b = px[p + 2]);
				a -= si.a - (si.a = px[p + 3]);
				si = si.n;
			}
			yw += w;
			if(!(--y > 0)) {
				break;
			}
		}
		ms = mty;
		ss = sty;
		var _g4 = 0;
		var _g5 = w;
		while(_g4 < _g5) {
			var x1 = _g4++;
			yi = x1 << 2;
			pr = px[yi];
			r = ryp1 * pr;
			pg = px[yi + 1];
			g = ryp1 * pg;
			pb = px[yi + 2];
			b = ryp1 * pb;
			pa = px[yi + 3];
			a = ryp1 * pa;
			sy = ssy;
			var _g6 = 0;
			var _g7 = ryp1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				sy.r = pr;
				sy.g = pg;
				sy.b = pb;
				sy.a = pa;
				sy = sy.n;
			}
			yp = w;
			var _g8 = 1;
			var _g9 = radiusY + 1;
			while(_g8 < _g9) {
				var i3 = _g8++;
				yi = yp + x1 << 2;
				r += sy.r = px[yi];
				g += sy.g = px[yi + 1];
				b += sy.b = px[yi + 2];
				a += sy.a = px[yi + 3];
				sy = sy.n;
				if(i3 < h1) {
					yp += w;
				}
			}
			yi = x1;
			si = ssy;
			if(iterations > 0) {
				var _g10 = 0;
				var _g11 = h;
				while(_g10 < _g11) {
					var y1 = _g10++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						px[p] = r * ms >>> ss;
						px[p + 1] = g * ms >>> ss;
						px[p + 2] = b * ms >>> ss;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y1 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			} else {
				var _g12 = 0;
				var _g13 = h;
				while(_g12 < _g13) {
					var y2 = _g12++;
					p = yi << 2;
					pa = a * ms >>> ss;
					px[p + 3] = pa;
					if(pa > 0) {
						f = 255 / pa;
						pr = (r * ms >>> ss) * f | 0;
						pg = (g * ms >>> ss) * f | 0;
						pb = (b * ms >>> ss) * f | 0;
						px[p] = pr > 255 ? 255 : pr;
						px[p + 1] = pg > 255 ? 255 : pg;
						px[p + 2] = pb > 255 ? 255 : pb;
					} else {
						px[p] = px[p + 1] = px[p + 2] = 0;
					}
					p = y2 + ryp1;
					p = x1 + (p < h1 ? p : h1) * w << 2;
					r -= si.r - (si.r = px[p]);
					g -= si.g - (si.g = px[p + 1]);
					b -= si.b - (si.b = px[p + 2]);
					a -= si.a - (si.a = px[p + 3]);
					si = si.n;
					yi += w;
				}
			}
		}
	}
};
var lime__$internal_graphics_BlurStack = function() {
	this.r = 0;
	this.g = 0;
	this.b = 0;
	this.a = 0;
	this.n = null;
};
$hxClasses["lime._internal.graphics.BlurStack"] = lime__$internal_graphics_BlurStack;
lime__$internal_graphics_BlurStack.__name__ = "lime._internal.graphics.BlurStack";
lime__$internal_graphics_BlurStack.prototype = {
	__class__: lime__$internal_graphics_BlurStack
};
var lime_app_Future = function(work,async) {
	if(async == null) {
		async = false;
	}
	if(work != null) {
		if(async) {
			var promise = new lime_app_Promise();
			promise.future = this;
			lime_app__$Future_FutureWork.queue({ promise : promise, work : work});
		} else {
			try {
				this.value = work();
				this.isComplete = true;
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
				var e = haxe_Exception.caught(_g).unwrap();
				this.error = e;
				this.isError = true;
			}
		}
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = "lime.app.Future";
lime_app_Future.withError = function(error) {
	var future = new lime_app_Future();
	future.isError = true;
	future.error = error;
	return future;
};
lime_app_Future.withValue = function(value) {
	var future = new lime_app_Future();
	future.isComplete = true;
	future.value = value;
	return future;
};
lime_app_Future.prototype = {
	onComplete: function(listener) {
		if(listener != null) {
			if(this.isComplete) {
				listener(this.value);
			} else if(!this.isError) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.isError) {
				listener(this.error);
			} else if(!this.isComplete) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.isComplete) {
			return next(this.value);
		} else if(this.isError) {
			var future = new lime_app_Future();
			future.isError = true;
			future.error = this.error;
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future = next(val);
				future.onError($bind(promise,promise.error));
				future.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,__class__: lime_app_Future
};
var lime_app__$Future_FutureWork = function() { };
$hxClasses["lime.app._Future.FutureWork"] = lime_app__$Future_FutureWork;
lime_app__$Future_FutureWork.__name__ = "lime.app._Future.FutureWork";
lime_app__$Future_FutureWork.queue = function(state) {
	if(lime_app__$Future_FutureWork.threadPool == null) {
		lime_app__$Future_FutureWork.threadPool = new lime_system_ThreadPool();
		lime_app__$Future_FutureWork.threadPool.doWork.add(lime_app__$Future_FutureWork.threadPool_doWork);
		lime_app__$Future_FutureWork.threadPool.onComplete.add(lime_app__$Future_FutureWork.threadPool_onComplete);
		lime_app__$Future_FutureWork.threadPool.onError.add(lime_app__$Future_FutureWork.threadPool_onError);
	}
	lime_app__$Future_FutureWork.threadPool.queue(state);
};
lime_app__$Future_FutureWork.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app__$Future_FutureWork.threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( _g ) {
		haxe_NativeStackTrace.lastError = _g;
		var e = haxe_Exception.caught(_g).unwrap();
		lime_app__$Future_FutureWork.threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app__$Future_FutureWork.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app__$Future_FutureWork.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = "lime.app.Promise";
lime_app_Promise.prototype = {
	complete: function(data) {
		if(!this.future.isError) {
			this.future.isComplete = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.isComplete) {
			this.future.isError = true;
			this.future.error = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress,total) {
		if(!this.future.isError && !this.future.isComplete) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress,total);
				}
			}
		}
		return this;
	}
	,__class__: lime_app_Promise
};
var lime_app__$Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Dynamic_Void"] = lime_app__$Event_$Dynamic_$Void;
lime_app__$Event_$Dynamic_$Void.__name__ = "lime.app._Event_Dynamic_Void";
lime_app__$Event_$Dynamic_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Dynamic_$Void
};
var lime_app__$Event_$Float_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Float_$Void.prototype = {
	remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Int_Void"] = lime_app__$Event_$Float_$Float_$Int_$Void;
lime_app__$Event_$Float_$Float_$Int_$Void.__name__ = "lime.app._Event_Float_Float_Int_Void";
lime_app__$Event_$Float_$Float_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Int_$Void
};
var lime_app__$Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_Void"] = lime_app__$Event_$Float_$Float_$Void;
lime_app__$Event_$Float_$Float_$Void.__name__ = "lime.app._Event_Float_Float_Void";
lime_app__$Event_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseButton_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseButton_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void
};
var lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void"] = lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void;
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.__name__ = "lime.app._Event_Float_Float_lime_ui_MouseWheelMode_Void";
lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void
};
var lime_app__$Event_$Int_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Float_Void"] = lime_app__$Event_$Int_$Float_$Float_$Void;
lime_app__$Event_$Int_$Float_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Float_Void";
lime_app__$Event_$Int_$Float_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$Float_$Float_$Void
};
var lime_app__$Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Float_Void"] = lime_app__$Event_$Int_$Float_$Void;
lime_app__$Event_$Int_$Float_$Void.__name__ = "lime.app._Event_Int_Float_Void";
lime_app__$Event_$Int_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Float_$Void
};
var lime_app__$Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Int_Void"] = lime_app__$Event_$Int_$Int_$Void;
lime_app__$Event_$Int_$Int_$Void.__name__ = "lime.app._Event_Int_Int_Void";
lime_app__$Event_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Int_$Void
};
var lime_app__$Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_Void"] = lime_app__$Event_$Int_$Void;
lime_app__$Event_$Int_$Void.__name__ = "lime.app._Event_Int_Void";
lime_app__$Event_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Int_$Void
};
var lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = "lime.app._Event_Int_lime_ui_JoystickHatPosition_Void";
lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app__$Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Int_Int_Void"] = lime_app__$Event_$String_$Int_$Int_$Void;
lime_app__$Event_$String_$Int_$Int_$Void.__name__ = "lime.app._Event_String_Int_Int_Void";
lime_app__$Event_$String_$Int_$Int_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,__class__: lime_app__$Event_$String_$Int_$Int_$Void
};
var lime_app__$Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_String_Void"] = lime_app__$Event_$String_$Void;
lime_app__$Event_$String_$Void.__name__ = "lime.app._Event_String_Void";
lime_app__$Event_$String_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$String_$Void
};
var lime_app__$Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_Void_Void"] = lime_app__$Event_$Void_$Void;
lime_app__$Event_$Void_$Void.__name__ = "lime.app._Event_Void_Void";
lime_app__$Event_$Void_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$Void_$Void
};
var lime_app__$Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_graphics_RenderContext_Void"] = lime_app__$Event_$lime_$graphics_$RenderContext_$Void;
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.__name__ = "lime.app._Event_lime_graphics_RenderContext_Void";
lime_app__$Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadAxis_Float_Void"] = lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = "lime.app._Event_lime_ui_GamepadAxis_Float_Void";
lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app__$Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_GamepadButton_Void"] = lime_app__$Event_$lime_$ui_$GamepadButton_$Void;
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.__name__ = "lime.app._Event_lime_ui_GamepadButton_Void";
lime_app__$Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app__$Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Gamepad_Void"] = lime_app__$Event_$lime_$ui_$Gamepad_$Void;
lime_app__$Event_$lime_$ui_$Gamepad_$Void.__name__ = "lime.app._Event_lime_ui_Gamepad_Void";
lime_app__$Event_$lime_$ui_$Gamepad_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Gamepad_$Void
};
var lime_app__$Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Joystick_Void"] = lime_app__$Event_$lime_$ui_$Joystick_$Void;
lime_app__$Event_$lime_$ui_$Joystick_$Void.__name__ = "lime.app._Event_lime_ui_Joystick_Void";
lime_app__$Event_$lime_$ui_$Joystick_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Joystick_$Void
};
var lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = "lime.app._Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void";
lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app__$Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Touch_Void"] = lime_app__$Event_$lime_$ui_$Touch_$Void;
lime_app__$Event_$lime_$ui_$Touch_$Void.__name__ = "lime.app._Event_lime_ui_Touch_Void";
lime_app__$Event_$lime_$ui_$Touch_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Touch_$Void
};
var lime_app__$Event_$lime_$ui_$Window_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app._Event_lime_ui_Window_Void"] = lime_app__$Event_$lime_$ui_$Window_$Void;
lime_app__$Event_$lime_$ui_$Window_$Void.__name__ = "lime.app._Event_lime_ui_Window_Void";
lime_app__$Event_$lime_$ui_$Window_$Void.prototype = {
	add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g = 0;
		var _g1 = this.__priorities.length;
		while(_g < _g1) {
			var i = _g++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app__$Event_$lime_$ui_$Window_$Void
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	this.version = 0;
	if(type == null) {
		type = lime_graphics_ImageType.CANVAS;
	}
	this.type = type;
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type._hx_index) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime__$internal_graphics_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				var array = null;
				var vector = null;
				var view = null;
				var buffer1 = null;
				var len = null;
				var this1;
				if(elements != null) {
					this1 = new Uint8Array(elements);
				} else if(array != null) {
					this1 = new Uint8Array(array);
				} else if(vector != null) {
					this1 = new Uint8Array(vector.__array);
				} else if(view != null) {
					this1 = new Uint8Array(view);
				} else if(buffer1 != null) {
					if(len == null) {
						this1 = new Uint8Array(buffer1,0);
					} else {
						this1 = new Uint8Array(buffer1,0,len);
					}
				} else {
					this1 = null;
				}
				this.buffer = new lime_graphics_ImageBuffer(this1,width,height);
				if(color != null && color != 0) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = "lime.graphics.Image";
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	var image = new lime_graphics_Image(buffer);
	image.type = lime_graphics_ImageType.CANVAS;
	return image;
};
lime_graphics_Image.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	if(image.__fromFile(path)) {
		return image;
	} else {
		return null;
	}
};
lime_graphics_Image.loadFromBytes = function(bytes) {
	if(bytes == null) {
		return lime_app_Future.withValue(null);
	}
	var type = "";
	if(lime_graphics_Image.__isPNG(bytes)) {
		type = "image/png";
	} else if(lime_graphics_Image.__isJPG(bytes)) {
		type = "image/jpeg";
	} else if(lime_graphics_Image.__isGIF(bytes)) {
		type = "image/gif";
	} else if(lime_graphics_Image.__isWebP(bytes)) {
		type = "image/webp";
	} else {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImageFromBytes(bytes,type);
};
lime_graphics_Image.loadFromFile = function(path) {
	if(path == null) {
		return lime_app_Future.withValue(null);
	}
	return lime__$internal_backend_html5_HTML5HTTPRequest.loadImage(path);
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes == null || bytes.length < 6) {
		return false;
	}
	var header = bytes.getString(0,6);
	if(header != "GIF87a") {
		return header == "GIF89a";
	} else {
		return true;
	}
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes == null || bytes.length < 4) {
		return false;
	}
	if(bytes.b[0] == 255 && bytes.b[1] == 216 && bytes.b[bytes.length - 2] == 255) {
		return bytes.b[bytes.length - 1] == 217;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes == null || bytes.length < 8) {
		return false;
	}
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isWebP = function(bytes) {
	if(bytes == null || bytes.length < 16) {
		return false;
	}
	if(bytes.getString(0,4) == "RIFF") {
		return bytes.getString(8,4) == "WEBP";
	} else {
		return false;
	}
};
lime_graphics_Image.prototype = {
	clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS) {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.version = this.version;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math_ColorMatrix.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			lime__$internal_graphics_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel._hx_index) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel._hx_index) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x -= destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y -= destPoint.y;
			destPoint.y = 0;
		}
		if(sourceImage == this && destPoint.x < sourceRect.get_right() && destPoint.y < sourceRect.get_bottom()) {
			sourceImage = this.clone();
		}
		if(alphaImage == sourceImage && (alphaPoint == null || alphaPoint.x == 0 && alphaPoint.y == 0)) {
			alphaImage = null;
			alphaPoint = null;
		}
		switch(this.type._hx_index) {
		case 0:
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
				if(alphaImage != null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
				}
				lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			} else {
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(sourceImage);
				lime__$internal_graphics_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			}
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			lime__$internal_graphics_ImageCanvasUtil.convertToData(sourceImage);
			if(alphaImage != null) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(alphaImage);
			}
			lime__$internal_graphics_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null ? alphaImage.buffer.get_src() : null,alphaPoint != null ? alphaPoint.__toFlashPoint() : null,mergeAlpha);
			break;
		default:
		}
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type._hx_index) {
		case 0:
			lime__$internal_graphics_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime__$internal_graphics_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var this1 = 0;
				var argb1 = this1;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >>> 8 & 255 & 255) << 16 | (bgra >>> 16 & 255 & 255) << 8 | bgra >>> 24 & 255 & 255;
					argb = argb1;
					break;
				default:
					var rgba = color;
					var this1 = 0;
					var argb1 = this1;
					argb1 = (rgba & 255 & 255) << 24 | (rgba >>> 24 & 255 & 255) << 16 | (rgba >>> 16 & 255 & 255) << 8 | rgba >>> 8 & 255 & 255;
					argb = argb1;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type._hx_index) {
		case 0:
			return lime__$internal_graphics_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
			return lime__$internal_graphics_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var this1 = 0;
				var rgba = this1;
				rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
				var rgba1 = rgba;
				return rgba1;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var this1 = 0;
					var bgra = this1;
					bgra = (color & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color >>> 16 & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var bgra1 = bgra;
					return bgra1;
				default:
					var this1 = 0;
					var rgba = this1;
					rgba = (color >>> 16 & 255 & 255) << 24 | (color >>> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >>> 24 & 255 & 255;
					var rgba1 = rgba;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		var image_onLoaded = function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.addEventListener("load",image_onLoaded,false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			return false;
		}
		this.__fromBase64(lime__$internal_format_Base64.encode(bytes),type,onload);
		return true;
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		if(!lime__$internal_backend_html5_HTML5HTTPRequest.__isSameOrigin(path)) {
			image.crossOrigin = "Anonymous";
		}
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
		var image1 = image.complete;
		return true;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
		}
		return this.buffer.data;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			switch(this.type._hx_index) {
			case 0:case 1:
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.multiplyAlpha(this);
				break;
			default:
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type._hx_index == 1) {
				lime__$internal_graphics_ImageCanvasUtil.convertToData(this);
				lime__$internal_graphics_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null && (this.buffer.data != null || this.type == lime_graphics_ImageType.DATA)) {
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_format:"set_format",get_format:"get_format",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null ? 0 : format;
	this.premultiplied = false;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = "lime.graphics.ImageBuffer";
lime_graphics_ImageBuffer.prototype = {
	clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			var array = null;
			var vector = null;
			var view = null;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			buffer.data = this1;
			var elements = null;
			var array = null;
			var vector = null;
			var view = this.data;
			var buffer1 = null;
			var len = null;
			var this1;
			if(elements != null) {
				this1 = new Uint8Array(elements);
			} else if(array != null) {
				this1 = new Uint8Array(array);
			} else if(vector != null) {
				this1 = new Uint8Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint8Array(view);
			} else if(buffer1 != null) {
				if(len == null) {
					this1 = new Uint8Array(buffer1,0);
				} else {
					this1 = new Uint8Array(buffer1,0,len);
				}
			} else {
				this1 = null;
			}
			var copy = this1;
			buffer.data.set(copy);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			var copy = new Uint8ClampedArray(this.__srcImageData.data);
			buffer.__srcImageData.data.set(copy);
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(((value) instanceof Image)) {
			this.__srcImage = value;
		} else if(((value) instanceof HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * (this.bitsPerPixel / 8 | 0);
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxEnums["lime.graphics.ImageChannel"] = { __ename__:"lime.graphics.ImageChannel",__constructs__:null
	,RED: {_hx_name:"RED",_hx_index:0,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,GREEN: {_hx_name:"GREEN",_hx_index:1,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,BLUE: {_hx_name:"BLUE",_hx_index:2,__enum__:"lime.graphics.ImageChannel",toString:$estr}
	,ALPHA: {_hx_name:"ALPHA",_hx_index:3,__enum__:"lime.graphics.ImageChannel",toString:$estr}
};
lime_graphics_ImageChannel.__constructs__ = [lime_graphics_ImageChannel.RED,lime_graphics_ImageChannel.GREEN,lime_graphics_ImageChannel.BLUE,lime_graphics_ImageChannel.ALPHA];
var lime_graphics_ImageType = $hxEnums["lime.graphics.ImageType"] = { __ename__:"lime.graphics.ImageType",__constructs__:null
	,CANVAS: {_hx_name:"CANVAS",_hx_index:0,__enum__:"lime.graphics.ImageType",toString:$estr}
	,DATA: {_hx_name:"DATA",_hx_index:1,__enum__:"lime.graphics.ImageType",toString:$estr}
	,FLASH: {_hx_name:"FLASH",_hx_index:2,__enum__:"lime.graphics.ImageType",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:3,__enum__:"lime.graphics.ImageType",toString:$estr}
};
lime_graphics_ImageType.__constructs__ = [lime_graphics_ImageType.CANVAS,lime_graphics_ImageType.DATA,lime_graphics_ImageType.FLASH,lime_graphics_ImageType.CUSTOM];
var lime_graphics_RenderContext = function() {
};
$hxClasses["lime.graphics.RenderContext"] = lime_graphics_RenderContext;
lime_graphics_RenderContext.__name__ = "lime.graphics.RenderContext";
lime_graphics_RenderContext.prototype = {
	__class__: lime_graphics_RenderContext
};
var lime_graphics_WebGL2RenderContext = {};
lime_graphics_WebGL2RenderContext.uniform2fv = function(this1,location,data,srcOffset,srcLength) {
	if(srcOffset != null) {
		this1.uniform2fv(location,data,srcOffset,srcLength);
	} else {
		this1.uniform2fv(location,data);
	}
};
var lime_graphics_WebGLRenderContext = {};
lime_graphics_WebGLRenderContext.bufferData = function(this1,target,srcData,usage) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.bufferData(target,srcData,usage,srcOffset,null);
	} else {
		this1.bufferData(target,srcData,usage);
	}
};
lime_graphics_WebGLRenderContext.texImage2D = function(this1,target,level,internalformat,width,height,border,format,type,srcData) {
	var srcOffset = null;
	if(srcOffset != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData,srcOffset);
	} else if(format != null) {
		this1.texImage2D(target,level,internalformat,width,height,border,format,type,srcData);
	} else {
		this1.texImage2D(target,level,internalformat,width,height,border);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix2fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix2fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix2fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix3fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix3fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix3fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.uniformMatrix4fv = function(this1,location,transpose,v) {
	var data = v;
	var srcOffset = null;
	if(srcOffset != null) {
		this1.uniformMatrix4fv(location,transpose,data,srcOffset,null);
	} else {
		this1.uniformMatrix4fv(location,transpose,data);
	}
};
lime_graphics_WebGLRenderContext.fromWebGL2RenderContext = function(gl) {
	return gl;
};
var lime_graphics_cairo_Cairo = function(surface) {
	var tmp = surface != null;
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = "lime.graphics.cairo.Cairo";
lime_graphics_cairo_Cairo.prototype = {
	clip: function() {
	}
	,identityMatrix: function() {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,rectangle: function(x,y,width,height) {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setOperator: function(value) {
		return value;
	}
	,setSourceRGB: function(r,g,b) {
	}
	,set_matrix: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_matrix:"set_matrix"}
};
var lime_graphics_cairo_CairoSurface = {};
lime_graphics_cairo_CairoSurface.flush = function(this1) {
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = "lime.graphics.opengl.GL";
var lime_graphics_opengl_ext_KHR_$debug = function() {
	this.STACK_UNDERFLOW = 1284;
	this.STACK_OVERFLOW = 1283;
	this.CONTEXT_FLAG_DEBUG_BIT = 2;
	this.DEBUG_OUTPUT = 37600;
	this.DEBUG_SEVERITY_LOW = 37192;
	this.DEBUG_SEVERITY_MEDIUM = 37191;
	this.DEBUG_SEVERITY_HIGH = 37190;
	this.DEBUG_LOGGED_MESSAGES = 37189;
	this.MAX_DEBUG_LOGGED_MESSAGES = 37188;
	this.MAX_DEBUG_MESSAGE_LENGTH = 37187;
	this.MAX_LABEL_LENGTH = 33512;
	this.SAMPLER = 33510;
	this.QUERY = 33507;
	this.PROGRAM = 33506;
	this.SHADER = 33505;
	this.BUFFER = 33504;
	this.DEBUG_GROUP_STACK_DEPTH = 33389;
	this.MAX_DEBUG_GROUP_STACK_DEPTH = 33388;
	this.DEBUG_SEVERITY_NOTIFICATION = 33387;
	this.DEBUG_TYPE_POP_GROUP = 33386;
	this.DEBUG_TYPE_PUSH_GROUP = 33385;
	this.DEBUG_TYPE_MARKER = 33384;
	this.DEBUG_TYPE_OTHER = 33361;
	this.DEBUG_TYPE_PERFORMANCE = 33360;
	this.DEBUG_TYPE_PORTABILITY = 33359;
	this.DEBUG_TYPE_UNDEFINED_BEHAVIOR = 33358;
	this.DEBUG_TYPE_DEPRECATED_BEHAVIOR = 33357;
	this.DEBUG_TYPE_ERROR = 33356;
	this.DEBUG_SOURCE_OTHER = 33355;
	this.DEBUG_SOURCE_APPLICATION = 33354;
	this.DEBUG_SOURCE_THIRD_PARTY = 33353;
	this.DEBUG_SOURCE_SHADER_COMPILER = 33352;
	this.DEBUG_SOURCE_WINDOW_SYSTEM = 33351;
	this.DEBUG_SOURCE_API = 33350;
	this.DEBUG_CALLBACK_USER_PARAM = 33349;
	this.DEBUG_CALLBACK_FUNCTION = 33348;
	this.DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 33347;
	this.DEBUG_OUTPUT_SYNCHRONOUS = 33346;
};
$hxClasses["lime.graphics.opengl.ext.KHR_debug"] = lime_graphics_opengl_ext_KHR_$debug;
lime_graphics_opengl_ext_KHR_$debug.__name__ = "lime.graphics.opengl.ext.KHR_debug";
lime_graphics_opengl_ext_KHR_$debug.prototype = {
	__class__: lime_graphics_opengl_ext_KHR_$debug
};
var lime_math_ColorMatrix = {};
lime_math_ColorMatrix.getAlphaTable = function(this1) {
	if(lime_math_ColorMatrix.__alphaTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__alphaTable = this2;
	}
	var value;
	lime_math_ColorMatrix.__alphaTable[0] = 0;
	var _g = 1;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[18] + this1[19] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__alphaTable[i] = value;
	}
	return lime_math_ColorMatrix.__alphaTable;
};
lime_math_ColorMatrix.getBlueTable = function(this1) {
	if(lime_math_ColorMatrix.__blueTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__blueTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[12] + this1[14] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__blueTable[i] = value;
	}
	return lime_math_ColorMatrix.__blueTable;
};
lime_math_ColorMatrix.getGreenTable = function(this1) {
	if(lime_math_ColorMatrix.__greenTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__greenTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[6] + this1[9] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__greenTable[i] = value;
	}
	return lime_math_ColorMatrix.__greenTable;
};
lime_math_ColorMatrix.getRedTable = function(this1) {
	if(lime_math_ColorMatrix.__redTable == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2 = new Uint8Array(256);
		lime_math_ColorMatrix.__redTable = this2;
	}
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * this1[0] + this1[4] * 255);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		lime_math_ColorMatrix.__redTable[i] = value;
	}
	return lime_math_ColorMatrix.__redTable;
};
lime_math_ColorMatrix.__toFlashColorTransform = function(this1) {
	return null;
};
var lime_math_Matrix4 = {};
lime_math_Matrix4._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var elements = null;
		var array = lime_math_Matrix4.__identity;
		var vector = null;
		var view = null;
		var buffer = null;
		var len = null;
		var this2;
		if(elements != null) {
			this2 = new Float32Array(elements);
		} else if(array != null) {
			this2 = new Float32Array(array);
		} else if(vector != null) {
			this2 = new Float32Array(vector.__array);
		} else if(view != null) {
			this2 = new Float32Array(view);
		} else if(buffer != null) {
			if(len == null) {
				this2 = new Float32Array(buffer,0);
			} else {
				this2 = new Float32Array(buffer,0,len);
			}
		} else {
			this2 = null;
		}
		this1 = this2;
	}
	return this1;
};
lime_math_Matrix4.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math_Matrix4.get(lhs,0);
	var m221 = lime_math_Matrix4.get(lhs,4);
	var m231 = lime_math_Matrix4.get(lhs,8);
	var m241 = lime_math_Matrix4.get(lhs,12);
	var m212 = lime_math_Matrix4.get(lhs,1);
	var m222 = lime_math_Matrix4.get(lhs,5);
	var m232 = lime_math_Matrix4.get(lhs,9);
	var m242 = lime_math_Matrix4.get(lhs,13);
	var m213 = lime_math_Matrix4.get(lhs,2);
	var m223 = lime_math_Matrix4.get(lhs,6);
	var m233 = lime_math_Matrix4.get(lhs,10);
	var m243 = lime_math_Matrix4.get(lhs,14);
	var m214 = lime_math_Matrix4.get(lhs,3);
	var m224 = lime_math_Matrix4.get(lhs,7);
	var m234 = lime_math_Matrix4.get(lhs,11);
	var m244 = lime_math_Matrix4.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math_Matrix4.createOrtho = function(this1,left,right,bottom,top,zNear,zFar) {
	var sx = 1.0 / (right - left);
	var sy = 1.0 / (top - bottom);
	var sz = 1.0 / (zFar - zNear);
	this1[0] = 2 * sx;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 2 * sy;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = -2 * sz;
	this1[11] = 0;
	this1[12] = -(left + right) * sx;
	this1[13] = -(bottom + top) * sy;
	this1[14] = -(zNear + zFar) * sz;
	this1[15] = 1;
};
lime_math_Matrix4.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math_Matrix4.get = function(this1,index) {
	return this1[index];
};
lime_math_Matrix4.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_RGBA = {};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = "lime.math.Rectangle";
lime_math_Rectangle.prototype = {
	intersection: function(toIntersect,result) {
		if(result == null) {
			result = new lime_math_Rectangle();
		}
		var x0 = this.x < toIntersect.x ? toIntersect.x : this.x;
		var x1 = this.get_right() > toIntersect.get_right() ? toIntersect.get_right() : this.get_right();
		if(x1 <= x0) {
			result.setEmpty();
			return result;
		}
		var y0 = this.y < toIntersect.y ? toIntersect.y : this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom() ? toIntersect.get_bottom() : this.get_bottom();
		if(y1 <= y0) {
			result.setEmpty();
			return result;
		}
		result.x = x0;
		result.y = y0;
		result.width = x1 - x0;
		result.height = y1 - y0;
		return result;
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,__class__: lime_math_Rectangle
	,__properties__: {get_right:"get_right",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = "lime.math.Vector2";
lime_math_Vector2.prototype = {
	offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,__toFlashPoint: function() {
		return null;
	}
	,__class__: lime_math_Vector2
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = "lime.math.Vector4";
lime_math_Vector4.prototype = {
	__class__: lime_math_Vector4
};
var lime_media_AudioBuffer = function() {
};
$hxClasses["lime.media.AudioBuffer"] = lime_media_AudioBuffer;
lime_media_AudioBuffer.__name__ = "lime.media.AudioBuffer";
lime_media_AudioBuffer.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.set_src(new Howl({ src : ["data:" + lime_media_AudioBuffer.__getCodec(bytes) + ";base64," + lime__$internal_format_Base64.encode(bytes)], html5 : true, preload : false}));
	return audioBuffer;
};
lime_media_AudioBuffer.fromFile = function(path) {
	if(path == null) {
		return null;
	}
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : [path], preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.fromFiles = function(paths) {
	var audioBuffer = new lime_media_AudioBuffer();
	audioBuffer.__srcHowl = new Howl({ src : paths, preload : false});
	return audioBuffer;
};
lime_media_AudioBuffer.loadFromFile = function(path) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFile(path);
	if(audioBuffer != null) {
		if(audioBuffer != null) {
			audioBuffer.__srcHowl.on("load",function() {
				promise.complete(audioBuffer);
			});
			audioBuffer.__srcHowl.on("loaderror",function(id,msg) {
				promise.error(msg);
			});
			audioBuffer.__srcHowl.load();
		}
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.loadFromFiles = function(paths) {
	var promise = new lime_app_Promise();
	var audioBuffer = lime_media_AudioBuffer.fromFiles(paths);
	if(audioBuffer != null) {
		audioBuffer.__srcHowl.on("load",function() {
			promise.complete(audioBuffer);
		});
		audioBuffer.__srcHowl.on("loaderror",function() {
			promise.error(null);
		});
		audioBuffer.__srcHowl.load();
	} else {
		promise.error(null);
	}
	return promise.future;
};
lime_media_AudioBuffer.__getCodec = function(bytes) {
	var signature = bytes.getString(0,4);
	switch(signature) {
	case "OggS":
		return "audio/ogg";
	case "RIFF":
		if(bytes.getString(8,4) == "WAVE") {
			return "audio/wav";
		} else {
			var _g = bytes.b[1];
			var _g1 = bytes.b[2];
			switch(bytes.b[0]) {
			case 73:
				if(_g == 68) {
					if(_g1 == 51) {
						return "audio/mp3";
					}
				}
				break;
			case 255:
				switch(_g) {
				case 243:case 250:case 251:
					return "audio/mp3";
				default:
				}
				break;
			default:
			}
		}
		break;
	case "fLaC":
		return "audio/flac";
	default:
		var _g = bytes.b[1];
		var _g1 = bytes.b[2];
		switch(bytes.b[0]) {
		case 73:
			if(_g == 68) {
				if(_g1 == 51) {
					return "audio/mp3";
				}
			}
			break;
		case 255:
			switch(_g) {
			case 243:case 250:case 251:
				return "audio/mp3";
			default:
			}
			break;
		default:
		}
	}
	lime_utils_Log.error("Unsupported sound format",{ fileName : "lime/media/AudioBuffer.hx", lineNumber : 362, className : "lime.media.AudioBuffer", methodName : "__getCodec"});
	return null;
};
lime_media_AudioBuffer.prototype = {
	set_src: function(value) {
		return this.__srcHowl = value;
	}
	,__class__: lime_media_AudioBuffer
	,__properties__: {set_src:"set_src"}
};
var lime_media_AudioContext = function(type) {
	if(type != "custom") {
		if(type == null || type == "web") {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				this.web = new window.AudioContext ();
				this.type = "web";
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		if(this.web == null && type != "web") {
			this.html5 = new lime_media_HTML5AudioContext();
			this.type = "html5";
		}
	} else {
		this.type = "custom";
	}
};
$hxClasses["lime.media.AudioContext"] = lime_media_AudioContext;
lime_media_AudioContext.__name__ = "lime.media.AudioContext";
lime_media_AudioContext.prototype = {
	__class__: lime_media_AudioContext
};
var lime_media_AudioManager = function() { };
$hxClasses["lime.media.AudioManager"] = lime_media_AudioManager;
lime_media_AudioManager.__name__ = "lime.media.AudioManager";
lime_media_AudioManager.init = function(context) {
	if(lime_media_AudioManager.context == null) {
		if(context == null) {
			lime_media_AudioManager.context = new lime_media_AudioContext();
			context = lime_media_AudioManager.context;
			if(context.type == "openal") {
				var alc = context.openal;
				var device = alc.openDevice();
				var ctx = alc.createContext(device);
				alc.makeContextCurrent(ctx);
				alc.processContext(ctx);
			}
		}
		lime_media_AudioManager.context = context;
	}
};
var lime_media_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	this.__backend = new lime__$internal_backend_html5_HTML5AudioSource(this);
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.media.AudioSource"] = lime_media_AudioSource;
lime_media_AudioSource.__name__ = "lime.media.AudioSource";
lime_media_AudioSource.prototype = {
	dispose: function() {
		this.__backend.dispose();
	}
	,init: function() {
		this.__backend.init();
	}
	,play: function() {
		this.__backend.play();
	}
	,stop: function() {
		this.__backend.stop();
	}
	,get_currentTime: function() {
		return this.__backend.getCurrentTime();
	}
	,set_currentTime: function(value) {
		return this.__backend.setCurrentTime(value);
	}
	,get_gain: function() {
		return this.__backend.getGain();
	}
	,set_gain: function(value) {
		return this.__backend.setGain(value);
	}
	,set_length: function(value) {
		return this.__backend.setLength(value);
	}
	,set_loops: function(value) {
		return this.__backend.setLoops(value);
	}
	,get_position: function() {
		return this.__backend.getPosition();
	}
	,set_position: function(value) {
		return this.__backend.setPosition(value);
	}
	,__class__: lime_media_AudioSource
	,__properties__: {set_loops:"set_loops",set_length:"set_length",set_position:"set_position",get_position:"get_position",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_media_HTML5AudioContext = function() {
};
$hxClasses["lime.media.HTML5AudioContext"] = lime_media_HTML5AudioContext;
lime_media_HTML5AudioContext.__name__ = "lime.media.HTML5AudioContext";
lime_media_HTML5AudioContext.prototype = {
	__class__: lime_media_HTML5AudioContext
};
var lime_media_OpenALAudioContext = function() {
};
$hxClasses["lime.media.OpenALAudioContext"] = lime_media_OpenALAudioContext;
lime_media_OpenALAudioContext.__name__ = "lime.media.OpenALAudioContext";
lime_media_OpenALAudioContext.prototype = {
	createContext: function(device,attrlist) {
		return lime_media_openal_ALC.createContext(device,attrlist);
	}
	,makeContextCurrent: function(context) {
		return lime_media_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_media_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_media_openal_ALC.processContext(context);
	}
	,__class__: lime_media_OpenALAudioContext
};
var lime_media_openal_ALC = function() { };
$hxClasses["lime.media.openal.ALC"] = lime_media_openal_ALC;
lime_media_openal_ALC.__name__ = "lime.media.openal.ALC";
lime_media_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_media_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_media_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_media_openal_ALC.processContext = function(context) {
};
var lime_net__$IHTTPRequest = function() { };
$hxClasses["lime.net._IHTTPRequest"] = lime_net__$IHTTPRequest;
lime_net__$IHTTPRequest.__name__ = "lime.net._IHTTPRequest";
lime_net__$IHTTPRequest.__isInterface__ = true;
lime_net__$IHTTPRequest.prototype = {
	__class__: lime_net__$IHTTPRequest
};
var lime_net__$HTTPRequest_AbstractHTTPRequest = function(uri) {
	this.uri = uri;
	this.contentType = "application/x-www-form-urlencoded";
	this.followRedirects = true;
	this.enableResponseHeaders = false;
	this.formData = new haxe_ds_StringMap();
	this.headers = [];
	this.method = "GET";
	this.timeout = 30000;
	this.withCredentials = false;
	this.__backend = new lime__$internal_backend_html5_HTML5HTTPRequest();
	this.__backend.init(this);
};
$hxClasses["lime.net._HTTPRequest.AbstractHTTPRequest"] = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_AbstractHTTPRequest.__name__ = "lime.net._HTTPRequest.AbstractHTTPRequest";
lime_net__$HTTPRequest_AbstractHTTPRequest.__interfaces__ = [lime_net__$IHTTPRequest];
lime_net__$HTTPRequest_AbstractHTTPRequest.prototype = {
	__class__: lime_net__$HTTPRequest_AbstractHTTPRequest
};
var lime_net__$HTTPRequest_$Bytes = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_Bytes"] = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$Bytes.__name__ = "lime.net._HTTPRequest_Bytes";
lime_net__$HTTPRequest_$Bytes.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$Bytes.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	fromBytes: function(bytes) {
		return bytes;
	}
	,load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadData(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(bytes) {
			_gthis.responseData = _gthis.fromBytes(bytes);
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$Bytes
});
var lime_net__$HTTPRequest_$String = function(uri) {
	lime_net__$HTTPRequest_AbstractHTTPRequest.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_String"] = lime_net__$HTTPRequest_$String;
lime_net__$HTTPRequest_$String.__name__ = "lime.net._HTTPRequest_String";
lime_net__$HTTPRequest_$String.__super__ = lime_net__$HTTPRequest_AbstractHTTPRequest;
lime_net__$HTTPRequest_$String.prototype = $extend(lime_net__$HTTPRequest_AbstractHTTPRequest.prototype,{
	load: function(uri) {
		var _gthis = this;
		if(uri != null) {
			this.uri = uri;
		}
		var promise = new lime_app_Promise();
		var future = this.__backend.loadText(this.uri);
		future.onProgress($bind(promise,promise.progress));
		future.onError($bind(promise,promise.error));
		future.onComplete(function(text) {
			_gthis.responseData = text;
			promise.complete(_gthis.responseData);
		});
		return promise.future;
	}
	,__class__: lime_net__$HTTPRequest_$String
});
var lime_net_HTTPRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["lime.net.HTTPRequestHeader"] = lime_net_HTTPRequestHeader;
lime_net_HTTPRequestHeader.__name__ = "lime.net.HTTPRequestHeader";
lime_net_HTTPRequestHeader.prototype = {
	__class__: lime_net_HTTPRequestHeader
};
var lime_net__$HTTPRequest_$lime_$utils_$Bytes = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_lime_utils_Bytes"] = lime_net__$HTTPRequest_$lime_$utils_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__name__ = "lime.net._HTTPRequest_lime_utils_Bytes";
lime_net__$HTTPRequest_$lime_$utils_$Bytes.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$lime_$utils_$Bytes.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return lime_utils_Bytes.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$lime_$utils_$Bytes
});
var lime_net__$HTTPRequest_$openfl_$utils_$ByteArray = function(uri) {
	lime_net__$HTTPRequest_$Bytes.call(this,uri);
};
$hxClasses["lime.net._HTTPRequest_openfl_utils_ByteArray"] = lime_net__$HTTPRequest_$openfl_$utils_$ByteArray;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__name__ = "lime.net._HTTPRequest_openfl_utils_ByteArray";
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.__super__ = lime_net__$HTTPRequest_$Bytes;
lime_net__$HTTPRequest_$openfl_$utils_$ByteArray.prototype = $extend(lime_net__$HTTPRequest_$Bytes.prototype,{
	fromBytes: function(bytes) {
		return openfl_utils_ByteArray.fromBytes(bytes);
	}
	,__class__: lime_net__$HTTPRequest_$openfl_$utils_$ByteArray
});
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = "lime.system.Clipboard";
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"};
lime_system_Clipboard.__update = function() {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = null;
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
};
lime_system_Clipboard.get_text = function() {
	lime_system_Clipboard.__update();
	return lime_system_Clipboard._text;
};
lime_system_Clipboard.set_text = function(value) {
	var cacheText = lime_system_Clipboard._text;
	lime_system_Clipboard._text = value;
	var $window = lime_app_Application.current.__window;
	if($window != null) {
		$window.__backend.setClipboard(value);
	}
	if(lime_system_Clipboard._text != cacheText) {
		lime_system_Clipboard.onUpdate.dispatch();
	}
	return value;
};
var lime_system_Endian = $hxEnums["lime.system.Endian"] = { __ename__:"lime.system.Endian",__constructs__:null
	,LITTLE_ENDIAN: {_hx_name:"LITTLE_ENDIAN",_hx_index:0,__enum__:"lime.system.Endian",toString:$estr}
	,BIG_ENDIAN: {_hx_name:"BIG_ENDIAN",_hx_index:1,__enum__:"lime.system.Endian",toString:$estr}
};
lime_system_Endian.__constructs__ = [lime_system_Endian.LITTLE_ENDIAN,lime_system_Endian.BIG_ENDIAN];
var lime_system_Sensor = function(type,id) {
	this.onUpdate = new lime_app__$Event_$Float_$Float_$Float_$Void();
	this.type = type;
	this.id = id;
};
$hxClasses["lime.system.Sensor"] = lime_system_Sensor;
lime_system_Sensor.__name__ = "lime.system.Sensor";
lime_system_Sensor.registerSensor = function(type,id) {
	var sensor = new lime_system_Sensor(type,id);
	lime_system_Sensor.sensors.push(sensor);
	lime_system_Sensor.sensorByID.h[id] = sensor;
	return sensor;
};
lime_system_Sensor.prototype = {
	__class__: lime_system_Sensor
};
var lime_system_SensorType = $hxEnums["lime.system.SensorType"] = { __ename__:"lime.system.SensorType",__constructs__:null
	,ACCELEROMETER: {_hx_name:"ACCELEROMETER",_hx_index:0,__enum__:"lime.system.SensorType",toString:$estr}
};
lime_system_SensorType.__constructs__ = [lime_system_SensorType.ACCELEROMETER];
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = "lime.system.System";
lime_system_System.__properties__ = {get_endianness:"get_endianness"};
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(projectName,element,width,height,config) {
	if(lime_system_System.__applicationEntryPoint == null) {
		return;
	}
	if(Object.prototype.hasOwnProperty.call(lime_system_System.__applicationEntryPoint.h,projectName)) {
		var htmlElement = null;
		if(typeof(element) == "string") {
			htmlElement = window.document.getElementById(element);
		} else if(element == null) {
			htmlElement = window.document.createElement("div");
		} else {
			htmlElement = element;
		}
		if(htmlElement == null) {
			window.console.log("[lime.embed] ERROR: Cannot find target element: " + Std.string(element));
			return;
		}
		if(width == null) {
			width = 0;
		}
		if(height == null) {
			height = 0;
		}
		if(config == null) {
			config = { };
		}
		if(Object.prototype.hasOwnProperty.call(config,"background") && typeof(config.background) == "string") {
			var background = StringTools.replace(Std.string(config.background),"#","");
			if(background.indexOf("0x") > -1) {
				config.background = Std.parseInt(background);
			} else {
				config.background = Std.parseInt("0x" + background);
			}
		}
		config.element = htmlElement;
		config.width = width;
		config.height = height;
		lime_system_System.__applicationEntryPoint.h[projectName](config);
	}
};
lime_system_System.exit = function(code) {
};
lime_system_System.getTimer = function() {
	return window.performance.now() | 0;
};
lime_system_System.openURL = function(url,target) {
	if(target == null) {
		target = "_blank";
	}
	if(url != null) {
		window.open(url,target);
	}
};
lime_system_System.__registerEntryPoint = function(projectName,entryPoint) {
	if(lime_system_System.__applicationEntryPoint == null) {
		lime_system_System.__applicationEntryPoint = new haxe_ds_StringMap();
	}
	lime_system_System.__applicationEntryPoint.h[projectName] = entryPoint;
};
lime_system_System.get_endianness = function() {
	if(lime_system_System.__endianness == null) {
		var arrayBuffer = new ArrayBuffer(2);
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint8Array(elements);
		} else if(array != null) {
			this1 = new Uint8Array(array);
		} else if(vector != null) {
			this1 = new Uint8Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint8Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint8Array(arrayBuffer,0);
			} else {
				this1 = new Uint8Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint8Array = this1;
		var elements = null;
		var array = null;
		var vector = null;
		var view = null;
		var len = null;
		var this1;
		if(elements != null) {
			this1 = new Uint16Array(elements);
		} else if(array != null) {
			this1 = new Uint16Array(array);
		} else if(vector != null) {
			this1 = new Uint16Array(vector.__array);
		} else if(view != null) {
			this1 = new Uint16Array(view);
		} else if(arrayBuffer != null) {
			if(len == null) {
				this1 = new Uint16Array(arrayBuffer,0);
			} else {
				this1 = new Uint16Array(arrayBuffer,0,len);
			}
		} else {
			this1 = null;
		}
		var uint16array = this1;
		uint8Array[0] = 170;
		uint8Array[1] = 187;
		if(uint16array[0] == 43707) {
			lime_system_System.__endianness = lime_system_Endian.BIG_ENDIAN;
		} else {
			lime_system_System.__endianness = lime_system_Endian.LITTLE_ENDIAN;
		}
	}
	return lime_system_System.__endianness;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onRun = new lime_app__$Event_$Dynamic_$Void();
	this.onError = new lime_app__$Event_$Dynamic_$Void();
	this.onComplete = new lime_app__$Event_$Dynamic_$Void();
	this.doWork = new lime_app__$Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = "lime.system.ThreadPool";
lime_system_ThreadPool.prototype = {
	queue: function(state) {
		this.runWork(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,runWork: function(state) {
		this.onRun.dispatch(state);
		this.doWork.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_ui_FileDialog = function() {
	this.onSave = new lime_app__$Event_$String_$Void();
	this.onCancel = new lime_app__$Event_$Void_$Void();
};
$hxClasses["lime.ui.FileDialog"] = lime_ui_FileDialog;
lime_ui_FileDialog.__name__ = "lime.ui.FileDialog";
lime_ui_FileDialog.prototype = {
	save: function(data,filter,defaultPath,title,type) {
		if(type == null) {
			type = "application/octet-stream";
		}
		if(data == null) {
			this.onCancel.dispatch();
			return false;
		}
		var defaultExtension = "";
		if(lime_graphics_Image.__isPNG(data)) {
			type = "image/png";
			defaultExtension = ".png";
		} else if(lime_graphics_Image.__isJPG(data)) {
			type = "image/jpeg";
			defaultExtension = ".jpg";
		} else if(lime_graphics_Image.__isGIF(data)) {
			type = "image/gif";
			defaultExtension = ".gif";
		} else if(lime_graphics_Image.__isWebP(data)) {
			type = "image/webp";
			defaultExtension = ".webp";
		}
		var path = defaultPath != null ? haxe_io_Path.withoutDirectory(defaultPath) : "download" + defaultExtension;
		var buffer = data.b.bufferValue;
		buffer = buffer.slice(0,data.length);
		window.saveAs(new Blob([buffer],{ type : type}),path,true);
		this.onSave.dispatch(path);
		return true;
	}
	,__class__: lime_ui_FileDialog
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app__$Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app__$Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = "lime.ui.Gamepad";
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	__class__: lime_ui_Gamepad
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app__$Event_$Int_$Float_$Float_$Void();
	this.onHatMove = new lime_app__$Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app__$Event_$Void_$Void();
	this.onButtonUp = new lime_app__$Event_$Int_$Void();
	this.onButtonDown = new lime_app__$Event_$Int_$Void();
	this.onAxisMove = new lime_app__$Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = "lime.ui.Joystick";
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	__class__: lime_ui_Joystick
};
var lime_ui_KeyModifier = {};
lime_ui_KeyModifier.__properties__ = {get_shiftKey:"get_shiftKey",get_metaKey:"get_metaKey",get_ctrlKey:"get_ctrlKey",get_altKey:"get_altKey"};
lime_ui_KeyModifier.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui_KeyModifier.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
var lime_ui_MouseCursor = $hxEnums["lime.ui.MouseCursor"] = { __ename__:"lime.ui.MouseCursor",__constructs__:null
	,ARROW: {_hx_name:"ARROW",_hx_index:0,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CROSSHAIR: {_hx_name:"CROSSHAIR",_hx_index:1,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,DEFAULT: {_hx_name:"DEFAULT",_hx_index:2,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,MOVE: {_hx_name:"MOVE",_hx_index:3,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,POINTER: {_hx_name:"POINTER",_hx_index:4,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NESW: {_hx_name:"RESIZE_NESW",_hx_index:5,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NS: {_hx_name:"RESIZE_NS",_hx_index:6,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_NWSE: {_hx_name:"RESIZE_NWSE",_hx_index:7,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,RESIZE_WE: {_hx_name:"RESIZE_WE",_hx_index:8,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,TEXT: {_hx_name:"TEXT",_hx_index:9,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT: {_hx_name:"WAIT",_hx_index:10,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,WAIT_ARROW: {_hx_name:"WAIT_ARROW",_hx_index:11,__enum__:"lime.ui.MouseCursor",toString:$estr}
	,CUSTOM: {_hx_name:"CUSTOM",_hx_index:12,__enum__:"lime.ui.MouseCursor",toString:$estr}
};
lime_ui_MouseCursor.__constructs__ = [lime_ui_MouseCursor.ARROW,lime_ui_MouseCursor.CROSSHAIR,lime_ui_MouseCursor.DEFAULT,lime_ui_MouseCursor.MOVE,lime_ui_MouseCursor.POINTER,lime_ui_MouseCursor.RESIZE_NESW,lime_ui_MouseCursor.RESIZE_NS,lime_ui_MouseCursor.RESIZE_NWSE,lime_ui_MouseCursor.RESIZE_WE,lime_ui_MouseCursor.TEXT,lime_ui_MouseCursor.WAIT,lime_ui_MouseCursor.WAIT_ARROW,lime_ui_MouseCursor.CUSTOM];
var lime_ui_MouseWheelMode = $hxEnums["lime.ui.MouseWheelMode"] = { __ename__:"lime.ui.MouseWheelMode",__constructs__:null
	,PIXELS: {_hx_name:"PIXELS",_hx_index:0,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,LINES: {_hx_name:"LINES",_hx_index:1,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,PAGES: {_hx_name:"PAGES",_hx_index:2,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
	,UNKNOWN: {_hx_name:"UNKNOWN",_hx_index:3,__enum__:"lime.ui.MouseWheelMode",toString:$estr}
};
lime_ui_MouseWheelMode.__constructs__ = [lime_ui_MouseWheelMode.PIXELS,lime_ui_MouseWheelMode.LINES,lime_ui_MouseWheelMode.PAGES,lime_ui_MouseWheelMode.UNKNOWN];
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = "lime.ui.Touch";
lime_ui_Touch.prototype = {
	__class__: lime_ui_Touch
};
var lime_ui_Window = function(application,attributes) {
	this.onTextInput = new lime_app__$Event_$String_$Void();
	this.onTextEdit = new lime_app__$Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app__$Event_$Void_$Void();
	this.onResize = new lime_app__$Event_$Int_$Int_$Void();
	this.onRenderContextRestored = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onRenderContextLost = new lime_app__$Event_$Void_$Void();
	this.onRender = new lime_app__$Event_$lime_$graphics_$RenderContext_$Void();
	this.onMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseWheelMode_$Void();
	this.onMouseUp = new lime_app__$Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app__$Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app__$Event_$Float_$Float_$lime_$ui_$MouseButton_$Void();
	this.onMinimize = new lime_app__$Event_$Void_$Void();
	this.onLeave = new lime_app__$Event_$Void_$Void();
	this.onKeyUp = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app__$Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app__$Event_$Void_$Void();
	this.onFocusOut = new lime_app__$Event_$Void_$Void();
	this.onFocusIn = new lime_app__$Event_$Void_$Void();
	this.onExpose = new lime_app__$Event_$Void_$Void();
	this.onEnter = new lime_app__$Event_$Void_$Void();
	this.onDropFile = new lime_app__$Event_$String_$Void();
	this.onDeactivate = new lime_app__$Event_$Void_$Void();
	this.onClose = new lime_app__$Event_$Void_$Void();
	this.onActivate = new lime_app__$Event_$Void_$Void();
	this.application = application;
	this.__attributes = attributes != null ? attributes : { };
	if(Object.prototype.hasOwnProperty.call(this.__attributes,"parameters")) {
		this.parameters = this.__attributes.parameters;
	}
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	this.__backend = new lime__$internal_backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = "lime.ui.Window";
lime_ui_Window.prototype = {
	close: function() {
		this.__backend.close();
	}
	,set_cursor: function(value) {
		return this.__backend.setCursor(value);
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.__backend.setFullscreen(value);
	}
	,__class__: lime_ui_Window
	,__properties__: {set_fullscreen:"set_fullscreen",set_cursor:"set_cursor"}
};
var lime_utils_AssetBundle = function() {
	this.data = new haxe_ds_StringMap();
	this.paths = [];
};
$hxClasses["lime.utils.AssetBundle"] = lime_utils_AssetBundle;
lime_utils_AssetBundle.__name__ = "lime.utils.AssetBundle";
lime_utils_AssetBundle.fromBytes = function(bytes) {
	var input = new haxe_io_BytesInput(bytes);
	return lime_utils_AssetBundle.__extractBundle(input);
};
lime_utils_AssetBundle.loadFromBytes = function(bytes) {
	return lime_app_Future.withValue(lime_utils_AssetBundle.fromBytes(bytes));
};
lime_utils_AssetBundle.loadFromFile = function(path) {
	return lime_utils_Bytes.loadFromFile(path).then(lime_utils_AssetBundle.loadFromBytes);
};
lime_utils_AssetBundle.__extractBundle = function(input) {
	var entries = haxe_zip_Reader.readZip(input);
	var bundle = new lime_utils_AssetBundle();
	var _g_head = entries.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var entry = val;
		if(entry.compressed) {
			var bytes = entry.data;
			var this1 = bundle.data;
			var key = entry.fileName;
			var value = lime_utils_Bytes.decompress(bytes,lime_utils_CompressionAlgorithm.DEFLATE);
			this1.h[key] = value;
		} else {
			bundle.data.h[entry.fileName] = entry.data;
		}
		bundle.paths.push(entry.fileName);
	}
	return bundle;
};
lime_utils_AssetBundle.prototype = {
	__class__: lime_utils_AssetBundle
};
var lime_utils_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = 280866;
};
$hxClasses["lime.utils.AssetCache"] = lime_utils_AssetCache;
lime_utils_AssetCache.__name__ = "lime.utils.AssetCache";
lime_utils_AssetCache.prototype = {
	exists: function(id,type) {
		if(type == "IMAGE" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.image.h,id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.font.h,id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(Object.prototype.hasOwnProperty.call(this.audio.h,id)) {
				return true;
			}
		}
		return false;
	}
	,set: function(id,type,asset) {
		switch(type) {
		case "FONT":
			this.font.h[id] = asset;
			break;
		case "IMAGE":
			if(!((asset) instanceof lime_graphics_Image)) {
				throw haxe_Exception.thrown("Cannot cache non-Image asset: " + Std.string(asset) + " as Image");
			}
			this.image.h[id] = asset;
			break;
		case "MUSIC":case "SOUND":
			if(!((asset) instanceof lime_media_AudioBuffer)) {
				throw haxe_Exception.thrown("Cannot cache non-AudioBuffer asset: " + Std.string(asset) + " as AudioBuffer");
			}
			this.audio.h[id] = asset;
			break;
		default:
			throw haxe_Exception.thrown(type + " assets are not cachable");
		}
	}
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var h = this.audio.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.audio;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.font.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.font;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
			var h = this.image.h;
			var key_h = h;
			var key_keys = Object.keys(h);
			var key_length = key_keys.length;
			var key_current = 0;
			while(key_current < key_length) {
				var key = key_keys[key_current++];
				if(StringTools.startsWith(key,prefix)) {
					var _this = this.image;
					if(Object.prototype.hasOwnProperty.call(_this.h,key)) {
						delete(_this.h[key]);
					}
				}
			}
		}
	}
	,__class__: lime_utils_AssetCache
};
var lime_utils_AssetLibrary = function() {
	this.types = new haxe_ds_StringMap();
	this.sizes = new haxe_ds_StringMap();
	this.preload = new haxe_ds_StringMap();
	this.paths = new haxe_ds_StringMap();
	this.pathGroups = new haxe_ds_StringMap();
	this.classTypes = new haxe_ds_StringMap();
	this.cachedText = new haxe_ds_StringMap();
	this.cachedImages = new haxe_ds_StringMap();
	this.cachedFonts = new haxe_ds_StringMap();
	this.cachedBytes = new haxe_ds_StringMap();
	this.cachedAudioBuffers = new haxe_ds_StringMap();
	this.onChange = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
};
$hxClasses["lime.utils.AssetLibrary"] = lime_utils_AssetLibrary;
lime_utils_AssetLibrary.__name__ = "lime.utils.AssetLibrary";
lime_utils_AssetLibrary.fromBundle = function(bundle) {
	if(Object.prototype.hasOwnProperty.call(bundle.data.h,"library.json")) {
		var manifest = lime_utils_AssetManifest.fromBytes(bundle.data.h["library.json"]);
		if(manifest != null) {
			var library = null;
			if(manifest.libraryType == null) {
				library = new lime_utils_AssetLibrary();
			} else {
				var name = manifest.libraryType;
				var libraryClass = $hxClasses[name];
				if(libraryClass != null) {
					library = Type.createInstance(libraryClass,manifest.libraryArgs);
				} else {
					lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 122, className : "lime.utils.AssetLibrary", methodName : "fromBundle"});
					return null;
				}
			}
			library.__fromBundle(bundle,manifest);
			return library;
		}
	} else {
		var library = new lime_utils_AssetLibrary();
		library.__fromBundle(bundle);
		return library;
	}
	return null;
};
lime_utils_AssetLibrary.fromManifest = function(manifest) {
	if(manifest == null) {
		return null;
	}
	var library = null;
	if(manifest.libraryType == null) {
		library = new lime_utils_AssetLibrary();
	} else {
		var name = manifest.libraryType;
		var libraryClass = $hxClasses[name];
		if(libraryClass != null) {
			library = Type.createInstance(libraryClass,manifest.libraryArgs);
		} else {
			lime_utils_Log.warn("Could not find library type: " + manifest.libraryType,{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 160, className : "lime.utils.AssetLibrary", methodName : "fromManifest"});
			return null;
		}
	}
	library.__fromManifest(manifest);
	return library;
};
lime_utils_AssetLibrary.prototype = {
	exists: function(id,type) {
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		var assetType = this.types.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.getBytes(id);
		case "FONT":
			return this.getFont(id);
		case "IMAGE":
			return this.getImage(id);
		case "MUSIC":case "SOUND":
			return this.getAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		case "TEXT":
			return this.getText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,getAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return this.cachedAudioBuffers.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_media_AudioBuffer.fromBytes(js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes));
		} else {
			return lime_media_AudioBuffer.fromFile(this.paths.h[id]);
		}
	}
	,getBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return this.cachedBytes.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			var bytes = lime_utils_Bytes.ofString(this.cachedText.h[id]);
			this.cachedBytes.h[id] = bytes;
			return bytes;
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , haxe_io_Bytes);
		} else {
			return lime_utils_Bytes.fromFile(this.paths.h[id]);
		}
	}
	,getFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return this.cachedFonts.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_text_Font);
		} else {
			return lime_text_Font.fromFile(this.paths.h[id]);
		}
	}
	,getImage: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return this.cachedImages.h[id];
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return js_Boot.__cast(Type.createInstance(this.classTypes.h[id],[]) , lime_graphics_Image);
		} else {
			return lime_graphics_Image.fromFile(this.paths.h[id]);
		}
	}
	,getText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return this.cachedText.h[id];
		} else {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return null;
			} else {
				return bytes.getString(0,bytes.length);
			}
		}
	}
	,isLocal: function(id,type) {
		if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return true;
		}
		var requestedType = type != null ? js_Boot.__cast(type , String) : null;
		if(requestedType == null) {
			if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
				return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
			} else {
				return true;
			}
		} else {
			switch(requestedType) {
			case "FONT":
				return Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id);
			case "IMAGE":
				return Object.prototype.hasOwnProperty.call(this.cachedImages.h,id);
			case "MUSIC":case "SOUND":
				return Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id);
			default:
				if(!Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
					return Object.prototype.hasOwnProperty.call(this.cachedText.h,id);
				} else {
					return true;
				}
			}
		}
	}
	,loadAsset: function(id,type) {
		switch(type) {
		case "BINARY":
			return this.loadBytes(id);
		case "FONT":
			return this.loadFont(id);
		case "IMAGE":
			return this.loadImage(id);
		case "MUSIC":case "SOUND":
			return this.loadAudioBuffer(id);
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to load template: " + id);
		case "TEXT":
			return this.loadText(id);
		default:
			throw haxe_Exception.thrown("Unknown asset type: " + type);
		}
	}
	,load: function() {
		if(this.loaded) {
			return lime_app_Future.withValue(this);
		}
		if(this.promise == null) {
			this.promise = new lime_app_Promise();
			this.bytesLoadedCache = new haxe_ds_StringMap();
			this.assetsLoaded = 0;
			this.assetsTotal = 1;
			var h = this.preload.h;
			var id_h = h;
			var id_keys = Object.keys(h);
			var id_length = id_keys.length;
			var id_current = 0;
			while(id_current < id_length) {
				var id = id_keys[id_current++];
				if(!this.preload.h[id]) {
					continue;
				}
				lime_utils_Log.verbose("Preloading asset: " + id + " [" + this.types.h[id] + "]",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 405, className : "lime.utils.AssetLibrary", methodName : "load"});
				var _g = this.types.h[id];
				if(_g != null) {
					switch(_g) {
					case "BINARY":
						this.assetsTotal++;
						var future = this.loadBytes(id);
						future.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future.onComplete((function(id,_g) {
							return function(bytes) {
								_g[0](id[0],bytes);
							};
						})([id],[$bind(this,this.loadBytes_onComplete)]));
						break;
					case "FONT":
						this.assetsTotal++;
						var future1 = this.loadFont(id);
						future1.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future1.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future1.onComplete((function(id,_g) {
							return function(font) {
								_g[0](id[0],font);
							};
						})([id],[$bind(this,this.loadFont_onComplete)]));
						break;
					case "IMAGE":
						this.assetsTotal++;
						var future2 = this.loadImage(id);
						future2.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future2.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future2.onComplete((function(id,_g) {
							return function(image) {
								_g[0](id[0],image);
							};
						})([id],[$bind(this,this.loadImage_onComplete)]));
						break;
					case "MUSIC":case "SOUND":
						this.assetsTotal++;
						var future3 = this.loadAudioBuffer(id);
						future3.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future3.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onError)]));
						future3.onComplete((function(id,_g) {
							return function(audioBuffer) {
								_g[0](id[0],audioBuffer);
							};
						})([id],[$bind(this,this.loadAudioBuffer_onComplete)]));
						break;
					case "TEXT":
						this.assetsTotal++;
						var future4 = this.loadText(id);
						future4.onProgress((function(id,_g) {
							return function(bytesLoaded,bytesTotal) {
								_g[0](id[0],bytesLoaded,bytesTotal);
							};
						})([id],[$bind(this,this.load_onProgress)]));
						future4.onError((function(id,_g) {
							return function(message) {
								_g[0](id[0],message);
							};
						})([id],[$bind(this,this.load_onError)]));
						future4.onComplete((function(id,_g) {
							return function(text) {
								_g[0](id[0],text);
							};
						})([id],[$bind(this,this.loadText_onComplete)]));
						break;
					default:
					}
				}
			}
			this.__assetLoaded(null);
		}
		return this.promise.future;
	}
	,loadAudioBuffer: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedAudioBuffers.h,id)) {
			return lime_app_Future.withValue(this.cachedAudioBuffers.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			return lime_media_AudioBuffer.loadFromFiles(this.pathGroups.h[id]);
		} else {
			return lime_media_AudioBuffer.loadFromFile(this.paths.h[id]);
		}
	}
	,loadBytes: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_app_Future.withValue(this.cachedBytes.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else {
			return lime_utils_Bytes.loadFromFile(this.paths.h[id]);
		}
	}
	,loadFont: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedFonts.h,id)) {
			return lime_app_Future.withValue(this.cachedFonts.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var font = Type.createInstance(this.classTypes.h[id],[]);
			return font.__loadFromName(font.name);
		} else {
			return lime_text_Font.loadFromName(this.paths.h[id]);
		}
	}
	,loadImage: function(id) {
		var _gthis = this;
		if(Object.prototype.hasOwnProperty.call(this.cachedImages.h,id)) {
			return lime_app_Future.withValue(this.cachedImages.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			return lime_app_Future.withValue(Type.createInstance(this.classTypes.h[id],[]));
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id)) {
			return lime_graphics_Image.loadFromBytes(this.cachedBytes.h[id]).then(function(image) {
				var _this = _gthis.cachedBytes;
				if(Object.prototype.hasOwnProperty.call(_this.h,id)) {
					delete(_this.h[id]);
				}
				_gthis.cachedImages.h[id] = image;
				return lime_app_Future.withValue(image);
			});
		} else {
			return lime_graphics_Image.loadFromFile(this.paths.h[id]);
		}
	}
	,loadText: function(id) {
		if(Object.prototype.hasOwnProperty.call(this.cachedText.h,id)) {
			return lime_app_Future.withValue(this.cachedText.h[id]);
		} else if(Object.prototype.hasOwnProperty.call(this.cachedBytes.h,id) || Object.prototype.hasOwnProperty.call(this.classTypes.h,id)) {
			var bytes = this.getBytes(id);
			if(bytes == null) {
				return lime_app_Future.withValue(null);
			} else {
				var text = bytes.getString(0,bytes.length);
				this.cachedText.h[id] = text;
				return lime_app_Future.withValue(text);
			}
		} else {
			var request = new lime_net__$HTTPRequest_$String();
			return request.load(this.paths.h[id]);
		}
	}
	,unload: function() {
	}
	,__assetLoaded: function(id) {
		this.assetsLoaded++;
		if(id != null) {
			lime_utils_Log.verbose("Loaded asset: " + id + " [" + this.types.h[id] + "] (" + (this.assetsLoaded - 1) + "/" + (this.assetsTotal - 1) + ")",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 619, className : "lime.utils.AssetLibrary", methodName : "__assetLoaded"});
		}
		if(id != null) {
			var size = Object.prototype.hasOwnProperty.call(this.sizes.h,id) ? this.sizes.h[id] : 0;
			if(!Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				this.bytesLoaded += size;
			} else {
				var cache = this.bytesLoadedCache.h[id];
				if(cache < size) {
					this.bytesLoaded += size - cache;
				}
			}
			this.bytesLoadedCache.h[id] = size;
		}
		if(this.assetsLoaded < this.assetsTotal) {
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		} else {
			this.loaded = true;
			this.promise.progress(this.bytesTotal,this.bytesTotal);
			this.promise.complete(this);
		}
	}
	,__cacheBreak: function(path) {
		return lime_utils_Assets.__cacheBreak(path);
	}
	,__fromBundle: function(bundle,manifest) {
		if(manifest != null) {
			var id;
			var data;
			var type;
			var _g = 0;
			var _g1 = manifest.assets;
			while(_g < _g1.length) {
				var asset = _g1[_g];
				++_g;
				id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
				data = bundle.data.h[asset.path];
				if(Object.prototype.hasOwnProperty.call(asset,"type")) {
					type = asset.type;
					if(type == "TEXT") {
						this.cachedText.h[id] = data != null ? Std.string(data) : null;
					} else {
						this.cachedBytes.h[id] = data;
					}
					this.types.h[id] = asset.type;
				} else {
					this.cachedBytes.h[id] = data;
					this.types.h[id] = "BINARY";
				}
			}
		} else {
			var _g = 0;
			var _g1 = bundle.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				this.cachedBytes.h[path] = bundle.data.h[path];
				this.types.h[path] = "BINARY";
			}
		}
	}
	,__fromManifest: function(manifest) {
		var hasSize = manifest.version >= 2;
		var size;
		var id;
		var pathGroup;
		var classRef;
		var basePath = manifest.rootPath;
		if(basePath == null) {
			basePath = "";
		}
		if(basePath != "") {
			basePath += "/";
		}
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			size = hasSize && Object.prototype.hasOwnProperty.call(asset,"size") ? asset.size : 100;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(asset,"path")) {
				var this1 = this.paths;
				var value = this.__cacheBreak(this.__resolvePath(basePath + Std.string(Reflect.field(asset,"path"))));
				this1.h[id] = value;
			}
			if(Object.prototype.hasOwnProperty.call(asset,"pathGroup")) {
				pathGroup = Reflect.field(asset,"pathGroup");
				var _g2 = 0;
				var _g3 = pathGroup.length;
				while(_g2 < _g3) {
					var i = _g2++;
					pathGroup[i] = this.__cacheBreak(this.__resolvePath(basePath + pathGroup[i]));
				}
				this.pathGroups.h[id] = pathGroup;
			}
			this.sizes.h[id] = size;
			this.types.h[id] = asset.type;
			if(Object.prototype.hasOwnProperty.call(asset,"preload")) {
				this.preload.h[id] = Reflect.field(asset,"preload");
			}
			if(Object.prototype.hasOwnProperty.call(asset,"className")) {
				var name = Reflect.field(asset,"className");
				classRef = $hxClasses[name];
				this.classTypes.h[id] = classRef;
			}
		}
		this.bytesTotal = 0;
		var _g = 0;
		var _g1 = manifest.assets;
		while(_g < _g1.length) {
			var asset = _g1[_g];
			++_g;
			id = Object.prototype.hasOwnProperty.call(asset,"id") ? asset.id : asset.path;
			if(Object.prototype.hasOwnProperty.call(this.preload.h,id) && this.preload.h[id] && Object.prototype.hasOwnProperty.call(this.sizes.h,id)) {
				this.bytesTotal += this.sizes.h[id];
			}
		}
	}
	,__resolvePath: function(path) {
		path = StringTools.replace(path,"\\","/");
		var colonIdx = path.indexOf(":");
		if(StringTools.startsWith(path,"http") && colonIdx > 0) {
			var lastSlashIdx = colonIdx + 3;
			var httpSection = HxOverrides.substr(path,0,lastSlashIdx);
			path = httpSection + StringTools.replace(HxOverrides.substr(path,lastSlashIdx,null),"//","/");
		} else {
			path = StringTools.replace(path,"//","/");
		}
		if(path.indexOf("./") > -1) {
			var split = path.split("/");
			var newPath = [];
			var _g = 0;
			var _g1 = split.length;
			while(_g < _g1) {
				var i = _g++;
				if(split[i] == "..") {
					if(i == 0 || newPath[i - 1] == "..") {
						newPath.push("..");
					} else {
						newPath.pop();
					}
				} else if(split[i] == ".") {
					if(i == 0) {
						newPath.push(".");
					}
				} else {
					newPath.push(split[i]);
				}
			}
			path = newPath.join("/");
		}
		return path;
	}
	,loadAudioBuffer_onComplete: function(id,audioBuffer) {
		this.cachedAudioBuffers.h[id] = audioBuffer;
		if(Object.prototype.hasOwnProperty.call(this.pathGroups.h,id)) {
			var pathGroup = this.pathGroups.h[id];
			var h = this.pathGroups.h;
			var otherID_h = h;
			var otherID_keys = Object.keys(h);
			var otherID_length = otherID_keys.length;
			var otherID_current = 0;
			while(otherID_current < otherID_length) {
				var otherID = otherID_keys[otherID_current++];
				if(otherID == id) {
					continue;
				}
				var _g = 0;
				while(_g < pathGroup.length) {
					var path = pathGroup[_g];
					++_g;
					if(this.pathGroups.h[otherID].indexOf(path) > -1) {
						this.cachedAudioBuffers.h[otherID] = audioBuffer;
						break;
					}
				}
			}
		}
		this.__assetLoaded(id);
	}
	,loadAudioBuffer_onError: function(id,message) {
		if(message != null && message != "") {
			lime_utils_Log.warn("Could not load \"" + id + "\": " + Std.string(message),{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 865, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		} else {
			lime_utils_Log.warn("Could not load \"" + id + "\"",{ fileName : "lime/utils/AssetLibrary.hx", lineNumber : 869, className : "lime.utils.AssetLibrary", methodName : "loadAudioBuffer_onError"});
		}
		this.loadAudioBuffer_onComplete(id,new lime_media_AudioBuffer());
	}
	,loadBytes_onComplete: function(id,bytes) {
		this.cachedBytes.h[id] = bytes;
		this.__assetLoaded(id);
	}
	,loadFont_onComplete: function(id,font) {
		this.cachedFonts.h[id] = font;
		this.__assetLoaded(id);
	}
	,loadImage_onComplete: function(id,image) {
		this.cachedImages.h[id] = image;
		this.__assetLoaded(id);
	}
	,loadText_onComplete: function(id,text) {
		this.cachedText.h[id] = text;
		this.__assetLoaded(id);
	}
	,load_onError: function(id,message) {
		if(message != null && message != "") {
			this.promise.error("Error loading asset \"" + id + "\": " + Std.string(message));
		} else {
			this.promise.error("Error loading asset \"" + id + "\"");
		}
	}
	,load_onProgress: function(id,bytesLoaded,bytesTotal) {
		if(bytesLoaded > 0) {
			var size = this.sizes.h[id];
			var percent;
			if(bytesTotal > 0) {
				percent = bytesLoaded / bytesTotal;
				if(percent > 1) {
					percent = 1;
				}
				bytesLoaded = Math.floor(percent * size);
			} else if(bytesLoaded > size) {
				bytesLoaded = size;
			}
			if(Object.prototype.hasOwnProperty.call(this.bytesLoadedCache.h,id)) {
				var cache = this.bytesLoadedCache.h[id];
				if(bytesLoaded != cache) {
					this.bytesLoaded += bytesLoaded - cache;
				}
			} else {
				this.bytesLoaded += bytesLoaded;
			}
			this.bytesLoadedCache.h[id] = bytesLoaded;
			this.promise.progress(this.bytesLoaded,this.bytesTotal);
		}
	}
	,__class__: lime_utils_AssetLibrary
};
var lime_utils_AssetManifest = function() {
	this.assets = [];
	this.libraryArgs = [];
	this.version = 2;
};
$hxClasses["lime.utils.AssetManifest"] = lime_utils_AssetManifest;
lime_utils_AssetManifest.__name__ = "lime.utils.AssetManifest";
lime_utils_AssetManifest.fromBytes = function(bytes,rootPath) {
	if(bytes != null) {
		return lime_utils_AssetManifest.parse(bytes.getString(0,bytes.length),rootPath);
	} else {
		return null;
	}
};
lime_utils_AssetManifest.loadFromFile = function(path,rootPath) {
	path = lime_utils_AssetManifest.__resolvePath(path);
	rootPath = lime_utils_AssetManifest.__resolveRootPath(rootPath,path);
	if(path == null) {
		return null;
	}
	return lime_utils_Bytes.loadFromFile(path).then(function(bytes) {
		return lime_app_Future.withValue(lime_utils_AssetManifest.fromBytes(bytes,rootPath));
	});
};
lime_utils_AssetManifest.parse = function(data,rootPath) {
	if(data == null || data == "") {
		return null;
	}
	var manifestData = JSON.parse(data);
	var manifest = new lime_utils_AssetManifest();
	if(Object.prototype.hasOwnProperty.call(manifestData,"name")) {
		manifest.name = manifestData.name;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryType")) {
		manifest.libraryType = manifestData.libraryType;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"libraryArgs")) {
		manifest.libraryArgs = manifestData.libraryArgs;
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"assets")) {
		var assets = manifestData.assets;
		if(Object.prototype.hasOwnProperty.call(manifestData,"version") && manifestData.version <= 2) {
			manifest.assets = haxe_Unserializer.run(assets);
		} else {
			manifest.assets = assets;
		}
	}
	if(Object.prototype.hasOwnProperty.call(manifestData,"rootPath")) {
		manifest.rootPath = manifestData.rootPath;
	}
	if(rootPath != null && rootPath != "") {
		if(manifest.rootPath == null || manifest.rootPath == "") {
			manifest.rootPath = rootPath;
		} else {
			manifest.rootPath = rootPath + "/" + manifest.rootPath;
		}
	}
	return manifest;
};
lime_utils_AssetManifest.__resolvePath = function(path) {
	if(path == null) {
		return null;
	}
	var queryIndex = path.indexOf("?");
	var basePath;
	if(queryIndex > -1) {
		basePath = HxOverrides.substr(path,0,queryIndex);
	} else {
		basePath = path;
	}
	basePath = StringTools.replace(basePath,"\\","/");
	while(StringTools.endsWith(basePath,"/")) basePath = HxOverrides.substr(basePath,0,basePath.length - 1);
	if(StringTools.endsWith(basePath,".bundle")) {
		if(queryIndex > -1) {
			return basePath + "/library.json" + HxOverrides.substr(path,queryIndex,null);
		} else {
			return basePath + "/library.json";
		}
	} else {
		return path;
	}
};
lime_utils_AssetManifest.__resolveRootPath = function(rootPath,path) {
	if(rootPath != null) {
		return rootPath;
	}
	var queryIndex = path.indexOf("?");
	if(queryIndex > -1) {
		rootPath = HxOverrides.substr(path,0,queryIndex);
	} else {
		rootPath = path;
	}
	rootPath = StringTools.replace(rootPath,"\\","/");
	while(StringTools.endsWith(rootPath,"/")) {
		if(rootPath == "/") {
			return rootPath;
		}
		rootPath = HxOverrides.substr(rootPath,0,rootPath.length - 1);
	}
	if(StringTools.endsWith(rootPath,".bundle")) {
		return rootPath;
	} else {
		return haxe_io_Path.directory(rootPath);
	}
};
lime_utils_AssetManifest.prototype = {
	__class__: lime_utils_AssetManifest
};
var lime_utils_Assets = function() { };
$hxClasses["lime.utils.Assets"] = lime_utils_Assets;
lime_utils_Assets.__name__ = "lime.utils.Assets";
lime_utils_Assets.exists = function(id,type) {
	if(type == null) {
		type = "BINARY";
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.exists(symbol_symbolName,type);
	}
	return false;
};
lime_utils_Assets.getAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return font;
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return image;
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return audio;
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			if(symbol_library.isLocal(symbol_symbolName,type)) {
				var asset = symbol_library.getAsset(symbol_symbolName,type);
				if(useCache && lime_utils_Assets.cache.enabled) {
					lime_utils_Assets.cache.set(id,type,asset);
				}
				return asset;
			} else {
				lime_utils_Log.error(type + " asset \"" + id + "\" exists, but only asynchronously",{ fileName : "lime/utils/Assets.hx", lineNumber : 133, className : "lime.utils.Assets", methodName : "getAsset"});
			}
		} else {
			lime_utils_Log.error("There is no " + type + " asset with an ID of \"" + id + "\"",{ fileName : "lime/utils/Assets.hx", lineNumber : 138, className : "lime.utils.Assets", methodName : "getAsset"});
		}
	} else {
		lime_utils_Log.error(lime_utils_Assets.__libraryNotFound(symbol_libraryName),{ fileName : "lime/utils/Assets.hx", lineNumber : 143, className : "lime.utils.Assets", methodName : "getAsset"});
	}
	return null;
};
lime_utils_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"SOUND",useCache);
};
lime_utils_Assets.getBytes = function(id) {
	return lime_utils_Assets.getAsset(id,"BINARY",false);
};
lime_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"FONT",useCache);
};
lime_utils_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.getAsset(id,"IMAGE",useCache);
};
lime_utils_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	return lime_utils_Assets.libraries.h[name];
};
lime_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getAsset(id,"TEXT",false);
};
lime_utils_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && lime_utils_Assets.cache.enabled) {
		if(lime_utils_Assets.cache.exists(id,type)) {
			return true;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		return symbol_library.isLocal(symbol_symbolName,type);
	} else {
		return false;
	}
};
lime_utils_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_utils_Assets.isValidImage = function(image) {
	if(image != null) {
		return image.buffer != null;
	} else {
		return false;
	}
};
lime_utils_Assets.loadAsset = function(id,type,useCache) {
	if(useCache && lime_utils_Assets.cache.enabled) {
		switch(type) {
		case "BINARY":case "TEXT":
			useCache = false;
			break;
		case "FONT":
			var font = lime_utils_Assets.cache.font.h[id];
			if(font != null) {
				return lime_app_Future.withValue(font);
			}
			break;
		case "IMAGE":
			var image = lime_utils_Assets.cache.image.h[id];
			if(lime_utils_Assets.isValidImage(image)) {
				return lime_app_Future.withValue(image);
			}
			break;
		case "MUSIC":case "SOUND":
			var audio = lime_utils_Assets.cache.audio.h[id];
			if(lime_utils_Assets.isValidAudio(audio)) {
				return lime_app_Future.withValue(audio);
			}
			break;
		case "TEMPLATE":
			throw haxe_Exception.thrown("Not sure how to get template: " + id);
		default:
			return null;
		}
	}
	var id1 = id;
	var colonIndex = id1.indexOf(":");
	var symbol_libraryName = id1.substring(0,colonIndex);
	var symbol_symbolName = id1.substring(colonIndex + 1);
	var symbol_library = lime_utils_Assets.getLibrary(symbol_libraryName);
	if(symbol_library != null) {
		if(symbol_library.exists(symbol_symbolName,type)) {
			var future = symbol_library.loadAsset(symbol_symbolName,type);
			if(useCache && lime_utils_Assets.cache.enabled) {
				future.onComplete(function(asset) {
					lime_utils_Assets.cache.set(id,type,asset);
				});
			}
			return future;
		} else {
			return lime_app_Future.withError("There is no " + type + " asset with an ID of \"" + id + "\"");
		}
	} else {
		return lime_app_Future.withError(lime_utils_Assets.__libraryNotFound(symbol_libraryName));
	}
};
lime_utils_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	return lime_utils_Assets.loadAsset(id,"SOUND",useCache);
};
lime_utils_Assets.loadLibrary = function(id) {
	var promise = new lime_app_Promise();
	var library = lime_utils_Assets.getLibrary(id);
	if(library != null) {
		return library.load();
	}
	var path = id;
	var rootPath = null;
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.bundlePaths.h,id)) {
		lime_utils_AssetBundle.loadFromFile(lime_utils_Assets.bundlePaths.h[id]).onComplete(function(bundle) {
			if(bundle == null) {
				promise.error("Cannot load bundle for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromBundle(bundle);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	} else {
		if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraryPaths.h,id)) {
			path = lime_utils_Assets.libraryPaths.h[id];
			rootPath = haxe_io_Path.directory(path);
		} else {
			if(StringTools.endsWith(path,".bundle")) {
				rootPath = path;
				path += "/library.json";
			} else {
				rootPath = haxe_io_Path.directory(path);
			}
			path = lime_utils_Assets.__cacheBreak(path);
		}
		lime_utils_AssetManifest.loadFromFile(path,rootPath).onComplete(function(manifest) {
			if(manifest == null) {
				promise.error("Cannot parse asset manifest for library \"" + id + "\"");
				return;
			}
			var library = lime_utils_AssetLibrary.fromManifest(manifest);
			if(library == null) {
				promise.error("Cannot open library \"" + id + "\"");
			} else {
				lime_utils_Assets.libraries.h[id] = library;
				library.onChange.add(($_=lime_utils_Assets.onChange,$bind($_,$_.dispatch)));
				promise.completeWith(library.load());
			}
		}).onError(function(_) {
			promise.error("There is no asset library with an ID of \"" + id + "\"");
		});
	}
	return promise.future;
};
lime_utils_Assets.registerLibrary = function(name,library) {
	if(Object.prototype.hasOwnProperty.call(lime_utils_Assets.libraries.h,name)) {
		if(lime_utils_Assets.libraries.h[name] == library) {
			return;
		} else {
			lime_utils_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_utils_Assets.library_onChange);
	}
	lime_utils_Assets.libraries.h[name] = library;
};
lime_utils_Assets.unloadLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var library = lime_utils_Assets.libraries.h[name];
	if(library != null) {
		lime_utils_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_utils_Assets.library_onChange);
		library.unload();
	}
	var _this = lime_utils_Assets.libraries;
	if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
		delete(_this.h[name]);
	}
};
lime_utils_Assets.__cacheBreak = function(path) {
	if(lime_utils_Assets.cache.version > 0) {
		if(path.indexOf("?") > -1) {
			path += "&" + lime_utils_Assets.cache.version;
		} else {
			path += "?" + lime_utils_Assets.cache.version;
		}
	}
	return path;
};
lime_utils_Assets.__libraryNotFound = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	if(lime_app_Application.current != null && lime_app_Application.current.__preloader != null && !lime_app_Application.current.__preloader.complete) {
		return "There is no asset library named \"" + name + "\", or it is not yet preloaded";
	} else {
		return "There is no asset library named \"" + name + "\"";
	}
};
lime_utils_Assets.library_onChange = function() {
	lime_utils_Assets.cache.clear();
	lime_utils_Assets.onChange.dispatch();
};
var lime_utils_BytePointerData = function(bytes,offset) {
	this.bytes = bytes;
	this.offset = offset;
};
$hxClasses["lime.utils.BytePointerData"] = lime_utils_BytePointerData;
lime_utils_BytePointerData.__name__ = "lime.utils.BytePointerData";
lime_utils_BytePointerData.prototype = {
	__class__: lime_utils_BytePointerData
};
var lime_utils_Bytes = {};
lime_utils_Bytes._new = function(length,bytesData) {
	var this1 = new haxe_io_Bytes(bytesData);
	return this1;
};
lime_utils_Bytes.decompress = function(this1,algorithm) {
	switch(algorithm._hx_index) {
	case 0:
		return lime__$internal_format_Deflate.decompress(this1);
	case 1:
		return lime__$internal_format_GZip.decompress(this1);
	case 2:
		return lime__$internal_format_LZMA.decompress(this1);
	case 3:
		return lime__$internal_format_Zlib.decompress(this1);
	}
};
lime_utils_Bytes.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fromFile = function(path) {
	return null;
};
lime_utils_Bytes.loadFromFile = function(path) {
	var request = new lime_net__$HTTPRequest_$lime_$utils_$Bytes();
	return request.load(path);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return lime_utils_Bytes._new(bytes.length,bytes.b.bufferValue);
};
var lime_utils_CompressionAlgorithm = $hxEnums["lime.utils.CompressionAlgorithm"] = { __ename__:"lime.utils.CompressionAlgorithm",__constructs__:null
	,DEFLATE: {_hx_name:"DEFLATE",_hx_index:0,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,GZIP: {_hx_name:"GZIP",_hx_index:1,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,LZMA: {_hx_name:"LZMA",_hx_index:2,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
	,ZLIB: {_hx_name:"ZLIB",_hx_index:3,__enum__:"lime.utils.CompressionAlgorithm",toString:$estr}
};
lime_utils_CompressionAlgorithm.__constructs__ = [lime_utils_CompressionAlgorithm.DEFLATE,lime_utils_CompressionAlgorithm.GZIP,lime_utils_CompressionAlgorithm.LZMA,lime_utils_CompressionAlgorithm.ZLIB];
var lime_utils_Float32Array = {};
lime_utils_Float32Array.toArrayBufferView = function(this1) {
	return this1;
};
var lime_utils_Log = function() { };
$hxClasses["lime.utils.Log"] = lime_utils_Log;
lime_utils_Log.__name__ = "lime.utils.Log";
lime_utils_Log.error = function(message,info) {
	if(lime_utils_Log.level >= 1) {
		var message1 = "[" + info.className + "] ERROR: " + Std.string(message);
		if(lime_utils_Log.throwErrors) {
			throw haxe_Exception.thrown(message1);
		} else {
			console.error(message1);
		}
	}
};
lime_utils_Log.info = function(message,info) {
	if(lime_utils_Log.level >= 3) {
		console.info("[" + info.className + "] " + Std.string(message));
	}
};
lime_utils_Log.verbose = function(message,info) {
	if(lime_utils_Log.level >= 5) {
		var message1 = "[" + info.className + "] " + Std.string(message);
		console.log(message1);
	}
};
lime_utils_Log.warn = function(message,info) {
	if(lime_utils_Log.level >= 2) {
		console.warn("[" + info.className + "] WARNING: " + Std.string(message));
	}
};
var lime_utils_Preloader = function() {
	this.bytesTotalCache = new haxe_ds_StringMap();
	this.bytesLoadedCache2 = new haxe_ds_StringMap();
	this.bytesLoadedCache = new haxe_ds_ObjectMap();
	this.onProgress = new lime_app__$Event_$Int_$Int_$Void();
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.libraries = [];
	this.libraryNames = [];
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.utils.Preloader"] = lime_utils_Preloader;
lime_utils_Preloader.__name__ = "lime.utils.Preloader";
lime_utils_Preloader.prototype = {
	addLibrary: function(library) {
		this.libraries.push(library);
	}
	,addLibraryName: function(name) {
		if(this.libraryNames.indexOf(name) == -1) {
			this.libraryNames.push(name);
		}
	}
	,load: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = _g1[_g];
			++_g;
			this.bytesTotal += library.bytesTotal;
		}
		this.loadedLibraries = -1;
		this.preloadStarted = false;
		var _g = 0;
		var _g1 = this.libraries;
		while(_g < _g1.length) {
			var library = [_g1[_g]];
			++_g;
			lime_utils_Log.verbose("Preloading asset library",{ fileName : "lime/utils/Preloader.hx", lineNumber : 132, className : "lime.utils.Preloader", methodName : "load"});
			library[0].load().onProgress((function(library) {
				return function(loaded,total) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += loaded;
					} else {
						_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.bytesLoadedCache.set(library[0],loaded);
					if(!_gthis.simulateProgress) {
						_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
					}
				};
			})(library)).onComplete((function(library) {
				return function(_) {
					if(_gthis.bytesLoadedCache.h.__keys__[library[0].__id__] == null) {
						_gthis.bytesLoaded += library[0].bytesTotal;
					} else {
						_gthis.bytesLoaded += library[0].bytesTotal - _gthis.bytesLoadedCache.h[library[0].__id__];
					}
					_gthis.loadedAssetLibrary();
				};
			})(library)).onError((function() {
				return function(e) {
					lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 168, className : "lime.utils.Preloader", methodName : "load"});
				};
			})());
		}
		var _g = 0;
		var _g1 = this.libraryNames;
		while(_g < _g1.length) {
			var name = _g1[_g];
			++_g;
			this.bytesTotal += 200;
		}
		this.loadedLibraries++;
		this.preloadStarted = true;
		this.updateProgress();
	}
	,loadedAssetLibrary: function(name) {
		this.loadedLibraries++;
		var current = this.loadedLibraries;
		if(!this.preloadStarted) {
			++current;
		}
		var totalLibraries = this.libraries.length + this.libraryNames.length;
		if(name != null) {
			lime_utils_Log.verbose("Loaded asset library: " + name + " [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 195, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		} else {
			lime_utils_Log.verbose("Loaded asset library [" + current + "/" + totalLibraries + "]",{ fileName : "lime/utils/Preloader.hx", lineNumber : 199, className : "lime.utils.Preloader", methodName : "loadedAssetLibrary"});
		}
		this.updateProgress();
	}
	,start: function() {
		if(this.complete || this.simulateProgress || !this.preloadComplete) {
			return;
		}
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,updateProgress: function() {
		var _gthis = this;
		if(!this.simulateProgress) {
			this.onProgress.dispatch(this.bytesLoaded,this.bytesTotal);
		}
		if(this.loadedLibraries == this.libraries.length && !this.initLibraryNames) {
			this.initLibraryNames = true;
			var _g = 0;
			var _g1 = this.libraryNames;
			while(_g < _g1.length) {
				var name = [_g1[_g]];
				++_g;
				lime_utils_Log.verbose("Preloading asset library: " + name[0],{ fileName : "lime/utils/Preloader.hx", lineNumber : 236, className : "lime.utils.Preloader", methodName : "updateProgress"});
				lime_utils_Assets.loadLibrary(name[0]).onProgress((function(name) {
					return function(loaded,total) {
						if(total > 0) {
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
								_gthis.bytesTotalCache.h[name[0]] = total;
								_gthis.bytesTotal += total - 200;
							}
							if(loaded > total) {
								loaded = total;
							}
							if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
								_gthis.bytesLoaded += loaded;
							} else {
								_gthis.bytesLoaded += loaded - _gthis.bytesLoadedCache2.h[name[0]];
							}
							_gthis.bytesLoadedCache2.h[name[0]] = loaded;
							if(!_gthis.simulateProgress) {
								_gthis.onProgress.dispatch(_gthis.bytesLoaded,_gthis.bytesTotal);
							}
						}
					};
				})(name)).onComplete((function(name) {
					return function(library) {
						var total = 200;
						if(Object.prototype.hasOwnProperty.call(_gthis.bytesTotalCache.h,name[0])) {
							total = _gthis.bytesTotalCache.h[name[0]];
						}
						if(!Object.prototype.hasOwnProperty.call(_gthis.bytesLoadedCache2.h,name[0])) {
							_gthis.bytesLoaded += total;
						} else {
							_gthis.bytesLoaded += total - _gthis.bytesLoadedCache2.h[name[0]];
						}
						_gthis.loadedAssetLibrary(name[0]);
					};
				})(name)).onError((function() {
					return function(e) {
						lime_utils_Log.error(e,{ fileName : "lime/utils/Preloader.hx", lineNumber : 290, className : "lime.utils.Preloader", methodName : "updateProgress"});
					};
				})());
			}
		}
		if(!this.simulateProgress && this.loadedLibraries == this.libraries.length + this.libraryNames.length) {
			if(!this.preloadComplete) {
				this.preloadComplete = true;
				lime_utils_Log.verbose("Preload complete",{ fileName : "lime/utils/Preloader.hx", lineNumber : 301, className : "lime.utils.Preloader", methodName : "updateProgress"});
			}
			this.start();
		}
	}
	,__class__: lime_utils_Preloader
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = "motion.actuators.IGenericActuator";
motion_actuators_IGenericActuator.__isInterface__ = true;
motion_actuators_IGenericActuator.prototype = {
	__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = "motion.actuators.GenericActuator";
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				Reflect.setProperty(this.target,i,Reflect.field(this.properties,i));
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.get_current().stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = "motion.actuators.SimpleActuator";
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var cleanup = false;
	var _g = 0;
	var _g1 = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g < _g1) {
		var i = _g++;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	apply: function() {
		motion_actuators_GenericActuator.prototype.apply.call(this);
		if(this.toggleVisible && Object.prototype.hasOwnProperty.call(this.properties,"alpha")) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			if(value != null) {
				var target = this.target;
				var value = Reflect.field(this.properties,"alpha") > 0;
				if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
					target["visible"] = value;
				} else {
					Reflect.setProperty(target,"visible",value);
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
					target["visible"] = value;
				} else {
					Reflect.setProperty(target,"visible",value);
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			value = Reflect.getProperty(target,propertyName);
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				start = Reflect.getProperty(this.target,i);
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					value = Reflect.getProperty(target,i);
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && ((this.target) instanceof openfl_display_DisplayObject);
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				value = Reflect.getProperty(target,"visible");
			}
			this.cacheVisible = value;
			var target = this.target;
			var value = true;
			if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
				target["visible"] = value;
			} else {
				Reflect.setProperty(target,"visible",value);
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setField: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName) && !(target.__properties__ && target.__properties__["set_" + propertyName])) {
			target[propertyName] = value;
		} else {
			Reflect.setProperty(target,propertyName,value);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			Reflect.setProperty(details.target,details.propertyName,value);
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.detailsLength;
				while(_g < _g1) {
					var i = _g++;
					details = this.propertyDetails[i];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						Reflect.setProperty(details.target,details.propertyName,value);
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g = 0;
				var _g1 = this.detailsLength;
				while(_g < _g1) {
					var i = _g++;
					details = this.propertyDetails[i];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						var value = endValue;
						if(details.isField) {
							details.target[details.propertyName] = value;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value);
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							Reflect.setProperty(details.target,details.propertyName,value1);
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target = this.target;
						var value = false;
						if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
							target["visible"] = value;
						} else {
							Reflect.setProperty(target,"visible",value);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = "motion.easing.IEasing";
motion_easing_IEasing.__isInterface__ = true;
motion_easing_IEasing.prototype = {
	__class__: motion_easing_IEasing
};
var motion_easing__$Expo_ExpoEaseOut = function() {
};
$hxClasses["motion.easing._Expo.ExpoEaseOut"] = motion_easing__$Expo_ExpoEaseOut;
motion_easing__$Expo_ExpoEaseOut.__name__ = "motion.easing._Expo.ExpoEaseOut";
motion_easing__$Expo_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Expo_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.exp(-6.931471805599453 * k);
		}
	}
	,__class__: motion_easing__$Expo_ExpoEaseOut
};
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = "motion.easing.Expo";
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = "motion.Actuate";
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.pauseAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.resumeAll = function() {
	var library = motion_Actuate.targetLibraries.iterator();
	while(library.hasNext()) {
		var library1 = library.next();
		var _g = 0;
		while(_g < library1.length) {
			var actuator = library1[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__implements(target,motion_actuators_IGenericActuator)) {
			var actuator = target;
			actuator.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if(((properties) instanceof Array)) {
					var temp = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp[property] = null;
					}
					properties = temp;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = "motion.IComponentPath";
motion_IComponentPath.__isInterface__ = true;
motion_IComponentPath.prototype = {
	__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end",set_start:"set_start"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = "motion.actuators.FilterActuator";
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				Reflect.setProperty(this.filter,propertyName,Reflect.field(this.properties,propertyName));
			}
		}
		this.setFilter();
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				var target = this.filter;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
					value = Reflect.field(target,propertyName);
				} else {
					value = Reflect.getProperty(target,propertyName);
				}
				start = value;
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start,Object.prototype.hasOwnProperty.call(this.filter,"set_" + propertyName));
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,setFilter: function() {
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.filterIndex] = this.filter;
		} else {
			var _g = 0;
			var _g1 = filters.length;
			while(_g < _g1) {
				var i = _g++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		var target = this.target;
		var value = filters;
		if(Object.prototype.hasOwnProperty.call(target,"filters") && !(target.__properties__ && target.__properties__["set_" + "filters"])) {
			target["filters"] = value;
		} else {
			Reflect.setProperty(target,"filters",value);
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		this.setFilter();
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g = 0;
	var _g1 = this.properties.start.length;
	while(_g < _g1) {
		var i = _g++;
		this.currentParameters.push(this.properties.start[i]);
	}
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = "motion.actuators.MethodActuator";
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g = 0;
		var _g1 = this.properties.start.length;
		while(_g < _g1) {
			var i = _g++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g = 0;
			var _g1 = this.properties.start.length;
			while(_g < _g1) {
				var i = _g++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = "motion.actuators.MotionPathActuator";
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				Reflect.setProperty(this.target,propertyName,(js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end());
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.set_start(Reflect.field(this.target,propertyName));
				} else {
					isField = false;
					path.set_start(Reflect.getProperty(this.target,propertyName));
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details = _g1[_g];
					++_g;
					if(details.isField) {
						details.target[details.propertyName] = (js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						Reflect.setProperty(details.target,details.propertyName,(js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details = _g1[_g];
					++_g;
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = (js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							Reflect.setProperty(details.target,details.propertyName,(js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						}
					} else if(details.isField) {
						details.target[details.propertyName] = Math.round((js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						Reflect.setProperty(details.target,details.propertyName,Math.round((js_Boot.__cast(details , motion_actuators_PropertyPathDetails)).path.calculate(easing)));
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp;
					if(this.toggleVisible) {
						var target = this.target;
						var value = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value = Reflect.field(target,"alpha");
						} else {
							value = Reflect.getProperty(target,"alpha");
						}
						tmp = value == 0;
					} else {
						tmp = false;
					}
					if(tmp) {
						var target = this.target;
						var value = false;
						if(Object.prototype.hasOwnProperty.call(target,"visible") && !(target.__properties__ && target.__properties__["set_" + "visible"])) {
							target["visible"] = value;
						} else {
							Reflect.setProperty(target,"visible",value);
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = "motion.actuators.PropertyDetails";
motion_actuators_PropertyDetails.prototype = {
	__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = "motion.actuators.PropertyPathDetails";
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = "motion.actuators.TransformActuator";
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				value = Reflect.getProperty(target,"transform");
			}
			var transform = value;
			var value = this.endColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform") && !(transform.__properties__ && transform.__properties__["set_" + "colorTransform"])) {
				transform["colorTransform"] = value;
			} else {
				Reflect.setProperty(transform,"colorTransform",value);
			}
		}
		if(this.endSoundTransform != null) {
			var target = this.target;
			var value = this.endSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target,"soundTransform") && !(target.__properties__ && target.__properties__["set_" + "soundTransform"])) {
				target["soundTransform"] = value;
			} else {
				Reflect.setProperty(target,"soundTransform",value);
			}
		}
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && ((this.target) instanceof openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
				value = Reflect.field(target,"alpha");
			} else {
				value = Reflect.getProperty(target,"alpha");
			}
			this.endColorTransform.alphaMultiplier = value;
		}
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"transform")) {
			value = Reflect.field(target,"transform");
		} else {
			value = Reflect.getProperty(target,"transform");
		}
		var transform = value;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
			value = Reflect.field(transform,"colorTransform");
		} else {
			value = Reflect.getProperty(transform,"colorTransform");
		}
		var begin = value;
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(begin,propertyName)) {
				value = Reflect.field(begin,propertyName);
			} else {
				value = Reflect.getProperty(begin,propertyName);
			}
			start = value;
			var details1 = this.tweenColorTransform;
			var target = this.endColorTransform;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
				value1 = Reflect.field(target,propertyName);
			} else {
				value1 = Reflect.getProperty(target,propertyName);
			}
			details = new motion_actuators_PropertyDetails(details1,propertyName,start,value1 - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			value = Reflect.getProperty(target,"soundTransform");
		}
		if(value == null) {
			var target = this.target;
			var value = new openfl_media_SoundTransform();
			if(Object.prototype.hasOwnProperty.call(target,"soundTransform") && !(target.__properties__ && target.__properties__["set_" + "soundTransform"])) {
				target["soundTransform"] = value;
			} else {
				Reflect.setProperty(target,"soundTransform",value);
			}
		}
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			value = Reflect.getProperty(target,"soundTransform");
		}
		var start = value;
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			value = Reflect.getProperty(target,"soundTransform");
		}
		this.endSoundTransform = value;
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				value = Reflect.getProperty(target,"transform");
			}
			var transform = value;
			var value = this.tweenColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform") && !(transform.__properties__ && transform.__properties__["set_" + "colorTransform"])) {
				transform["colorTransform"] = value;
			} else {
				Reflect.setProperty(transform,"colorTransform",value);
			}
		}
		if(this.endSoundTransform != null) {
			var target = this.target;
			var value = this.tweenSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target,"soundTransform") && !(target.__properties__ && target.__properties__["set_" + "soundTransform"])) {
				target["soundTransform"] = value;
			} else {
				Reflect.setProperty(target,"soundTransform",value);
			}
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = "motion.easing.Linear";
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"};
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = "motion.easing.LinearEaseNone";
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing__$Quart_QuartEaseOut = function() {
};
$hxClasses["motion.easing._Quart.QuartEaseOut"] = motion_easing__$Quart_QuartEaseOut;
motion_easing__$Quart_QuartEaseOut.__name__ = "motion.easing._Quart.QuartEaseOut";
motion_easing__$Quart_QuartEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing__$Quart_QuartEaseOut.prototype = {
	calculate: function(k) {
		return -(--k * k * k * k - 1);
	}
	,__class__: motion_easing__$Quart_QuartEaseOut
};
var motion_easing_Quart = function() { };
$hxClasses["motion.easing.Quart"] = motion_easing_Quart;
motion_easing_Quart.__name__ = "motion.easing.Quart";
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
$hxClasses["msignal.Signal"] = msignal_Signal;
msignal_Signal.__name__ = "msignal.Signal";
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
	,__properties__: {get_numListeners:"get_numListeners"}
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
$hxClasses["msignal.Signal0"] = msignal_Signal0;
msignal_Signal0.__name__ = "msignal.Signal0";
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
$hxClasses["msignal.Signal1"] = msignal_Signal1;
msignal_Signal1.__name__ = "msignal.Signal1";
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
$hxClasses["msignal.Signal2"] = msignal_Signal2;
msignal_Signal2.__name__ = "msignal.Signal2";
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
$hxClasses["msignal.Slot"] = msignal_Slot;
msignal_Slot.__name__ = "msignal.Slot";
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
	,__properties__: {set_listener:"set_listener"}
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot0"] = msignal_Slot0;
msignal_Slot0.__name__ = "msignal.Slot0";
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot1"] = msignal_Slot1;
msignal_Slot1.__name__ = "msignal.Slot1";
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
$hxClasses["msignal.Slot2"] = msignal_Slot2;
msignal_Slot2.__name__ = "msignal.Slot2";
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
$hxClasses["msignal.SlotList"] = msignal_SlotList;
msignal_SlotList.__name__ = "msignal.SlotList";
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
	,__properties__: {get_length:"get_length"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = "openfl.Lib";
openfl_Lib.__properties__ = {get_current:"get_current"};
openfl_Lib.clearTimeout = function(id) {
	if(openfl_Lib.__timers.h.hasOwnProperty(id)) {
		var timer = openfl_Lib.__timers.h[id];
		timer.stop();
		openfl_Lib.__timers.remove(id);
	}
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	openfl_Lib.navigateToURL(request,target);
};
openfl_Lib.navigateToURL = function(request,$window) {
	if($window == null) {
		$window = "_blank";
	}
	var uri = request.url;
	if(Type.typeof(request.data) == ValueType.TObject) {
		var query = "";
		var fields = Reflect.fields(request.data);
		var _g = 0;
		while(_g < fields.length) {
			var field = fields[_g];
			++_g;
			if(query.length > 0) {
				query += "&";
			}
			var query1 = encodeURIComponent(field) + "=";
			var s = Std.string(Reflect.field(request.data,field));
			query += query1 + encodeURIComponent(s);
		}
		if(uri.indexOf("?") > -1) {
			uri += "&" + query;
		} else {
			uri += "?" + query;
		}
	}
	lime_system_System.openURL(uri,$window);
};
openfl_Lib.setTimeout = function(closure,delay,args) {
	var id = ++openfl_Lib.__lastTimerID;
	var this1 = openfl_Lib.__timers;
	var v = haxe_Timer.delay(function() {
		closure.apply(closure,args == null ? [] : args);
	},delay);
	this1.h[id] = v;
	return id;
};
openfl_Lib.get_current = function() {
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	return openfl_utils__$internal_Lib.current;
};
var openfl__$Vector_IVector = function() { };
$hxClasses["openfl._Vector.IVector"] = openfl__$Vector_IVector;
openfl__$Vector_IVector.__name__ = "openfl._Vector.IVector";
openfl__$Vector_IVector.__isInterface__ = true;
var openfl__$Vector_BoolVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.BoolVector"] = openfl__$Vector_BoolVector;
openfl__$Vector_BoolVector.__name__ = "openfl._Vector.BoolVector";
openfl__$Vector_BoolVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_BoolVector.prototype = {
	toJSON: function() {
		return this.__array;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = false;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_BoolVector
	,__properties__: {set_length:"set_length"}
};
var openfl__$Vector_FloatVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FloatVector"] = openfl__$Vector_FloatVector;
openfl__$Vector_FloatVector.__name__ = "openfl._Vector.FloatVector";
openfl__$Vector_FloatVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FloatVector.prototype = {
	concat: function(a) {
		if(a == null) {
			return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
		} else {
			var other = a;
			if(other.__array.length > 0) {
				return new openfl__$Vector_FloatVector(0,false,this.__array.concat(other.__array));
			} else {
				return new openfl__$Vector_FloatVector(0,false,this.__array.slice());
			}
		}
	}
	,copy: function() {
		return new openfl__$Vector_FloatVector(0,this.fixed,this.__array.slice());
	}
	,get: function(index) {
		return this.__array[index];
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(value != this.__array.length && !this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FloatVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_FunctionVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.FunctionVector"] = openfl__$Vector_FunctionVector;
openfl__$Vector_FunctionVector.__name__ = "openfl._Vector.FunctionVector";
openfl__$Vector_FunctionVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_FunctionVector.prototype = {
	toJSON: function() {
		return this.__array;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = null;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_FunctionVector
	,__properties__: {set_length:"set_length"}
};
var openfl__$Vector_IntVector = function(length,fixed,array) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(array == null) {
		array = [];
	}
	this.__array = array;
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.IntVector"] = openfl__$Vector_IntVector;
openfl__$Vector_IntVector.__name__ = "openfl._Vector.IntVector";
openfl__$Vector_IntVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_IntVector.prototype = {
	get: function(index) {
		return this.__array[index];
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,toJSON: function() {
		return this.__array;
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array[i] = 0;
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_IntVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl__$Vector_ObjectVector = function(length,fixed,array,forceCopy) {
	if(forceCopy == null) {
		forceCopy = false;
	}
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	if(forceCopy) {
		this.__array = [];
		if(array != null) {
			var _g = 0;
			var _g1 = array.length;
			while(_g < _g1) {
				var i = _g++;
				this.__array[i] = array[i];
			}
		}
	} else {
		if(array == null) {
			array = [];
		}
		this.__array = array;
	}
	if(length > 0) {
		this.set_length(length);
	}
	this.fixed = fixed;
};
$hxClasses["openfl._Vector.ObjectVector"] = openfl__$Vector_ObjectVector;
openfl__$Vector_ObjectVector.__name__ = "openfl._Vector.ObjectVector";
openfl__$Vector_ObjectVector.__interfaces__ = [openfl__$Vector_IVector];
openfl__$Vector_ObjectVector.prototype = {
	get: function(index) {
		return this.__array[index];
	}
	,indexOf: function(x,from) {
		if(from == null) {
			from = 0;
		}
		var _g = from;
		var _g1 = this.__array.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.__array[i] == x) {
				return i;
			}
		}
		return -1;
	}
	,insertAt: function(index,element) {
		if(!this.fixed || index < this.__array.length) {
			this.__array.splice(index,0,element);
		}
	}
	,iterator: function() {
		return new haxe_iterators_ArrayIterator(this.__array);
	}
	,push: function(x) {
		if(!this.fixed) {
			return this.__array.push(x);
		} else {
			return this.__array.length;
		}
	}
	,removeAt: function(index) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array.splice(index,1)[0];
		}
		return null;
	}
	,set: function(index,value) {
		if(!this.fixed || index < this.__array.length) {
			return this.__array[index] = value;
		} else {
			return value;
		}
	}
	,splice: function(pos,len) {
		return new openfl__$Vector_ObjectVector(0,false,this.__array.splice(pos,len));
	}
	,toJSON: function() {
		return this.__array;
	}
	,unshift: function(x) {
		if(!this.fixed) {
			this.__array.unshift(x);
		}
	}
	,get_length: function() {
		return this.__array.length;
	}
	,set_length: function(value) {
		if(!this.fixed) {
			var currentLength = this.__array.length;
			if(value < 0) {
				value = 0;
			}
			if(value > currentLength) {
				var _g = currentLength;
				var _g1 = value;
				while(_g < _g1) {
					var i = _g++;
					this.__array.push(null);
				}
			} else {
				while(this.__array.length > value) this.__array.pop();
			}
		}
		return this.__array.length;
	}
	,__class__: openfl__$Vector_ObjectVector
	,__properties__: {set_length:"set_length",get_length:"get_length"}
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_utils__$internal_Lib.application == null) {
		openfl_utils__$internal_Lib.application = this;
	}
	if(openfl_utils__$internal_Lib.current == null) {
		openfl_utils__$internal_Lib.current = new openfl_display_MovieClip();
	}
	openfl_utils__$internal_Lib.current.__loaderInfo = openfl_display_LoaderInfo.create(null);
	openfl_utils__$internal_Lib.current.__loaderInfo.content = openfl_utils__$internal_Lib.current;
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = "openfl.display.Application";
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	createWindow: function(attributes) {
		var $window = new openfl_display_Window(this,attributes);
		this.__windows.push($window);
		this.__windowByID.h[$window.id] = $window;
		var _g = $bind(this,this.__onWindowClose);
		var window1 = $window;
		var tmp = function() {
			_g(window1);
		};
		$window.onClose.add(tmp,false,-10000);
		if(this.__window == null) {
			this.__window = $window;
			$window.onActivate.add($bind(this,this.onWindowActivate));
			$window.onRenderContextLost.add($bind(this,this.onRenderContextLost));
			$window.onRenderContextRestored.add($bind(this,this.onRenderContextRestored));
			$window.onDeactivate.add($bind(this,this.onWindowDeactivate));
			$window.onDropFile.add($bind(this,this.onWindowDropFile));
			$window.onEnter.add($bind(this,this.onWindowEnter));
			$window.onExpose.add($bind(this,this.onWindowExpose));
			$window.onFocusIn.add($bind(this,this.onWindowFocusIn));
			$window.onFocusOut.add($bind(this,this.onWindowFocusOut));
			$window.onFullscreen.add($bind(this,this.onWindowFullscreen));
			$window.onKeyDown.add($bind(this,this.onKeyDown));
			$window.onKeyUp.add($bind(this,this.onKeyUp));
			$window.onLeave.add($bind(this,this.onWindowLeave));
			$window.onMinimize.add($bind(this,this.onWindowMinimize));
			$window.onMouseDown.add($bind(this,this.onMouseDown));
			$window.onMouseMove.add($bind(this,this.onMouseMove));
			$window.onMouseMoveRelative.add($bind(this,this.onMouseMoveRelative));
			$window.onMouseUp.add($bind(this,this.onMouseUp));
			$window.onMouseWheel.add($bind(this,this.onMouseWheel));
			$window.onMove.add($bind(this,this.onWindowMove));
			$window.onRender.add($bind(this,this.render));
			$window.onResize.add($bind(this,this.onWindowResize));
			$window.onRestore.add($bind(this,this.onWindowRestore));
			$window.onTextEdit.add($bind(this,this.onTextEdit));
			$window.onTextInput.add($bind(this,this.onTextInput));
			this.onWindowCreate();
		}
		this.onCreateWindow.dispatch($window);
		return $window;
	}
	,__class__: openfl_display_Application
});
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 2;
	this.__bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = "openfl.display.Bitmap";
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__enterFrame: function(deltaTime) {
		if(this.__bitmapData != null && this.__bitmapData.image != null && this.__bitmapData.image.version != this.__imageVersion) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		if(this.__bitmapData != null) {
			bounds.setTo(0,0,this.__bitmapData.width,this.__bitmapData.height);
		} else {
			bounds.setTo(0,0,0,0);
		}
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.__bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			if(this.__scrollRect != null && !this.__scrollRect.contains(px,py)) {
				return false;
			}
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__bitmapData == null) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__bitmapData.width && py <= this.__bitmapData.height) {
			return true;
		}
		return false;
	}
	,get_bitmapData: function() {
		return this.__bitmapData;
	}
	,set_bitmapData: function(value) {
		this.__bitmapData = value;
		this.smoothing = false;
		if(!this.__renderDirty) {
			this.__renderDirty = true;
			this.__setParentRenderDirty();
		}
		var tmp = this.__filters != null;
		this.__imageVersion = -1;
		return this.__bitmapData;
	}
	,set_height: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleY(value / this.__bitmapData.height);
		} else {
			this.set_scaleY(0);
		}
		return value;
	}
	,set_width: function(value) {
		if(this.__bitmapData != null) {
			this.set_scaleX(value / this.__bitmapData.width);
		} else {
			this.set_scaleX(0);
		}
		return value;
	}
	,__class__: openfl_display_Bitmap
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_bitmapData:"set_bitmapData",get_bitmapData:"get_bitmapData"})
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__drawableType = 0;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	if(width < 0) {
		width = 0;
	}
	if(height < 0) {
		height = 0;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	this.__textureWidth = width;
	this.__textureHeight = height;
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
		this.readable = true;
	}
	this.__renderTransform = new openfl_geom_Matrix();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.__renderable = true;
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = "openfl.display.BitmapData";
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent,0);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	if(bitmapData.image != null) {
		return bitmapData;
	} else {
		return null;
	}
};
openfl_display_BitmapData.loadFromFile = function(path) {
	return lime_graphics_Image.loadFromFile(path).then(function(image) {
		return lime_app_Future.withValue(openfl_display_BitmapData.fromImage(image));
	});
};
openfl_display_BitmapData.prototype = {
	colorTransform: function(rect,colorTransform) {
		if(!this.readable) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.readable || sourceBitmapData == null) {
			return;
		}
		if(alphaPoint != null) {
			openfl_display_BitmapData.__tempVector.x = alphaPoint.x;
			openfl_display_BitmapData.__tempVector.y = alphaPoint.y;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null ? alphaBitmapData.image : null,alphaPoint != null ? openfl_display_BitmapData.__tempVector : null,mergeAlpha);
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		this.readable = false;
		this.__surface = null;
		this.__vertexBuffer = null;
		this.__framebuffer = null;
		this.__framebufferContext = null;
		this.__texture = null;
		this.__textureContext = null;
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(source == null) {
			return;
		}
		source.__update(false,true);
		var transform = openfl_geom_Matrix.__pool.get();
		transform.copyFrom(source.__renderTransform);
		transform.invert();
		if(matrix != null) {
			transform.concat(matrix);
		}
		var clipMatrix = null;
		if(clipRect != null) {
			clipMatrix = openfl_geom_Matrix.__pool.get();
			clipMatrix.copyFrom(transform);
			clipMatrix.invert();
		}
		var _colorTransform = new openfl_geom_ColorTransform();
		_colorTransform.__copyFrom(source.__worldColorTransform);
		_colorTransform.__invert();
		if(!this.readable && openfl_Lib.get_current().stage.context3D != null) {
			if(this.__textureContext == null) {
				this.__textureContext = lime_app_Application.current.__window.context;
			}
			if(colorTransform != null) {
				_colorTransform.__combine(colorTransform);
			}
			var renderer = new openfl_display_OpenGLRenderer(openfl_Lib.get_current().stage.context3D,this);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			renderer.__resize(this.width,this.height);
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawGL(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		} else {
			if(colorTransform != null) {
				var bounds = openfl_geom_Rectangle.__pool.get();
				var boundsMatrix = openfl_geom_Matrix.__pool.get();
				source.__getBounds(bounds,boundsMatrix);
				var width = Math.ceil(bounds.width);
				var height = Math.ceil(bounds.height);
				boundsMatrix.tx = -bounds.x;
				boundsMatrix.ty = -bounds.y;
				var copy = new openfl_display_BitmapData(width,height,true,0);
				copy.draw(source,boundsMatrix);
				copy.colorTransform(copy.rect,colorTransform);
				copy.__renderTransform.identity();
				copy.__renderTransform.tx = bounds.x;
				copy.__renderTransform.ty = bounds.y;
				copy.__renderTransform.concat(source.__renderTransform);
				copy.__worldAlpha = source.__worldAlpha;
				copy.__worldColorTransform.__copyFrom(source.__worldColorTransform);
				source = copy;
				openfl_geom_Rectangle.__pool.release(bounds);
				openfl_geom_Matrix.__pool.release(boundsMatrix);
			}
			lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(this.image);
			var renderer = new openfl_display_CanvasRenderer(this.image.buffer.__srcContext);
			renderer.__allowSmoothing = smoothing;
			renderer.__overrideBlendMode = blendMode;
			renderer.__worldTransform = transform;
			renderer.__worldAlpha = 1 / source.__worldAlpha;
			renderer.__worldColorTransform = _colorTransform;
			if(clipRect != null) {
				renderer.__pushMaskRect(clipRect,clipMatrix);
			}
			this.__drawCanvas(source,renderer);
			if(clipRect != null) {
				renderer.__popMaskRect();
				openfl_geom_Matrix.__pool.release(clipMatrix);
			}
		}
		openfl_geom_Matrix.__pool.release(transform);
	}
	,fillRect: function(rect,color) {
		this.__fillRect(rect,color,true);
	}
	,getIndexBuffer: function(context,scale9Grid) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context || scale9Grid != null && this.__indexBufferGrid == null || this.__indexBufferGrid != null && !this.__indexBufferGrid.equals(scale9Grid)) {
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = null;
			if(scale9Grid != null) {
				if(this.__indexBufferGrid == null) {
					this.__indexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__indexBufferGrid.copyFrom(scale9Grid);
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(54);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBufferData[18] = 8;
					this.__indexBufferData[19] = 9;
					this.__indexBufferData[20] = 0;
					this.__indexBufferData[21] = 0;
					this.__indexBufferData[22] = 9;
					this.__indexBufferData[23] = 1;
					this.__indexBufferData[24] = 10;
					this.__indexBufferData[25] = 8;
					this.__indexBufferData[26] = 4;
					this.__indexBufferData[27] = 4;
					this.__indexBufferData[28] = 8;
					this.__indexBufferData[29] = 0;
					this.__indexBufferData[30] = 11;
					this.__indexBufferData[31] = 10;
					this.__indexBufferData[32] = 6;
					this.__indexBufferData[33] = 6;
					this.__indexBufferData[34] = 10;
					this.__indexBufferData[35] = 4;
					this.__indexBufferData[36] = 12;
					this.__indexBufferData[37] = 13;
					this.__indexBufferData[38] = 8;
					this.__indexBufferData[39] = 8;
					this.__indexBufferData[40] = 13;
					this.__indexBufferData[41] = 9;
					this.__indexBufferData[42] = 14;
					this.__indexBufferData[43] = 12;
					this.__indexBufferData[44] = 10;
					this.__indexBufferData[45] = 10;
					this.__indexBufferData[46] = 12;
					this.__indexBufferData[47] = 8;
					this.__indexBufferData[48] = 15;
					this.__indexBufferData[49] = 14;
					this.__indexBufferData[50] = 11;
					this.__indexBufferData[51] = 11;
					this.__indexBufferData[52] = 14;
					this.__indexBufferData[53] = 10;
					this.__indexBuffer = context.createIndexBuffer(54);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 5;
					this.__indexBufferData[8] = 0;
					this.__indexBufferData[9] = 0;
					this.__indexBufferData[10] = 5;
					this.__indexBufferData[11] = 1;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 7;
					this.__indexBufferData[14] = 4;
					this.__indexBufferData[15] = 4;
					this.__indexBufferData[16] = 7;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				} else if(centerX != 0 && centerY == 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Uint16Array(18);
					this.__indexBufferData = this1;
					this.__indexBufferData[0] = 0;
					this.__indexBufferData[1] = 1;
					this.__indexBufferData[2] = 2;
					this.__indexBufferData[3] = 2;
					this.__indexBufferData[4] = 1;
					this.__indexBufferData[5] = 3;
					this.__indexBufferData[6] = 4;
					this.__indexBufferData[7] = 0;
					this.__indexBufferData[8] = 5;
					this.__indexBufferData[9] = 5;
					this.__indexBufferData[10] = 0;
					this.__indexBufferData[11] = 2;
					this.__indexBufferData[12] = 6;
					this.__indexBufferData[13] = 4;
					this.__indexBufferData[14] = 7;
					this.__indexBufferData[15] = 7;
					this.__indexBufferData[16] = 4;
					this.__indexBufferData[17] = 5;
					this.__indexBuffer = context.createIndexBuffer(18);
				}
			} else {
				this.__indexBufferGrid = null;
			}
			if(this.__indexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Uint16Array(6);
				this.__indexBufferData = this1;
				this.__indexBufferData[0] = 0;
				this.__indexBufferData[1] = 1;
				this.__indexBufferData[2] = 2;
				this.__indexBufferData[3] = 2;
				this.__indexBufferData[4] = 1;
				this.__indexBufferData[5] = 3;
				this.__indexBuffer = context.createIndexBuffer(6);
			}
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,getVertexBuffer: function(context,scale9Grid,targetObject) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context || scale9Grid != null && this.__vertexBufferGrid == null || this.__vertexBufferGrid != null && !this.__vertexBufferGrid.equals(scale9Grid) || targetObject != null && (this.__vertexBufferWidth != targetObject.get_width() || this.__vertexBufferHeight != targetObject.get_height() || this.__vertexBufferScaleX != targetObject.get_scaleX() || this.__vertexBufferScaleY != targetObject.get_scaleY())) {
			this.__uvRect = new openfl_geom_Rectangle(0,0,this.width,this.height);
			var uvWidth = 1;
			var uvHeight = 1;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = null;
			if(targetObject != null) {
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
			}
			if(scale9Grid != null && targetObject != null) {
				if(this.__vertexBufferGrid == null) {
					this.__vertexBufferGrid = new openfl_geom_Rectangle();
				}
				this.__vertexBufferGrid.copyFrom(scale9Grid);
				this.__vertexBufferWidth = targetObject.get_width();
				this.__vertexBufferHeight = targetObject.get_height();
				this.__vertexBufferScaleX = targetObject.get_scaleX();
				this.__vertexBufferScaleY = targetObject.get_scaleY();
				var centerX = scale9Grid.width;
				var centerY = scale9Grid.height;
				if(centerX != 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(224);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var top = scale9Grid.y;
					var right = this.width - centerX - left;
					var bottom = this.height - centerY - top;
					var uvLeft = left / this.width;
					var uvTop = top / this.height;
					var uvCenterX = centerX / this.width;
					var uvCenterY = centerY / this.height;
					var uvRight = right / this.width;
					var uvBottom = bottom / this.height;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedTop = top / targetObject.get_scaleY();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedTop;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight * uvTop;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedTop;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight * uvTop;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBufferData[112] = renderedLeft;
					this.__vertexBufferData[113] = renderedTop + renderedCenterY;
					this.__vertexBufferData[115] = uvWidth * uvLeft;
					this.__vertexBufferData[116] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[127] = renderedTop + renderedCenterY;
					this.__vertexBufferData[130] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[140] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[141] = renderedTop + renderedCenterY;
					this.__vertexBufferData[143] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[144] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[154] = this.width;
					this.__vertexBufferData[155] = renderedTop + renderedCenterY;
					this.__vertexBufferData[157] = uvWidth;
					this.__vertexBufferData[158] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[168] = renderedLeft;
					this.__vertexBufferData[169] = this.height;
					this.__vertexBufferData[171] = uvWidth * uvLeft;
					this.__vertexBufferData[172] = uvHeight;
					this.__vertexBufferData[183] = this.height;
					this.__vertexBufferData[186] = uvHeight;
					this.__vertexBufferData[196] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[197] = this.height;
					this.__vertexBufferData[199] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[200] = uvHeight;
					this.__vertexBufferData[210] = this.width;
					this.__vertexBufferData[211] = this.height;
					this.__vertexBufferData[213] = uvWidth;
					this.__vertexBufferData[214] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(16,14);
				} else if(centerX == 0 && centerY != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var top = scale9Grid.y;
					var bottom = this.height - centerY - top;
					var uvTop = top / this.height;
					var uvCenterY = centerY / this.height;
					var uvBottom = bottom / this.height;
					var renderedTop = top / targetObject.get_scaleY();
					var renderedBottom = bottom / targetObject.get_scaleY();
					var renderedCenterY = targetObject.get_height() / targetObject.get_scaleY() - renderedTop - renderedBottom;
					var renderedWidth = targetObject.get_width() / targetObject.get_scaleX();
					this.__vertexBufferData[0] = renderedWidth;
					this.__vertexBufferData[1] = renderedTop;
					this.__vertexBufferData[3] = uvWidth;
					this.__vertexBufferData[4] = uvHeight * uvTop;
					this.__vertexBufferData[15] = renderedTop;
					this.__vertexBufferData[18] = uvHeight * uvTop;
					this.__vertexBufferData[28] = renderedWidth;
					this.__vertexBufferData[31] = uvWidth;
					this.__vertexBufferData[56] = renderedWidth;
					this.__vertexBufferData[57] = renderedTop + renderedCenterY;
					this.__vertexBufferData[59] = uvWidth;
					this.__vertexBufferData[60] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[71] = renderedTop + renderedCenterY;
					this.__vertexBufferData[74] = uvHeight * (uvTop + uvCenterY);
					this.__vertexBufferData[84] = renderedWidth;
					this.__vertexBufferData[85] = this.height;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[99] = this.height;
					this.__vertexBufferData[102] = uvHeight;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				} else if(centerY == 0 && centerX != 0) {
					var array = null;
					var vector = null;
					var view = null;
					var buffer = null;
					var len = null;
					var this1 = new Float32Array(112);
					this.__vertexBufferData = this1;
					var left = scale9Grid.x;
					var right = this.width - centerX - left;
					var uvLeft = left / this.width;
					var uvCenterX = centerX / this.width;
					var uvRight = right / this.width;
					var renderedLeft = left / targetObject.get_scaleX();
					var renderedRight = right / targetObject.get_scaleX();
					var renderedCenterX = targetObject.get_width() / targetObject.get_scaleX() - renderedLeft - renderedRight;
					var renderedHeight = targetObject.get_height() / targetObject.get_scaleY();
					this.__vertexBufferData[0] = renderedLeft;
					this.__vertexBufferData[1] = renderedHeight;
					this.__vertexBufferData[3] = uvWidth * uvLeft;
					this.__vertexBufferData[4] = uvHeight;
					this.__vertexBufferData[15] = renderedHeight;
					this.__vertexBufferData[18] = uvHeight;
					this.__vertexBufferData[28] = renderedLeft;
					this.__vertexBufferData[31] = uvWidth * uvLeft;
					this.__vertexBufferData[56] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[57] = renderedHeight;
					this.__vertexBufferData[59] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[60] = uvHeight;
					this.__vertexBufferData[70] = renderedLeft + renderedCenterX;
					this.__vertexBufferData[73] = uvWidth * (uvLeft + uvCenterX);
					this.__vertexBufferData[84] = this.width;
					this.__vertexBufferData[85] = renderedHeight;
					this.__vertexBufferData[87] = uvWidth;
					this.__vertexBufferData[88] = uvHeight;
					this.__vertexBufferData[98] = this.width;
					this.__vertexBufferData[101] = uvWidth;
					this.__vertexBuffer = context.createVertexBuffer(8,14);
				}
			} else {
				this.__vertexBufferGrid = null;
			}
			if(this.__vertexBuffer == null) {
				var array = null;
				var vector = null;
				var view = null;
				var buffer = null;
				var len = null;
				var this1 = new Float32Array(56);
				this.__vertexBufferData = this1;
				this.__vertexBufferData[0] = this.width;
				this.__vertexBufferData[1] = this.height;
				this.__vertexBufferData[3] = uvWidth;
				this.__vertexBufferData[4] = uvHeight;
				this.__vertexBufferData[15] = this.height;
				this.__vertexBufferData[18] = uvHeight;
				this.__vertexBufferData[28] = this.width;
				this.__vertexBufferData[31] = uvWidth;
				this.__vertexBuffer = context.createVertexBuffer(3,14);
			}
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,getPixel: function(x,y) {
		if(!this.readable) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getTexture: function(context) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__texture == null || this.__textureContext != context.__context) {
			this.__textureContext = context.__context;
			this.__texture = context.createRectangleTexture(this.width,this.height,1,false);
			this.__textureVersion = -1;
		}
		lime__$internal_graphics_ImageCanvasUtil.sync(this.image,false);
		if(this.image != null && this.image.version > this.__textureVersion) {
			if(this.__surface != null) {
				lime_graphics_cairo_CairoSurface.flush(this.__surface);
			}
			var textureImage = this.image;
			if(!openfl_display3D_textures_TextureBase.__supportsBGRA && textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
			}
			this.__texture.__uploadFromImage(textureImage);
			this.__textureVersion = this.image.version;
			this.__textureWidth = textureImage.buffer.width;
			this.__textureHeight = textureImage.buffer.height;
		}
		if(!this.readable && this.image != null) {
			this.__surface = null;
			this.image = null;
		}
		return this.__texture;
	}
	,__drawCanvas: function(source,renderer) {
		var buffer = this.image.buffer;
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,false);
		}
		renderer.__render(source);
		if(!renderer.__allowSmoothing) {
			renderer.applySmoothing(buffer.__srcContext,true);
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
		this.image.dirty = true;
		this.image.version++;
	}
	,__drawGL: function(source,renderer) {
		var context = renderer.__context3D;
		var cacheRTT = context.__state.renderToTexture;
		var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
		context.setRenderToTexture(this.getTexture(context),true);
		renderer.__render(source);
		if(cacheRTT != null) {
			context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			context.setRenderToBackBuffer();
		}
	}
	,__fillRect: function(rect,color,allowFramebuffer) {
		if(rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		if(allowFramebuffer && this.__texture != null && this.__texture.__glFramebuffer != null && openfl_Lib.get_current().stage.__renderer.__type == "opengl") {
			var renderer = openfl_Lib.get_current().stage.__renderer;
			var context = renderer.__context3D;
			var color1 = color;
			var useScissor = !this.rect.equals(rect);
			var cacheRTT = context.__state.renderToTexture;
			var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
			var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
			var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
			context.setRenderToTexture(this.__texture);
			if(useScissor) {
				context.setScissorRectangle(rect);
			}
			context.clear((color1 >>> 16 & 255) / 255,(color1 >>> 8 & 255) / 255,(color1 & 255) / 255,this.transparent ? (color1 >>> 24 & 255) / 255 : 1,0,0,1);
			if(useScissor) {
				context.setScissorRectangle(null);
			}
			if(cacheRTT != null) {
				context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
			} else {
				context.setRenderToBackBuffer();
			}
		} else if(this.readable) {
			this.image.fillRect(rect.__toLimeRectangle(),color,1);
		}
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__textureWidth = this.width;
			this.__textureHeight = this.height;
			this.readable = true;
			this.__isValid = true;
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.rect.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__setUVRect: function(context,x,y,width,height) {
		var buffer = this.getVertexBuffer(context);
		if(buffer != null && (width != this.__uvRect.width || height != this.__uvRect.height || x != this.__uvRect.x || y != this.__uvRect.y)) {
			var gl = context.gl;
			if(this.__uvRect == null) {
				this.__uvRect = new openfl_geom_Rectangle();
			}
			this.__uvRect.setTo(x,y,width,height);
			var uvX = this.__textureWidth > 0 ? x / this.__textureWidth : 0;
			var uvY = this.__textureHeight > 0 ? y / this.__textureHeight : 0;
			var uvWidth = this.__textureWidth > 0 ? width / this.__textureWidth : 0;
			var uvHeight = this.__textureHeight > 0 ? height / this.__textureHeight : 0;
			this.__vertexBufferData[0] = width;
			this.__vertexBufferData[1] = height;
			this.__vertexBufferData[3] = uvX + uvWidth;
			this.__vertexBufferData[4] = uvY + uvHeight;
			this.__vertexBufferData[15] = height;
			this.__vertexBufferData[17] = uvX;
			this.__vertexBufferData[18] = uvY + uvHeight;
			this.__vertexBufferData[28] = width;
			this.__vertexBufferData[31] = uvX + uvWidth;
			this.__vertexBufferData[32] = uvY;
			this.__vertexBufferData[45] = uvX;
			this.__vertexBufferData[46] = uvY;
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
	}
	,__update: function(transformOnly,updateChildren) {
		this.__updateTransforms();
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform.copyFrom(overrideTransform);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
	}
	,__class__: openfl_display_BitmapData
};
var openfl_display_DisplayObjectRenderer = function() {
	openfl_events_EventDispatcher.call(this);
	this.__allowSmoothing = true;
	this.__tempColorTransform = new openfl_geom_ColorTransform();
	this.__worldAlpha = 1;
};
$hxClasses["openfl.display.DisplayObjectRenderer"] = openfl_display_DisplayObjectRenderer;
openfl_display_DisplayObjectRenderer.__name__ = "openfl.display.DisplayObjectRenderer";
openfl_display_DisplayObjectRenderer.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObjectRenderer.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__clear: function() {
	}
	,__getAlpha: function(value) {
		return value * this.__worldAlpha;
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
	}
	,__render: function(object) {
	}
	,__renderEvent: function(displayObject) {
		var renderer = this;
		if(displayObject.__customRenderEvent != null && displayObject.__renderable) {
			displayObject.__customRenderEvent.allowSmoothing = renderer.__allowSmoothing;
			displayObject.__customRenderEvent.objectMatrix.copyFrom(displayObject.__renderTransform);
			displayObject.__customRenderEvent.objectColorTransform.__copyFrom(displayObject.__worldColorTransform);
			displayObject.__customRenderEvent.renderer = renderer;
			switch(renderer.__type) {
			case "cairo":
				displayObject.__customRenderEvent.type = "renderCairo";
				break;
			case "canvas":
				displayObject.__customRenderEvent.type = "renderCanvas";
				break;
			case "dom":
				if(displayObject.stage != null && displayObject.__worldVisible) {
					displayObject.__customRenderEvent.type = "renderDOM";
				} else {
					displayObject.__customRenderEvent.type = "clearDOM";
				}
				break;
			case "opengl":
				if(!renderer.__cleared) {
					renderer.__clear();
				}
				var renderer1 = renderer;
				renderer1.setShader(displayObject.__worldShader);
				renderer1.__context3D.__flushGL();
				displayObject.__customRenderEvent.type = "renderOpenGL";
				break;
			default:
				return;
			}
			renderer.__setBlendMode(displayObject.__worldBlendMode);
			renderer.__pushMaskObject(displayObject);
			displayObject.dispatchEvent(displayObject.__customRenderEvent);
			renderer.__popMaskObject(displayObject);
			if(renderer.__type == "opengl") {
				var renderer1 = renderer;
				renderer1.setViewport();
			}
		}
	}
	,__resize: function(width,height) {
	}
	,__setBlendMode: function(value) {
	}
	,__shouldCacheHardware: function(displayObject,value) {
		if(displayObject == null) {
			return null;
		}
		switch(displayObject.__drawableType) {
		case 4:case 5:
			if(value == true) {
				return true;
			}
			value = this.__shouldCacheHardware_DisplayObject(displayObject,value);
			if(value == true) {
				return true;
			}
			if(displayObject.__children != null) {
				var _g = 0;
				var _g1 = displayObject.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					value = this.__shouldCacheHardware_DisplayObject(child,value);
					if(value == true) {
						return true;
					}
				}
			}
			return value;
		case 7:
			if(value == true) {
				return true;
			} else {
				return false;
			}
			break;
		case 9:
			return true;
		default:
			return this.__shouldCacheHardware_DisplayObject(displayObject,value);
		}
	}
	,__shouldCacheHardware_DisplayObject: function(displayObject,value) {
		if(value == true || displayObject.__filters != null) {
			return true;
		}
		if(value == false || displayObject.__graphics != null && !openfl_display__$internal_Context3DGraphics.isCompatible(displayObject.__graphics)) {
			return false;
		}
		return null;
	}
	,__updateCacheBitmap: function(displayObject,force) {
		if(displayObject == null) {
			return false;
		}
		var renderer = this;
		switch(displayObject.__drawableType) {
		case 2:
			var bitmap = displayObject;
			if(bitmap.__bitmapData == null || bitmap.__filters == null && renderer.__type == "opengl" && bitmap.__cacheBitmap == null) {
				return false;
			}
			force = bitmap.__bitmapData.image != null && bitmap.__bitmapData.image.version != bitmap.__imageVersion;
			break;
		case 7:
			var textField = displayObject;
			if(textField.__filters == null && renderer.__type == "opengl" && textField.__cacheBitmap == null && !textField.__domRender) {
				return false;
			}
			if(force) {
				textField.__renderDirty = true;
			}
			force = force || textField.__dirty;
			break;
		case 9:
			var tilemap = displayObject;
			if(tilemap.__filters == null && renderer.__type == "opengl" && tilemap.__cacheBitmap == null) {
				return false;
			}
			break;
		default:
		}
		if(displayObject.__isCacheBitmapRender) {
			return false;
		}
		var colorTransform = openfl_geom_ColorTransform.__pool.get();
		colorTransform.__copyFrom(displayObject.__worldColorTransform);
		if(renderer.__worldColorTransform != null) {
			colorTransform.__combine(renderer.__worldColorTransform);
		}
		var updated = false;
		if(displayObject.get_cacheAsBitmap() || renderer.__type != "opengl" && !colorTransform.__isDefault(true)) {
			var rect = null;
			var needRender = displayObject.__cacheBitmap == null || displayObject.__renderDirty && (force || displayObject.__children != null && displayObject.__children.length > 0) || displayObject.opaqueBackground != displayObject.__cacheBitmapBackground;
			var softwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__softwareDirty || !displayObject.__cacheBitmapColorTransform.__equals(colorTransform,true);
			var hardwareDirty = needRender || displayObject.__graphics != null && displayObject.__graphics.__hardwareDirty;
			var renderType = renderer.__type;
			if(softwareDirty || hardwareDirty) {
				if(renderType == "opengl") {
					if(this.__shouldCacheHardware(displayObject,null) == false) {
						renderType = "canvas";
					}
				}
				if(softwareDirty && (renderType == "canvas" || renderType == "cairo")) {
					needRender = true;
				}
				if(hardwareDirty && renderType == "opengl") {
					needRender = true;
				}
			}
			var updateTransform = needRender || !displayObject.__cacheBitmap.__worldTransform.equals(displayObject.__worldTransform);
			var hasFilters = displayObject.__filters != null;
			if(hasFilters && !needRender) {
				var _g = 0;
				var _g1 = displayObject.__filters;
				while(_g < _g1.length) {
					var filter = _g1[_g];
					++_g;
					if(filter.__renderDirty) {
						needRender = true;
						break;
					}
				}
			}
			if(displayObject.__cacheBitmapMatrix == null) {
				displayObject.__cacheBitmapMatrix = new openfl_geom_Matrix();
			}
			var bitmapMatrix = displayObject.__cacheAsBitmapMatrix != null ? displayObject.__cacheAsBitmapMatrix : displayObject.__renderTransform;
			if(!needRender && (bitmapMatrix.a != displayObject.__cacheBitmapMatrix.a || bitmapMatrix.b != displayObject.__cacheBitmapMatrix.b || bitmapMatrix.c != displayObject.__cacheBitmapMatrix.c || bitmapMatrix.d != displayObject.__cacheBitmapMatrix.d)) {
				needRender = true;
			}
			if(!needRender && renderer.__type != "opengl" && displayObject.__cacheBitmapData != null && displayObject.__cacheBitmapData.image != null && displayObject.__cacheBitmapData.image.version < displayObject.__cacheBitmapData.__textureVersion) {
				needRender = true;
			}
			displayObject.__cacheBitmapMatrix.copyFrom(bitmapMatrix);
			displayObject.__cacheBitmapMatrix.tx = 0;
			displayObject.__cacheBitmapMatrix.ty = 0;
			var bitmapWidth = 0;
			var bitmapHeight = 0;
			var filterWidth = 0;
			var filterHeight = 0;
			var offsetX = 0.;
			var offsetY = 0.;
			if(updateTransform || needRender) {
				rect = openfl_geom_Rectangle.__pool.get();
				displayObject.__getFilterBounds(rect,displayObject.__cacheBitmapMatrix);
				filterWidth = Math.ceil(rect.width);
				filterHeight = Math.ceil(rect.height);
				offsetX = rect.x > 0 ? Math.ceil(rect.x) : Math.floor(rect.x);
				offsetY = rect.y > 0 ? Math.ceil(rect.y) : Math.floor(rect.y);
				if(displayObject.__cacheBitmapData != null) {
					if(filterWidth > displayObject.__cacheBitmapData.width || filterHeight > displayObject.__cacheBitmapData.height) {
						bitmapWidth = Math.ceil(Math.max(filterWidth * 1.25,displayObject.__cacheBitmapData.width));
						bitmapHeight = Math.ceil(Math.max(filterHeight * 1.25,displayObject.__cacheBitmapData.height));
						needRender = true;
					} else {
						bitmapWidth = displayObject.__cacheBitmapData.width;
						bitmapHeight = displayObject.__cacheBitmapData.height;
					}
				} else {
					bitmapWidth = filterWidth;
					bitmapHeight = filterHeight;
				}
			}
			if(needRender) {
				updateTransform = true;
				displayObject.__cacheBitmapBackground = displayObject.opaqueBackground;
				if(filterWidth >= 0.5 && filterHeight >= 0.5) {
					var needsFill = displayObject.opaqueBackground != null && (bitmapWidth != filterWidth || bitmapHeight != filterHeight);
					var fillColor = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
					var bitmapColor = needsFill ? 0 : fillColor;
					var allowFramebuffer = renderer.__type == "opengl";
					if(displayObject.__cacheBitmapData == null || bitmapWidth > displayObject.__cacheBitmapData.width || bitmapHeight > displayObject.__cacheBitmapData.height) {
						displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,bitmapColor);
						if(displayObject.__cacheBitmap == null) {
							displayObject.__cacheBitmap = new openfl_display_Bitmap();
						}
						displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						displayObject.__cacheBitmapRenderer = null;
					} else {
						displayObject.__cacheBitmapData.__fillRect(displayObject.__cacheBitmapData.rect,bitmapColor,allowFramebuffer);
					}
					if(needsFill) {
						rect.setTo(0,0,filterWidth,filterHeight);
						displayObject.__cacheBitmapData.__fillRect(rect,fillColor,allowFramebuffer);
					}
				} else {
					openfl_geom_ColorTransform.__pool.release(colorTransform);
					displayObject.__cacheBitmap = null;
					displayObject.__cacheBitmapData = null;
					displayObject.__cacheBitmapData2 = null;
					displayObject.__cacheBitmapData3 = null;
					displayObject.__cacheBitmapRenderer = null;
					if(displayObject.__drawableType == 7) {
						var textField = displayObject;
						if(textField.__cacheBitmap != null) {
							textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX;
							textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY;
						}
					}
					return true;
				}
			} else {
				displayObject.__cacheBitmapData = displayObject.__cacheBitmap.get_bitmapData();
				displayObject.__cacheBitmapData2 = null;
				displayObject.__cacheBitmapData3 = null;
			}
			if(updateTransform || needRender) {
				displayObject.__cacheBitmap.__worldTransform.copyFrom(displayObject.__worldTransform);
				if(bitmapMatrix == displayObject.__renderTransform) {
					displayObject.__cacheBitmap.__renderTransform.identity();
					displayObject.__cacheBitmap.__renderTransform.tx = displayObject.__renderTransform.tx + offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty = displayObject.__renderTransform.ty + offsetY;
				} else {
					displayObject.__cacheBitmap.__renderTransform.copyFrom(displayObject.__cacheBitmapMatrix);
					displayObject.__cacheBitmap.__renderTransform.invert();
					displayObject.__cacheBitmap.__renderTransform.concat(displayObject.__renderTransform);
					displayObject.__cacheBitmap.__renderTransform.tx += offsetX;
					displayObject.__cacheBitmap.__renderTransform.ty += offsetY;
				}
			}
			displayObject.__cacheBitmap.smoothing = renderer.__allowSmoothing;
			displayObject.__cacheBitmap.__renderable = displayObject.__renderable;
			displayObject.__cacheBitmap.__worldAlpha = displayObject.__worldAlpha;
			displayObject.__cacheBitmap.__worldBlendMode = displayObject.__worldBlendMode;
			displayObject.__cacheBitmap.__worldShader = displayObject.__worldShader;
			displayObject.__cacheBitmap.set_mask(displayObject.__mask);
			if(needRender) {
				if(displayObject.__cacheBitmapRenderer == null || renderType != displayObject.__cacheBitmapRenderer.__type) {
					if(renderType == "opengl") {
						displayObject.__cacheBitmapRenderer = new openfl_display_OpenGLRenderer((js_Boot.__cast(renderer , openfl_display_OpenGLRenderer)).__context3D,displayObject.__cacheBitmapData);
					} else {
						if(displayObject.__cacheBitmapData.image == null) {
							var color = displayObject.opaqueBackground != null ? -16777216 | displayObject.opaqueBackground : 0;
							displayObject.__cacheBitmapData = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,color);
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
						}
						lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(displayObject.__cacheBitmapData.image);
						displayObject.__cacheBitmapRenderer = new openfl_display_CanvasRenderer(displayObject.__cacheBitmapData.image.buffer.__srcContext);
					}
					displayObject.__cacheBitmapRenderer.__worldTransform = new openfl_geom_Matrix();
					displayObject.__cacheBitmapRenderer.__worldColorTransform = new openfl_geom_ColorTransform();
				}
				if(displayObject.__cacheBitmapColorTransform == null) {
					displayObject.__cacheBitmapColorTransform = new openfl_geom_ColorTransform();
				}
				displayObject.__cacheBitmapRenderer.__stage = displayObject.stage;
				displayObject.__cacheBitmapRenderer.__allowSmoothing = renderer.__allowSmoothing;
				displayObject.__cacheBitmapRenderer.__setBlendMode(10);
				displayObject.__cacheBitmapRenderer.__worldAlpha = 1 / displayObject.__worldAlpha;
				displayObject.__cacheBitmapRenderer.__worldTransform.copyFrom(displayObject.__renderTransform);
				displayObject.__cacheBitmapRenderer.__worldTransform.invert();
				displayObject.__cacheBitmapRenderer.__worldTransform.concat(displayObject.__cacheBitmapMatrix);
				displayObject.__cacheBitmapRenderer.__worldTransform.tx -= offsetX;
				displayObject.__cacheBitmapRenderer.__worldTransform.ty -= offsetY;
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__copyFrom(colorTransform);
				displayObject.__cacheBitmapRenderer.__worldColorTransform.__invert();
				displayObject.__isCacheBitmapRender = true;
				if(displayObject.__cacheBitmapRenderer.__type == "opengl") {
					var parentRenderer = renderer;
					var childRenderer = displayObject.__cacheBitmapRenderer;
					var context = childRenderer.__context3D;
					var cacheRTT = context.__state.renderToTexture;
					var cacheRTTDepthStencil = context.__state.renderToTextureDepthStencil;
					var cacheRTTAntiAlias = context.__state.renderToTextureAntiAlias;
					var cacheRTTSurfaceSelector = context.__state.renderToTextureSurfaceSelector;
					var cacheBlendMode = parentRenderer.__blendMode;
					parentRenderer.__suspendClipAndMask();
					childRenderer.__copyShader(parentRenderer);
					displayObject.__cacheBitmapData.__setUVRect(context,0,0,filterWidth,filterHeight);
					childRenderer.__setRenderTarget(displayObject.__cacheBitmapData);
					if(displayObject.__cacheBitmapData.image != null) {
						displayObject.__cacheBitmapData.__textureVersion = displayObject.__cacheBitmapData.image.version + 1;
					}
					displayObject.__cacheBitmapData.__drawGL(displayObject,childRenderer);
					if(hasFilters) {
						var needSecondBitmapData = true;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(displayObject.__cacheBitmapData2 == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
							displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
						} else {
							displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							if(displayObject.__cacheBitmapData2.image != null) {
								displayObject.__cacheBitmapData2.__textureVersion = displayObject.__cacheBitmapData2.image.version + 1;
							}
						}
						displayObject.__cacheBitmapData2.__setUVRect(context,0,0,filterWidth,filterHeight);
						bitmap2 = displayObject.__cacheBitmapData2;
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
								if(displayObject.__cacheBitmapData3.image != null) {
									displayObject.__cacheBitmapData3.__textureVersion = displayObject.__cacheBitmapData3.image.version + 1;
								}
							}
							displayObject.__cacheBitmapData3.__setUVRect(context,0,0,filterWidth,filterHeight);
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						childRenderer.__setBlendMode(10);
						childRenderer.__worldAlpha = 1;
						childRenderer.__worldTransform.identity();
						childRenderer.__worldColorTransform.__identity();
						var shader;
						var cacheBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								childRenderer.__setRenderTarget(bitmap3);
								childRenderer.__renderFilterPass(bitmap,childRenderer.__defaultDisplayShader,filter.__smooth);
							}
							var _g2 = 0;
							var _g3 = filter.__numShaderPasses;
							while(_g2 < _g3) {
								var i = _g2++;
								shader = filter.__initShader(childRenderer,i,filter.__preserveObject ? bitmap3 : null);
								childRenderer.__setBlendMode(filter.__shaderBlendMode);
								childRenderer.__setRenderTarget(bitmap2);
								childRenderer.__renderFilterPass(bitmap,shader,filter.__smooth);
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
							filter.__renderDirty = false;
						}
						displayObject.__cacheBitmap.__bitmapData = bitmap;
					}
					parentRenderer.__blendMode = 10;
					parentRenderer.__setBlendMode(cacheBlendMode);
					parentRenderer.__copyShader(childRenderer);
					if(cacheRTT != null) {
						context.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
					} else {
						context.setRenderToBackBuffer();
					}
					parentRenderer.__resumeClipAndMask(childRenderer);
					parentRenderer.setViewport();
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
				} else {
					displayObject.__cacheBitmapData.__drawCanvas(displayObject,displayObject.__cacheBitmapRenderer);
					if(hasFilters) {
						var needSecondBitmapData = false;
						var needCopyOfOriginal = false;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__needSecondBitmapData) {
								needSecondBitmapData = true;
							}
							if(filter.__preserveObject) {
								needCopyOfOriginal = true;
							}
						}
						var bitmap = displayObject.__cacheBitmapData;
						var bitmap2 = null;
						var bitmap3 = null;
						if(needSecondBitmapData) {
							if(displayObject.__cacheBitmapData2 == null || displayObject.__cacheBitmapData2.image == null || bitmapWidth > displayObject.__cacheBitmapData2.width || bitmapHeight > displayObject.__cacheBitmapData2.height) {
								displayObject.__cacheBitmapData2 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData2.fillRect(displayObject.__cacheBitmapData2.rect,0);
							}
							bitmap2 = displayObject.__cacheBitmapData2;
						} else {
							bitmap2 = bitmap;
						}
						if(needCopyOfOriginal) {
							if(displayObject.__cacheBitmapData3 == null || displayObject.__cacheBitmapData3.image == null || bitmapWidth > displayObject.__cacheBitmapData3.width || bitmapHeight > displayObject.__cacheBitmapData3.height) {
								displayObject.__cacheBitmapData3 = new openfl_display_BitmapData(bitmapWidth,bitmapHeight,true,0);
							} else {
								displayObject.__cacheBitmapData3.fillRect(displayObject.__cacheBitmapData3.rect,0);
							}
							bitmap3 = displayObject.__cacheBitmapData3;
						}
						if(displayObject.__tempPoint == null) {
							displayObject.__tempPoint = new openfl_geom_Point();
						}
						var destPoint = displayObject.__tempPoint;
						var cacheBitmap;
						var lastBitmap;
						var _g = 0;
						var _g1 = displayObject.__filters;
						while(_g < _g1.length) {
							var filter = _g1[_g];
							++_g;
							if(filter.__preserveObject) {
								bitmap3.copyPixels(bitmap,bitmap.rect,destPoint);
							}
							lastBitmap = filter.__applyFilter(bitmap2,bitmap,bitmap.rect,destPoint);
							if(filter.__preserveObject) {
								lastBitmap.draw(bitmap3,null,displayObject.__objectTransform != null ? displayObject.__objectTransform.__colorTransform : null);
							}
							filter.__renderDirty = false;
							if(needSecondBitmapData && lastBitmap == bitmap2) {
								cacheBitmap = bitmap;
								bitmap = bitmap2;
								bitmap2 = cacheBitmap;
							}
						}
						if(displayObject.__cacheBitmapData != bitmap) {
							cacheBitmap = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapData = bitmap;
							displayObject.__cacheBitmapData2 = cacheBitmap;
							displayObject.__cacheBitmap.__bitmapData = displayObject.__cacheBitmapData;
							displayObject.__cacheBitmapRenderer = null;
						}
						displayObject.__cacheBitmap.__imageVersion = displayObject.__cacheBitmapData.__textureVersion;
					}
					displayObject.__cacheBitmapColorTransform.__copyFrom(colorTransform);
					if(!displayObject.__cacheBitmapColorTransform.__isDefault(true)) {
						displayObject.__cacheBitmapColorTransform.alphaMultiplier = 1;
						displayObject.__cacheBitmapData.colorTransform(displayObject.__cacheBitmapData.rect,displayObject.__cacheBitmapColorTransform);
					}
				}
				displayObject.__isCacheBitmapRender = false;
			}
			if(updateTransform || needRender) {
				openfl_geom_Rectangle.__pool.release(rect);
			}
			updated = updateTransform;
		} else if(displayObject.__cacheBitmap != null) {
			if(renderer.__type == "dom") {
				var domRenderer = renderer;
				domRenderer.__renderDrawableClear(displayObject.__cacheBitmap);
			}
			displayObject.__cacheBitmap = null;
			displayObject.__cacheBitmapData = null;
			displayObject.__cacheBitmapData2 = null;
			displayObject.__cacheBitmapData3 = null;
			displayObject.__cacheBitmapColorTransform = null;
			displayObject.__cacheBitmapRenderer = null;
			updated = true;
		}
		openfl_geom_ColorTransform.__pool.release(colorTransform);
		if(updated && displayObject.__drawableType == 7) {
			var textField = displayObject;
			if(textField.__cacheBitmap != null) {
				textField.__cacheBitmap.__renderTransform.tx -= textField.__offsetX;
				textField.__cacheBitmap.__renderTransform.ty -= textField.__offsetY;
			}
		}
		return updated;
	}
	,__class__: openfl_display_DisplayObjectRenderer
});
var openfl_display_CairoRenderer = function(cairo) {
	openfl_display_DisplayObjectRenderer.call(this);
};
$hxClasses["openfl.display.CairoRenderer"] = openfl_display_CairoRenderer;
openfl_display_CairoRenderer.__name__ = "openfl.display.CairoRenderer";
openfl_display_CairoRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CairoRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applyMatrix: function(transform,cairo) {
		if(cairo == null) {
			cairo = this.cairo;
		}
		this.__matrix.copyFrom(transform);
		if(this.cairo == cairo && this.__worldTransform != null) {
			this.__matrix.concat(this.__worldTransform);
		}
		this.__matrix3.a = this.__matrix.a;
		this.__matrix3.b = this.__matrix.b;
		this.__matrix3.c = this.__matrix.c;
		this.__matrix3.d = this.__matrix.d;
		if(this.__roundPixels) {
			this.__matrix3.tx = Math.round(this.__matrix.tx);
			this.__matrix3.ty = Math.round(this.__matrix.ty);
		} else {
			this.__matrix3.tx = this.__matrix.tx;
			this.__matrix3.ty = this.__matrix.ty;
		}
		cairo.set_matrix(this.__matrix3);
	}
	,__clear: function() {
		if(this.cairo == null) {
			return;
		}
		this.cairo.identityMatrix();
		if(this.__stage != null && this.__stage.__clearBeforeRender) {
			var cacheBlendMode = this.__blendMode;
			this.__setBlendMode(10);
			this.cairo.setSourceRGB(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2]);
			this.cairo.paint();
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.cairo.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.cairo.restore();
	}
	,__pushMask: function(mask) {
		this.cairo.save();
		this.applyMatrix(mask.__renderTransform,this.cairo);
		this.cairo.newPath();
		this.__renderDrawableMask(mask);
		this.cairo.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.cairo.save();
		this.applyMatrix(transform,this.cairo);
		this.cairo.newPath();
		this.cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		this.cairo.clip();
	}
	,__render: function(object) {
		if(this.cairo == null) {
			return;
		}
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			var simpleButton = object;
			if(!(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null)) {
				this.__pushMaskObject(simpleButton);
				this.__renderDrawable(simpleButton.__currentState);
				this.__popMaskObject(simpleButton);
				this.__renderEvent(simpleButton);
			}
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			var bitmap = object;
			this.cairo.rectangle(0,0,bitmap.get_width(),bitmap.get_height());
			break;
		case 3:
			break;
		case 4:case 5:
			break;
		case 6:
			this.__renderDrawableMask(object.__currentState);
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeCairo(this.cairo,value);
	}
	,__setBlendModeCairo: function(cairo,value) {
		switch(value) {
		case 0:
			cairo.setOperator(12);
			break;
		case 2:
			cairo.setOperator(17);
			break;
		case 3:
			cairo.setOperator(23);
			break;
		case 5:
			cairo.setOperator(21);
			break;
		case 7:
			cairo.setOperator(2);
			break;
		case 8:
			cairo.setOperator(18);
			break;
		case 9:
			cairo.setOperator(14);
			break;
		case 11:
			cairo.setOperator(16);
			break;
		case 12:
			cairo.setOperator(15);
			break;
		default:
			cairo.setOperator(2);
		}
	}
	,__class__: openfl_display_CairoRenderer
});
var openfl_display_CanvasRenderer = function(context) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.context = context;
	this.__tempMatrix = new openfl_geom_Matrix();
	this.__type = "canvas";
};
$hxClasses["openfl.display.CanvasRenderer"] = openfl_display_CanvasRenderer;
openfl_display_CanvasRenderer.__name__ = "openfl.display.CanvasRenderer";
openfl_display_CanvasRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_CanvasRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applySmoothing: function(context,value) {
		context.imageSmoothingEnabled = value;
	}
	,setTransform: function(transform,context) {
		if(context == null) {
			context = this.context;
		} else if(this.context == context && this.__worldTransform != null) {
			this.__tempMatrix.copyFrom(transform);
			this.__tempMatrix.concat(this.__worldTransform);
			transform = this.__tempMatrix;
		}
		if(this.__roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
	}
	,__clear: function() {
		if(this.__stage != null) {
			var cacheBlendMode = this.__blendMode;
			this.__blendMode = null;
			this.__setBlendMode(10);
			this.context.setTransform(1,0,0,1,0,0);
			this.context.globalAlpha = 1;
			if(!this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.fillStyle = this.__stage.__colorString;
				this.context.fillRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			} else if(this.__stage.__transparent && this.__stage.__clearBeforeRender) {
				this.context.clearRect(0,0,this.__stage.stageWidth * this.__stage.window.__scale,this.__stage.stageHeight * this.__stage.window.__scale);
			}
			this.__setBlendMode(cacheBlendMode);
		}
	}
	,__popMask: function() {
		this.context.restore();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		this.context.restore();
	}
	,__pushMask: function(mask) {
		this.context.save();
		this.setTransform(mask.__renderTransform,this.context);
		this.context.beginPath();
		this.__renderDrawableMask(mask);
		this.context.closePath();
		this.context.clip();
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(!object.__isCacheBitmapRender && object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		this.context.save();
		this.setTransform(transform,this.context);
		this.context.beginPath();
		this.context.rect(rect.x,rect.y,rect.width,rect.height);
		this.context.clip();
	}
	,__render: function(object) {
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_CanvasBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_CanvasBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_CanvasSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_CanvasTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_CanvasVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_CanvasTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		this.__setBlendModeContext(this.context,value);
	}
	,__setBlendModeContext: function(context,value) {
		switch(value) {
		case 0:
			context.globalCompositeOperation = "lighter";
			break;
		case 2:
			context.globalCompositeOperation = "darken";
			break;
		case 3:
			context.globalCompositeOperation = "difference";
			break;
		case 5:
			context.globalCompositeOperation = "hard-light";
			break;
		case 8:
			context.globalCompositeOperation = "lighten";
			break;
		case 9:
			context.globalCompositeOperation = "multiply";
			break;
		case 11:
			context.globalCompositeOperation = "overlay";
			break;
		case 12:
			context.globalCompositeOperation = "screen";
			break;
		default:
			context.globalCompositeOperation = "source-over";
		}
	}
	,__class__: openfl_display_CanvasRenderer
});
var openfl_display_CapsStyle = {};
openfl_display_CapsStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DOMElement = function(element) {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 10;
	this.__element = element;
};
$hxClasses["openfl.display.DOMElement"] = openfl_display_DOMElement;
openfl_display_DOMElement.__name__ = "openfl.display.DOMElement";
openfl_display_DOMElement.__super__ = openfl_display_DisplayObject;
openfl_display_DOMElement.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__class__: openfl_display_DOMElement
});
var openfl_display_DOMRenderer = function(element) {
	this.pixelRatio = 1;
	openfl_display_DisplayObjectRenderer.call(this);
	this.element = element;
	openfl_display_DisplayObject.__supportDOM = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.__vendorPrefix = prefix.lowercase;
	this.__transformProperty = prefix.lowercase == "webkit" ? "-webkit-transform" : "transform";
	this.__transformOriginProperty = prefix.lowercase == "webkit" ? "-webkit-transform-origin" : "transform-origin";
	this.__clipRects = [];
	this.__numClipRects = 0;
	this.__z = 0;
	this.__type = "dom";
	this.__canvasRenderer = new openfl_display_CanvasRenderer(null);
	this.__canvasRenderer.__isDOM = true;
};
$hxClasses["openfl.display.DOMRenderer"] = openfl_display_DOMRenderer;
openfl_display_DOMRenderer.__name__ = "openfl.display.DOMRenderer";
openfl_display_DOMRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_DOMRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	__applyStyle: function(displayObject,setTransform,setAlpha,setClip) {
		var style = displayObject.__style;
		if(setTransform && displayObject.__renderTransformChanged) {
			var _this = displayObject.__renderTransform;
			var roundPixels = this.__roundPixels;
			if(roundPixels == null) {
				roundPixels = false;
			}
			style.setProperty(this.__transformProperty,roundPixels ? "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)" : "matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
		}
		if(displayObject.__worldZ != ++this.__z) {
			displayObject.__worldZ = this.__z;
			style.setProperty("z-index",displayObject.__worldZ == null ? "null" : "" + displayObject.__worldZ,null);
		}
		if(setAlpha && displayObject.__worldAlphaChanged) {
			if(displayObject.__worldAlpha < 1) {
				style.setProperty("opacity",displayObject.__worldAlpha == null ? "null" : "" + displayObject.__worldAlpha,null);
			} else {
				style.removeProperty("opacity");
			}
		}
		if(setClip && displayObject.__worldClipChanged) {
			if(displayObject.__worldClip == null) {
				style.removeProperty("clip");
			} else {
				var clip = displayObject.__worldClip;
				style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
			}
		}
	}
	,__initializeElement: function(displayObject,element) {
		var style = displayObject.__style = element.style;
		style.setProperty("position","absolute",null);
		style.setProperty("top","0",null);
		style.setProperty("left","0",null);
		style.setProperty(this.__transformOriginProperty,"0 0 0",null);
		this.element.appendChild(element);
		displayObject.__worldAlphaChanged = true;
		displayObject.__renderTransformChanged = true;
		displayObject.__worldVisibleChanged = true;
		displayObject.__worldClipChanged = true;
		displayObject.__worldClip = null;
		displayObject.__worldZ = -1;
	}
	,__popMask: function() {
		this.__popMaskRect();
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__popMaskRect();
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__currentClipRect = this.__clipRects[this.__numClipRects - 1];
			} else {
				this.__currentClipRect = null;
			}
		}
	}
	,__pushMask: function(mask) {
		this.__pushMaskRect(mask.getBounds(mask),mask.__renderTransform);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,transform);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		this.__currentClipRect = clipRect;
		this.__numClipRects++;
	}
	,__render: function(object) {
		if(!this.__stage.__transparent) {
			this.element.style.background = this.__stage.__colorString;
		} else {
			this.element.style.background = "none";
		}
		this.__z = 1;
		this.__renderDrawable(object);
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawable(object,this);
			break;
		case 10:
			var domElement = object;
			if(domElement.stage != null && domElement.__worldVisible && domElement.__renderable) {
				if(!domElement.__active) {
					this.__initializeElement(domElement,domElement.__element);
					domElement.__active = true;
				}
				this.__updateClip(domElement);
				this.__applyStyle(domElement,true,true,true);
			} else if(domElement.__active) {
				this.element.removeChild(domElement.__element);
				domElement.__active = false;
			}
			openfl_display__$internal_DOMDisplayObject.renderDrawable(domElement,this);
			break;
		default:
		}
	}
	,__renderDrawableClear: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			break;
		case 2:
			openfl_display__$internal_DOMBitmap.renderDrawableClear(object,this);
			break;
		case 3:
			openfl_display__$internal_DOMDisplayObject.renderDrawableClear(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear(object,this);
			break;
		case 6:
			openfl_display__$internal_DOMSimpleButton.renderDrawableClear(object,this);
			break;
		case 7:
			openfl_display__$internal_DOMTextField.renderDrawableClear(object,this);
			break;
		case 8:
			openfl_display__$internal_DOMVideo.renderDrawableClear(object,this);
			break;
		case 9:
			openfl_display__$internal_DOMTilemap.renderDrawableClear(object,this);
			break;
		default:
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
	}
	,__updateClip: function(displayObject) {
		if(this.__currentClipRect == null) {
			displayObject.__worldClipChanged = displayObject.__worldClip != null;
			displayObject.__worldClip = null;
		} else {
			if(displayObject.__worldClip == null) {
				displayObject.__worldClip = new openfl_geom_Rectangle();
			}
			var clip = openfl_geom_Rectangle.__pool.get();
			var matrix = openfl_geom_Matrix.__pool.get();
			matrix.copyFrom(displayObject.__renderTransform);
			matrix.invert();
			this.__currentClipRect.__transform(clip,matrix);
			if(clip.equals(displayObject.__worldClip)) {
				displayObject.__worldClipChanged = false;
			} else {
				displayObject.__worldClip.copyFrom(clip);
				displayObject.__worldClipChanged = true;
			}
			openfl_geom_Rectangle.__pool.release(clip);
			openfl_geom_Matrix.__pool.release(matrix);
		}
	}
	,__class__: openfl_display_DOMRenderer
});
var openfl_display_Shader = function(code) {
	this.byteCode = code;
	this.precisionHint = 1;
	this.__glSourceDirty = true;
	this.__numPasses = 1;
	this.__data = openfl_display_ShaderData._new(code);
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = "openfl.display.Shader";
openfl_display_Shader.prototype = {
	__clearUseArray: function() {
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__useArray = false;
		}
	}
	,__createGLShader: function(source,type) {
		var gl = this.__context.gl;
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
			var message = type == gl.VERTEX_SHADER ? "Error compiling vertex shader" : "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(shader);
			message += "\n" + source;
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 331, className : "openfl.display.Shader", methodName : "__createGLShader"});
		}
		return shader;
	}
	,__createGLProgram: function(vertexSource,fragmentSource) {
		var gl = this.__context.gl;
		var vertexShader = this.__createGLShader(vertexSource,gl.VERTEX_SHADER);
		var fragmentShader = this.__createGLShader(fragmentSource,gl.FRAGMENT_SHADER);
		var program = gl.createProgram();
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var param = _g1[_g];
			++_g;
			if(param.name.indexOf("Position") > -1 && StringTools.startsWith(param.name,"openfl_")) {
				gl.bindAttribLocation(program,0,param.name);
				break;
			}
		}
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(program);
			lime_utils_Log.error(message,{ fileName : "openfl/display/Shader.hx", lineNumber : 364, className : "openfl.display.Shader", methodName : "__createGLProgram"});
		}
		return program;
	}
	,__disable: function() {
		if(this.program != null) {
			this.__disableGL();
		}
	}
	,__disableGL: function() {
		var gl = this.__context.gl;
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__disableGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__disableGL(this.__context);
		}
		this.__context.__bindGLArrayBuffer(null);
		if(this.__context.__context.type == "opengl") {
			gl.disable(gl.TEXTURE_2D);
		}
	}
	,__enable: function() {
		this.__init();
		if(this.program != null) {
			this.__enableGL();
		}
	}
	,__enableGL: function() {
		var textureCount = 0;
		var gl = this.__context.gl;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			gl.uniform1i(input.index,textureCount);
			++textureCount;
		}
		if(this.__context.__context.type == "opengl" && textureCount > 0) {
			gl.enable(gl.TEXTURE_2D);
		}
	}
	,__init: function() {
		if(this.__data == null) {
			this.__data = openfl_display_ShaderData._new(null);
		}
		if(this.__glFragmentSource != null && this.__glVertexSource != null && (this.program == null || this.__glSourceDirty)) {
			this.__initGL();
		}
	}
	,__initGL: function() {
		if(this.__glSourceDirty || this.__paramBool == null) {
			this.__glSourceDirty = false;
			this.program = null;
			this.__inputBitmapData = [];
			this.__paramBool = [];
			this.__paramFloat = [];
			this.__paramInt = [];
			this.__processGLData(this.get_glVertexSource(),"attribute");
			this.__processGLData(this.get_glVertexSource(),"uniform");
			this.__processGLData(this.get_glFragmentSource(),"uniform");
		}
		if(this.__context != null && this.program == null) {
			var gl = this.__context.gl;
			var prefix = "#ifdef GL_ES\n\t\t\t\t" + (this.precisionHint == 1 ? "#ifdef GL_FRAGMENT_PRECISION_HIGH\n\t\t\t\tprecision highp float;\n\t\t\t\t#else\n\t\t\t\tprecision mediump float;\n\t\t\t\t#endif" : "precision lowp float;") + "\n\t\t\t\t#endif\n\t\t\t\t";
			var vertex = prefix + this.get_glVertexSource();
			var fragment = prefix + this.get_glFragmentSource();
			var id = vertex + fragment;
			if(Object.prototype.hasOwnProperty.call(this.__context.__programs.h,id)) {
				this.program = this.__context.__programs.h[id];
			} else {
				this.program = this.__context.createProgram(1);
				this.program.__glProgram = this.__createGLProgram(vertex,fragment);
				this.__context.__programs.h[id] = this.program;
			}
			if(this.program != null) {
				this.glProgram = this.program.__glProgram;
				var _g = 0;
				var _g1 = this.__inputBitmapData;
				while(_g < _g1.length) {
					var input = _g1[_g];
					++_g;
					if(input.__isUniform) {
						input.index = gl.getUniformLocation(this.glProgram,input.name);
					} else {
						input.index = gl.getAttribLocation(this.glProgram,input.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramBool;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramFloat;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
				var _g = 0;
				var _g1 = this.__paramInt;
				while(_g < _g1.length) {
					var parameter = _g1[_g];
					++_g;
					if(parameter.__isUniform) {
						parameter.index = gl.getUniformLocation(this.glProgram,parameter.name);
					} else {
						parameter.index = gl.getAttribLocation(this.glProgram,parameter.name);
					}
				}
			}
		}
	}
	,__processGLData: function(source,storageType) {
		var lastMatch = 0;
		var position;
		var regex;
		var name;
		var type;
		if(storageType == "uniform") {
			regex = new EReg("uniform ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		} else {
			regex = new EReg("attribute ([A-Za-z0-9]+) ([A-Za-z0-9_]+)","");
		}
		while(regex.matchSub(source,lastMatch)) {
			type = regex.matched(1);
			name = regex.matched(2);
			if(StringTools.startsWith(name,"gl_")) {
				continue;
			}
			var isUniform = storageType == "uniform";
			if(StringTools.startsWith(type,"sampler")) {
				var input = new openfl_display_ShaderInput();
				input.name = name;
				input.__isUniform = isUniform;
				this.__inputBitmapData.push(input);
				switch(name) {
				case "bitmap":
					this.__bitmap = input;
					break;
				case "openfl_Texture":
					this.__texture = input;
					break;
				default:
				}
				this.__data[name] = input;
				if(this.__isGenerated) {
					this[name] = input;
				}
			} else if(!Object.prototype.hasOwnProperty.call(this.__data,name) || Reflect.field(this.__data,name) == null) {
				var parameterType;
				switch(type) {
				case "bool":
					parameterType = 0;
					break;
				case "bvec2":
					parameterType = 1;
					break;
				case "bvec3":
					parameterType = 2;
					break;
				case "bvec4":
					parameterType = 3;
					break;
				case "dvec2":case "vec2":
					parameterType = 5;
					break;
				case "dvec3":case "vec3":
					parameterType = 6;
					break;
				case "double":case "float":
					parameterType = 4;
					break;
				case "ivec3":case "uvec3":
					parameterType = 10;
					break;
				case "ivec4":case "uvec4":
					parameterType = 11;
					break;
				case "mat2":case "mat2x2":
					parameterType = 12;
					break;
				case "mat2x3":
					parameterType = 13;
					break;
				case "mat2x4":
					parameterType = 14;
					break;
				case "mat3x2":
					parameterType = 15;
					break;
				case "mat3":case "mat3x3":
					parameterType = 16;
					break;
				case "mat3x4":
					parameterType = 17;
					break;
				case "mat4":case "mat4x4":
					parameterType = 20;
					break;
				case "mat4x2":
					parameterType = 18;
					break;
				case "mat4x3":
					parameterType = 19;
					break;
				case "int":case "uint":
					parameterType = 8;
					break;
				case "ivec2":case "uvec2":
					parameterType = 9;
					break;
				case "dvec4":case "vec4":
					parameterType = 7;
					break;
				default:
					parameterType = null;
				}
				var length;
				switch(parameterType) {
				case 1:case 5:case 9:
					length = 2;
					break;
				case 3:case 7:case 11:case 12:
					length = 4;
					break;
				case 2:case 6:case 10:
					length = 3;
					break;
				case 16:
					length = 9;
					break;
				case 20:
					length = 16;
					break;
				default:
					length = 1;
				}
				var arrayLength;
				switch(parameterType) {
				case 12:
					arrayLength = 2;
					break;
				case 16:
					arrayLength = 3;
					break;
				case 20:
					arrayLength = 4;
					break;
				default:
					arrayLength = 1;
				}
				switch(parameterType) {
				case 0:case 1:case 2:case 3:
					var parameter = new openfl_display_ShaderParameter();
					parameter.set_name(name);
					parameter.type = parameterType;
					parameter.__arrayLength = arrayLength;
					parameter.__isBool = true;
					parameter.__isUniform = isUniform;
					parameter.__length = length;
					this.__paramBool.push(parameter);
					if(name == "openfl_HasColorTransform") {
						this.__hasColorTransform = parameter;
					}
					this.__data[name] = parameter;
					if(this.__isGenerated) {
						this[name] = parameter;
					}
					break;
				case 8:case 9:case 10:case 11:
					var parameter1 = new openfl_display_ShaderParameter();
					parameter1.set_name(name);
					parameter1.type = parameterType;
					parameter1.__arrayLength = arrayLength;
					parameter1.__isInt = true;
					parameter1.__isUniform = isUniform;
					parameter1.__length = length;
					this.__paramInt.push(parameter1);
					this.__data[name] = parameter1;
					if(this.__isGenerated) {
						this[name] = parameter1;
					}
					break;
				default:
					var parameter2 = new openfl_display_ShaderParameter();
					parameter2.set_name(name);
					parameter2.type = parameterType;
					parameter2.__arrayLength = arrayLength;
					if(arrayLength > 0) {
						var elements = arrayLength * arrayLength;
						var array = null;
						var vector = null;
						var view = null;
						var buffer = null;
						var len = null;
						var this1;
						if(elements != null) {
							this1 = new Float32Array(elements);
						} else if(array != null) {
							this1 = new Float32Array(array);
						} else if(vector != null) {
							this1 = new Float32Array(vector.__array);
						} else if(view != null) {
							this1 = new Float32Array(view);
						} else if(buffer != null) {
							if(len == null) {
								this1 = new Float32Array(buffer,0);
							} else {
								this1 = new Float32Array(buffer,0,len);
							}
						} else {
							this1 = null;
						}
						parameter2.__uniformMatrix = this1;
					}
					parameter2.__isFloat = true;
					parameter2.__isUniform = isUniform;
					parameter2.__length = length;
					this.__paramFloat.push(parameter2);
					if(StringTools.startsWith(name,"openfl_")) {
						switch(name) {
						case "openfl_Alpha":
							this.__alpha = parameter2;
							break;
						case "openfl_ColorMultiplier":
							this.__colorMultiplier = parameter2;
							break;
						case "openfl_ColorOffset":
							this.__colorOffset = parameter2;
							break;
						case "openfl_Matrix":
							this.__matrix = parameter2;
							break;
						case "openfl_Position":
							this.__position = parameter2;
							break;
						case "openfl_TextureCoord":
							this.__textureCoord = parameter2;
							break;
						case "openfl_TextureSize":
							this.__textureSize = parameter2;
							break;
						default:
						}
					}
					this.__data[name] = parameter2;
					if(this.__isGenerated) {
						this[name] = parameter2;
					}
				}
			}
			position = regex.matchedPos();
			lastMatch = position.pos + position.len;
		}
	}
	,__update: function() {
		if(this.program != null) {
			this.__updateGL();
		}
	}
	,__updateFromBuffer: function(shaderBuffer,bufferOffset) {
		if(this.program != null) {
			this.__updateGLFromBuffer(shaderBuffer,bufferOffset);
		}
	}
	,__updateGL: function() {
		var textureCount = 0;
		var _g = 0;
		var _g1 = this.__inputBitmapData;
		while(_g < _g1.length) {
			var input = _g1[_g];
			++_g;
			input.__updateGL(this.__context,textureCount);
			++textureCount;
		}
		var _g = 0;
		var _g1 = this.__paramBool;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramFloat;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
		var _g = 0;
		var _g1 = this.__paramInt;
		while(_g < _g1.length) {
			var parameter = _g1[_g];
			++_g;
			parameter.__updateGL(this.__context);
		}
	}
	,__updateGLFromBuffer: function(shaderBuffer,bufferOffset) {
		var textureCount = 0;
		var input;
		var inputData;
		var inputFilter;
		var inputMipFilter;
		var inputWrap;
		var _g = 0;
		var _g1 = shaderBuffer.inputCount;
		while(_g < _g1) {
			var i = _g++;
			input = shaderBuffer.inputRefs[i];
			inputData = shaderBuffer.inputs[i];
			inputFilter = shaderBuffer.inputFilter[i];
			inputMipFilter = shaderBuffer.inputMipFilter[i];
			inputWrap = shaderBuffer.inputWrap[i];
			if(inputData != null) {
				input.__updateGL(this.__context,textureCount,inputData,inputFilter,inputMipFilter,inputWrap);
				++textureCount;
			}
		}
		var gl = this.__context.gl;
		if(shaderBuffer.paramDataLength > 0) {
			if(shaderBuffer.paramDataBuffer == null) {
				shaderBuffer.paramDataBuffer = gl.createBuffer();
			}
			this.__context.__bindGLArrayBuffer(shaderBuffer.paramDataBuffer);
			lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,shaderBuffer.paramData,gl.DYNAMIC_DRAW);
		} else {
			this.__context.__bindGLArrayBuffer(null);
		}
		var boolIndex = 0;
		var floatIndex = 0;
		var intIndex = 0;
		var boolCount = shaderBuffer.paramBoolCount;
		var floatCount = shaderBuffer.paramFloatCount;
		var paramData = shaderBuffer.paramData;
		var boolRef;
		var floatRef;
		var intRef;
		var hasOverride;
		var overrideBoolValue = null;
		var overrideFloatValue = null;
		var overrideIntValue = null;
		var _g = 0;
		var _g1 = shaderBuffer.paramCount;
		while(_g < _g1) {
			var i = _g++;
			hasOverride = false;
			if(i < boolCount) {
				boolRef = shaderBuffer.paramRefs_Bool[boolIndex];
				var _g2 = 0;
				var _g3 = shaderBuffer.overrideBoolCount;
				while(_g2 < _g3) {
					var j = _g2++;
					if(boolRef.name == shaderBuffer.overrideBoolNames[j]) {
						overrideBoolValue = shaderBuffer.overrideBoolValues[j];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					boolRef.__updateGL(this.__context,overrideBoolValue);
				} else {
					boolRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++boolIndex;
			} else if(i < boolCount + floatCount) {
				floatRef = shaderBuffer.paramRefs_Float[floatIndex];
				var _g4 = 0;
				var _g5 = shaderBuffer.overrideFloatCount;
				while(_g4 < _g5) {
					var j1 = _g4++;
					if(floatRef.name == shaderBuffer.overrideFloatNames[j1]) {
						overrideFloatValue = shaderBuffer.overrideFloatValues[j1];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					floatRef.__updateGL(this.__context,overrideFloatValue);
				} else {
					floatRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++floatIndex;
			} else {
				intRef = shaderBuffer.paramRefs_Int[intIndex];
				var _g6 = 0;
				var _g7 = shaderBuffer.overrideIntCount;
				while(_g6 < _g7) {
					var j2 = _g6++;
					if(intRef.name == shaderBuffer.overrideIntNames[j2]) {
						overrideIntValue = shaderBuffer.overrideIntValues[j2];
						hasOverride = true;
						break;
					}
				}
				if(hasOverride) {
					intRef.__updateGL(this.__context,overrideIntValue);
				} else {
					intRef.__updateGLFromBuffer(this.__context,paramData,shaderBuffer.paramPositions[i],shaderBuffer.paramLengths[i],bufferOffset);
				}
				++intIndex;
			}
		}
	}
	,get_glFragmentSource: function() {
		return this.__glFragmentSource;
	}
	,get_glVertexSource: function() {
		return this.__glVertexSource;
	}
	,__class__: openfl_display_Shader
	,__properties__: {get_glVertexSource:"get_glVertexSource",get_glFragmentSource:"get_glFragmentSource"}
};
var openfl_display_DisplayObjectShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.DisplayObjectShader"] = openfl_display_DisplayObjectShader;
openfl_display_DisplayObjectShader.__name__ = "openfl.display.DisplayObjectShader";
openfl_display_DisplayObjectShader.__super__ = openfl_display_Shader;
openfl_display_DisplayObjectShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display_DisplayObjectShader
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.name = name;
	this.frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = "openfl.display.FrameLabel";
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_display_FrameLabel
});
var openfl_display_Graphics = function(owner) {
	this.__dirty = true;
	this.__owner = owner;
	this.__commands = new openfl_display__$internal_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__usedShaderBuffers = new haxe_ds_List();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__width = 0;
	this.__height = 0;
	this.__shaderBufferPool = new lime_utils_ObjectPool(function() {
		return new openfl_display__$internal_ShaderBuffer();
	});
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = "openfl.display.Graphics";
openfl_display_Graphics.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		if(colors == null || colors.length == 0) {
			return;
		}
		if(alphas == null) {
			alphas = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				alphas.push(1);
			}
		}
		if(ratios == null) {
			ratios = [];
			var _g = 0;
			var _g1 = colors.length;
			while(_g < _g1) {
				var i = _g++;
				ratios.push(Math.ceil(i / colors.length * 255));
			}
		}
		if(alphas.length < colors.length || ratios.length < colors.length) {
			return;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		var _g_head = this.__usedShaderBuffers.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var shaderBuffer = val;
			this.__shaderBufferPool.release(shaderBuffer);
		}
		this.__usedShaderBuffers.clear();
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__positionX = 0;
		this.__positionY = 0;
		this.moveTo(0,0);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			var tx = (this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX);
			ix = this.__calculateBezierQuadPoint(tx,this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			var ty = (this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY);
			iy = this.__calculateBezierQuadPoint(ty,this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.set___dirty(true);
	}
	,drawRect: function(x,y,width,height) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width == 0 && height == 0) {
			return;
		}
		var xSign = width < 0 ? -1 : 1;
		var ySign = height < 0 ? -1 : 1;
		this.__inflateBounds(x - this.__strokePadding * xSign,y - this.__strokePadding * ySign);
		this.__inflateBounds(x + width + this.__strokePadding * xSign,y + height + this.__strokePadding * ySign);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.set___dirty(true);
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null ? matrix.clone() : null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = Math.ceil(thickness);
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = Math.ceil(thickness / 2);
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		if(!isFinite(x) || !isFinite(y)) {
			return;
		}
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__cleanup: function() {
		if(this.__bounds != null && this.__canvas != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
		}
		this.__bitmap = null;
		this.__canvas = null;
		this.__context = null;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__pool.get();
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0 ? -matrix.tx : 1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm == 0 ? -matrix.ty : 1.0 / norm * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl_display__$internal_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,__update: function(displayMatrix) {
		if(this.__bounds == null || this.__bounds.width <= 0 || this.__bounds.height <= 0) {
			return;
		}
		var parentTransform = this.__owner.__renderTransform;
		var scaleX = 1.0;
		var scaleY = 1.0;
		if(parentTransform != null) {
			if(parentTransform.b == 0) {
				scaleX = Math.abs(parentTransform.a);
			} else {
				scaleX = Math.sqrt(parentTransform.a * parentTransform.a + parentTransform.b * parentTransform.b);
			}
			if(parentTransform.c == 0) {
				scaleY = Math.abs(parentTransform.d);
			} else {
				scaleY = Math.sqrt(parentTransform.c * parentTransform.c + parentTransform.d * parentTransform.d);
			}
		} else {
			return;
		}
		if(displayMatrix != null) {
			if(displayMatrix.b == 0) {
				scaleX *= displayMatrix.a;
			} else {
				scaleX *= Math.sqrt(displayMatrix.a * displayMatrix.a + displayMatrix.b * displayMatrix.b);
			}
			if(displayMatrix.c == 0) {
				scaleY *= displayMatrix.d;
			} else {
				scaleY *= Math.sqrt(displayMatrix.c * displayMatrix.c + displayMatrix.d * displayMatrix.d);
			}
		}
		var width = this.__bounds.width * scaleX;
		var height = this.__bounds.height * scaleY;
		if(width < 1 || height < 1) {
			if(this.__width >= 1 || this.__height >= 1) {
				this.set___dirty(true);
			}
			this.__width = 0;
			this.__height = 0;
			return;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && width > openfl_display_Graphics.maxTextureWidth) {
			width = openfl_display_Graphics.maxTextureWidth;
			scaleX = openfl_display_Graphics.maxTextureWidth / this.__bounds.width;
		}
		if(openfl_display_Graphics.maxTextureWidth != null && height > openfl_display_Graphics.maxTextureHeight) {
			height = openfl_display_Graphics.maxTextureHeight;
			scaleY = openfl_display_Graphics.maxTextureHeight / this.__bounds.height;
		}
		this.__renderTransform.a = width / this.__bounds.width;
		this.__renderTransform.d = height / this.__bounds.height;
		var inverseA = 1 / this.__renderTransform.a;
		var inverseD = 1 / this.__renderTransform.d;
		this.__worldTransform.a = inverseA * parentTransform.a;
		this.__worldTransform.b = inverseA * parentTransform.b;
		this.__worldTransform.c = inverseD * parentTransform.c;
		this.__worldTransform.d = inverseD * parentTransform.d;
		var x = this.__bounds.x;
		var y = this.__bounds.y;
		var tx = x * parentTransform.a + y * parentTransform.c + parentTransform.tx;
		var ty = x * parentTransform.b + y * parentTransform.d + parentTransform.ty;
		this.__worldTransform.tx = Math.round(tx);
		this.__worldTransform.ty = Math.round(ty);
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.tx = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - ty) + _this.d * (tx - _this.tx));
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		this.__renderTransform.ty = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (ty - _this.ty) + _this.b * (_this.tx - tx));
		var newWidth = Math.ceil(width + 1.0);
		var newHeight = Math.ceil(height + 1.0);
		if(newWidth != this.__width || newHeight != this.__height) {
			this.set___dirty(true);
		}
		this.__width = newWidth;
		this.__height = newHeight;
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		if(value) {
			this.__softwareDirty = true;
			this.__hardwareDirty = true;
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_GraphicsShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform sampler2D bitmap;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (bitmap, openfl_TextureCoordv);\n\n\t\tif (color.a == 0.0) {\n\n\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t} else if (openfl_HasColorTransform) {\n\n\t\t\tcolor = vec4 (color.rgb / color.a, color.a);\n\n\t\t\tmat4 colorMultiplier = mat4 (0);\n\t\t\tcolorMultiplier[0][0] = openfl_ColorMultiplierv.x;\n\t\t\tcolorMultiplier[1][1] = openfl_ColorMultiplierv.y;\n\t\t\tcolorMultiplier[2][2] = openfl_ColorMultiplierv.z;\n\t\t\tcolorMultiplier[3][3] = 1.0; // openfl_ColorMultiplierv.w;\n\n\t\t\tcolor = clamp (openfl_ColorOffsetv + (color * colorMultiplier), 0.0, 1.0);\n\n\t\t\tif (color.a > 0.0) {\n\n\t\t\t\tgl_FragColor = vec4 (color.rgb * color.a * openfl_Alphav, color.a * openfl_Alphav);\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tgl_FragColor = color * openfl_Alphav;\n\n\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute float openfl_Alpha;\n\t\tattribute vec4 openfl_ColorMultiplier;\n\t\tattribute vec4 openfl_ColorOffset;\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying float openfl_Alphav;\n\t\tvarying vec4 openfl_ColorMultiplierv;\n\t\tvarying vec4 openfl_ColorOffsetv;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform bool openfl_HasColorTransform;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_Alphav = openfl_Alpha;\n\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tif (openfl_HasColorTransform) {\n\n\t\t\topenfl_ColorMultiplierv = openfl_ColorMultiplier;\n\t\t\topenfl_ColorOffsetv = openfl_ColorOffset / 255.0;\n\n\t\t}\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display.GraphicsShader"] = openfl_display_GraphicsShader;
openfl_display_GraphicsShader.__name__ = "openfl.display.GraphicsShader";
openfl_display_GraphicsShader.__super__ = openfl_display_Shader;
openfl_display_GraphicsShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display_GraphicsShader
});
var openfl_display_ITileContainer = function() { };
$hxClasses["openfl.display.ITileContainer"] = openfl_display_ITileContainer;
openfl_display_ITileContainer.__name__ = "openfl.display.ITileContainer";
openfl_display_ITileContainer.__isInterface__ = true;
var openfl_display_JointStyle = {};
openfl_display_JointStyle.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 4;
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
	this.uncaughtErrorEvents = this.contentLoaderInfo.uncaughtErrorEvents;
	this.__unloaded = true;
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = "openfl.display.Loader";
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	addChild: function(child) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,addChildAt: function(child,index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,removeChild: function(child) {
		if(child == this.content) {
			return openfl_display_DisplayObjectContainer.prototype.removeChild.call(this,this.content);
		} else {
			throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
		}
	}
	,removeChildAt: function(index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,setChildIndex: function(child,index) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2069: The Loader class does not implement this method.",2069));
	}
	,__class__: openfl_display_Loader
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = "openfl.display.LoaderInfo";
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__complete: function() {
		if(!this.__completed) {
			if(this.bytesLoaded < this.bytesTotal) {
				this.bytesLoaded = this.bytesTotal;
			}
			this.__update(this.bytesLoaded,this.bytesTotal);
			this.__completed = true;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__update: function(bytesLoaded,bytesTotal) {
		this.bytesLoaded = bytesLoaded;
		this.bytesTotal = bytesTotal;
		this.dispatchEvent(new openfl_events_ProgressEvent("progress",false,false,bytesLoaded,bytesTotal));
	}
	,__class__: openfl_display_LoaderInfo
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__enabled = true;
	if(openfl_display_MovieClip.__constructor != null) {
		var method = openfl_display_MovieClip.__constructor;
		openfl_display_MovieClip.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = "openfl.display.MovieClip";
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	gotoAndStop: function(frame,scene) {
		if(this.__timeline != null) {
			this.__timeline.__gotoAndStop(frame,scene);
		}
	}
	,__enterFrame: function(deltaTime) {
		if(this.__timeline != null) {
			this.__timeline.__enterFrame(deltaTime);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__tabTest: function(stack) {
		if(!this.__enabled) {
			return;
		}
		openfl_display_Sprite.prototype.__tabTest.call(this,stack);
	}
	,__onMouseDown: function(event) {
		if(this.__enabled && this.__hasDown) {
			this.gotoAndStop("_down");
		}
		this.__mouseIsDown = true;
		if(this.stage != null) {
			this.stage.addEventListener("mouseUp",$bind(this,this.__onMouseUp),true);
		}
	}
	,__onMouseUp: function(event) {
		this.__mouseIsDown = false;
		if(this.stage != null) {
			this.stage.removeEventListener("mouseUp",$bind(this,this.__onMouseUp));
		}
		if(!this.__buttonMode) {
			return;
		}
		if(event.target == this && this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__enabled && this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOut: function(event) {
		if(!this.__enabled) {
			return;
		}
		if(this.__mouseIsDown && this.__hasOver) {
			this.gotoAndStop("_over");
		} else if(this.__hasUp) {
			this.gotoAndStop("_up");
		}
	}
	,__onRollOver: function(event) {
		if(this.__enabled && this.__hasOver) {
			this.gotoAndStop("_over");
		}
	}
	,set_buttonMode: function(value) {
		if(this.__buttonMode != value) {
			if(value) {
				this.__hasDown = false;
				this.__hasOver = false;
				this.__hasUp = false;
				var _g = 0;
				var _g1 = this.get_currentLabels();
				while(_g < _g1.length) {
					var frameLabel = _g1[_g];
					++_g;
					switch(frameLabel.name) {
					case "_down":
						this.__hasDown = true;
						break;
					case "_over":
						this.__hasOver = true;
						break;
					case "_up":
						this.__hasUp = true;
						break;
					default:
					}
				}
				if(this.__hasDown || this.__hasOver || this.__hasUp) {
					this.addEventListener("rollOver",$bind(this,this.__onRollOver));
					this.addEventListener("rollOut",$bind(this,this.__onRollOut));
					this.addEventListener("mouseDown",$bind(this,this.__onMouseDown));
				}
			} else {
				this.removeEventListener("rollOver",$bind(this,this.__onRollOver));
				this.removeEventListener("rollOut",$bind(this,this.__onRollOut));
				this.removeEventListener("mouseDown",$bind(this,this.__onMouseDown));
			}
			this.__buttonMode = value;
		}
		return value;
	}
	,get_currentLabels: function() {
		if(this.__timeline != null) {
			return this.__timeline.__currentLabels.slice();
		} else {
			return [];
		}
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_currentLabels:"get_currentLabels"})
});
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = "openfl.geom.Rectangle";
openfl_geom_Rectangle.prototype = {
	clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare == this) {
			return true;
		} else if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		var offsetX = 0.0;
		var offsetY = 0.0;
		var offsetRight = 0.0;
		var offsetBottom = 0.0;
		if(this.x < x) {
			offsetX = x - this.x;
		}
		if(this.y < y) {
			offsetY = y - this.y;
		}
		if(this.get_right() > x + width) {
			offsetRight = x + width - this.get_right();
		}
		if(this.get_bottom() > y + height) {
			offsetBottom = y + height - this.get_bottom();
		}
		this.x += offsetX;
		this.y += offsetY;
		this.width += offsetRight - offsetX;
		this.height += offsetBottom - offsetY;
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		if(openfl_geom_Rectangle.__limeRectangle == null) {
			openfl_geom_Rectangle.__limeRectangle = new lime_math_Rectangle();
		}
		openfl_geom_Rectangle.__limeRectangle.setTo(this.x,this.y,this.width,this.height);
		return openfl_geom_Rectangle.__limeRectangle;
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,get_left: function() {
		return this.x;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,get_top: function() {
		return this.y;
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {get_top:"get_top",get_right:"get_right",get_left:"get_left",get_bottom:"get_bottom"}
};
var openfl_display_OpenGLRenderer = function(context,defaultRenderTarget) {
	openfl_display_DisplayObjectRenderer.call(this);
	this.__context3D = context;
	this.__context = context.__context;
	this.gl = context.__context.webgl;
	this.__gl = this.gl;
	this.__defaultRenderTarget = defaultRenderTarget;
	this.__flipped = this.__defaultRenderTarget == null;
	if(openfl_display_Graphics.maxTextureWidth == null) {
		openfl_display_Graphics.maxTextureWidth = openfl_display_Graphics.maxTextureHeight = this.__gl.getParameter(this.__gl.MAX_TEXTURE_SIZE);
	}
	this.__matrix = lime_math_Matrix4._new();
	this.__values = [];
	this.__softwareRenderer = new openfl_display_CanvasRenderer(null);
	this.__type = "opengl";
	this.__setBlendMode(10);
	this.__context3D.__setGLBlend(true);
	this.__clipRects = [];
	this.__maskObjects = [];
	this.__numClipRects = 0;
	this.__projection = lime_math_Matrix4._new();
	this.__projectionFlipped = lime_math_Matrix4._new();
	this.__stencilReference = 0;
	this.__tempRect = new openfl_geom_Rectangle();
	this.__defaultDisplayShader = new openfl_display_DisplayObjectShader();
	this.__defaultGraphicsShader = new openfl_display_GraphicsShader();
	this.__defaultShader = this.__defaultDisplayShader;
	this.__initShader(this.__defaultShader);
	this.__scrollRectMasks = new lime_utils_ObjectPool(function() {
		return new openfl_display_Shape();
	});
	this.__maskShader = new openfl_display__$internal_Context3DMaskShader();
};
$hxClasses["openfl.display.OpenGLRenderer"] = openfl_display_OpenGLRenderer;
openfl_display_OpenGLRenderer.__name__ = "openfl.display.OpenGLRenderer";
openfl_display_OpenGLRenderer.__super__ = openfl_display_DisplayObjectRenderer;
openfl_display_OpenGLRenderer.prototype = $extend(openfl_display_DisplayObjectRenderer.prototype,{
	applyAlpha: function(alpha) {
		openfl_display_OpenGLRenderer.__alphaValue[0] = alpha * this.__worldAlpha;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Alpha",openfl_display_OpenGLRenderer.__alphaValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.value = openfl_display_OpenGLRenderer.__alphaValue;
			}
		}
	}
	,applyBitmapData: function(bitmapData,smooth,repeat) {
		if(repeat == null) {
			repeat = false;
		}
		if(this.__currentShaderBuffer != null) {
			if(bitmapData != null) {
				openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
				openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
				this.__currentShaderBuffer.addFloatOverride("openfl_TextureSize",openfl_display_OpenGLRenderer.__textureSizeValue);
			}
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__bitmap != null) {
				this.__currentShader.__bitmap.input = bitmapData;
				this.__currentShader.__bitmap.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__bitmap.mipFilter = 2;
				this.__currentShader.__bitmap.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = bitmapData;
				this.__currentShader.__texture.filter = smooth && this.__allowSmoothing ? 4 : 5;
				this.__currentShader.__texture.mipFilter = 2;
				this.__currentShader.__texture.wrap = repeat ? 2 : 0;
			}
			if(this.__currentShader.__textureSize != null) {
				if(bitmapData != null) {
					openfl_display_OpenGLRenderer.__textureSizeValue[0] = bitmapData.__textureWidth;
					openfl_display_OpenGLRenderer.__textureSizeValue[1] = bitmapData.__textureHeight;
					this.__currentShader.__textureSize.value = openfl_display_OpenGLRenderer.__textureSizeValue;
				} else {
					this.__currentShader.__textureSize.value = null;
				}
			}
		}
	}
	,applyColorTransform: function(colorTransform) {
		var enabled = colorTransform != null && !colorTransform.__isDefault(true);
		this.applyHasColorTransform(enabled);
		if(enabled) {
			colorTransform.__setArrays(openfl_display_OpenGLRenderer.__colorMultipliersValue,openfl_display_OpenGLRenderer.__colorOffsetsValue);
			if(this.__currentShaderBuffer != null) {
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__colorMultipliersValue);
				this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__colorOffsetsValue);
			} else if(this.__currentShader != null) {
				if(this.__currentShader.__colorMultiplier != null) {
					this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__colorMultipliersValue;
				}
				if(this.__currentShader.__colorOffset != null) {
					this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__colorOffsetsValue;
				}
			}
		} else if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorMultiplier",openfl_display_OpenGLRenderer.__emptyColorValue);
			this.__currentShaderBuffer.addFloatOverride("openfl_ColorOffset",openfl_display_OpenGLRenderer.__emptyColorValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.value = openfl_display_OpenGLRenderer.__emptyColorValue;
			}
		}
	}
	,applyHasColorTransform: function(enabled) {
		openfl_display_OpenGLRenderer.__hasColorTransformValue[0] = enabled;
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addBoolOverride("openfl_HasColorTransform",openfl_display_OpenGLRenderer.__hasColorTransformValue);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = openfl_display_OpenGLRenderer.__hasColorTransformValue;
			}
		}
	}
	,applyMatrix: function(matrix) {
		if(this.__currentShaderBuffer != null) {
			this.__currentShaderBuffer.addFloatOverride("openfl_Matrix",matrix);
		} else if(this.__currentShader != null) {
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = matrix;
			}
		}
	}
	,setShader: function(shader) {
		this.__currentShaderBuffer = null;
		if(this.__currentShader == shader) {
			return;
		}
		var tmp = this.__currentShader != null;
		if(shader == null) {
			this.__currentShader = null;
			this.__context3D.setProgram(null);
			return;
		} else {
			this.__currentShader = shader;
			this.__initShader(shader);
			this.__context3D.setProgram(shader.program);
			this.__context3D.__flushGLProgram();
			this.__currentShader.__enable();
			this.__context3D.__state.shader = shader;
		}
	}
	,setViewport: function() {
		this.__gl.viewport(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
	}
	,updateShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.__useArray = true;
			}
			if(this.__currentShader.__textureCoord != null) {
				this.__currentShader.__textureCoord.__useArray = true;
			}
			this.__context3D.setProgram(this.__currentShader.program);
			this.__context3D.__flushGLProgram();
			this.__context3D.__flushGLTextures();
			this.__currentShader.__update();
		}
	}
	,useAlphaArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__alpha != null) {
				this.__currentShader.__alpha.__useArray = true;
			}
		}
	}
	,useColorTransformArray: function() {
		if(this.__currentShader != null) {
			if(this.__currentShader.__colorMultiplier != null) {
				this.__currentShader.__colorMultiplier.__useArray = true;
			}
			if(this.__currentShader.__colorOffset != null) {
				this.__currentShader.__colorOffset.__useArray = true;
			}
		}
	}
	,__clear: function() {
		if(this.__stage == null || this.__stage.__transparent) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		} else {
			this.__context3D.clear(this.__stage.__colorSplit[0],this.__stage.__colorSplit[1],this.__stage.__colorSplit[2],1,0,0,1);
		}
		this.__cleared = true;
	}
	,__clearShader: function() {
		if(this.__currentShader != null) {
			if(this.__currentShaderBuffer == null) {
				if(this.__currentShader.__bitmap != null) {
					this.__currentShader.__bitmap.input = null;
				}
			} else {
				this.__currentShaderBuffer.clearOverride();
			}
			if(this.__currentShader.__texture != null) {
				this.__currentShader.__texture.input = null;
			}
			if(this.__currentShader.__textureSize != null) {
				this.__currentShader.__textureSize.value = null;
			}
			if(this.__currentShader.__hasColorTransform != null) {
				this.__currentShader.__hasColorTransform.value = null;
			}
			if(this.__currentShader.__position != null) {
				this.__currentShader.__position.value = null;
			}
			if(this.__currentShader.__matrix != null) {
				this.__currentShader.__matrix.value = null;
			}
			this.__currentShader.__clearUseArray();
		}
	}
	,__copyShader: function(other) {
		this.__currentShader = other.__currentShader;
		this.__currentShaderBuffer = other.__currentShaderBuffer;
		this.__currentDisplayShader = other.__currentDisplayShader;
		this.__currentGraphicsShader = other.__currentGraphicsShader;
	}
	,__getMatrix: function(transform,pixelSnapping) {
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		if(pixelSnapping == 0 || pixelSnapping == 1 && _matrix.b == 0 && _matrix.c == 0 && (_matrix.a < 1.001 && _matrix.a > 0.999) && (_matrix.d < 1.001 && _matrix.d > 0.999)) {
			_matrix.tx = Math.round(_matrix.tx);
			_matrix.ty = Math.round(_matrix.ty);
		}
		lime_math_Matrix4.identity(this.__matrix);
		lime_math_Matrix4.set(this.__matrix,0,_matrix.a);
		lime_math_Matrix4.set(this.__matrix,1,_matrix.b);
		lime_math_Matrix4.set(this.__matrix,4,_matrix.c);
		lime_math_Matrix4.set(this.__matrix,5,_matrix.d);
		lime_math_Matrix4.set(this.__matrix,12,_matrix.tx);
		lime_math_Matrix4.set(this.__matrix,13,_matrix.ty);
		lime_math_Matrix4.append(this.__matrix,this.__flipped ? this.__projectionFlipped : this.__projection);
		this.__values[0] = lime_math_Matrix4.get(this.__matrix,0);
		this.__values[1] = lime_math_Matrix4.get(this.__matrix,1);
		this.__values[2] = lime_math_Matrix4.get(this.__matrix,2);
		this.__values[3] = lime_math_Matrix4.get(this.__matrix,3);
		this.__values[4] = lime_math_Matrix4.get(this.__matrix,4);
		this.__values[5] = lime_math_Matrix4.get(this.__matrix,5);
		this.__values[6] = lime_math_Matrix4.get(this.__matrix,6);
		this.__values[7] = lime_math_Matrix4.get(this.__matrix,7);
		this.__values[8] = lime_math_Matrix4.get(this.__matrix,8);
		this.__values[9] = lime_math_Matrix4.get(this.__matrix,9);
		this.__values[10] = lime_math_Matrix4.get(this.__matrix,10);
		this.__values[11] = lime_math_Matrix4.get(this.__matrix,11);
		this.__values[12] = lime_math_Matrix4.get(this.__matrix,12);
		this.__values[13] = lime_math_Matrix4.get(this.__matrix,13);
		this.__values[14] = lime_math_Matrix4.get(this.__matrix,14);
		this.__values[15] = lime_math_Matrix4.get(this.__matrix,15);
		openfl_geom_Matrix.__pool.release(_matrix);
		return this.__values;
	}
	,__initShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultShader;
	}
	,__initDisplayShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultDisplayShader;
	}
	,__initGraphicsShader: function(shader) {
		if(shader != null) {
			if(shader.__context == null) {
				shader.__context = this.__context3D;
				shader.__init();
			}
			return shader;
		}
		return this.__defaultGraphicsShader;
	}
	,__initShaderBuffer: function(shaderBuffer) {
		if(shaderBuffer != null) {
			return this.__initGraphicsShader(shaderBuffer.shader);
		}
		return this.__defaultGraphicsShader;
	}
	,__popMask: function() {
		if(this.__stencilReference == 0) {
			return;
		}
		var mask = this.__maskObjects.pop();
		if(this.__stencilReference > 1) {
			this.__context3D.setStencilActions(2,1,0,0,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
			this.__context3D.setColorMask(false,false,false,false);
			this.__renderDrawableMask(mask);
			this.__stencilReference--;
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
			this.__context3D.setColorMask(true,true,true,true);
		} else {
			this.__stencilReference = 0;
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
	}
	,__popMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(object.__mask != null) {
			this.__popMask();
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				this.__scrollRectMasks.release(this.__maskObjects[this.__maskObjects.length - 1]);
				this.__popMask();
			} else {
				this.__popMaskRect();
			}
		}
	}
	,__popMaskRect: function() {
		if(this.__numClipRects > 0) {
			this.__numClipRects--;
			if(this.__numClipRects > 0) {
				this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
			} else {
				this.__scissorRect();
			}
		}
	}
	,__pushMask: function(mask) {
		if(this.__stencilReference == 0) {
			this.__context3D.clear(0,0,0,0,0,0,4);
			this.__updatedStencil = true;
		}
		this.__context3D.setStencilActions(2,1,2,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,255);
		this.__context3D.setColorMask(false,false,false,false);
		this.__renderDrawableMask(mask);
		this.__maskObjects.push(mask);
		this.__stencilReference++;
		this.__context3D.setStencilActions(2,1,5,5,5);
		this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		this.__context3D.setColorMask(true,true,true,true);
	}
	,__pushMaskObject: function(object,handleScrollRect) {
		if(handleScrollRect == null) {
			handleScrollRect = true;
		}
		if(handleScrollRect && object.__scrollRect != null) {
			if(object.__renderTransform.b != 0 || object.__renderTransform.c != 0) {
				var shape = this.__scrollRectMasks.get();
				shape.get_graphics().clear();
				shape.get_graphics().beginFill(65280);
				shape.get_graphics().drawRect(object.__scrollRect.x,object.__scrollRect.y,object.__scrollRect.width,object.__scrollRect.height);
				shape.__renderTransform.copyFrom(object.__renderTransform);
				this.__pushMask(shape);
			} else {
				this.__pushMaskRect(object.__scrollRect,object.__renderTransform);
			}
		}
		if(object.__mask != null) {
			this.__pushMask(object.__mask);
		}
	}
	,__pushMaskRect: function(rect,transform) {
		if(this.__numClipRects == this.__clipRects.length) {
			this.__clipRects[this.__numClipRects] = new openfl_geom_Rectangle();
		}
		var _matrix = openfl_geom_Matrix.__pool.get();
		_matrix.copyFrom(transform);
		_matrix.concat(this.__worldTransform);
		var clipRect = this.__clipRects[this.__numClipRects];
		rect.__transform(clipRect,_matrix);
		if(this.__numClipRects > 0) {
			var parentClipRect = this.__clipRects[this.__numClipRects - 1];
			clipRect.__contract(parentClipRect.x,parentClipRect.y,parentClipRect.width,parentClipRect.height);
		}
		if(clipRect.height < 0) {
			clipRect.height = 0;
		}
		if(clipRect.width < 0) {
			clipRect.width = 0;
		}
		openfl_geom_Matrix.__pool.release(_matrix);
		this.__scissorRect(clipRect);
		this.__numClipRects++;
	}
	,__render: function(object) {
		this.__context3D.setColorMask(true,true,true,true);
		this.__context3D.setCulling(3);
		this.__context3D.setDepthTest(false,0);
		this.__context3D.setStencilActions();
		this.__context3D.setStencilReferenceValue(0,0,0);
		this.__context3D.setScissorRectangle(null);
		this.__blendMode = null;
		this.__setBlendMode(10);
		if(this.__defaultRenderTarget == null) {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			this.__upscaled = this.__worldTransform.a != 1 || this.__worldTransform.d != 1;
			this.__renderDrawable(object);
			if(this.__offsetX > 0 || this.__offsetY > 0) {
				if(this.__offsetX > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__offsetX,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX + this.__displayWidth,0,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				if(this.__offsetY > 0) {
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,0,this.__width,this.__offsetY);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
					openfl_display_OpenGLRenderer.__scissorRectangle.setTo(0,this.__offsetY + this.__displayHeight,this.__width,this.__height);
					this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
					this.__context3D.__flushGL();
					this.__gl.clearColor(0,0,0,1);
					this.__gl.clear(this.__gl.COLOR_BUFFER_BIT);
				}
				this.__context3D.setScissorRectangle(null);
			}
		} else {
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(this.__offsetX,this.__offsetY,this.__displayWidth,this.__displayHeight);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
			var cacheMask = object.__mask;
			var cacheScrollRect = object.__scrollRect;
			object.__mask = null;
			object.__scrollRect = null;
			this.__renderDrawable(object);
			object.__mask = cacheMask;
			object.__scrollRect = cacheScrollRect;
		}
		this.__context3D.present();
	}
	,__renderDrawable: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawable(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawable(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawable(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawable(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawable(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawable(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawable(object,this);
			break;
		default:
		}
	}
	,__renderDrawableMask: function(object) {
		if(object == null) {
			return;
		}
		switch(object.__drawableType) {
		case 0:
			openfl_display__$internal_Context3DBitmapData.renderDrawableMask(object,this);
			break;
		case 2:
			openfl_display__$internal_Context3DBitmap.renderDrawableMask(object,this);
			break;
		case 3:
			openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(object,this);
			break;
		case 4:case 5:
			openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask(object,this);
			break;
		case 6:
			openfl_display__$internal_Context3DSimpleButton.renderDrawableMask(object,this);
			break;
		case 7:
			openfl_display__$internal_Context3DTextField.renderDrawableMask(object,this);
			break;
		case 8:
			openfl_display__$internal_Context3DVideo.renderDrawableMask(object,this);
			break;
		case 9:
			openfl_display__$internal_Context3DTilemap.renderDrawableMask(object,this);
			break;
		default:
		}
	}
	,__renderFilterPass: function(source,shader,smooth,clear) {
		if(clear == null) {
			clear = true;
		}
		if(source == null || shader == null) {
			return;
		}
		if(this.__defaultRenderTarget == null) {
			return;
		}
		var cacheRTT = this.__context3D.__state.renderToTexture;
		var cacheRTTDepthStencil = this.__context3D.__state.renderToTextureDepthStencil;
		var cacheRTTAntiAlias = this.__context3D.__state.renderToTextureAntiAlias;
		var cacheRTTSurfaceSelector = this.__context3D.__state.renderToTextureSurfaceSelector;
		this.__context3D.setRenderToTexture(this.__defaultRenderTarget.getTexture(this.__context3D),false);
		if(clear) {
			this.__context3D.clear(0,0,0,0,0,0,1);
		}
		var shader1 = this.__initShader(shader);
		this.setShader(shader1);
		this.applyAlpha(1);
		this.applyBitmapData(source,smooth);
		this.applyColorTransform(null);
		this.applyMatrix(this.__getMatrix(source.__renderTransform,1));
		this.updateShader();
		var vertexBuffer = source.getVertexBuffer(this.__context3D);
		if(shader1.__position != null) {
			this.__context3D.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
		}
		if(shader1.__textureCoord != null) {
			this.__context3D.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = source.getIndexBuffer(this.__context3D);
		this.__context3D.drawTriangles(indexBuffer);
		if(cacheRTT != null) {
			this.__context3D.setRenderToTexture(cacheRTT,cacheRTTDepthStencil,cacheRTTAntiAlias,cacheRTTSurfaceSelector);
		} else {
			this.__context3D.setRenderToBackBuffer();
		}
		this.__clearShader();
	}
	,__resize: function(width,height) {
		this.__width = width;
		this.__height = height;
		var w = this.__defaultRenderTarget == null ? this.__stage.stageWidth : this.__defaultRenderTarget.width;
		var h = this.__defaultRenderTarget == null ? this.__stage.stageHeight : this.__defaultRenderTarget.height;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.a + 0 * _this.c + _this.tx);
		} else {
			tmp = 0;
		}
		this.__offsetX = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + 0 * _this.d + _this.ty);
		} else {
			tmp = 0;
		}
		this.__offsetY = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(w * _this.a + 0 * _this.c + _this.tx - this.__offsetX);
		} else {
			tmp = w;
		}
		this.__displayWidth = tmp;
		var tmp;
		if(this.__defaultRenderTarget == null) {
			var _this = this.__worldTransform;
			tmp = Math.round(0 * _this.b + h * _this.d + _this.ty - this.__offsetY);
		} else {
			tmp = h;
		}
		this.__displayHeight = tmp;
		lime_math_Matrix4.createOrtho(this.__projection,0,this.__displayWidth + this.__offsetX * 2,0,this.__displayHeight + this.__offsetY * 2,-1000,1000);
		lime_math_Matrix4.createOrtho(this.__projectionFlipped,0,this.__displayWidth + this.__offsetX * 2,this.__displayHeight + this.__offsetY * 2,0,-1000,1000);
	}
	,__resumeClipAndMask: function(childRenderer) {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions(2,1,5,5,5);
			this.__context3D.setStencilReferenceValue(this.__stencilReference,255,0);
		} else {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect(this.__clipRects[this.__numClipRects - 1]);
		} else {
			this.__scissorRect();
		}
	}
	,__scissorRect: function(clipRect) {
		if(clipRect != null) {
			var x = Math.floor(clipRect.x);
			var y = Math.floor(clipRect.y);
			var width = clipRect.width > 0 ? Math.ceil(clipRect.get_right()) - x : 0;
			var height = clipRect.height > 0 ? Math.ceil(clipRect.get_bottom()) - y : 0;
			if(width < 0) {
				width = 0;
			}
			if(height < 0) {
				height = 0;
			}
			openfl_display_OpenGLRenderer.__scissorRectangle.setTo(x,y,width,height);
			this.__context3D.setScissorRectangle(openfl_display_OpenGLRenderer.__scissorRectangle);
		} else {
			this.__context3D.setScissorRectangle(null);
		}
	}
	,__setBlendMode: function(value) {
		if(this.__overrideBlendMode != null) {
			value = this.__overrideBlendMode;
		}
		if(this.__blendMode == value) {
			return;
		}
		this.__blendMode = value;
		switch(value) {
		case 0:
			this.__context3D.setBlendFactors(2,2);
			break;
		case 9:
			this.__context3D.setBlendFactors(1,5);
			break;
		case 12:
			this.__context3D.setBlendFactors(2,6);
			break;
		case 14:
			this.__context3D.setBlendFactors(2,2);
			this.__context3D.__setGLBlendEquation(this.__gl.FUNC_REVERSE_SUBTRACT);
			break;
		default:
			this.__context3D.setBlendFactors(2,5);
		}
	}
	,__setRenderTarget: function(renderTarget) {
		this.__defaultRenderTarget = renderTarget;
		this.__flipped = renderTarget == null;
		if(renderTarget != null) {
			this.__resize(renderTarget.width,renderTarget.height);
		}
	}
	,__setShaderBuffer: function(shaderBuffer) {
		this.setShader(shaderBuffer.shader);
		this.__currentShaderBuffer = shaderBuffer;
	}
	,__suspendClipAndMask: function() {
		if(this.__stencilReference > 0) {
			this.__context3D.setStencilActions();
			this.__context3D.setStencilReferenceValue(0,0,0);
		}
		if(this.__numClipRects > 0) {
			this.__scissorRect();
		}
	}
	,__updateShaderBuffer: function(bufferOffset) {
		if(this.__currentShader != null && this.__currentShaderBuffer != null) {
			this.__currentShader.__updateFromBuffer(this.__currentShaderBuffer,bufferOffset);
		}
	}
	,__class__: openfl_display_OpenGLRenderer
});
var openfl_display_Preloader = function(display) {
	this.onComplete = new lime_app__$Event_$Void_$Void();
	this.display = display;
	if(display != null) {
		display.addEventListener("unload",$bind(this,this.display_onUnload));
		openfl_Lib.get_current().addChild(display);
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = "openfl.display.Preloader";
openfl_display_Preloader.prototype = {
	start: function() {
		this.ready = true;
		openfl_Lib.get_current().get_loaderInfo().__complete();
		if(this.display != null) {
			var complete = new openfl_events_Event("complete",true,true);
			this.display.dispatchEvent(complete);
			if(!complete.isDefaultPrevented()) {
				this.display.dispatchEvent(new openfl_events_Event("unload"));
			}
		} else if(!this.complete) {
			this.complete = true;
			this.onComplete.dispatch();
		}
	}
	,update: function(loaded,total) {
		openfl_Lib.get_current().get_loaderInfo().__update(loaded,total);
		if(this.display != null) {
			this.display.dispatchEvent(new openfl_events_ProgressEvent("progress",true,true,loaded,total));
		}
	}
	,display_onUnload: function(event) {
		if(this.display != null) {
			this.display.removeEventListener("unload",$bind(this,this.display_onUnload));
			if(this.display.parent == openfl_Lib.get_current()) {
				openfl_Lib.get_current().removeChild(this.display);
			}
			openfl_Lib.get_current().stage.set_focus(null);
			this.display = null;
		}
		if(this.ready) {
			if(!this.complete) {
				this.complete = true;
				this.onComplete.dispatch();
			}
		}
	}
	,__class__: openfl_display_Preloader
};
var openfl_display_DefaultPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var r = backgroundColor >> 16 & 255;
	var g = backgroundColor >> 8 & 255;
	var b = backgroundColor & 255;
	var perceivedLuminosity = 0.299 * r + 0.587 * g + 0.114 * b;
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var x = 30;
	var height = 7;
	var y = this.getHeight() / 2 - height / 2;
	var width = this.getWidth() - x * 2;
	var padding = 2;
	this.outline = new openfl_display_Shape();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,height);
	this.outline.set_x(x);
	this.outline.set_y(y);
	this.outline.set_alpha(0);
	this.addChild(this.outline);
	this.progress = new openfl_display_Shape();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - padding * 2,height - padding * 2);
	this.progress.set_x(x + padding);
	this.progress.set_y(y + padding);
	this.progress.set_scaleX(0);
	this.progress.set_alpha(0);
	this.addChild(this.progress);
	this.startAnimation = openfl_Lib.getTimer() + 100;
	this.endAnimation = this.startAnimation + 1000;
	this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
};
$hxClasses["openfl.display.DefaultPreloader"] = openfl_display_DefaultPreloader;
openfl_display_DefaultPreloader.__name__ = "openfl.display.DefaultPreloader";
openfl_display_DefaultPreloader.__super__ = openfl_display_Sprite;
openfl_display_DefaultPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	getBackgroundColor: function() {
		var attributes = openfl_Lib.get_current().stage.window.context.attributes;
		if(Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background != null) {
			return attributes.background;
		} else {
			return 0;
		}
	}
	,getHeight: function() {
		var height = openfl_Lib.get_current().stage.window.__height;
		if(height > 0) {
			return height;
		} else {
			return openfl_Lib.get_current().stage.stageHeight;
		}
	}
	,getWidth: function() {
		var width = openfl_Lib.get_current().stage.window.__width;
		if(width > 0) {
			return width;
		} else {
			return openfl_Lib.get_current().stage.stageWidth;
		}
	}
	,onInit: function() {
		this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
	}
	,onLoaded: function() {
		this.removeEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
		this.dispatchEvent(new openfl_events_Event("unload"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = 0.0;
		if(bytesTotal > 0) {
			percentLoaded = bytesLoaded / bytesTotal;
			if(percentLoaded > 1) {
				percentLoaded = 1;
			}
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,this_onAddedToStage: function(event) {
		this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
		this.onInit();
		this.onUpdate(this.get_loaderInfo().bytesLoaded,this.get_loaderInfo().bytesTotal);
		this.addEventListener("progress",$bind(this,this.this_onProgress));
		this.addEventListener("complete",$bind(this,this.this_onComplete));
	}
	,this_onComplete: function(event) {
		event.preventDefault();
		this.removeEventListener("progress",$bind(this,this.this_onProgress));
		this.removeEventListener("complete",$bind(this,this.this_onComplete));
		this.onLoaded();
	}
	,this_onEnterFrame: function(event) {
		var elapsed = openfl_Lib.getTimer() - this.startAnimation;
		var total = this.endAnimation - this.startAnimation;
		var percent = elapsed / total;
		if(percent < 0) {
			percent = 0;
		}
		if(percent > 1) {
			percent = 1;
		}
		this.outline.set_alpha(this.progress.set_alpha(percent));
	}
	,this_onProgress: function(event) {
		this.onUpdate(event.bytesLoaded | 0,event.bytesTotal | 0);
	}
	,__class__: openfl_display_DefaultPreloader
});
var openfl_display_ShaderData = {};
openfl_display_ShaderData._new = function(byteArray) {
	var this1 = { };
	return this1;
};
var openfl_display_ShaderInput = function() {
	this.channels = 0;
	this.filter = 5;
	this.height = 0;
	this.index = 0;
	this.mipFilter = 2;
	this.width = 0;
	this.wrap = 0;
};
$hxClasses["openfl.display.ShaderInput"] = openfl_display_ShaderInput;
openfl_display_ShaderInput.__name__ = "openfl.display.ShaderInput";
openfl_display_ShaderInput.prototype = {
	__disableGL: function(context,id) {
		var gl = context.gl;
		context.setTextureAt(id,null);
	}
	,__updateGL: function(context,id,overrideInput,overrideFilter,overrideMipFilter,overrideWrap) {
		var gl = context.gl;
		var input = overrideInput != null ? overrideInput : this.input;
		var filter = overrideFilter != null ? overrideFilter : this.filter;
		var mipFilter = overrideMipFilter != null ? overrideMipFilter : this.mipFilter;
		var wrap = overrideWrap != null ? overrideWrap : this.wrap;
		if(input != null) {
			var bitmapData = input;
			context.setTextureAt(id,bitmapData.getTexture(context));
			context.setSamplerStateAt(id,wrap,filter,mipFilter);
		} else {
			context.setTextureAt(id,null);
		}
	}
	,__class__: openfl_display_ShaderInput
};
var openfl_display_ShaderParameter = function() {
	this.index = 0;
};
$hxClasses["openfl.display.ShaderParameter"] = openfl_display_ShaderParameter;
openfl_display_ShaderParameter.__name__ = "openfl.display.ShaderParameter";
openfl_display_ShaderParameter.prototype = {
	__disableGL: function(context) {
		var gl = context.gl;
		if(!this.__isUniform) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGL: function(context,overrideValue) {
		var gl = context.gl;
		var value = overrideValue != null ? overrideValue : this.value;
		var boolValue = this.__isBool ? value : null;
		var floatValue = this.__isFloat ? value : null;
		var intValue = this.__isInt ? value : null;
		if(this.__isUniform) {
			if(value != null && value.length >= this.__length) {
				switch(this.type) {
				case 0:
					gl.uniform1i(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.uniform2i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.uniform3i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.uniform4i(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.uniform1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.uniform2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.uniform3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.uniform4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.uniform1i(this.index,intValue[0]);
					break;
				case 9:
					gl.uniform2i(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.uniform3i(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.uniform4i(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = floatValue[0];
					this.__uniformMatrix[1] = floatValue[1];
					this.__uniformMatrix[2] = floatValue[2];
					this.__uniformMatrix[3] = floatValue[3];
					this.__uniformMatrix[4] = floatValue[4];
					this.__uniformMatrix[5] = floatValue[5];
					this.__uniformMatrix[6] = floatValue[6];
					this.__uniformMatrix[7] = floatValue[7];
					this.__uniformMatrix[8] = floatValue[8];
					this.__uniformMatrix[9] = floatValue[9];
					this.__uniformMatrix[10] = floatValue[10];
					this.__uniformMatrix[11] = floatValue[11];
					this.__uniformMatrix[12] = floatValue[12];
					this.__uniformMatrix[13] = floatValue[13];
					this.__uniformMatrix[14] = floatValue[14];
					this.__uniformMatrix[15] = floatValue[15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,0,0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,0,0,0,0);
					break;
				case 4:
					gl.uniform1f(this.index,0);
					break;
				case 5:
					gl.uniform2f(this.index,0,0);
					break;
				case 6:
					gl.uniform3f(this.index,0,0,0);
					break;
				case 7:
					gl.uniform4f(this.index,0,0,0,0);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,0,0,0);
					break;
				case 12:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = 0;
					this.__uniformMatrix[1] = 0;
					this.__uniformMatrix[2] = 0;
					this.__uniformMatrix[3] = 0;
					this.__uniformMatrix[4] = 0;
					this.__uniformMatrix[5] = 0;
					this.__uniformMatrix[6] = 0;
					this.__uniformMatrix[7] = 0;
					this.__uniformMatrix[8] = 0;
					this.__uniformMatrix[9] = 0;
					this.__uniformMatrix[10] = 0;
					this.__uniformMatrix[11] = 0;
					this.__uniformMatrix[12] = 0;
					this.__uniformMatrix[13] = 0;
					this.__uniformMatrix[14] = 0;
					this.__uniformMatrix[15] = 0;
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__useArray && (value == null || value.length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(value != null) {
				switch(this.type) {
				case 0:
					gl.vertexAttrib1f(this.index,boolValue[0] ? 1 : 0);
					break;
				case 1:
					gl.vertexAttrib2f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0);
					break;
				case 2:
					gl.vertexAttrib3f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0);
					break;
				case 3:
					gl.vertexAttrib4f(this.index,boolValue[0] ? 1 : 0,boolValue[1] ? 1 : 0,boolValue[2] ? 1 : 0,boolValue[3] ? 1 : 0);
					break;
				case 4:
					gl.vertexAttrib1f(this.index,floatValue[0]);
					break;
				case 5:
					gl.vertexAttrib2f(this.index,floatValue[0],floatValue[1]);
					break;
				case 6:
					gl.vertexAttrib3f(this.index,floatValue[0],floatValue[1],floatValue[2]);
					break;
				case 7:
					gl.vertexAttrib4f(this.index,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					break;
				case 8:
					gl.vertexAttrib1f(this.index,intValue[0]);
					break;
				case 9:
					gl.vertexAttrib2f(this.index,intValue[0],intValue[1]);
					break;
				case 10:
					gl.vertexAttrib3f(this.index,intValue[0],intValue[1],intValue[2]);
					break;
				case 11:
					gl.vertexAttrib4f(this.index,intValue[0],intValue[1],intValue[2],intValue[3]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,floatValue[0],floatValue[1]);
					gl.vertexAttrib2f(this.index + 1,floatValue[2],floatValue[3]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,floatValue[0],floatValue[1],floatValue[2]);
					gl.vertexAttrib3f(this.index + 1,floatValue[3],floatValue[4],floatValue[5]);
					gl.vertexAttrib3f(this.index + 2,floatValue[6],floatValue[7],floatValue[8]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,floatValue[0],floatValue[1],floatValue[2],floatValue[3]);
					gl.vertexAttrib4f(this.index + 1,floatValue[4],floatValue[5],floatValue[6],floatValue[7]);
					gl.vertexAttrib4f(this.index + 2,floatValue[8],floatValue[9],floatValue[10],floatValue[11]);
					gl.vertexAttrib4f(this.index + 3,floatValue[12],floatValue[13],floatValue[14],floatValue[15]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
		}
	}
	,__updateGLFromBuffer: function(context,buffer,position,length,bufferOffset) {
		var gl = context.gl;
		if(this.__isUniform) {
			if(length >= this.__length) {
				switch(this.type) {
				case 1:case 9:
					gl.uniform2i(this.index,buffer[position] | 0,buffer[position + 1] | 0);
					break;
				case 3:case 11:
					gl.uniform4i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0,buffer[position + 3] | 0);
					break;
				case 4:
					gl.uniform1f(this.index,buffer[position]);
					break;
				case 5:
					gl.uniform2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 6:
					gl.uniform3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 7:
					gl.uniform4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 8:
					gl.uniform1i(this.index,buffer[position] | 0);
					break;
				case 2:case 10:
					gl.uniform3i(this.index,buffer[position] | 0,buffer[position + 1] | 0,buffer[position + 2] | 0);
					break;
				case 12:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 16:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.index,false,this.__uniformMatrix);
					break;
				case 20:
					this.__uniformMatrix[0] = buffer[position];
					this.__uniformMatrix[1] = buffer[position + 1];
					this.__uniformMatrix[2] = buffer[position + 2];
					this.__uniformMatrix[3] = buffer[position + 3];
					this.__uniformMatrix[4] = buffer[position + 4];
					this.__uniformMatrix[5] = buffer[position + 5];
					this.__uniformMatrix[6] = buffer[position + 6];
					this.__uniformMatrix[7] = buffer[position + 7];
					this.__uniformMatrix[8] = buffer[position + 8];
					this.__uniformMatrix[9] = buffer[position + 9];
					this.__uniformMatrix[10] = buffer[position + 10];
					this.__uniformMatrix[11] = buffer[position + 11];
					this.__uniformMatrix[12] = buffer[position + 12];
					this.__uniformMatrix[13] = buffer[position + 13];
					this.__uniformMatrix[14] = buffer[position + 14];
					this.__uniformMatrix[15] = buffer[position + 15];
					lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.index,false,this.__uniformMatrix);
					break;
				default:
				}
			}
		} else if(!this.__internal && (length == 0 || length == this.__length)) {
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.disableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,buffer[position],buffer[position + 1]);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,buffer[position]);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,buffer[position],buffer[position + 1],buffer[position + 2]);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,buffer[position],buffer[position + 1]);
					gl.vertexAttrib2f(this.index + 1,buffer[position + 2],buffer[position + 2 + 1]);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2]);
					gl.vertexAttrib3f(this.index + 1,buffer[position + 3],buffer[position + 3 + 1],buffer[position + 3 + 2]);
					gl.vertexAttrib3f(this.index + 2,buffer[position + 6],buffer[position + 6 + 1],buffer[position + 6 + 2]);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,buffer[position],buffer[position + 1],buffer[position + 2],buffer[position + 3]);
					gl.vertexAttrib4f(this.index + 1,buffer[position + 4],buffer[position + 4 + 1],buffer[position + 4 + 2],buffer[position + 4 + 3]);
					gl.vertexAttrib4f(this.index + 2,buffer[position + 8],buffer[position + 8 + 1],buffer[position + 8 + 2],buffer[position + 8 + 3]);
					gl.vertexAttrib4f(this.index + 3,buffer[position + 12],buffer[position + 12 + 1],buffer[position + 12 + 2],buffer[position + 12 + 3]);
					break;
				default:
				}
			} else {
				switch(this.type) {
				case 1:case 5:case 9:
					gl.vertexAttrib2f(this.index,0,0);
					break;
				case 3:case 7:case 11:
					gl.vertexAttrib4f(this.index,0,0,0,0);
					break;
				case 0:case 4:case 8:
					gl.vertexAttrib1f(this.index,0);
					break;
				case 2:case 6:case 10:
					gl.vertexAttrib3f(this.index,0,0,0);
					break;
				case 12:
					gl.vertexAttrib2f(this.index + 0,0,0);
					gl.vertexAttrib2f(this.index + 1,0,0);
					break;
				case 16:
					gl.vertexAttrib3f(this.index + 0,0,0,0);
					gl.vertexAttrib3f(this.index + 1,0,0,0);
					gl.vertexAttrib3f(this.index + 2,0,0,0);
					break;
				case 20:
					gl.vertexAttrib4f(this.index + 0,0,0,0,0);
					gl.vertexAttrib4f(this.index + 1,0,0,0,0);
					gl.vertexAttrib4f(this.index + 2,0,0,0,0);
					gl.vertexAttrib4f(this.index + 3,0,0,0,0);
					break;
				default:
				}
			}
		} else {
			var type = gl.FLOAT;
			if(this.__isBool) {
				type = gl.INT;
			} else if(this.__isInt) {
				type = gl.INT;
			}
			var _g = 0;
			var _g1 = this.__arrayLength;
			while(_g < _g1) {
				var i = _g++;
				gl.enableVertexAttribArray(this.index + i);
			}
			if(length > 0) {
				var _g = 0;
				var _g1 = this.__arrayLength;
				while(_g < _g1) {
					var i = _g++;
					gl.vertexAttribPointer(this.index + i,this.__length,type,false,this.__length * 4,(position + bufferOffset * this.__length + i * this.__arrayLength) * 4);
				}
			}
		}
	}
	,set_name: function(value) {
		this.__internal = StringTools.startsWith(value,"openfl_");
		return this.name = value;
	}
	,__class__: openfl_display_ShaderParameter
	,__properties__: {set_name:"set_name"}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 3;
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = "openfl.display.Shape";
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics(this);
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display_SimpleButton = function(upState,overState,downState,hitTestState) {
	openfl_display_InteractiveObject.call(this);
	this.__drawableType = 6;
	this.enabled = true;
	this.trackAsMenu = false;
	this.useHandCursor = true;
	this.__upState = upState != null ? upState : new openfl_display_DisplayObject();
	this.__overState = overState;
	this.__downState = downState;
	this.set_hitTestState(hitTestState != null ? hitTestState : new openfl_display_DisplayObject());
	this.addEventListener("mouseDown",$bind(this,this.__this_onMouseDown));
	this.addEventListener("mouseOut",$bind(this,this.__this_onMouseOut));
	this.addEventListener("mouseOver",$bind(this,this.__this_onMouseOver));
	this.addEventListener("mouseUp",$bind(this,this.__this_onMouseUp));
	this.__tabEnabled = true;
	this.set___currentState(this.__upState);
	if(openfl_display_SimpleButton.__constructor != null) {
		var method = openfl_display_SimpleButton.__constructor;
		openfl_display_SimpleButton.__constructor = null;
		method(this);
	}
};
$hxClasses["openfl.display.SimpleButton"] = openfl_display_SimpleButton;
openfl_display_SimpleButton.__name__ = "openfl.display.SimpleButton";
openfl_display_SimpleButton.__super__ = openfl_display_InteractiveObject;
openfl_display_SimpleButton.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		var childWorldTransform = openfl_geom_Matrix.__pool.get();
		var local = this.__currentState.__transform;
		childWorldTransform.a = local.a * matrix.a + local.b * matrix.c;
		childWorldTransform.b = local.a * matrix.b + local.b * matrix.d;
		childWorldTransform.c = local.c * matrix.a + local.d * matrix.c;
		childWorldTransform.d = local.c * matrix.b + local.d * matrix.d;
		childWorldTransform.tx = local.tx * matrix.a + local.ty * matrix.c + matrix.tx;
		childWorldTransform.ty = local.tx * matrix.b + local.ty * matrix.d + matrix.ty;
		this.__currentState.__getRenderBounds(rect,childWorldTransform);
		openfl_geom_Matrix.__pool.release(childWorldTransform);
	}
	,__getCursor: function() {
		if(this.useHandCursor && !this.__ignoreEvent && this.enabled) {
			return "button";
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		var hitTest = false;
		if(this.get_hitTestState() != null) {
			if(this.get_hitTestState().__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				if(stack != null) {
					if(stack.length == 0) {
						stack[0] = hitObject;
					} else {
						stack[stack.length - 1] = hitObject;
					}
				}
				hitTest = !interactiveOnly || this.mouseEnabled;
			}
		} else if(this.__currentState != null) {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled || this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				hitTest = false;
			} else if(this.__currentState.__hitTest(x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				hitTest = interactiveOnly;
			}
		}
		if(stack != null) {
			while(stack.length > 1 && stack[stack.length - 1] == stack[stack.length - 2]) stack.pop();
		}
		return hitTest;
	}
	,__hitTestMask: function(x,y) {
		var hitTest = false;
		if(this.__currentState.__hitTestMask(x,y)) {
			hitTest = true;
		}
		return hitTest;
	}
	,__setStageReference: function(stage) {
		openfl_display_InteractiveObject.prototype.__setStageReference.call(this,stage);
		if(this.__currentState != null) {
			this.__currentState.__setStageReference(stage);
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setStageReference(stage);
		}
	}
	,__setTransformDirty: function() {
		openfl_display_InteractiveObject.prototype.__setTransformDirty.call(this);
		if(this.__currentState != null) {
			this.__currentState.__setTransformDirty();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__setTransformDirty();
		}
	}
	,__update: function(transformOnly,updateChildren) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren);
		if(updateChildren) {
			if(this.__currentState != null) {
				this.__currentState.__update(transformOnly,true);
			}
			if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
				this.get_hitTestState().__update(transformOnly,true);
			}
		}
	}
	,__updateTransforms: function(overrideTransform) {
		openfl_display_InteractiveObject.prototype.__updateTransforms.call(this,overrideTransform);
		if(this.__currentState != null) {
			this.__currentState.__updateTransforms();
		}
		if(this.get_hitTestState() != null && this.get_hitTestState() != this.__currentState) {
			this.get_hitTestState().__updateTransforms();
		}
	}
	,get_downState: function() {
		return this.__downState;
	}
	,get_hitTestState: function() {
		return this.__hitTestState;
	}
	,set_hitTestState: function(hitTestState) {
		if(this.__hitTestState != null && this.__hitTestState != hitTestState) {
			if(this.__hitTestState != this.get_downState() && this.__hitTestState != this.get_upState() && this.__hitTestState != this.get_overState()) {
				this.__hitTestState.__renderParent = null;
			}
		}
		if(hitTestState != null) {
			hitTestState.__renderParent = this;
			if(!hitTestState.__renderDirty) {
				hitTestState.__renderDirty = true;
				hitTestState.__setParentRenderDirty();
			}
		}
		return this.__hitTestState = hitTestState;
	}
	,get_overState: function() {
		return this.__overState;
	}
	,get_upState: function() {
		return this.__upState;
	}
	,set___currentState: function(value) {
		if(this.__currentState != null && this.__currentState != this.get_hitTestState()) {
			this.__currentState.__renderParent = null;
		}
		if(value != null && value.parent != null) {
			value.parent.removeChild(value);
		}
		if(openfl_display_DisplayObject.__supportDOM && this.__previousStates == null) {
			this.__previousStates = openfl_Vector.toObjectVector(null);
		}
		if(value != this.__currentState) {
			if(openfl_display_DisplayObject.__supportDOM) {
				if(this.__currentState != null) {
					this.__currentState.__setStageReference(null);
					this.__previousStates.push(this.__currentState);
				}
				var index = this.__previousStates.indexOf(value,0);
				if(index > -1) {
					this.__previousStates.splice(index,1);
				}
			}
			if(value != null) {
				value.__renderParent = this;
				if(!value.__renderDirty) {
					value.__renderDirty = true;
					value.__setParentRenderDirty();
				}
			}
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
		this.__currentState = value;
		return value;
	}
	,__this_onMouseDown: function(event) {
		if(this.enabled) {
			this.set___currentState(this.get_downState());
		}
	}
	,__this_onMouseOut: function(event) {
		this.__ignoreEvent = false;
		if(this.get_upState() != this.__currentState) {
			this.set___currentState(this.get_upState());
		}
	}
	,__this_onMouseOver: function(event) {
		if(event.buttonDown) {
			this.__ignoreEvent = true;
		}
		if(this.get_overState() != this.__currentState && this.get_overState() != null && !this.__ignoreEvent && this.enabled) {
			this.set___currentState(this.get_overState());
		}
	}
	,__this_onMouseUp: function(event) {
		this.__ignoreEvent = false;
		if(this.enabled && this.get_overState() != null) {
			this.set___currentState(this.get_overState());
		} else {
			this.set___currentState(this.get_upState());
		}
	}
	,__class__: openfl_display_SimpleButton
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set___currentState:"set___currentState",get_upState:"get_upState",get_overState:"get_overState",set_hitTestState:"set_hitTestState",get_hitTestState:"get_hitTestState",get_downState:"get_downState"})
});
var openfl_display_Stage = function($window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.__drawableType = 5;
	this.set_name(null);
	this.__color = -1;
	this.__colorSplit = [255,255,255];
	this.__colorString = "#FFFFFF";
	this.__contentsScaleFactor = 1;
	this.__currentTabOrderIndex = 0;
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.__logicalWidth = 0;
	this.__logicalHeight = 0;
	this.__displayMatrix = new openfl_geom_Matrix();
	this.__displayRect = new openfl_geom_Rectangle();
	this.__renderDirty = true;
	this.stage3Ds = openfl_Vector.toObjectVector(null);
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage3Ds.push(new openfl_display_Stage3D(this));
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = true;
	this.allowsFullScreenInteractive = true;
	this.__quality = 1;
	this.__scaleMode = 2;
	this.showDefaultContextMenu = true;
	this.softKeyboardRect = new openfl_geom_Rectangle();
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__forceRender = false;
	this.__stack = [];
	this.__rollOutStack = [];
	this.__mouseOutStack = [];
	this.__touchData = new haxe_ds_IntMap();
	this.application = $window.application;
	this.window = $window;
	this.set_color(color);
	this.__contentsScaleFactor = $window.__scale;
	this.__wasFullscreen = $window.__fullscreen;
	this.__resize();
	if(openfl_Lib.get_current().stage == null) {
		this.stage.addChild(openfl_Lib.get_current());
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = "openfl.display.Stage";
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	invalidate: function() {
		this.__invalidated = true;
		this.__renderDirty = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,__broadcastEvent: function(event) {
		if(Object.prototype.hasOwnProperty.call(openfl_display_DisplayObject.__broadcastEvents.h,event.type)) {
			var dispatchers = openfl_display_DisplayObject.__broadcastEvents.h[event.type];
			var _g = 0;
			while(_g < dispatchers.length) {
				var dispatcher = dispatchers[_g];
				++_g;
				if(dispatcher.stage == this || dispatcher.stage == null) {
					try {
						dispatcher.__dispatch(event);
					} catch( _g1 ) {
						haxe_NativeStackTrace.lastError = _g1;
						var e = haxe_Exception.caught(_g1).unwrap();
						this.__handleError(e);
					}
				}
			}
		}
	}
	,__createRenderer: function() {
		var pixelRatio = 1;
		if(this.window.__scale > 1) {
			pixelRatio = this.window.devicePixelRatio || 1;
		}
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		switch(this.window.context.type) {
		case "cairo":
			break;
		case "canvas":
			this.__renderer = new openfl_display_CanvasRenderer(this.window.context.canvas2D);
			(js_Boot.__cast(this.__renderer , openfl_display_CanvasRenderer)).pixelRatio = pixelRatio;
			break;
		case "dom":
			this.__renderer = new openfl_display_DOMRenderer(this.window.context.dom);
			(js_Boot.__cast(this.__renderer , openfl_display_DOMRenderer)).pixelRatio = pixelRatio;
			break;
		case "opengl":case "opengles":case "webgl":
			this.context3D = new openfl_display3D_Context3D(this);
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
			this.context3D.present();
			this.__renderer = new openfl_display_OpenGLRenderer(this.context3D);
			break;
		default:
		}
		if(this.__renderer != null) {
			var tmp = this.get_quality();
			this.__renderer.__allowSmoothing = tmp != 2;
			this.__renderer.__worldTransform = this.__displayMatrix;
			this.__renderer.__stage = this;
			this.__renderer.__resize(windowWidth,windowHeight);
		}
	}
	,__dispatchEvent: function(event) {
		try {
			return openfl_display_DisplayObjectContainer.prototype.__dispatchEvent.call(this,event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
			return false;
		}
	}
	,__dispatchPendingMouseEvent: function() {
		if(this.__pendingMouseEvent) {
			this.__onMouse("mouseMove",this.__pendingMouseX,this.__pendingMouseY,0);
			this.__pendingMouseEvent = false;
		}
	}
	,__dispatchStack: function(event,stack) {
		try {
			var target;
			var length = stack.length;
			if(length == 0) {
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
			} else {
				event.eventPhase = 1;
				event.target = stack[stack.length - 1];
				var _g = 0;
				var _g1 = length - 1;
				while(_g < _g1) {
					var i = _g++;
					stack[i].__dispatch(event);
					if(event.__isCanceled) {
						return;
					}
				}
				event.eventPhase = 2;
				target = event.target;
				target.__dispatch(event);
				if(event.__isCanceled) {
					return;
				}
				if(event.bubbles) {
					event.eventPhase = 3;
					var i = length - 2;
					while(i >= 0) {
						stack[i].__dispatch(event);
						if(event.__isCanceled) {
							return;
						}
						--i;
					}
				}
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__dispatchTarget: function(target,event) {
		try {
			return target.__dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
			return false;
		}
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			var _this = parent.__getWorldTransform();
			var norm = _this.a * _this.d - _this.b * _this.c;
			if(norm == 0) {
				mouse.x = -_this.tx;
				mouse.y = -_this.ty;
			} else {
				var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
				mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
				mouse.x = px;
			}
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__globalToLocal: function(global,local) {
		if(global != local) {
			local.copyFrom(global);
		}
		return local;
	}
	,__handleError: function(e) {
		var event = new openfl_events_UncaughtErrorEvent("uncaughtError",true,true,e);
		try {
			openfl_Lib.get_current().__loaderInfo.uncaughtErrorEvents.dispatchEvent(event);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		if(!event.__preventDefault) {
			var message = haxe_CallStack.toString(haxe_CallStack.exceptionStack());
			console.log(message);
			var message = Std.string(e);
			console.log(message);
			try {
				var exc = e;
				if(exc != null && Object.prototype.hasOwnProperty.call(exc,"stack") && exc.stack != null && exc.stack != "") {
					console.log(exc.stack);
					e.stack = exc.stack;
				} else {
					var msg = haxe_CallStack.toString(haxe_CallStack.callStack());
					console.log(msg);
				}
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
			throw e;
		}
	}
	,__onKey: function(type,keyCode,modifier) {
		this.__dispatchPendingMouseEvent();
		openfl_events_MouseEvent.__altKey = lime_ui_KeyModifier.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui_KeyModifier.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui_KeyModifier.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui_KeyModifier.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 13;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var charCode = openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui_KeyModifier.get_shiftKey(modifier));
			if(type == "keyUp" && (keyCode1 == 32 || keyCode1 == 13) && ((this.__focus) instanceof openfl_display_Sprite)) {
				var sprite = js_Boot.__cast(this.__focus , openfl_display_Sprite);
				if(sprite.get_buttonMode() && sprite.focusRect == true) {
					var localPoint = openfl_geom_Point.__pool.get();
					var targetPoint = openfl_geom_Point.__pool.get();
					targetPoint.x = this.__mouseX;
					targetPoint.y = this.__mouseY;
					var clickEvent = openfl_events_MouseEvent.__create("click",0,this.__mouseX,this.__mouseY,sprite.__globalToLocal(targetPoint,localPoint),sprite);
					this.__dispatchStack(clickEvent,stack);
					openfl_geom_Point.__pool.release(targetPoint);
					openfl_geom_Point.__pool.release(localPoint);
				}
			}
			var event = new openfl_events_KeyboardEvent(type,true,true,charCode,keyCode1,keyLocation,this.__macKeyboard ? lime_ui_KeyModifier.get_ctrlKey(modifier) || lime_ui_KeyModifier.get_metaKey(modifier) : lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_altKey(modifier),lime_ui_KeyModifier.get_shiftKey(modifier),lime_ui_KeyModifier.get_ctrlKey(modifier),lime_ui_KeyModifier.get_metaKey(modifier));
			stack.reverse();
			this.__dispatchStack(event,stack);
			if(event.__preventDefault) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			} else if(type == "keyDown" && keyCode1 == 9) {
				var tabStack = [];
				this.__tabTest(tabStack);
				var nextIndex = -1;
				var nextObject = null;
				var nextOffset = lime_ui_KeyModifier.get_shiftKey(modifier) ? -1 : 1;
				if(tabStack.length > 1) {
					haxe_ds_ArraySort.sort(tabStack,function(a,b) {
						return a.get_tabIndex() - b.get_tabIndex();
					});
					if(tabStack[tabStack.length - 1].get_tabIndex() != -1) {
						var i = 0;
						while(i < tabStack.length) {
							if(tabStack[i].get_tabIndex() > -1) {
								if(i > 0) {
									tabStack.splice(0,i);
								}
								break;
							}
							++i;
						}
					}
					if(this.get_focus() != null) {
						var current = this.get_focus();
						var index = tabStack.indexOf(current);
						while(index == -1 && current != null) {
							var currentParent = current.parent;
							if(currentParent != null && currentParent.get_tabChildren()) {
								var currentIndex = currentParent.getChildIndex(current);
								if(currentIndex == -1) {
									current = currentParent;
									continue;
								}
								var i = currentIndex + nextOffset;
								while(lime_ui_KeyModifier.get_shiftKey(modifier) ? i >= 0 : i < currentParent.get_numChildren()) {
									var sibling = currentParent.getChildAt(i);
									if(((sibling) instanceof openfl_display_InteractiveObject)) {
										var interactiveSibling = js_Boot.__cast(sibling , openfl_display_InteractiveObject);
										index = tabStack.indexOf(interactiveSibling);
										if(index != -1) {
											nextOffset = 0;
											break;
										}
									}
									i += nextOffset;
								}
							} else if(lime_ui_KeyModifier.get_shiftKey(modifier)) {
								index = tabStack.indexOf(currentParent);
								if(index != -1) {
									nextOffset = 0;
								}
							}
							current = currentParent;
						}
						if(index < 0) {
							nextIndex = 0;
						} else {
							nextIndex = index + nextOffset;
						}
					} else {
						nextIndex = this.__currentTabOrderIndex;
					}
				} else if(tabStack.length == 1) {
					nextObject = tabStack[0];
					if(this.get_focus() == nextObject) {
						nextObject = null;
					}
				}
				var cancelTab = nextIndex >= 0 && nextIndex < tabStack.length;
				if(tabStack.length == 1 || tabStack.length == 0 && this.get_focus() != null) {
					nextIndex = 0;
				} else if(tabStack.length > 1) {
					if(nextIndex < 0) {
						nextIndex += tabStack.length;
					}
					nextIndex %= tabStack.length;
					nextObject = tabStack[nextIndex];
					if(nextObject == this.get_focus()) {
						nextIndex += nextOffset;
						if(nextIndex < 0) {
							nextIndex += tabStack.length;
						}
						nextIndex %= tabStack.length;
						nextObject = tabStack[nextIndex];
					}
				}
				var focusEvent = null;
				if(this.get_focus() != null) {
					focusEvent = new openfl_events_FocusEvent("keyFocusChange",true,true,nextObject,lime_ui_KeyModifier.get_shiftKey(modifier),0);
					stack = [];
					this.get_focus().__getInteractive(stack);
					stack.reverse();
					this.__dispatchStack(focusEvent,stack);
					if(focusEvent.isDefaultPrevented()) {
						this.window.onKeyDown.cancel();
					}
				}
				if(focusEvent == null || !focusEvent.isDefaultPrevented()) {
					this.__currentTabOrderIndex = nextIndex;
					if(nextObject != null) {
						this.set_focus(nextObject);
					}
					if(cancelTab) {
						this.window.onKeyDown.cancel();
					}
				}
			}
		}
	}
	,__onLimeCreateWindow: function($window) {
		if(this.window != $window) {
			return;
		}
		var _g = $bind(this,this.__onLimeWindowActivate);
		var window1 = $window;
		var tmp = function() {
			_g(window1);
		};
		$window.onActivate.add(tmp);
		var _g1 = $bind(this,this.__onLimeWindowClose);
		var window2 = $window;
		var tmp = function() {
			_g1(window2);
		};
		$window.onClose.add(tmp,false,-9000);
		var _g2 = $bind(this,this.__onLimeWindowDeactivate);
		var window3 = $window;
		var tmp = function() {
			_g2(window3);
		};
		$window.onDeactivate.add(tmp);
		var _g3 = $bind(this,this.__onLimeWindowDropFile);
		var window4 = $window;
		var tmp = function(file) {
			_g3(window4,file);
		};
		$window.onDropFile.add(tmp);
		var _g4 = $bind(this,this.__onLimeWindowEnter);
		var window5 = $window;
		var tmp = function() {
			_g4(window5);
		};
		$window.onEnter.add(tmp);
		var _g5 = $bind(this,this.__onLimeWindowExpose);
		var window6 = $window;
		var tmp = function() {
			_g5(window6);
		};
		$window.onExpose.add(tmp);
		var _g6 = $bind(this,this.__onLimeWindowFocusIn);
		var window7 = $window;
		var tmp = function() {
			_g6(window7);
		};
		$window.onFocusIn.add(tmp);
		var _g7 = $bind(this,this.__onLimeWindowFocusOut);
		var window8 = $window;
		var tmp = function() {
			_g7(window8);
		};
		$window.onFocusOut.add(tmp);
		var _g8 = $bind(this,this.__onLimeWindowFullscreen);
		var window9 = $window;
		var tmp = function() {
			_g8(window9);
		};
		$window.onFullscreen.add(tmp);
		var _g9 = $bind(this,this.__onLimeKeyDown);
		var window10 = $window;
		var tmp = function(keyCode,modifier) {
			_g9(window10,keyCode,modifier);
		};
		$window.onKeyDown.add(tmp);
		var _g10 = $bind(this,this.__onLimeKeyUp);
		var window11 = $window;
		var tmp = function(keyCode,modifier) {
			_g10(window11,keyCode,modifier);
		};
		$window.onKeyUp.add(tmp);
		var _g11 = $bind(this,this.__onLimeWindowLeave);
		var window12 = $window;
		var tmp = function() {
			_g11(window12);
		};
		$window.onLeave.add(tmp);
		var _g12 = $bind(this,this.__onLimeWindowMinimize);
		var window13 = $window;
		var tmp = function() {
			_g12(window13);
		};
		$window.onMinimize.add(tmp);
		var _g13 = $bind(this,this.__onLimeMouseDown);
		var window14 = $window;
		var tmp = function(x,y,button) {
			_g13(window14,x,y,button);
		};
		$window.onMouseDown.add(tmp);
		var _g14 = $bind(this,this.__onLimeMouseMove);
		var window15 = $window;
		var tmp = function(x,y) {
			_g14(window15,x,y);
		};
		$window.onMouseMove.add(tmp);
		var _g15 = $bind(this,this.__onLimeMouseMoveRelative);
		var window16 = $window;
		var tmp = function(x,y) {
			_g15(window16,x,y);
		};
		$window.onMouseMoveRelative.add(tmp);
		var _g16 = $bind(this,this.__onLimeMouseUp);
		var window17 = $window;
		var tmp = function(x,y,button) {
			_g16(window17,x,y,button);
		};
		$window.onMouseUp.add(tmp);
		var _g17 = $bind(this,this.__onLimeMouseWheel);
		var window18 = $window;
		var tmp = function(deltaX,deltaY,deltaMode) {
			_g17(window18,deltaX,deltaY,deltaMode);
		};
		$window.onMouseWheel.add(tmp);
		var _g18 = $bind(this,this.__onLimeWindowMove);
		var window19 = $window;
		var tmp = function(x,y) {
			_g18(window19,x,y);
		};
		$window.onMove.add(tmp);
		$window.onRender.add($bind(this,this.__onLimeRender));
		$window.onRenderContextLost.add($bind(this,this.__onLimeRenderContextLost));
		$window.onRenderContextRestored.add($bind(this,this.__onLimeRenderContextRestored));
		var _g19 = $bind(this,this.__onLimeWindowResize);
		var window20 = $window;
		var tmp = function(width,height) {
			_g19(window20,width,height);
		};
		$window.onResize.add(tmp);
		var _g20 = $bind(this,this.__onLimeWindowRestore);
		var window21 = $window;
		var tmp = function() {
			_g20(window21);
		};
		$window.onRestore.add(tmp);
		var _g21 = $bind(this,this.__onLimeTextEdit);
		var window22 = $window;
		var tmp = function(text,start,length) {
			_g21(window22,text,start,length);
		};
		$window.onTextEdit.add(tmp);
		var _g22 = $bind(this,this.__onLimeTextInput);
		var window23 = $window;
		var tmp = function(text) {
			_g22(window23,text);
		};
		$window.onTextInput.add(tmp);
		this.__onLimeWindowCreate($window);
	}
	,__onLimeGamepadAxisMove: function(gamepad,axis,value) {
		try {
			openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadButtonDown: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadButtonUp: function(gamepad,button) {
		try {
			openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeGamepadConnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadConnect(gamepad);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
		var _g = $bind(this,this.__onLimeGamepadAxisMove);
		var gamepad1 = gamepad;
		var tmp = function(axis,value) {
			_g(gamepad1,axis,value);
		};
		gamepad.onAxisMove.add(tmp);
		var _g1 = $bind(this,this.__onLimeGamepadButtonDown);
		var gamepad2 = gamepad;
		var tmp = function(button) {
			_g1(gamepad2,button);
		};
		gamepad.onButtonDown.add(tmp);
		var _g2 = $bind(this,this.__onLimeGamepadButtonUp);
		var gamepad3 = gamepad;
		var tmp = function(button) {
			_g2(gamepad3,button);
		};
		gamepad.onButtonUp.add(tmp);
		var _g3 = $bind(this,this.__onLimeGamepadDisconnect);
		var gamepad4 = gamepad;
		var tmp = function() {
			_g3(gamepad4);
		};
		gamepad.onDisconnect.add(tmp);
	}
	,__onLimeGamepadDisconnect: function(gamepad) {
		try {
			openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			var e = haxe_Exception.caught(_g).unwrap();
			this.__handleError(e);
		}
	}
	,__onLimeKeyDown: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,__onLimeKeyUp: function($window,keyCode,modifier) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,__onLimeModuleExit: function(code) {
		if(this.window != null) {
			var event = null;
			event = new openfl_events_Event("deactivate");
			this.__broadcastEvent(event);
		}
	}
	,__onLimeMouseDown: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseDown.cancel();
		}
	}
	,__onLimeMouseMove: function($window,x,y) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__pendingMouseEvent = true;
		this.__pendingMouseX = x * $window.__scale | 0;
		this.__pendingMouseY = y * $window.__scale | 0;
	}
	,__onLimeMouseMoveRelative: function($window,x,y) {
	}
	,__onLimeMouseUp: function($window,x,y,button) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * $window.__scale | 0,y * $window.__scale | 0,button);
		if(!this.showDefaultContextMenu && button == 2) {
			$window.onMouseUp.cancel();
		}
	}
	,__onLimeMouseWheel: function($window,deltaX,deltaY,deltaMode) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		if(deltaMode == lime_ui_MouseWheelMode.PIXELS) {
			this.__onMouseWheel(deltaX * $window.__scale | 0,deltaY * $window.__scale | 0,deltaMode);
		} else {
			this.__onMouseWheel(deltaX | 0,deltaY | 0,deltaMode);
		}
	}
	,__onLimeRender: function(context) {
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		openfl_display__$internal_stats_Context3DStats.resetDrawCalls();
		var event = null;
		this.__broadcastEvent(new openfl_events_Event("enterFrame"));
		this.__broadcastEvent(new openfl_events_Event("frameConstructed"));
		this.__broadcastEvent(new openfl_events_Event("exitFrame"));
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		var shouldRender = this.__renderer != null && (this.__renderDirty || this.__forceRender);
		if(this.__invalidated && shouldRender) {
			this.__invalidated = false;
			event = new openfl_events_Event("render");
			this.__broadcastEvent(event);
		}
		this.__update(false,true);
		if(this.__renderer != null) {
			if(this.context3D != null) {
				var stage3D = this.stage3Ds.iterator();
				while(stage3D.hasNext()) {
					var stage3D1 = stage3D.next();
					this.context3D.__renderStage3D(stage3D1);
				}
				if(this.context3D.__present) {
					shouldRender = true;
				}
			}
			if(shouldRender) {
				var tmp = this.__renderer.__type == "cairo";
				if(this.context3D == null) {
					this.__renderer.__clear();
				}
				this.__renderer.__render(this);
			} else if(this.context3D == null) {
				this.window.onRender.cancel();
			}
			if(this.context3D != null) {
				if(!this.context3D.__present) {
					this.window.onRender.cancel();
				} else {
					if(!this.__renderer.__cleared) {
						this.__renderer.__clear();
					}
					this.context3D.__present = false;
					this.context3D.__cleared = false;
				}
			}
			this.__renderer.__cleared = false;
		}
		this.__rendering = false;
	}
	,__onLimeRenderContextLost: function() {
		this.__renderer = null;
		this.context3D = null;
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__lostContext();
		}
	}
	,__onLimeRenderContextRestored: function(context) {
		this.__createRenderer();
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__restoreContext();
		}
	}
	,__onLimeTextEdit: function($window,text,start,length) {
	}
	,__onLimeTextInput: function($window,text) {
		if(this.window == null || this.window != $window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,true,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__dispatchStack(event,stack);
		} else {
			this.__dispatchEvent(event);
		}
		if(event.isDefaultPrevented()) {
			$window.onTextInput.cancel();
		}
	}
	,__onLimeTouchCancel: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchMove: function(touch) {
		this.__onTouch("touchMove",touch,this.__primaryTouch == touch);
	}
	,__onLimeTouchEnd: function(touch) {
		var isPrimaryTouchPoint = this.__primaryTouch == touch;
		if(isPrimaryTouchPoint) {
			this.__primaryTouch = null;
		}
		this.__onTouch("touchEnd",touch,isPrimaryTouchPoint);
	}
	,__onLimeTouchStart: function(touch) {
		if(this.__primaryTouch == null) {
			this.__primaryTouch = touch;
		}
		this.__onTouch("touchBegin",touch,this.__primaryTouch == touch);
	}
	,__onLimeUpdate: function(deltaTime) {
		this.__deltaTime = deltaTime;
		this.__dispatchPendingMouseEvent();
	}
	,__onLimeWindowActivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowClose: function($window) {
		if(this.window == $window) {
			this.window = null;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
	}
	,__onLimeWindowCreate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if($window.context != null) {
			this.__createRenderer();
		}
	}
	,__onLimeWindowDeactivate: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowDropFile: function($window,file) {
	}
	,__onLimeWindowEnter: function($window) {
	}
	,__onLimeWindowExpose: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
	}
	,__onLimeWindowFocusIn: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__renderDirty = true;
		var event = null;
		event = new openfl_events_Event("activate");
		this.__broadcastEvent(event);
		this.set_focus(this.__cacheFocus);
	}
	,__onLimeWindowFocusOut: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__primaryTouch = null;
		var event = null;
		event = new openfl_events_Event("deactivate");
		this.__broadcastEvent(event);
		var currentFocus = this.get_focus();
		this.set_focus(null);
		this.__cacheFocus = currentFocus;
		openfl_events_MouseEvent.__altKey = false;
		openfl_events_MouseEvent.__commandKey = false;
		openfl_events_MouseEvent.__ctrlKey = false;
		openfl_events_MouseEvent.__shiftKey = false;
	}
	,__onLimeWindowFullscreen: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(!this.__wasFullscreen) {
			this.__wasFullscreen = true;
			if(this.__displayState == 2) {
				this.__displayState = 1;
			}
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
		}
	}
	,__onLimeWindowLeave: function($window) {
		if(this.window == null || this.window != $window || openfl_events_MouseEvent.__buttonDown) {
			return;
		}
		this.__dispatchPendingMouseEvent();
		var event = null;
		event = new openfl_events_Event("mouseLeave");
		this.__dispatchEvent(event);
	}
	,__onLimeWindowMinimize: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
	}
	,__onLimeWindowMove: function($window,x,y) {
	}
	,__onLimeWindowResize: function($window,width,height) {
		if(this.window == null || this.window != $window) {
			return;
		}
		this.__resize();
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onLimeWindowRestore: function($window) {
		if(this.window == null || this.window != $window) {
			return;
		}
		if(this.__wasFullscreen && !$window.__fullscreen) {
			this.__wasFullscreen = false;
			this.__displayState = 2;
			this.__dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		this.__mouseX = targetPoint.x;
		this.__mouseY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.__allowMouseFocus()) {
				if(this.get_focus() != null) {
					var focusEvent = new openfl_events_FocusEvent("mouseFocusChange",true,true,target,false,0);
					this.__dispatchStack(focusEvent,stack);
					if(!focusEvent.isDefaultPrevented()) {
						this.set_focus(target);
					}
				} else {
					this.set_focus(target);
				}
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			openfl_events_MouseEvent.__buttonDown = true;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft != null) {
				openfl_events_MouseEvent.__buttonDown = false;
				if(this.__mouseDownLeft == target) {
					clickType = "click";
				} else {
					var event = null;
					event = openfl_events_MouseEvent.__create("releaseOutside",1,this.__mouseX,this.__mouseY,new openfl_geom_Point(this.__mouseX,this.__mouseY),this);
					this.__mouseDownLeft.dispatchEvent(event);
				}
				this.__mouseDownLeft = null;
			}
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var event = null;
		event = openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
		this.__dispatchStack(event,stack);
		if(clickType != null) {
			event = openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
			this.__dispatchStack(event,stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					event = openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
					this.__dispatchStack(event,stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		if(openfl_ui_Mouse.__cursor == "auto" && !openfl_ui_Mouse.__hidden) {
			var cursor = null;
			if(this.__mouseDownLeft != null) {
				cursor = this.__mouseDownLeft.__getCursor();
			} else {
				var _g = 0;
				while(_g < stack.length) {
					var target1 = stack[_g];
					++_g;
					cursor = target1.__getCursor();
					if(cursor != null) {
						this.window.set_cursor(openfl_ui_MouseCursor.toLimeCursor(cursor));
						break;
					}
				}
			}
			if(cursor == null) {
				this.window.set_cursor(lime_ui_MouseCursor.ARROW);
			}
		}
		var event;
		if(target != this.__mouseOverTarget) {
			if(this.__mouseOverTarget != null) {
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),this.__mouseOverTarget);
				this.__dispatchStack(event,this.__mouseOutStack);
			}
		}
		var item;
		var i = 0;
		while(i < this.__rollOutStack.length) {
			item = this.__rollOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(this.__rollOutStack,item);
				event = openfl_events_MouseEvent.__create("rollOut",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
				event.bubbles = false;
				this.__dispatchTarget(item,event);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(this.__rollOutStack.indexOf(item) == -1 && this.__mouseOverTarget != null) {
				if(item.hasEventListener("rollOver")) {
					event = openfl_events_MouseEvent.__create("rollOver",button,this.__mouseX,this.__mouseY,this.__mouseOverTarget.__globalToLocal(targetPoint,localPoint),item);
					event.bubbles = false;
					this.__dispatchTarget(item,event);
				}
				if(item.hasEventListener("rollOut") || item.hasEventListener("rollOver")) {
					this.__rollOutStack.push(item);
				}
			}
		}
		if(target != this.__mouseOverTarget) {
			if(target != null) {
				event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,localPoint),target);
				this.__dispatchStack(event,stack);
			}
			this.__mouseOverTarget = target;
			this.__mouseOutStack = stack;
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
			var dropTarget = null;
			if(this.__mouseOverTarget == this.__dragObject) {
				var cacheMouseEnabled = this.__dragObject.mouseEnabled;
				var cacheMouseChildren = this.__dragObject.mouseChildren;
				this.__dragObject.mouseEnabled = false;
				this.__dragObject.mouseChildren = false;
				var stack = [];
				if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
					dropTarget = stack[stack.length - 1];
				}
				this.__dragObject.mouseEnabled = cacheMouseEnabled;
				this.__dragObject.mouseChildren = cacheMouseChildren;
			} else if(this.__mouseOverTarget != this) {
				dropTarget = this.__mouseOverTarget;
			}
			this.__dragObject.dropTarget = dropTarget;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
	}
	,__onMouseWheel: function(deltaX,deltaY,deltaMode) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		var target = null;
		if(this.__hitTest(this.__mouseX,this.__mouseY,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(x,y);
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var delta = deltaY | 0;
		var event = openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target.__globalToLocal(targetPoint,targetPoint),target,delta);
		event.cancelable = true;
		this.__dispatchStack(event,stack);
		if(event.isDefaultPrevented()) {
			this.window.onMouseWheel.cancel();
		}
		openfl_geom_Point.__pool.release(targetPoint);
	}
	,__onTouch: function(type,touch,isPrimaryTouchPoint) {
		var targetPoint = openfl_geom_Point.__pool.get();
		targetPoint.setTo(Math.round(touch.x * this.window.__width * this.window.__scale),Math.round(touch.y * this.window.__height * this.window.__scale));
		var _this = this.__displayMatrix;
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			targetPoint.x = -_this.tx;
			targetPoint.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - targetPoint.y) + _this.d * (targetPoint.x - _this.tx));
			targetPoint.y = 1.0 / norm * (_this.a * (targetPoint.y - _this.ty) + _this.b * (_this.tx - targetPoint.x));
			targetPoint.x = px;
		}
		var touchX = targetPoint.x;
		var touchY = targetPoint.y;
		var stack = [];
		var target = null;
		if(this.__hitTest(touchX,touchY,false,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var touchId = touch.id;
		var touchData = null;
		if(this.__touchData.h.hasOwnProperty(touchId)) {
			touchData = this.__touchData.h[touchId];
		} else {
			touchData = openfl_utils__$internal_TouchData.__pool.get();
			touchData.reset();
			touchData.touch = touch;
			this.__touchData.h[touchId] = touchData;
		}
		var touchType = null;
		var releaseTouchData = false;
		switch(type) {
		case "touchBegin":
			touchData.touchDownTarget = target;
			break;
		case "touchEnd":
			if(touchData.touchDownTarget == target) {
				touchType = "touchTap";
			}
			touchData.touchDownTarget = null;
			releaseTouchData = true;
			break;
		default:
		}
		var localPoint = openfl_geom_Point.__pool.get();
		var touchEvent = openfl_events_TouchEvent.__create(type,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
		touchEvent.touchPointID = touchId;
		touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
		touchEvent.pressure = touch.pressure;
		this.__dispatchStack(touchEvent,stack);
		if(touchType != null) {
			touchEvent = openfl_events_TouchEvent.__create(touchType,null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchStack(touchEvent,stack);
		}
		var touchOverTarget = touchData.touchOverTarget;
		if(target != touchOverTarget && touchOverTarget != null) {
			touchEvent = openfl_events_TouchEvent.__create("touchOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
			touchEvent.touchPointID = touchId;
			touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
			touchEvent.pressure = touch.pressure;
			this.__dispatchTarget(touchOverTarget,touchEvent);
		}
		var touchOutStack = touchData.rollOutStack;
		var item;
		var i = 0;
		while(i < touchOutStack.length) {
			item = touchOutStack[i];
			if(stack.indexOf(item) == -1) {
				HxOverrides.remove(touchOutStack,item);
				touchEvent = openfl_events_TouchEvent.__create("touchRollOut",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),touchOverTarget);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = false;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(item,touchEvent);
			} else {
				++i;
			}
		}
		var _g = 0;
		while(_g < stack.length) {
			var item = stack[_g];
			++_g;
			if(touchOutStack.indexOf(item) == -1) {
				if(item.hasEventListener("touchRollOver")) {
					touchEvent = openfl_events_TouchEvent.__create("touchRollOver",null,touchX,touchY,touchOverTarget.__globalToLocal(targetPoint,localPoint),item);
					touchEvent.touchPointID = touchId;
					touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
					touchEvent.bubbles = false;
					touchEvent.pressure = touch.pressure;
					this.__dispatchTarget(item,touchEvent);
				}
				if(item.hasEventListener("touchRollOut")) {
					touchOutStack.push(item);
				}
			}
		}
		if(target != touchOverTarget) {
			if(target != null) {
				touchEvent = openfl_events_TouchEvent.__create("touchOver",null,touchX,touchY,target.__globalToLocal(targetPoint,localPoint),target);
				touchEvent.touchPointID = touchId;
				touchEvent.isPrimaryTouchPoint = isPrimaryTouchPoint;
				touchEvent.bubbles = true;
				touchEvent.pressure = touch.pressure;
				this.__dispatchTarget(target,touchEvent);
			}
			touchData.touchOverTarget = target;
		}
		openfl_geom_Point.__pool.release(targetPoint);
		openfl_geom_Point.__pool.release(localPoint);
		if(releaseTouchData) {
			this.__touchData.remove(touchId);
			touchData.reset();
			openfl_utils__$internal_TouchData.__pool.release(touchData);
		}
	}
	,__registerLimeModule: function(application) {
		application.onCreateWindow.add($bind(this,this.__onLimeCreateWindow));
		application.onUpdate.add($bind(this,this.__onLimeUpdate));
		application.onExit.add($bind(this,this.__onLimeModuleExit),false,0);
		var gamepad = lime_ui_Gamepad.devices.iterator();
		while(gamepad.hasNext()) {
			var gamepad1 = gamepad.next();
			this.__onLimeGamepadConnect(gamepad1);
		}
		lime_ui_Gamepad.onConnect.add($bind(this,this.__onLimeGamepadConnect));
		lime_ui_Touch.onStart.add($bind(this,this.__onLimeTouchStart));
		lime_ui_Touch.onMove.add($bind(this,this.__onLimeTouchMove));
		lime_ui_Touch.onEnd.add($bind(this,this.__onLimeTouchEnd));
		lime_ui_Touch.onCancel.add($bind(this,this.__onLimeTouchCancel));
	}
	,__resize: function() {
		var cacheWidth = this.stageWidth;
		var cacheHeight = this.stageHeight;
		var windowWidth = this.window.__width * this.window.__scale | 0;
		var windowHeight = this.window.__height * this.window.__scale | 0;
		this.__logicalWidth = windowWidth;
		this.__logicalHeight = windowHeight;
		this.__displayMatrix.identity();
		if(this.get_fullScreenSourceRect() != null && this.window.__fullscreen) {
			this.stageWidth = this.get_fullScreenSourceRect().width | 0;
			this.stageHeight = this.get_fullScreenSourceRect().height | 0;
			var displayScaleX = windowWidth / this.stageWidth;
			var displayScaleY = windowHeight / this.stageHeight;
			this.__displayMatrix.translate(-this.get_fullScreenSourceRect().x,-this.get_fullScreenSourceRect().y);
			this.__displayMatrix.scale(displayScaleX,displayScaleY);
			this.__displayRect.setTo(this.get_fullScreenSourceRect().get_left(),this.get_fullScreenSourceRect().get_right(),this.get_fullScreenSourceRect().get_top(),this.get_fullScreenSourceRect().get_bottom());
		} else {
			if(this.__logicalWidth == 0 && this.__logicalHeight == 0) {
				this.stageWidth = windowWidth;
				this.stageHeight = windowHeight;
			} else {
				this.stageWidth = this.__logicalWidth;
				this.stageHeight = this.__logicalHeight;
				var scaleX = windowWidth / this.stageWidth;
				var scaleY = windowHeight / this.stageHeight;
				var targetScale = Math.min(scaleX,scaleY);
				var offsetX = Math.round((windowWidth - this.stageWidth * targetScale) / 2);
				var offsetY = Math.round((windowHeight - this.stageHeight * targetScale) / 2);
				this.__displayMatrix.scale(targetScale,targetScale);
				this.__displayMatrix.translate(offsetX,offsetY);
			}
			this.__displayRect.setTo(0,0,this.stageWidth,this.stageHeight);
		}
		if(this.context3D != null) {
			this.context3D.configureBackBuffer(windowWidth,windowHeight,0,true,true,true);
		}
		var stage3D = this.stage3Ds.iterator();
		while(stage3D.hasNext()) {
			var stage3D1 = stage3D.next();
			stage3D1.__resize(windowWidth,windowHeight);
		}
		if(this.__renderer != null) {
			this.__renderer.__resize(windowWidth,windowHeight);
		}
		if(this.stageWidth != cacheWidth || this.stageHeight != cacheHeight) {
			this.__renderDirty = true;
			this.__setTransformDirty();
			var event = null;
			event = new openfl_events_Event("resize");
			this.__dispatchEvent(event);
		}
	}
	,__setLogicalSize: function(width,height) {
		this.__logicalWidth = width;
		this.__logicalHeight = height;
		this.__resize();
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		if(bounds == null) {
			this.__dragBounds = null;
		} else {
			this.__dragBounds = new openfl_geom_Rectangle();
			var right = bounds.get_right();
			var bottom = bounds.get_bottom();
			this.__dragBounds.x = right < bounds.x ? right : bounds.x;
			this.__dragBounds.y = bottom < bounds.y ? bottom : bounds.y;
			this.__dragBounds.width = Math.abs(bounds.width);
			this.__dragBounds.height = Math.abs(bounds.height);
		}
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = 0;
				this.__dragOffsetY = 0;
			} else {
				var mouse = openfl_geom_Point.__pool.get();
				mouse.setTo(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					var _this = parent.__getWorldTransform();
					var norm = _this.a * _this.d - _this.b * _this.c;
					if(norm == 0) {
						mouse.x = -_this.tx;
						mouse.y = -_this.ty;
					} else {
						var px = 1.0 / norm * (_this.c * (_this.ty - mouse.y) + _this.d * (mouse.x - _this.tx));
						mouse.y = 1.0 / norm * (_this.a * (mouse.y - _this.ty) + _this.b * (_this.tx - mouse.x));
						mouse.x = px;
					}
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
				openfl_geom_Point.__pool.release(mouse);
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren) {
		if(transformOnly) {
			if(this.__transformDirty) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren);
				if(updateChildren) {
					this.__transformDirty = false;
				}
			}
		} else if(this.__transformDirty || this.__renderDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				if(openfl_display_DisplayObject.__supportDOM) {
					this.__wasDirty = true;
				}
			}
		} else if(!this.__renderDirty && this.__wasDirty) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren);
			if(updateChildren) {
				this.__wasDirty = false;
			}
		}
	}
	,set_color: function(value) {
		if(value == null) {
			this.__transparent = true;
			value = 0;
		} else {
			this.__transparent = false;
		}
		if(this.__color != value) {
			var r = (value & 16711680) >>> 16;
			var g = (value & 65280) >>> 8;
			var b = value & 255;
			this.__colorSplit[0] = r / 255;
			this.__colorSplit[1] = g / 255;
			this.__colorSplit[2] = b / 255;
			this.__colorString = "#" + StringTools.hex(value & 16777215,6);
			this.__renderDirty = true;
			this.__color = -16777216 | value & 16777215;
		}
		return value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			this.__cacheFocus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,value,false,0);
				var stack = [];
				oldFocus.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
			if(value != null) {
				var event = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				var stack = [];
				value.__getInteractive(stack);
				stack.reverse();
				this.__dispatchStack(event,stack);
			}
		}
		return value;
	}
	,get_frameRate: function() {
		if(this.window != null) {
			return this.window.__backend.getFrameRate();
		}
		return 0;
	}
	,get_fullScreenSourceRect: function() {
		if(this.__fullScreenSourceRect == null) {
			return null;
		} else {
			return this.__fullScreenSourceRect.clone();
		}
	}
	,set_height: function(value) {
		return this.get_height();
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,get_quality: function() {
		return this.__quality;
	}
	,set_rotation: function(value) {
		return 0;
	}
	,set_scaleX: function(value) {
		return 0;
	}
	,set_scaleY: function(value) {
		return 0;
	}
	,get_tabEnabled: function() {
		return false;
	}
	,set_tabEnabled: function(value) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Error: The Stage class does not implement this property or method."));
	}
	,get_tabIndex: function() {
		return -1;
	}
	,set_transform: function(value) {
		return this.get_transform();
	}
	,set_width: function(value) {
		return this.get_width();
	}
	,set_x: function(value) {
		return 0;
	}
	,set_y: function(value) {
		return 0;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_color:"set_color",get_quality:"get_quality",get_fullScreenSourceRect:"get_fullScreenSourceRect",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState"})
});
var openfl_display_Stage3D = function(stage) {
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__height = 0;
	this.__projectionTransform = new openfl_geom_Matrix3D();
	this.__renderTransform = new openfl_geom_Matrix3D();
	this.__width = 0;
	this.__x = 0;
	this.__y = 0;
	this.visible = true;
	if(stage.stageWidth > 0 && stage.stageHeight > 0) {
		this.__resize(stage.stageWidth,stage.stageHeight);
	}
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = "openfl.display.Stage3D";
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__createContext: function() {
		var stage = this.__stage;
		var renderer = stage.__renderer;
		if(renderer.__type == "cairo" || renderer.__type == "canvas") {
			this.__dispatchError();
			return;
		}
		if(renderer.__type == "opengl") {
			this.context3D = new openfl_display3D_Context3D(stage,stage.context3D.__contextState,this);
			this.__dispatchCreate();
		} else if(renderer.__type == "dom") {
			this.__canvas = window.document.createElement("canvas");
			this.__canvas.width = stage.stageWidth;
			this.__canvas.height = stage.stageHeight;
			var $window = stage.window;
			var attributes = renderer.__context.attributes;
			var transparentBackground = Object.prototype.hasOwnProperty.call(attributes,"background") && attributes.background == null;
			var colorDepth = Object.prototype.hasOwnProperty.call(attributes,"colorDepth") ? attributes.colorDepth : 32;
			var options = Object.prototype.hasOwnProperty.call(attributes,"antialiasing") && attributes.antialiasing > 0;
			var options1 = { alpha : transparentBackground || colorDepth > 16, antialias : options, depth : true, premultipliedAlpha : true, stencil : true, preserveDrawingBuffer : false};
			this.__webgl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.__canvas,options1);
			if(this.__webgl != null) {
				this.__dispatchError();
			} else {
				this.__dispatchError();
			}
		}
	}
	,__dispatchError: function() {
		this.__contextRequested = false;
		this.dispatchEvent(new openfl_events_ErrorEvent("error",false,false,"Context3D not available"));
	}
	,__dispatchCreate: function() {
		if(this.__contextRequested) {
			this.__contextRequested = false;
			this.dispatchEvent(new openfl_events_Event("context3DCreate"));
		}
	}
	,__lostContext: function() {
		this.__contextLost = true;
		if(this.context3D != null) {
			this.context3D.__dispose();
			this.__contextRequested = true;
		}
	}
	,__resize: function(width,height) {
		if(width != this.__width || height != this.__height) {
			if(this.__canvas != null) {
				this.__canvas.width = width;
				this.__canvas.height = height;
			}
			this.__projectionTransform.copyRawDataFrom(openfl_Vector.toFloatVector(null,null,null,[2.0 / (width > 0 ? width : 1),0.0,0.0,0.0,0.0,-2.0 / (height > 0 ? height : 1),0.0,0.0,0.0,0.0,-0.001,0.0,-1.0,1.0,0.0,1.0]));
			this.__renderTransform.identity();
			this.__renderTransform.appendTranslation(this.__x,this.__y,0);
			this.__renderTransform.append(this.__projectionTransform);
			this.__width = width;
			this.__height = height;
		}
	}
	,__restoreContext: function() {
		this.__contextLost = false;
		this.__createContext();
	}
	,get_x: function() {
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,__class__: openfl_display_Stage3D
	,__properties__: {get_y:"get_y",get_x:"get_x"}
});
var openfl_display_Tile = function(id,x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(id == null) {
		id = 0;
	}
	this.__id = id;
	this.__matrix = new openfl_geom_Matrix();
	if(x != 0) {
		this.set_x(x);
	}
	if(y != 0) {
		this.set_y(y);
	}
	if(scaleX != 1) {
		this.set_scaleX(scaleX);
	}
	if(scaleY != 1) {
		this.set_scaleY(scaleY);
	}
	if(rotation != 0) {
		this.set_rotation(rotation);
	}
	this.__dirty = true;
	this.__length = 0;
	this.__originX = originX;
	this.__originY = originY;
	this.__alpha = 1;
	this.__blendMode = null;
	this.__visible = true;
};
$hxClasses["openfl.display.Tile"] = openfl_display_Tile;
openfl_display_Tile.__name__ = "openfl.display.Tile";
openfl_display_Tile.prototype = {
	getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		this.__findTileRect(result);
		var matrix = openfl_geom_Matrix.__pool.get();
		if(targetCoordinateSpace != null && targetCoordinateSpace != this) {
			matrix.copyFrom(this.__getWorldTransform());
			var targetMatrix = openfl_geom_Matrix.__pool.get();
			targetMatrix.copyFrom(targetCoordinateSpace.__getWorldTransform());
			targetMatrix.invert();
			matrix.concat(targetMatrix);
			openfl_geom_Matrix.__pool.release(targetMatrix);
		} else {
			matrix.identity();
		}
		this.__getBounds(result,matrix);
		openfl_geom_Matrix.__pool.release(matrix);
		return result;
	}
	,__getBounds: function(result,matrix) {
		result.__transform(result,matrix);
	}
	,__findTileRect: function(result) {
		if(this.get_tileset() == null) {
			if(this.parent != null) {
				var parentTileset = this.parent.__findTileset();
				if(parentTileset == null) {
					result.setTo(0,0,0,0);
				} else {
					var _g = parentTileset.getRect(this.get_id());
					if(_g == null) {
						result.setTo(0,0,0,0);
					} else {
						var not_null = _g;
						result.copyFrom(not_null);
					}
				}
			} else {
				result.setTo(0,0,0,0);
			}
		} else {
			result.copyFrom(this.get_tileset().getRect(this.get_id()));
		}
		result.x = 0;
		result.y = 0;
	}
	,__findTileset: function() {
		if(this.get_tileset() != null) {
			return this.get_tileset();
		}
		if(((this.parent) instanceof openfl_display_Tilemap)) {
			return this.parent.get_tileset();
		}
		if(this.parent == null) {
			return null;
		}
		return this.parent.__findTileset();
	}
	,__getWorldTransform: function() {
		var retval = this.get_matrix().clone();
		if(this.parent != null) {
			retval.concat(this.parent.__getWorldTransform());
		}
		return retval;
	}
	,__setRenderDirty: function() {
		if(!this.__dirty) {
			this.__dirty = true;
			if(this.parent != null) {
				this.parent.__setRenderDirty();
			}
		}
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value != this.__alpha) {
			this.__alpha = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_id: function() {
		return this.__id;
	}
	,get_matrix: function() {
		return this.__matrix;
	}
	,get_originX: function() {
		return this.__originX;
	}
	,set_originX: function(value) {
		if(value != this.__originX) {
			this.__originX = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_originY: function() {
		return this.__originY;
	}
	,set_originY: function(value) {
		if(value != this.__originY) {
			this.__originY = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_rotation: function() {
		if(this.__rotation == null) {
			if(this.__matrix.b == 0 && this.__matrix.c == 0) {
				this.__rotation = 0;
				this.__rotationSine = 0;
				this.__rotationCosine = 1;
			} else {
				var radians = Math.atan2(this.__matrix.d,this.__matrix.c) - Math.PI / 2;
				this.__rotation = radians * (180 / Math.PI);
				this.__rotationSine = Math.sin(radians);
				this.__rotationCosine = Math.cos(radians);
			}
		}
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = value * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__matrix.a = this.__rotationCosine * __scaleX;
			this.__matrix.b = this.__rotationSine * __scaleX;
			this.__matrix.c = -this.__rotationSine * __scaleY;
			this.__matrix.d = this.__rotationCosine * __scaleY;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__scaleX == null) {
			if(this.get_matrix().b == 0) {
				this.__scaleX = this.__matrix.a;
			} else {
				this.__scaleX = Math.sqrt(this.__matrix.a * this.__matrix.a + this.__matrix.b * this.__matrix.b);
			}
		}
		return this.__scaleX;
	}
	,set_scaleX: function(value) {
		if(value != this.__scaleX) {
			this.__scaleX = value;
			if(this.__matrix.b == 0) {
				this.__matrix.a = value;
			} else {
				var rotation = this.get_rotation();
				var a = this.__rotationCosine * value;
				var b = this.__rotationSine * value;
				this.__matrix.a = a;
				this.__matrix.b = b;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__scaleY == null) {
			if(this.__matrix.c == 0) {
				this.__scaleY = this.get_matrix().d;
			} else {
				this.__scaleY = Math.sqrt(this.__matrix.c * this.__matrix.c + this.__matrix.d * this.__matrix.d);
			}
		}
		return this.__scaleY;
	}
	,set_scaleY: function(value) {
		if(value != this.__scaleY) {
			this.__scaleY = value;
			if(this.__matrix.c == 0) {
				this.__matrix.d = value;
			} else {
				var rotation = this.get_rotation();
				var c = -this.__rotationSine * value;
				var d = this.__rotationCosine * value;
				this.__matrix.c = c;
				this.__matrix.d = d;
			}
			this.__setRenderDirty();
		}
		return value;
	}
	,get_shader: function() {
		return this.__shader;
	}
	,get_tileset: function() {
		return this.__tileset;
	}
	,set_tileset: function(value) {
		if(value != this.__tileset) {
			this.__tileset = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		this.__findTileRect(result);
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_x: function() {
		return this.__matrix.tx;
	}
	,set_x: function(value) {
		if(value != this.__matrix.tx) {
			this.__matrix.tx = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,get_y: function() {
		return this.__matrix.ty;
	}
	,set_y: function(value) {
		if(value != this.__matrix.ty) {
			this.__matrix.ty = value;
			this.__setRenderDirty();
		}
		return value;
	}
	,__class__: openfl_display_Tile
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",get_visible:"get_visible",set_tileset:"set_tileset",get_tileset:"get_tileset",get_shader:"get_shader",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",set_originY:"set_originY",get_originY:"get_originY",set_originX:"set_originX",get_originX:"get_originX",get_matrix:"get_matrix",get_id:"get_id",set_height:"set_height",get_height:"get_height",get_colorTransform:"get_colorTransform",set_alpha:"set_alpha",get_alpha:"get_alpha"}
};
var openfl_display_TileContainer = function(x,y,scaleX,scaleY,rotation,originX,originY) {
	if(originY == null) {
		originY = 0;
	}
	if(originX == null) {
		originX = 0;
	}
	if(rotation == null) {
		rotation = 0;
	}
	if(scaleY == null) {
		scaleY = 1;
	}
	if(scaleX == null) {
		scaleX = 1;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	openfl_display_Tile.call(this,-1,x,y,scaleX,scaleY,rotation,originX,originY);
	this.__tiles = [];
	this.__length = 0;
};
$hxClasses["openfl.display.TileContainer"] = openfl_display_TileContainer;
openfl_display_TileContainer.__name__ = "openfl.display.TileContainer";
openfl_display_TileContainer.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_TileContainer.__super__ = openfl_display_Tile;
openfl_display_TileContainer.prototype = $extend(openfl_display_Tile.prototype,{
	getBounds: function(targetCoordinateSpace) {
		var result = new openfl_geom_Rectangle();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(targetCoordinateSpace);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		return result;
	}
	,get_height: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var h = result.height;
		openfl_geom_Rectangle.__pool.release(result);
		return h;
	}
	,set_height: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.height != 0) {
			this.set_scaleY(value / result.height);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,get_width: function() {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		this.__getBounds(result,this.get_matrix());
		var w = result.width;
		openfl_geom_Rectangle.__pool.release(result);
		return w;
	}
	,set_width: function(value) {
		var result = openfl_geom_Rectangle.__pool.get();
		var rect = null;
		var _g = 0;
		var _g1 = this.__tiles;
		while(_g < _g1.length) {
			var tile = _g1[_g];
			++_g;
			rect = tile.getBounds(this);
			result.__expand(rect.x,rect.y,rect.width,rect.height);
		}
		if(result.width != 0) {
			this.set_scaleX(value / result.width);
		}
		openfl_geom_Rectangle.__pool.release(result);
		return value;
	}
	,__class__: openfl_display_TileContainer
});
var openfl_display_Tilemap = function(width,height,tileset,smoothing) {
	if(smoothing == null) {
		smoothing = true;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 9;
	this.__tileset = tileset;
	this.smoothing = smoothing;
	this.tileAlphaEnabled = true;
	this.tileBlendModeEnabled = true;
	this.tileColorTransformEnabled = true;
	this.__group = new openfl_display_TileContainer();
	this.__group.set_tileset(tileset);
	this.__width = width;
	this.__height = height;
};
$hxClasses["openfl.display.Tilemap"] = openfl_display_Tilemap;
openfl_display_Tilemap.__name__ = "openfl.display.Tilemap";
openfl_display_Tilemap.__interfaces__ = [openfl_display_ITileContainer];
openfl_display_Tilemap.__super__ = openfl_display_DisplayObject;
openfl_display_Tilemap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__enterFrame: function(deltaTime) {
		if(this.__group.__dirty) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,get_height: function() {
		return this.__height * Math.abs(this.get_scaleY());
	}
	,set_height: function(value) {
		this.__height = value | 0;
		return this.__height * Math.abs(this.get_scaleY());
	}
	,get_width: function() {
		return this.__width * Math.abs(this.__scaleX);
	}
	,set_width: function(value) {
		this.__width = value | 0;
		return this.__width * Math.abs(this.__scaleX);
	}
	,__class__: openfl_display_Tilemap
});
var openfl_display_Tileset = function(bitmapData,rects) {
	this.__bitmapData = bitmapData;
	this.rectData = openfl_Vector.toFloatVector(null);
	this.__data = [];
	if(rects != null) {
		var _g = 0;
		while(_g < rects.length) {
			var rect = rects[_g];
			++_g;
			this.addRect(rect);
		}
	}
};
$hxClasses["openfl.display.Tileset"] = openfl_display_Tileset;
openfl_display_Tileset.__name__ = "openfl.display.Tileset";
openfl_display_Tileset.prototype = {
	addRect: function(rect) {
		if(rect == null) {
			return -1;
		}
		this.rectData.push(rect.x);
		this.rectData.push(rect.y);
		this.rectData.push(rect.width);
		this.rectData.push(rect.height);
		var tileData = new openfl_display__$Tileset_TileData(rect);
		tileData.__update(this.__bitmapData);
		this.__data.push(tileData);
		return this.__data.length - 1;
	}
	,getRect: function(id) {
		if(id < this.__data.length && id >= 0) {
			return new openfl_geom_Rectangle(this.__data[id].x,this.__data[id].y,this.__data[id].width,this.__data[id].height);
		}
		return null;
	}
	,__class__: openfl_display_Tileset
};
var openfl_display__$Tileset_TileData = function(rect) {
	if(rect != null) {
		this.x = rect.x | 0;
		this.y = rect.y | 0;
		this.width = rect.width | 0;
		this.height = rect.height | 0;
	}
};
$hxClasses["openfl.display._Tileset.TileData"] = openfl_display__$Tileset_TileData;
openfl_display__$Tileset_TileData.__name__ = "openfl.display._Tileset.TileData";
openfl_display__$Tileset_TileData.prototype = {
	__update: function(bitmapData) {
		if(bitmapData != null) {
			var bitmapWidth = bitmapData.width;
			var bitmapHeight = bitmapData.height;
			this.__uvX = this.x / bitmapWidth;
			this.__uvY = this.y / bitmapHeight;
			this.__uvWidth = (this.x + this.width) / bitmapWidth;
			this.__uvHeight = (this.y + this.height) / bitmapHeight;
		}
	}
	,__class__: openfl_display__$Tileset_TileData
};
var openfl_display_Timeline = function() {
	this.__framesLoaded = 1;
	this.__totalFrames = 1;
	this.__currentLabels = [];
	this.__currentFrame = 1;
	this.__lastFrameScriptEval = -1;
	this.__lastFrameUpdate = -1;
};
$hxClasses["openfl.display.Timeline"] = openfl_display_Timeline;
openfl_display_Timeline.__name__ = "openfl.display.Timeline";
openfl_display_Timeline.prototype = {
	enterFrame: function(frame) {
	}
	,__enterFrame: function(deltaTime) {
		if(this.__isPlaying) {
			var nextFrame = this.__getNextFrame(deltaTime);
			if(this.__lastFrameScriptEval == nextFrame) {
				return;
			}
			if(this.__frameScripts != null) {
				if(nextFrame < this.__currentFrame) {
					if(!this.__evaluateFrameScripts(this.__totalFrames)) {
						return;
					}
					this.__currentFrame = 1;
				}
				if(!this.__evaluateFrameScripts(nextFrame)) {
					return;
				}
			} else {
				this.__currentFrame = nextFrame;
			}
		}
		this.__updateSymbol(this.__currentFrame);
	}
	,__evaluateFrameScripts: function(advanceToFrame) {
		if(this.__frameScripts == null) {
			return true;
		}
		var _g = this.__currentFrame;
		var _g1 = advanceToFrame + 1;
		while(_g < _g1) {
			var frame = _g++;
			if(frame == this.__lastFrameScriptEval) {
				continue;
			}
			this.__lastFrameScriptEval = frame;
			this.__currentFrame = frame;
			if(this.__frameScripts.h.hasOwnProperty(frame)) {
				this.__updateSymbol(frame);
				var script = this.__frameScripts.h[frame];
				script(this.__scope);
				if(this.__currentFrame != frame) {
					return false;
				}
			}
			if(!this.__isPlaying) {
				return false;
			}
		}
		return true;
	}
	,__getNextFrame: function(deltaTime) {
		var nextFrame = 0;
		if(this.frameRate != null) {
			this.__timeElapsed += deltaTime;
			nextFrame = this.__currentFrame + Math.floor(this.__timeElapsed / this.__frameTime);
			if(nextFrame < 1) {
				nextFrame = 1;
			}
			if(nextFrame > this.__totalFrames) {
				nextFrame = Math.floor((nextFrame - 1) % this.__totalFrames) + 1;
			}
			this.__timeElapsed %= this.__frameTime;
		} else {
			nextFrame = this.__currentFrame + 1;
			if(nextFrame > this.__totalFrames) {
				nextFrame = 1;
			}
		}
		return nextFrame;
	}
	,__goto: function(frame) {
		if(frame < 1) {
			frame = 1;
		} else if(frame > this.__totalFrames) {
			frame = this.__totalFrames;
		}
		this.__lastFrameScriptEval = -1;
		this.__currentFrame = frame;
		this.__updateSymbol(this.__currentFrame);
		this.__evaluateFrameScripts(this.__currentFrame);
	}
	,__gotoAndStop: function(frame,scene) {
		this.__stop();
		this.__goto(this.__resolveFrameReference(frame));
	}
	,__stop: function() {
		this.__isPlaying = false;
	}
	,__resolveFrameReference: function(frame) {
		if(typeof(frame) == "number" && ((frame | 0) === frame)) {
			return frame;
		} else if(typeof(frame) == "string") {
			var label = frame;
			var _g = 0;
			var _g1 = this.__currentLabels;
			while(_g < _g1.length) {
				var frameLabel = _g1[_g];
				++_g;
				if(frameLabel.name == label) {
					return frameLabel.frame;
				}
			}
			throw haxe_Exception.thrown(new openfl_errors_ArgumentError("Error #2109: Frame label " + label + " not found in scene."));
		} else {
			throw haxe_Exception.thrown("Invalid type for frame " + frame.__name__);
		}
	}
	,__updateFrameLabel: function() {
		this.__currentLabel = null;
		this.__currentFrameLabel = null;
		var _g = 0;
		var _g1 = this.__currentLabels;
		while(_g < _g1.length) {
			var label = _g1[_g];
			++_g;
			if(label.frame < this.__currentFrame) {
				this.__currentLabel = label.name;
			} else if(label.frame == this.__currentFrame) {
				this.__currentLabel = label.name;
				this.__currentFrameLabel = label.name;
			} else {
				break;
			}
		}
	}
	,__updateSymbol: function(targetFrame) {
		if(this.__currentFrame != this.__lastFrameUpdate) {
			this.__updateFrameLabel();
			this.enterFrame(targetFrame);
			this.__lastFrameUpdate = this.__currentFrame;
		}
	}
	,__class__: openfl_display_Timeline
};
var openfl_display_Window = function(application,attributes) {
	lime_ui_Window.call(this,application,attributes);
	this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(attributes.context,"background") ? attributes.context.background : 16777215);
	if(Object.prototype.hasOwnProperty.call(attributes,"parameters")) {
		try {
			this.stage.get_loaderInfo().parameters = attributes.parameters;
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	if(Object.prototype.hasOwnProperty.call(attributes,"resizable") && !attributes.resizable) {
		this.stage.__setLogicalSize(attributes.width,attributes.height);
	}
	application.addModule(this.stage);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = "openfl.display.Window";
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	__class__: openfl_display_Window
});
var openfl_display__$internal_CanvasBitmap = function() { };
$hxClasses["openfl.display._internal.CanvasBitmap"] = openfl_display__$internal_CanvasBitmap;
openfl_display__$internal_CanvasBitmap.__name__ = "openfl.display._internal.CanvasBitmap";
openfl_display__$internal_CanvasBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.__renderable) {
			var alpha = renderer.__getAlpha(bitmap1.__worldAlpha);
			if(alpha > 0 && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap1.__worldBlendMode);
				renderer.__pushMaskObject(bitmap1,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap1.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap1.__scrollRect;
				renderer.setTransform(bitmap1.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),0,0,bitmap1.__bitmapData.image.width,bitmap1.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap1.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap1.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap1,false);
			}
		}
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
						renderer.__setBlendMode(bitmap.__worldBlendMode);
						renderer.__pushMaskObject(bitmap);
						var context = renderer.context;
						renderer.setTransform(bitmap.__renderTransform,context);
						var color = bitmap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,bitmap.get_width(),bitmap.get_height());
						renderer.__popMaskObject(bitmap);
					}
					if(bitmap.__graphics != null) {
						if(bitmap.__renderable) {
							var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = bitmap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = bitmap.__scrollRect;
										var scale9Grid = bitmap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(bitmap.__worldBlendMode);
											renderer.__pushMaskObject(bitmap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(bitmap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_CanvasBitmap.renderDrawableMask = function(bitmap,renderer) {
	renderer.context.rect(0,0,bitmap.get_width(),bitmap.get_height());
};
var openfl_display__$internal_CanvasBitmapData = function() { };
$hxClasses["openfl.display._internal.CanvasBitmapData"] = openfl_display__$internal_CanvasBitmapData;
openfl_display__$internal_CanvasBitmapData.__name__ = "openfl.display._internal.CanvasBitmapData";
openfl_display__$internal_CanvasBitmapData.renderDrawable = function(bitmapData,renderer) {
	if(!bitmapData.readable) {
		return;
	}
	var image = bitmapData.image;
	if(image.type == lime_graphics_ImageType.DATA) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(image);
	}
	var context = renderer.context;
	context.globalAlpha = 1;
	renderer.setTransform(bitmapData.__renderTransform,context);
	context.drawImage(image.get_src(),0,0,image.width,image.height);
};
openfl_display__$internal_CanvasBitmapData.renderDrawableMask = function(bitmapData,renderer) {
};
var openfl_display__$internal_CanvasDisplayObject = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObject"] = openfl_display__$internal_CanvasDisplayObject;
openfl_display__$internal_CanvasDisplayObject.__name__ = "openfl.display._internal.CanvasDisplayObject";
openfl_display__$internal_CanvasDisplayObject.renderDrawable = function(displayObject,renderer) {
	if(displayObject.get_mask() == null || displayObject.get_mask().get_width() > 0 && displayObject.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(displayObject,false);
		if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
			var bitmap = displayObject.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
			if(displayObject.__renderable) {
				var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
				if(!(alpha <= 0)) {
					if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
						renderer.__setBlendMode(displayObject.__worldBlendMode);
						renderer.__pushMaskObject(displayObject);
						var context = renderer.context;
						renderer.setTransform(displayObject.__renderTransform,context);
						var color = displayObject.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,displayObject.get_width(),displayObject.get_height());
						renderer.__popMaskObject(displayObject);
					}
					if(displayObject.__graphics != null) {
						if(displayObject.__renderable) {
							var alpha = renderer.__getAlpha(displayObject.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = displayObject.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = displayObject.__scrollRect;
										var scale9Grid = displayObject.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(displayObject.__worldBlendMode);
											renderer.__pushMaskObject(displayObject);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(displayObject);
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_CanvasDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObject.__graphics,renderer);
	}
};
var openfl_display__$internal_CanvasDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.CanvasDisplayObjectContainer"] = openfl_display__$internal_CanvasDisplayObjectContainer;
openfl_display__$internal_CanvasDisplayObjectContainer.__name__ = "openfl.display._internal.CanvasDisplayObjectContainer";
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0 || displayObjectContainer.get_mask() != null && (displayObjectContainer.get_mask().get_width() <= 0 || displayObjectContainer.get_mask().get_height() <= 0)) {
		return;
	}
	openfl_display__$internal_CanvasDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_CanvasDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_CanvasGraphics.renderMask(displayObjectContainer.__graphics,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_display__$internal_DrawCommandBuffer = function() {
	if(openfl_display__$internal_DrawCommandBuffer.empty == null) {
		this.types = [];
		this.b = [];
		this.i = [];
		this.f = [];
		this.o = [];
		this.ff = [];
		this.ii = [];
		this.copyOnWrite = true;
	} else {
		this.clear();
	}
};
$hxClasses["openfl.display._internal.DrawCommandBuffer"] = openfl_display__$internal_DrawCommandBuffer;
openfl_display__$internal_DrawCommandBuffer.__name__ = "openfl.display._internal.DrawCommandBuffer";
openfl_display__$internal_DrawCommandBuffer.prototype = {
	beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,beginShaderFill: function(shaderBuffer) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL);
		this.o.push(shaderBuffer);
	}
	,clear: function() {
		this.types = openfl_display__$internal_DrawCommandBuffer.empty.types;
		this.b = openfl_display__$internal_DrawCommandBuffer.empty.b;
		this.i = openfl_display__$internal_DrawCommandBuffer.empty.i;
		this.f = openfl_display__$internal_DrawCommandBuffer.empty.f;
		this.o = openfl_display__$internal_DrawCommandBuffer.empty.o;
		this.ff = openfl_display__$internal_DrawCommandBuffer.empty.ff;
		this.ii = openfl_display__$internal_DrawCommandBuffer.empty.ii;
		this.copyOnWrite = true;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,drawCircle: function(x,y,radius) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawQuads: function(rects,indices,transforms) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_QUADS);
		this.o.push(rects);
		this.o.push(indices);
		this.o.push(transforms);
	}
	,drawRect: function(x,y,width,height) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,prepareWrite: function() {
		if(this.copyOnWrite) {
			this.types = this.types.slice();
			this.b = this.b.slice();
			this.i = this.i.slice();
			this.f = this.f.slice();
			this.o = this.o.slice();
			this.ff = this.ff.slice();
			this.ii = this.ii.slice();
			this.copyOnWrite = false;
		}
	}
	,windingEvenOdd: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD);
	}
	,windingNonZero: function() {
		this.prepareWrite();
		this.types.push(openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl_display__$internal_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl_display__$internal_CanvasGraphics = function() { };
$hxClasses["openfl.display._internal.CanvasGraphics"] = openfl_display__$internal_CanvasGraphics;
openfl_display__$internal_CanvasGraphics.__name__ = "openfl.display._internal.CanvasGraphics";
openfl_display__$internal_CanvasGraphics.closePath = function(strokeBefore) {
	if(strokeBefore == null) {
		strokeBefore = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	if(!strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.stroke();
	if(strokeBefore) {
		openfl_display__$internal_CanvasGraphics.context.closePath();
	}
	openfl_display__$internal_CanvasGraphics.context.beginPath();
};
openfl_display__$internal_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat,smooth) {
	lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.image);
	openfl_display__$internal_CanvasGraphics.setSmoothing(smooth);
	return openfl_display__$internal_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat ? "repeat" : "no-repeat");
};
openfl_display__$internal_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	var point = null;
	var point2 = null;
	var releaseMatrix = false;
	if(matrix == null) {
		matrix = openfl_geom_Matrix.__pool.get();
		matrix.identity();
		releaseMatrix = true;
	}
	switch(type) {
	case 0:
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createLinearGradient(-819.2,0,819.2,0);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	case 1:
		var radius = 819.2;
		if(focalPointRatio > 1.0) {
			focalPointRatio = 1.0;
		} else if(focalPointRatio < -1.0) {
			focalPointRatio = -1.0;
		}
		gradientFill = openfl_display__$internal_CanvasGraphics.context.createRadialGradient(radius * focalPointRatio,0,0,0,0,radius);
		openfl_display__$internal_CanvasGraphics.pendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix = matrix.clone();
		openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
		break;
	}
	var rgb;
	var alpha;
	var r;
	var g;
	var b;
	var ratio;
	var _g = 0;
	var _g1 = colors.length;
	while(_g < _g1) {
		var i = _g++;
		rgb = colors[i];
		alpha = alphas[i];
		r = (rgb & 16711680) >>> 16;
		g = (rgb & 65280) >>> 8;
		b = rgb & 255;
		ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	if(point != null) {
		openfl_geom_Point.__pool.release(point);
	}
	if(point2 != null) {
		openfl_geom_Point.__pool.release(point2);
	}
	if(releaseMatrix) {
		openfl_geom_Matrix.__pool.release(matrix);
	}
	return gradientFill;
};
openfl_display__$internal_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	var tmp = bitmap.image.get_src();
	context.fillStyle = context.createPattern(tmp,repeat ? "repeat" : "no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
		context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
	}
	return canvas;
};
openfl_display__$internal_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * 0.70710678118654752440084436210485;
	var cx2 = -ellipseWidth + ellipseWidth * 0.4142135623730950488016887242097;
	var cy1 = -ellipseHeight + ellipseHeight * 0.70710678118654752440084436210485;
	var cy2 = -ellipseHeight + ellipseHeight * 0.4142135623730950488016887242097;
	openfl_display__$internal_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl_display__$internal_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl_display__$internal_CanvasGraphics.endFill = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.fillCommands,false);
	openfl_display__$internal_CanvasGraphics.fillCommands.clear();
};
openfl_display__$internal_CanvasGraphics.endStroke = function() {
	openfl_display__$internal_CanvasGraphics.context.beginPath();
	openfl_display__$internal_CanvasGraphics.playCommands(openfl_display__$internal_CanvasGraphics.strokeCommands,true);
	openfl_display__$internal_CanvasGraphics.context.closePath();
	openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
};
openfl_display__$internal_CanvasGraphics.hitTest = function(graphics,x,y) {
	openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
	openfl_display__$internal_CanvasGraphics.graphics = graphics;
	if(graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || openfl_display__$internal_CanvasGraphics.bounds.width <= 0 || openfl_display__$internal_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl_display__$internal_CanvasGraphics.hitTesting = true;
		var transform = graphics.__renderTransform;
		var px = x * transform.a + y * transform.c + transform.tx;
		var py = x * transform.b + y * transform.d + transform.ty;
		x = px;
		y = py;
		x -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.a + openfl_display__$internal_CanvasGraphics.bounds.y * transform.c + transform.tx;
		y -= openfl_display__$internal_CanvasGraphics.bounds.x * transform.b + openfl_display__$internal_CanvasGraphics.bounds.y * transform.d + transform.ty;
		var cacheCanvas = graphics.__canvas;
		var cacheContext = graphics.__context;
		graphics.__canvas = openfl_display__$internal_CanvasGraphics.hitTestCanvas;
		graphics.__context = openfl_display__$internal_CanvasGraphics.hitTestContext;
		openfl_display__$internal_CanvasGraphics.context = graphics.__context;
		openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		openfl_display__$internal_CanvasGraphics.fillCommands.clear();
		openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
		openfl_display__$internal_CanvasGraphics.hasFill = false;
		openfl_display__$internal_CanvasGraphics.hasStroke = false;
		openfl_display__$internal_CanvasGraphics.bitmapFill = null;
		openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
		openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 0:case 1:case 2:case 3:
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
					var this2 = data;
					var c1 = this2;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
				} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
				} else {
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var this4 = data;
					var c3 = this4;
					openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],1);
					openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],1);
				}
				break;
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this5 = data;
				var c4 = this5;
				openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this6 = data;
				var c5 = this6;
				openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this7 = data;
				var c6 = this7;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this8 = data;
				var c7 = this8;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this9 = data;
				var c8 = this9;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c8.buffer.f[c8.fPos],c8.buffer.f[c8.fPos + 1],c8.buffer.f[c8.fPos + 2],c8.buffer.f[c8.fPos + 3]);
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this10 = data;
				var c9 = this10;
				openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3],c9.buffer.f[c9.fPos + 4],c9.buffer.o[c9.oPos]);
				break;
			case 13:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
				var this11 = data;
				openfl_display__$internal_CanvasGraphics.endFill();
				if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.endStroke();
				if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					graphics.__canvas = cacheCanvas;
					graphics.__context = cacheContext;
					return true;
				}
				openfl_display__$internal_CanvasGraphics.hasFill = false;
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				break;
			case 14:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
				var this12 = data;
				var c10 = this12;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c10.buffer.o[c10.oPos],c10.buffer.o[c10.oPos + 1],c10.buffer.b[c10.bPos],c10.buffer.b[c10.bPos + 1]);
				break;
			case 15:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
				var this13 = data;
				var c11 = this13;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c11.buffer.o[c11.oPos],c11.buffer.ii[c11.iiPos],c11.buffer.ff[c11.ffPos],c11.buffer.ii[c11.iiPos + 1],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3],c11.buffer.f[c11.fPos]);
				break;
			case 16:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
				var this14 = data;
				var c12 = this14;
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c12.buffer.o[c12.oPos],c12.buffer.i[c12.iPos],1,c12.buffer.b[c12.bPos],c12.buffer.o[c12.oPos + 1],c12.buffer.o[c12.oPos + 2],c12.buffer.o[c12.oPos + 3],c12.buffer.f[c12.fPos + 1]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this15 = data;
				var c13 = this15;
				openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c13.buffer.f[c13.fPos],c13.buffer.f[c13.fPos + 1]);
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this16 = data;
				var c14 = this16;
				openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c14.buffer.f[c14.fPos],c14.buffer.f[c14.fPos + 1]);
				break;
			case 21:
				openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
				break;
			case 22:
				openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		var hitTest = false;
		if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endFill();
		}
		if(openfl_display__$internal_CanvasGraphics.hasFill && openfl_display__$internal_CanvasGraphics.context.isPointInPath(x,y,openfl_display__$internal_CanvasGraphics.windingRule)) {
			hitTest = true;
		}
		if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl_display__$internal_CanvasGraphics.endStroke();
		}
		if(openfl_display__$internal_CanvasGraphics.hasStroke && openfl_display__$internal_CanvasGraphics.context.isPointInStroke(x,y)) {
			hitTest = true;
		}
		data.destroy();
		graphics.__canvas = cacheCanvas;
		graphics.__context = cacheContext;
		return hitTest;
	}
};
openfl_display__$internal_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.get_length();
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.get(t - 1);
		if(max < tmp) {
			max = tmp;
		}
	}
	if(!skipT) {
		return { max : max, uvt : uvt};
	}
	var result = openfl_Vector.toFloatVector(null);
	var _g = 1;
	var _g1 = len + 1;
	while(_g < _g1) {
		var t = _g++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		result.push(uvt.get(t - 1));
	}
	return { max : max, uvt : result};
};
openfl_display__$internal_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl_display__$internal_CanvasGraphics.bounds = openfl_display__$internal_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl_display__$internal_CanvasGraphics.bounds.x;
	var offsetY = openfl_display__$internal_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var setStart = false;
	openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
	openfl_display__$internal_CanvasGraphics.setSmoothing(true);
	var hasPath = false;
	var data = new openfl_display__$internal_DrawCommandReader(commands);
	var x;
	var y;
	var width;
	var height;
	var kappa = .5522848;
	var ox;
	var oy;
	var xe;
	var ye;
	var xm;
	var ym;
	var r;
	var g;
	var b;
	var optimizationUsed;
	var canOptimizeMatrix;
	var st;
	var sr;
	var sb;
	var sl;
	var stl = null;
	var sbr = null;
	var _g = 0;
	var _g1 = commands.types;
	_hx_loop1: while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			openfl_display__$internal_CanvasGraphics.bitmapFill = c.buffer.o[c.oPos];
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c.buffer.o[c.oPos],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			if(c.buffer.o[c.oPos + 1] != null) {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = c.buffer.o[c.oPos + 1];
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = c.buffer.o[c.oPos + 1].clone();
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
			var this2 = data;
			var c1 = this2;
			if(c1.buffer.f[c1.fPos] < 0.005) {
				openfl_display__$internal_CanvasGraphics.hasFill = false;
			} else {
				if(c1.buffer.f[c1.fPos] == 1) {
					var tmp = StringTools.hex(c1.buffer.i[c1.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "#" + tmp;
				} else {
					r = (c1.buffer.i[c1.iPos] & 16711680) >>> 16;
					g = (c1.buffer.i[c1.iPos] & 65280) >>> 8;
					b = c1.buffer.i[c1.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c1.buffer.f[c1.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.bitmapFill = null;
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
			var this3 = data;
			var c2 = this3;
			openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c2.buffer.o[c2.oPos],c2.buffer.ii[c2.iiPos],c2.buffer.ff[c2.ffPos],c2.buffer.ii[c2.iiPos + 1],c2.buffer.o[c2.oPos + 1],c2.buffer.o[c2.oPos + 2],c2.buffer.o[c2.oPos + 3],c2.buffer.f[c2.fPos]);
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasFill = true;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var this4 = data;
			var c3 = this4;
			var shaderBuffer = c3.buffer.o[c3.oPos];
			if(shaderBuffer.inputCount > 0) {
				openfl_display__$internal_CanvasGraphics.bitmapFill = shaderBuffer.inputs[0];
				openfl_display__$internal_CanvasGraphics.context.fillStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(openfl_display__$internal_CanvasGraphics.bitmapFill,shaderBuffer.inputWrap[0] != 0,shaderBuffer.inputFilter[0] != 5);
				openfl_display__$internal_CanvasGraphics.hasFill = true;
				openfl_display__$internal_CanvasGraphics.pendingMatrix = null;
				openfl_display__$internal_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 4:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
			var this5 = data;
			var c4 = this5;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2] - offsetX,c4.buffer.f[c4.fPos + 3] - offsetY,c4.buffer.f[c4.fPos + 4] - offsetX,c4.buffer.f[c4.fPos + 5] - offsetY);
			break;
		case 5:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
			var this6 = data;
			var c5 = this6;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2] - offsetX,c5.buffer.f[c5.fPos + 3] - offsetY);
			break;
		case 6:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
			var this7 = data;
			var c6 = this7;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c6.buffer.f[c6.fPos] - offsetX + c6.buffer.f[c6.fPos + 2],c6.buffer.f[c6.fPos + 1] - offsetY);
			openfl_display__$internal_CanvasGraphics.context.arc(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY,c6.buffer.f[c6.fPos + 2],0,Math.PI * 2,true);
			break;
		case 7:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
			var this8 = data;
			var c7 = this8;
			hasPath = true;
			x = c7.buffer.f[c7.fPos];
			y = c7.buffer.f[c7.fPos + 1];
			width = c7.buffer.f[c7.fPos + 2];
			height = c7.buffer.f[c7.fPos + 3];
			x -= offsetX;
			y -= offsetY;
			ox = width / 2 * kappa;
			oy = height / 2 * kappa;
			xe = x + width;
			ye = y + height;
			xm = x + width / 2;
			ym = y + height / 2;
			openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
			var this9 = data;
			var c8 = this9;
			var rects = c8.buffer.o[c8.oPos];
			var indices = c8.buffer.o[c8.oPos + 1];
			var transforms = c8.buffer.o[c8.oPos + 2];
			var hasIndices = indices != null;
			var transformABCD = false;
			var transformXY = false;
			var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
			if(length == 0) {
				return;
			}
			if(transforms != null) {
				if(transforms.get_length() >= length * 6) {
					transformABCD = true;
					transformXY = true;
				} else if(transforms.get_length() >= length * 4) {
					transformABCD = true;
				} else if(transforms.get_length() >= length * 2) {
					transformXY = true;
				}
			}
			var tileRect = openfl_geom_Rectangle.__pool.get();
			var tileTransform = openfl_geom_Matrix.__pool.get();
			var transform = openfl_display__$internal_CanvasGraphics.graphics.__renderTransform;
			var alpha = openfl_display__$internal_CanvasGraphics.worldAlpha;
			var ri;
			var ti;
			openfl_display__$internal_CanvasGraphics.context.save();
			var _g2 = 0;
			var _g3 = length;
			while(_g2 < _g3) {
				var i = _g2++;
				ri = hasIndices ? indices.get(i) * 4 : i * 4;
				if(ri < 0) {
					continue;
				}
				tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
				if(tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				if(transformABCD && transformXY) {
					ti = i * 6;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
				} else if(transformABCD) {
					ti = i * 4;
					tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
				} else if(transformXY) {
					ti = i * 2;
					tileTransform.tx = transforms.get(ti);
					tileTransform.ty = transforms.get(ti + 1);
				} else {
					tileTransform.tx = tileRect.x;
					tileTransform.ty = tileRect.y;
				}
				tileTransform.tx += positionX - offsetX;
				tileTransform.ty += positionY - offsetY;
				tileTransform.concat(transform);
				openfl_display__$internal_CanvasGraphics.context.setTransform(tileTransform.a,tileTransform.b,tileTransform.c,tileTransform.d,tileTransform.tx,tileTransform.ty);
				if(openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
					openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
				} else {
					openfl_display__$internal_CanvasGraphics.context.fillRect(0,0,tileRect.width,tileRect.height);
				}
			}
			openfl_geom_Rectangle.__pool.release(tileRect);
			openfl_geom_Matrix.__pool.release(tileTransform);
			openfl_display__$internal_CanvasGraphics.context.restore();
			break;
		case 9:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
			var this10 = data;
			var c9 = this10;
			optimizationUsed = false;
			if(openfl_display__$internal_CanvasGraphics.bitmapFill != null && !openfl_display__$internal_CanvasGraphics.hitTesting) {
				st = 0;
				sr = 0;
				sb = 0;
				sl = 0;
				canOptimizeMatrix = true;
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					if(openfl_display__$internal_CanvasGraphics.pendingMatrix.b != 0 || openfl_display__$internal_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						if(stl == null) {
							stl = openfl_geom_Point.__pool.get();
						}
						if(sbr == null) {
							sbr = openfl_geom_Point.__pool.get();
						}
						stl.setTo(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1]);
						var _this = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px = stl.x;
						var py = stl.y;
						stl.x = px * _this.a + py * _this.c + _this.tx;
						stl.y = px * _this.b + py * _this.d + _this.ty;
						sbr.setTo(c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3]);
						var _this1 = openfl_display__$internal_CanvasGraphics.inversePendingMatrix;
						var px1 = sbr.x;
						var py1 = sbr.y;
						sbr.x = px1 * _this1.a + py1 * _this1.c + _this1.tx;
						sbr.y = px1 * _this1.b + py1 * _this1.d + _this1.ty;
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = c9.buffer.f[c9.fPos + 1];
					sl = c9.buffer.f[c9.fPos];
					sb = c9.buffer.f[c9.fPos + 1] + c9.buffer.f[c9.fPos + 3];
					sr = c9.buffer.f[c9.fPos] + c9.buffer.f[c9.fPos + 2];
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl_display__$internal_CanvasGraphics.bitmapFill.width && sb <= openfl_display__$internal_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.drawImage(openfl_display__$internal_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
				}
			}
			if(!optimizationUsed) {
				hasPath = true;
				openfl_display__$internal_CanvasGraphics.context.rect(c9.buffer.f[c9.fPos] - offsetX,c9.buffer.f[c9.fPos + 1] - offsetY,c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
			}
			break;
		case 10:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
			var this11 = data;
			var c10 = this11;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.drawRoundRect(c10.buffer.f[c10.fPos] - offsetX,c10.buffer.f[c10.fPos + 1] - offsetY,c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var this12 = data;
			var c11 = this12;
			var v = c11.buffer.o[c11.oPos];
			var ind = c11.buffer.o[c11.oPos + 1];
			var uvt = c11.buffer.o[c11.oPos + 2];
			var pattern = null;
			var colorFill = openfl_display__$internal_CanvasGraphics.bitmapFill == null;
			if(colorFill && uvt != null) {
				break _hx_loop1;
			}
			if(!colorFill) {
				if(uvt == null) {
					uvt = openfl_Vector.toFloatVector(null);
					var _g4 = 0;
					var _g5 = v.get_length() / 2 | 0;
					while(_g4 < _g5) {
						var i1 = _g4++;
						uvt.push(v.get(i1 * 2) - offsetX / openfl_display__$internal_CanvasGraphics.bitmapFill.width);
						uvt.push(v.get(i1 * 2 + 1) - offsetY / openfl_display__$internal_CanvasGraphics.bitmapFill.height);
					}
				}
				var skipT = uvt.get_length() != v.get_length();
				var normalizedUVT = openfl_display__$internal_CanvasGraphics.normalizeUVT(uvt,skipT);
				var maxUVT = normalizedUVT.max;
				uvt = normalizedUVT.uvt;
				if(maxUVT > 1) {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bounds.width | 0,openfl_display__$internal_CanvasGraphics.bounds.height | 0);
				} else {
					pattern = openfl_display__$internal_CanvasGraphics.createTempPatternCanvas(openfl_display__$internal_CanvasGraphics.bitmapFill,openfl_display__$internal_CanvasGraphics.bitmapRepeat,openfl_display__$internal_CanvasGraphics.bitmapFill.width,openfl_display__$internal_CanvasGraphics.bitmapFill.height);
				}
			}
			var i2 = 0;
			var l = ind.get_length();
			var a_;
			var b_;
			var c_;
			var iax;
			var iay;
			var ibx;
			var iby;
			var icx;
			var icy;
			var x1;
			var y1;
			var x2;
			var y2;
			var x3;
			var y3;
			var uvx1;
			var uvy1;
			var uvx2;
			var uvy2;
			var uvx3;
			var uvy3;
			var denom;
			var t1;
			var t2;
			var t3;
			var t4;
			var dx;
			var dy;
			while(i2 < l) {
				a_ = i2;
				b_ = i2 + 1;
				c_ = i2 + 2;
				iax = ind.get(a_) * 2;
				iay = ind.get(a_) * 2 + 1;
				ibx = ind.get(b_) * 2;
				iby = ind.get(b_) * 2 + 1;
				icx = ind.get(c_) * 2;
				icy = ind.get(c_) * 2 + 1;
				x1 = v.get(iax) - offsetX;
				y1 = v.get(iay) - offsetY;
				x2 = v.get(ibx) - offsetX;
				y2 = v.get(iby) - offsetY;
				x3 = v.get(icx) - offsetX;
				y3 = v.get(icy) - offsetY;
				switch(c11.buffer.o[c11.oPos + 3]) {
				case 0:
					if((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0) {
						i2 += 3;
						continue;
					}
					break;
				case 2:
					if(!((x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0)) {
						i2 += 3;
						continue;
					}
					break;
				default:
				}
				if(colorFill) {
					openfl_display__$internal_CanvasGraphics.context.beginPath();
					openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
					openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
					openfl_display__$internal_CanvasGraphics.context.closePath();
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					i2 += 3;
					continue;
				}
				uvx1 = uvt.get(iax) * pattern.width;
				uvx2 = uvt.get(ibx) * pattern.width;
				uvx3 = uvt.get(icx) * pattern.width;
				uvy1 = uvt.get(iay) * pattern.height;
				uvy2 = uvt.get(iby) * pattern.height;
				uvy3 = uvt.get(icy) * pattern.height;
				denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
				if(denom == 0) {
					i2 += 3;
					openfl_display__$internal_CanvasGraphics.context.restore();
					continue;
				}
				openfl_display__$internal_CanvasGraphics.context.save();
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.moveTo(x1,y1);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x2,y2);
				openfl_display__$internal_CanvasGraphics.context.lineTo(x3,y3);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				openfl_display__$internal_CanvasGraphics.context.clip();
				t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x1) / denom;
				t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
				t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x1) / denom;
				t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
				dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x1) / denom;
				dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
				openfl_display__$internal_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
				openfl_display__$internal_CanvasGraphics.context.drawImage(pattern,0,0,pattern.width,pattern.height);
				openfl_display__$internal_CanvasGraphics.context.restore();
				i2 += 3;
			}
			break;
		case 14:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
			var this13 = data;
			var c12 = this13;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath();
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createBitmapFill(c12.buffer.o[c12.oPos],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
			var this14 = data;
			var c13 = this14;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath();
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl_display__$internal_CanvasGraphics.context.strokeStyle = openfl_display__$internal_CanvasGraphics.createGradientPattern(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
			openfl_display__$internal_CanvasGraphics.setSmoothing(true);
			openfl_display__$internal_CanvasGraphics.hasStroke = true;
			break;
		case 16:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
			var this15 = data;
			var c14 = this15;
			if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			openfl_display__$internal_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(c14.buffer.o[c14.oPos] == null) {
				openfl_display__$internal_CanvasGraphics.hasStroke = false;
			} else {
				openfl_display__$internal_CanvasGraphics.context.lineWidth = c14.buffer.o[c14.oPos] > 0 ? c14.buffer.o[c14.oPos] : 1;
				var tmp1 = c14.buffer.o[c14.oPos + 3] == null ? "round" : openfl_display_JointStyle.toString(c14.buffer.o[c14.oPos + 3]).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineJoin = tmp1;
				var tmp2 = c14.buffer.o[c14.oPos + 2] == null ? "round" : c14.buffer.o[c14.oPos + 2] == 0 ? "butt" : openfl_display_CapsStyle.toString(c14.buffer.o[c14.oPos + 2]).toLowerCase();
				openfl_display__$internal_CanvasGraphics.context.lineCap = tmp2;
				openfl_display__$internal_CanvasGraphics.context.miterLimit = c14.buffer.f[c14.fPos + 1];
				if(c14.buffer.f[c14.fPos] == 1) {
					var tmp3 = StringTools.hex(c14.buffer.i[c14.iPos] & 16777215,6);
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "#" + tmp3;
				} else {
					r = (c14.buffer.i[c14.iPos] & 16711680) >>> 16;
					g = (c14.buffer.i[c14.iPos] & 65280) >>> 8;
					b = c14.buffer.i[c14.iPos] & 255;
					openfl_display__$internal_CanvasGraphics.context.strokeStyle = "rgba(" + r + ", " + g + ", " + b + ", " + c14.buffer.f[c14.fPos] + ")";
				}
				openfl_display__$internal_CanvasGraphics.setSmoothing(true);
				openfl_display__$internal_CanvasGraphics.hasStroke = true;
			}
			break;
		case 17:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
			var this16 = data;
			var c15 = this16;
			hasPath = true;
			openfl_display__$internal_CanvasGraphics.context.lineTo(c15.buffer.f[c15.fPos] - offsetX,c15.buffer.f[c15.fPos + 1] - offsetY);
			positionX = c15.buffer.f[c15.fPos];
			positionY = c15.buffer.f[c15.fPos + 1];
			if(positionX == startX && positionY == startY) {
				closeGap = true;
			}
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
			var this17 = data;
			var c16 = this17;
			openfl_display__$internal_CanvasGraphics.context.moveTo(c16.buffer.f[c16.fPos] - offsetX,c16.buffer.f[c16.fPos + 1] - offsetY);
			positionX = c16.buffer.f[c16.fPos];
			positionY = c16.buffer.f[c16.fPos + 1];
			if(setStart && c16.buffer.f[c16.fPos] != startX && c16.buffer.f[c16.fPos + 1] != startY) {
				closeGap = true;
			}
			startX = c16.buffer.f[c16.fPos];
			startY = c16.buffer.f[c16.fPos + 1];
			setStart = true;
			break;
		case 21:
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			break;
		case 22:
			openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(stl != null) {
		openfl_geom_Point.__pool.release(stl);
	}
	if(sbr != null) {
		openfl_geom_Point.__pool.release(sbr);
	}
	data.destroy();
	if(hasPath) {
		if(stroke && openfl_display__$internal_CanvasGraphics.hasStroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill) {
				if(positionX != startX || positionY != startY) {
					openfl_display__$internal_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
					closeGap = true;
				}
				if(closeGap) {
					openfl_display__$internal_CanvasGraphics.closePath(true);
				}
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl_display__$internal_CanvasGraphics.closePath(true);
			}
			if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
				openfl_display__$internal_CanvasGraphics.context.stroke();
			}
		}
		if(!stroke) {
			if(openfl_display__$internal_CanvasGraphics.hasFill || openfl_display__$internal_CanvasGraphics.bitmapFill != null) {
				openfl_display__$internal_CanvasGraphics.context.translate(-openfl_display__$internal_CanvasGraphics.bounds.x,-openfl_display__$internal_CanvasGraphics.bounds.y);
				if(openfl_display__$internal_CanvasGraphics.pendingMatrix != null) {
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.pendingMatrix.a,openfl_display__$internal_CanvasGraphics.pendingMatrix.b,openfl_display__$internal_CanvasGraphics.pendingMatrix.c,openfl_display__$internal_CanvasGraphics.pendingMatrix.d,openfl_display__$internal_CanvasGraphics.pendingMatrix.tx,openfl_display__$internal_CanvasGraphics.pendingMatrix.ty);
					if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
						openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
					}
					openfl_display__$internal_CanvasGraphics.context.transform(openfl_display__$internal_CanvasGraphics.inversePendingMatrix.a,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.b,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.c,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.d,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.tx,openfl_display__$internal_CanvasGraphics.inversePendingMatrix.ty);
				} else if(!openfl_display__$internal_CanvasGraphics.hitTesting) {
					openfl_display__$internal_CanvasGraphics.context.fill(openfl_display__$internal_CanvasGraphics.windingRule);
				}
				openfl_display__$internal_CanvasGraphics.context.translate(openfl_display__$internal_CanvasGraphics.bounds.x,openfl_display__$internal_CanvasGraphics.bounds.y);
				openfl_display__$internal_CanvasGraphics.context.closePath();
			}
		}
	}
};
openfl_display__$internal_CanvasGraphics.render = function(graphics,renderer) {
	graphics.__update(renderer.__worldTransform);
	if(graphics.__softwareDirty) {
		openfl_display__$internal_CanvasGraphics.hitTesting = false;
		openfl_display__$internal_CanvasGraphics.graphics = graphics;
		openfl_display__$internal_CanvasGraphics.allowSmoothing = renderer.__allowSmoothing;
		openfl_display__$internal_CanvasGraphics.worldAlpha = renderer.__getAlpha(graphics.__owner.__worldAlpha);
		openfl_display__$internal_CanvasGraphics.bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl_display__$internal_CanvasGraphics.bounds == null || width < 1 || height < 1) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(graphics.__canvas == null) {
				graphics.__canvas = window.document.createElement("canvas");
				graphics.__context = graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasGraphics.context = graphics.__context;
			var transform = graphics.__renderTransform;
			var canvas = graphics.__canvas;
			var scale = renderer.pixelRatio;
			var scaledWidth = width * scale | 0;
			var scaledHeight = height * scale | 0;
			renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,10);
			if(renderer.__isDOM) {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = scaledWidth;
					canvas.height = scaledHeight;
					canvas.style.width = width + "px";
					canvas.style.height = height + "px";
				}
				var transform1 = graphics.__renderTransform;
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform1.a * scale,transform1.b * scale,transform1.c * scale,transform1.d * scale,transform1.tx * scale,transform1.ty * scale);
			} else {
				if(canvas.width == scaledWidth && canvas.height == scaledHeight) {
					openfl_display__$internal_CanvasGraphics.context.closePath();
					openfl_display__$internal_CanvasGraphics.context.setTransform(1,0,0,1,0,0);
					openfl_display__$internal_CanvasGraphics.context.clearRect(0,0,scaledWidth,scaledHeight);
				} else {
					canvas.width = width;
					canvas.height = height;
				}
				openfl_display__$internal_CanvasGraphics.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			openfl_display__$internal_CanvasGraphics.fillCommands.clear();
			openfl_display__$internal_CanvasGraphics.strokeCommands.clear();
			openfl_display__$internal_CanvasGraphics.hasFill = false;
			openfl_display__$internal_CanvasGraphics.hasStroke = false;
			openfl_display__$internal_CanvasGraphics.bitmapFill = null;
			openfl_display__$internal_CanvasGraphics.bitmapRepeat = false;
			var hasLineStyle = false;
			var initStrokeX = 0.0;
			var initStrokeY = 0.0;
			openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:case 1:case 2:case 3:
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					if(type == openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
						var this1 = data;
						var c = this1;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginBitmapFill(c.buffer.o[c.oPos],c.buffer.o[c.oPos + 1],c.buffer.b[c.bPos],c.buffer.b[c.bPos + 1]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL;
						var this2 = data;
						var c1 = this2;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginGradientFill(c1.buffer.o[c1.oPos],c1.buffer.ii[c1.iiPos],c1.buffer.ff[c1.ffPos],c1.buffer.ii[c1.iiPos + 1],c1.buffer.o[c1.oPos + 1],c1.buffer.o[c1.oPos + 2],c1.buffer.o[c1.oPos + 3],c1.buffer.f[c1.fPos]);
					} else if(type == openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
						var this3 = data;
						var c2 = this3;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginShaderFill(c2.buffer.o[c2.oPos]);
					} else {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
						var this4 = data;
						var c3 = this4;
						openfl_display__$internal_CanvasGraphics.fillCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
						openfl_display__$internal_CanvasGraphics.strokeCommands.beginFill(c3.buffer.i[c3.iPos],c3.buffer.f[c3.fPos]);
					}
					break;
				case 4:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
					var this5 = data;
					var c4 = this5;
					openfl_display__$internal_CanvasGraphics.fillCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.cubicCurveTo(c4.buffer.f[c4.fPos],c4.buffer.f[c4.fPos + 1],c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3],c4.buffer.f[c4.fPos + 4],c4.buffer.f[c4.fPos + 5]);
					} else {
						initStrokeX = c4.buffer.f[c4.fPos + 4];
						initStrokeY = c4.buffer.f[c4.fPos + 5];
					}
					break;
				case 5:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
					var this6 = data;
					var c5 = this6;
					openfl_display__$internal_CanvasGraphics.fillCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.curveTo(c5.buffer.f[c5.fPos],c5.buffer.f[c5.fPos + 1],c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3]);
					} else {
						initStrokeX = c5.buffer.f[c5.fPos + 2];
						initStrokeY = c5.buffer.f[c5.fPos + 3];
					}
					break;
				case 6:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
					var this7 = data;
					var c6 = this7;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawCircle(c6.buffer.f[c6.fPos],c6.buffer.f[c6.fPos + 1],c6.buffer.f[c6.fPos + 2]);
					}
					break;
				case 7:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
					var this8 = data;
					var c7 = this8;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawEllipse(c7.buffer.f[c7.fPos],c7.buffer.f[c7.fPos + 1],c7.buffer.f[c7.fPos + 2],c7.buffer.f[c7.fPos + 3]);
					}
					break;
				case 8:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
					var this9 = data;
					var c8 = this9;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawQuads(c8.buffer.o[c8.oPos],c8.buffer.o[c8.oPos + 1],c8.buffer.o[c8.oPos + 2]);
					break;
				case 9:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
					var this10 = data;
					var c9 = this10;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRect(c9.buffer.f[c9.fPos],c9.buffer.f[c9.fPos + 1],c9.buffer.f[c9.fPos + 2],c9.buffer.f[c9.fPos + 3]);
					}
					break;
				case 10:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
					var this11 = data;
					var c10 = this11;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.drawRoundRect(c10.buffer.f[c10.fPos],c10.buffer.f[c10.fPos + 1],c10.buffer.f[c10.fPos + 2],c10.buffer.f[c10.fPos + 3],c10.buffer.f[c10.fPos + 4],c10.buffer.o[c10.oPos]);
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var this12 = data;
					var c11 = this12;
					openfl_display__$internal_CanvasGraphics.fillCommands.drawTriangles(c11.buffer.o[c11.oPos],c11.buffer.o[c11.oPos + 1],c11.buffer.o[c11.oPos + 2],c11.buffer.o[c11.oPos + 3]);
					break;
				case 13:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.END_FILL;
					var this13 = data;
					openfl_display__$internal_CanvasGraphics.endFill();
					openfl_display__$internal_CanvasGraphics.endStroke();
					openfl_display__$internal_CanvasGraphics.hasFill = false;
					hasLineStyle = false;
					openfl_display__$internal_CanvasGraphics.bitmapFill = null;
					initStrokeX = 0;
					initStrokeY = 0;
					break;
				case 14:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE;
					var this14 = data;
					var c12 = this14;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineBitmapStyle(c12.buffer.o[c12.oPos],c12.buffer.o[c12.oPos + 1],c12.buffer.b[c12.bPos],c12.buffer.b[c12.bPos + 1]);
					break;
				case 15:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE;
					var this15 = data;
					var c13 = this15;
					if(!hasLineStyle && (initStrokeX != 0 || initStrokeY != 0)) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
						initStrokeX = 0;
						initStrokeY = 0;
					}
					hasLineStyle = true;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineGradientStyle(c13.buffer.o[c13.oPos],c13.buffer.ii[c13.iiPos],c13.buffer.ff[c13.ffPos],c13.buffer.ii[c13.iiPos + 1],c13.buffer.o[c13.oPos + 1],c13.buffer.o[c13.oPos + 2],c13.buffer.o[c13.oPos + 3],c13.buffer.f[c13.fPos]);
					break;
				case 16:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_STYLE;
					var this16 = data;
					var c14 = this16;
					if(!hasLineStyle && c14.buffer.o[c14.oPos] != null) {
						if(initStrokeX != 0 || initStrokeY != 0) {
							openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(initStrokeX,initStrokeY);
							initStrokeX = 0;
							initStrokeY = 0;
						}
					}
					hasLineStyle = c14.buffer.o[c14.oPos] != null;
					openfl_display__$internal_CanvasGraphics.strokeCommands.lineStyle(c14.buffer.o[c14.oPos],c14.buffer.i[c14.iPos],c14.buffer.f[c14.fPos],c14.buffer.b[c14.bPos],c14.buffer.o[c14.oPos + 1],c14.buffer.o[c14.oPos + 2],c14.buffer.o[c14.oPos + 3],c14.buffer.f[c14.fPos + 1]);
					break;
				case 17:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
					var this17 = data;
					var c15 = this17;
					openfl_display__$internal_CanvasGraphics.fillCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.lineTo(c15.buffer.f[c15.fPos],c15.buffer.f[c15.fPos + 1]);
					} else {
						initStrokeX = c15.buffer.f[c15.fPos];
						initStrokeY = c15.buffer.f[c15.fPos + 1];
					}
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var this18 = data;
					var c16 = this18;
					openfl_display__$internal_CanvasGraphics.fillCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					if(hasLineStyle) {
						openfl_display__$internal_CanvasGraphics.strokeCommands.moveTo(c16.buffer.f[c16.fPos],c16.buffer.f[c16.fPos + 1]);
					} else {
						initStrokeX = c16.buffer.f[c16.fPos];
						initStrokeY = c16.buffer.f[c16.fPos + 1];
					}
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this19 = data;
					var c17 = this19;
					renderer.__setBlendModeContext(openfl_display__$internal_CanvasGraphics.context,c17.buffer.o[c17.oPos]);
					break;
				case 21:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD;
					var this20 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingEvenOdd();
					openfl_display__$internal_CanvasGraphics.windingRule = "evenodd";
					break;
				case 22:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO;
					var this21 = data;
					openfl_display__$internal_CanvasGraphics.fillCommands.windingNonZero();
					openfl_display__$internal_CanvasGraphics.windingRule = "nonzero";
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			if(openfl_display__$internal_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endFill();
			}
			if(openfl_display__$internal_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl_display__$internal_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.__softwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_CanvasGraphics.renderMask = function(graphics,renderer) {
	if(graphics.__commands.get_length() != 0) {
		openfl_display__$internal_CanvasGraphics.context = renderer.context;
		var positionX = 0.0;
		var positionY = 0.0;
		var offsetX = 0;
		var offsetY = 0;
		var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
		var x;
		var y;
		var width;
		var height;
		var kappa = .5522848;
		var ox;
		var oy;
		var xe;
		var ye;
		var xm;
		var ym;
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type._hx_index) {
			case 4:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO;
				var this1 = data;
				var c = this1;
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(c.buffer.f[c.fPos] - offsetX,c.buffer.f[c.fPos + 1] - offsetY,c.buffer.f[c.fPos + 2] - offsetX,c.buffer.f[c.fPos + 3] - offsetY,c.buffer.f[c.fPos + 4] - offsetX,c.buffer.f[c.fPos + 5] - offsetY);
				positionX = c.buffer.f[c.fPos + 4];
				positionY = c.buffer.f[c.fPos + 5];
				break;
			case 5:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.CURVE_TO;
				var this2 = data;
				var c1 = this2;
				openfl_display__$internal_CanvasGraphics.context.quadraticCurveTo(c1.buffer.f[c1.fPos] - offsetX,c1.buffer.f[c1.fPos + 1] - offsetY,c1.buffer.f[c1.fPos + 2] - offsetX,c1.buffer.f[c1.fPos + 3] - offsetY);
				positionX = c1.buffer.f[c1.fPos + 2];
				positionY = c1.buffer.f[c1.fPos + 3];
				break;
			case 6:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_CIRCLE;
				var this3 = data;
				var c2 = this3;
				openfl_display__$internal_CanvasGraphics.context.arc(c2.buffer.f[c2.fPos] - offsetX,c2.buffer.f[c2.fPos + 1] - offsetY,c2.buffer.f[c2.fPos + 2],0,Math.PI * 2,true);
				break;
			case 7:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE;
				var this4 = data;
				var c3 = this4;
				x = c3.buffer.f[c3.fPos];
				y = c3.buffer.f[c3.fPos + 1];
				width = c3.buffer.f[c3.fPos + 2];
				height = c3.buffer.f[c3.fPos + 3];
				x -= offsetX;
				y -= offsetY;
				ox = width / 2 * kappa;
				oy = height / 2 * kappa;
				xe = x + width;
				ye = y + height;
				xm = x + width / 2;
				ym = y + height / 2;
				openfl_display__$internal_CanvasGraphics.context.moveTo(x,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl_display__$internal_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 9:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
				var this5 = data;
				var c4 = this5;
				openfl_display__$internal_CanvasGraphics.context.beginPath();
				openfl_display__$internal_CanvasGraphics.context.rect(c4.buffer.f[c4.fPos] - offsetX,c4.buffer.f[c4.fPos + 1] - offsetY,c4.buffer.f[c4.fPos + 2],c4.buffer.f[c4.fPos + 3]);
				openfl_display__$internal_CanvasGraphics.context.closePath();
				break;
			case 10:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT;
				var this6 = data;
				var c5 = this6;
				openfl_display__$internal_CanvasGraphics.drawRoundRect(c5.buffer.f[c5.fPos] - offsetX,c5.buffer.f[c5.fPos + 1] - offsetY,c5.buffer.f[c5.fPos + 2],c5.buffer.f[c5.fPos + 3],c5.buffer.f[c5.fPos + 4],c5.buffer.o[c5.oPos]);
				break;
			case 17:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.LINE_TO;
				var this7 = data;
				var c6 = this7;
				openfl_display__$internal_CanvasGraphics.context.lineTo(c6.buffer.f[c6.fPos] - offsetX,c6.buffer.f[c6.fPos + 1] - offsetY);
				positionX = c6.buffer.f[c6.fPos];
				positionY = c6.buffer.f[c6.fPos + 1];
				break;
			case 18:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
				var this8 = data;
				var c7 = this8;
				openfl_display__$internal_CanvasGraphics.context.moveTo(c7.buffer.f[c7.fPos] - offsetX,c7.buffer.f[c7.fPos + 1] - offsetY);
				positionX = c7.buffer.f[c7.fPos];
				positionY = c7.buffer.f[c7.fPos + 1];
				break;
			default:
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			}
		}
		data.destroy();
	}
};
openfl_display__$internal_CanvasGraphics.setSmoothing = function(smooth) {
	if(!openfl_display__$internal_CanvasGraphics.allowSmoothing) {
		smooth = false;
	}
	if(openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled != smooth) {
		openfl_display__$internal_CanvasGraphics.context.imageSmoothingEnabled = smooth;
	}
};
var openfl_display__$internal_CanvasSimpleButton = function() { };
$hxClasses["openfl.display._internal.CanvasSimpleButton"] = openfl_display__$internal_CanvasSimpleButton;
openfl_display__$internal_CanvasSimpleButton.__name__ = "openfl.display._internal.CanvasSimpleButton";
openfl_display__$internal_CanvasSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_CanvasSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_CanvasTextField = function() { };
$hxClasses["openfl.display._internal.CanvasTextField"] = openfl_display__$internal_CanvasTextField;
openfl_display__$internal_CanvasTextField.__name__ = "openfl.display._internal.CanvasTextField";
openfl_display__$internal_CanvasTextField.renderDrawable = function(textField,renderer) {
	if(renderer.__isDOM && !textField.__renderedOnCanvasWhileOnDOM) {
		textField.__renderedOnCanvasWhileOnDOM = true;
		if(textField.get_type() == 1) {
			textField.replaceText(0,textField.__text.length,textField.__text);
		}
		if(textField.__isHTML) {
			textField.__updateText(openfl_text__$internal_HTMLParser.parse(textField.__text,textField.__textFormat,textField.__textEngine.textFormatRanges));
		}
		textField.__dirty = true;
		textField.__layoutDirty = true;
		if(!textField.__renderDirty) {
			textField.__renderDirty = true;
			textField.__setParentRenderDirty();
		}
	}
	if(textField.get_mask() == null || textField.get_mask().get_width() > 0 && textField.get_mask().get_height() > 0) {
		renderer.__updateCacheBitmap(textField,textField.__dirty);
		if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
			var bitmap = textField.__cacheBitmap;
			if(bitmap.__renderable) {
				var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
				if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
					var context = renderer.context;
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap,false);
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
					context.globalAlpha = alpha;
					var scrollRect = bitmap.__scrollRect;
					renderer.setTransform(bitmap.__renderTransform,context);
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					if(scrollRect == null) {
						context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
					} else {
						context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
					}
					if(!renderer.__allowSmoothing || !bitmap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer.__popMaskObject(bitmap,false);
				}
			}
		} else {
			var transform = textField.__worldTransform;
			var textEngine = textField.__textEngine;
			var useTextBounds = !(textEngine.background || textEngine.border);
			var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
			var graphics = textField.__graphics;
			var cursorOffsetX = 0.0;
			if(textField.__dirty) {
				textField.__updateLayout();
				if(graphics.__bounds == null) {
					graphics.__bounds = new openfl_geom_Rectangle();
				}
				if(textField.get_text().length == 0) {
					var boundsWidth = textEngine.bounds.width - 4;
					var align = textField.get_defaultTextFormat().align;
					cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
					switch(align) {
					case 0:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
						cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
						break;
					case 1:
						break;
					case 2:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 3:
						cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
						cursorOffsetX += textField.get_defaultTextFormat().indent;
						cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
						break;
					case 4:
						cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
						break;
					case 5:
						break;
					}
					if(useTextBounds) {
						bounds.y = textEngine.bounds.y;
						bounds.x = cursorOffsetX;
					}
				}
				graphics.__bounds.copyFrom(bounds);
			}
			graphics.__update(renderer.__worldTransform);
			if(textField.__dirty || graphics.__softwareDirty) {
				var width = graphics.__width;
				var height = graphics.__height;
				if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
					textField.__graphics.__canvas = null;
					textField.__graphics.__context = null;
					textField.__graphics.__bitmap = null;
					textField.__graphics.__softwareDirty = false;
					textField.__graphics.set___dirty(false);
					textField.__dirty = false;
				} else {
					if(textField.__graphics.__canvas == null) {
						textField.__graphics.__canvas = window.document.createElement("canvas");
						textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
					}
					openfl_display__$internal_CanvasTextField.context = graphics.__context;
					var transform = graphics.__renderTransform;
					if(renderer.__isDOM) {
						var scale = renderer.pixelRatio;
						graphics.__canvas.width = width * scale | 0;
						graphics.__canvas.height = height * scale | 0;
						graphics.__canvas.style.width = width + "px";
						graphics.__canvas.style.height = height + "px";
						var matrix = openfl_geom_Matrix.__pool.get();
						matrix.copyFrom(transform);
						matrix.scale(scale,scale);
						renderer.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
						openfl_geom_Matrix.__pool.release(matrix);
					} else {
						graphics.__canvas.width = width;
						graphics.__canvas.height = height;
						openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
					}
					if(openfl_display__$internal_CanvasTextField.clearRect == null) {
						openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
					}
					if(openfl_display__$internal_CanvasTextField.clearRect) {
						openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
					}
					if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
						var text = textEngine.text;
						if(!renderer.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
							graphics.__context.imageSmoothingEnabled = false;
						} else {
							graphics.__context.imageSmoothingEnabled = true;
						}
						if(textEngine.border || textEngine.background) {
							openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
						openfl_display__$internal_CanvasTextField.context.textAlign = "start";
						var scrollX = -textField.get_scrollH();
						var scrollY = 0.0;
						var _g = 0;
						var _g1 = textField.get_scrollV() - 1;
						while(_g < _g1) {
							var i = _g++;
							scrollY -= textEngine.lineHeights.get(i);
						}
						var advance;
						var group = textEngine.layoutGroups.iterator();
						while(group.hasNext()) {
							var group1 = group.next();
							if(group1.lineIndex < textField.get_scrollV() - 1) {
								continue;
							}
							if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
								break;
							}
							var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
							openfl_display__$internal_CanvasTextField.context.fillStyle = color;
							openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
							if(textField.__caretIndex > -1 && textEngine.selectable) {
								if(textField.__selectionIndex == textField.__caretIndex) {
									if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
										advance = 0.0;
										var _g = 0;
										var _g1 = textField.__caretIndex - group1.startIndex;
										while(_g < _g1) {
											var i = _g++;
											if(group1.positions.length <= i) {
												break;
											}
											advance += group1.positions[i];
										}
										var scrollY1 = 0.0;
										var _g2 = textField.get_scrollV();
										var _g3 = group1.lineIndex + 1;
										while(_g2 < _g3) {
											var i1 = _g2++;
											scrollY1 += textEngine.lineHeights.get(i1 - 1);
										}
										openfl_display__$internal_CanvasTextField.context.beginPath();
										var tmp = StringTools.hex(group1.format.color & 16777215,6);
										openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
										openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
										openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
										openfl_display__$internal_CanvasTextField.context.stroke();
										openfl_display__$internal_CanvasTextField.context.closePath();
									}
								} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
									var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
									var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
									if(group1.startIndex > selectionStart) {
										selectionStart = group1.startIndex;
									}
									if(group1.endIndex < selectionEnd) {
										selectionEnd = group1.endIndex;
									}
									var end;
									var start = textField.getCharBoundaries(selectionStart);
									if(selectionEnd >= group1.endIndex) {
										end = textField.getCharBoundaries(group1.endIndex - 1);
										if(end != null) {
											end.x += end.width + 2;
										}
									} else {
										end = textField.getCharBoundaries(selectionEnd);
									}
									if(start != null && end != null) {
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
										openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
										openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
										openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
									}
								}
							}
							if(group1.format.underline) {
								openfl_display__$internal_CanvasTextField.context.beginPath();
								openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								var x = group1.offsetX + scrollX - bounds.x;
								var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
								openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
								openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						}
					} else {
						if(textEngine.border || textEngine.background) {
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
							} else {
								openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
							}
							if(textEngine.background) {
								var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.fill();
							}
							if(textEngine.border) {
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineCap = "square";
								var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.stroke();
							}
						}
						if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
							var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
							var scrollY = 0.0;
							var _g = 0;
							var _g1 = textField.get_scrollV() - 1;
							while(_g < _g1) {
								var i = _g++;
								scrollY += textEngine.lineHeights.get(i);
							}
							openfl_display__$internal_CanvasTextField.context.beginPath();
							var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
							openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
							openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
							openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
							openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
							openfl_display__$internal_CanvasTextField.context.stroke();
							openfl_display__$internal_CanvasTextField.context.closePath();
						}
					}
					graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
					graphics.__visible = true;
					textField.__dirty = false;
					graphics.__softwareDirty = false;
					graphics.set___dirty(false);
				}
			}
			var smoothingEnabled = false;
			if(textField.__textEngine.antiAliasType == 0 && textField.__textEngine.gridFitType == 1) {
				smoothingEnabled = renderer.context.imageSmoothingEnabled;
				if(smoothingEnabled) {
					renderer.context.imageSmoothingEnabled = false;
				}
			}
			if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
				if(textField.__renderable) {
					var alpha = renderer.__getAlpha(textField.__worldAlpha);
					if(!(alpha <= 0)) {
						if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
							renderer.__setBlendMode(textField.__worldBlendMode);
							renderer.__pushMaskObject(textField);
							var context = renderer.context;
							renderer.setTransform(textField.__renderTransform,context);
							var color = textField.opaqueBackground;
							context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
							context.fillRect(0,0,textField.get_width(),textField.get_height());
							renderer.__popMaskObject(textField);
						}
						if(textField.__graphics != null) {
							if(textField.__renderable) {
								var alpha = renderer.__getAlpha(textField.__worldAlpha);
								if(!(alpha <= 0)) {
									var graphics = textField.__graphics;
									if(graphics != null) {
										openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
										var width = graphics.__width;
										var height = graphics.__height;
										var canvas = graphics.__canvas;
										if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
											var transform = graphics.__worldTransform;
											var context = renderer.context;
											var scrollRect = textField.__scrollRect;
											var scale9Grid = textField.__worldScale9Grid;
											if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
												renderer.__setBlendMode(textField.__worldBlendMode);
												renderer.__pushMaskObject(textField);
												context.globalAlpha = alpha;
												if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
													context.setTransform(1,0,0,1,transform.tx,transform.ty);
													var bounds = graphics.__bounds;
													var scaleX = graphics.__renderTransform.a;
													var scaleY = graphics.__renderTransform.d;
													var renderScaleX = transform.a;
													var renderScaleY = transform.d;
													var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
													var top = Math.round(scale9Grid.y * scaleY);
													var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
													var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
													var centerWidth = Math.round(scale9Grid.width * scaleX);
													var centerHeight = Math.round(scale9Grid.height * scaleY);
													var renderLeft = Math.round(scale9Grid.x * renderScaleX);
													var renderTop = Math.round(scale9Grid.y * renderScaleY);
													var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
													var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
													var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
													var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
													renderer.applySmoothing(context,false);
													if(centerWidth != 0 && centerHeight != 0) {
														context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
														context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
														context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
														context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
														context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
														context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
														context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
														context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
													} else if(centerWidth == 0 && centerHeight != 0) {
														var renderWidth = renderLeft + renderCenterWidth + renderRight;
														context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
														context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
														context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
													} else if(centerHeight == 0 && centerWidth != 0) {
														var renderHeight = renderTop + renderCenterHeight + renderBottom;
														context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
														context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
														context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
													}
												} else {
													renderer.setTransform(transform,context);
													if(renderer.__isDOM) {
														var reverseScale = 1 / renderer.pixelRatio;
														context.scale(reverseScale,reverseScale);
													}
													context.drawImage(canvas,0,0,width,height);
												}
												renderer.__popMaskObject(textField);
											}
										}
									}
								}
							}
						}
					}
				}
			}
			if(smoothingEnabled) {
				renderer.context.imageSmoothingEnabled = true;
			}
		}
	}
};
openfl_display__$internal_CanvasTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_CanvasDisplayObject.renderDrawableMask(textField,renderer);
};
var openfl_display__$internal_CanvasTilemap = function() { };
$hxClasses["openfl.display._internal.CanvasTilemap"] = openfl_display__$internal_CanvasTilemap;
openfl_display__$internal_CanvasTilemap.__name__ = "openfl.display._internal.CanvasTilemap";
openfl_display__$internal_CanvasTilemap.renderTileContainer = function(group,renderer,parentTransform,defaultTileset,smooth,alphaEnabled,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData,source,rect) {
	var context = renderer.context;
	var roundPixels = renderer.__roundPixels;
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var tiles = group.__tiles;
	var length = group.__length;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var _g = 0;
	var _g1 = length;
	while(_g < _g1) {
		var i = _g++;
		tile = tiles[i];
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_CanvasTilemap.renderTileContainer(tile,renderer,tileTransform,tileset,smooth,alphaEnabled,alpha,blendModeEnabled,blendMode,cacheBitmapData,source,rect);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
			}
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(bitmapData != cacheBitmapData) {
				if(bitmapData.image.buffer.__srcImage == null) {
					lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmapData.image);
				}
				source = bitmapData.image.get_src();
				cacheBitmapData = bitmapData;
			}
			context.globalAlpha = alpha;
			if(blendModeEnabled) {
				renderer.__setBlendMode(blendMode);
			}
			renderer.setTransform(tileTransform,context);
			context.drawImage(source,tileRect.x,tileRect.y,tileRect.width,tileRect.height,0,0,tileRect.width,tileRect.height);
		}
	}
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_CanvasTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.__renderable) {
			var alpha = renderer.__getAlpha(bitmap.__worldAlpha);
			if(alpha > 0 && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
				var context = renderer.context;
				renderer.__setBlendMode(bitmap.__worldBlendMode);
				renderer.__pushMaskObject(bitmap,false);
				lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
				context.globalAlpha = alpha;
				var scrollRect = bitmap.__scrollRect;
				renderer.setTransform(bitmap.__renderTransform,context);
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(bitmap.__bitmapData.image.get_src(),0,0,bitmap.__bitmapData.image.width,bitmap.__bitmapData.image.height);
				} else {
					context.drawImage(bitmap.__bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!renderer.__allowSmoothing || !bitmap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskObject(bitmap,false);
			}
		}
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(tilemap.__renderable) {
				var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
						renderer.__setBlendMode(tilemap.__worldBlendMode);
						renderer.__pushMaskObject(tilemap);
						var context = renderer.context;
						renderer.setTransform(tilemap.__renderTransform,context);
						var color = tilemap.opaqueBackground;
						context.fillStyle = "rgb(" + (color >>> 16 & 255) + "," + (color >>> 8 & 255) + "," + (color & 255) + ")";
						context.fillRect(0,0,tilemap.get_width(),tilemap.get_height());
						renderer.__popMaskObject(tilemap);
					}
					if(tilemap.__graphics != null) {
						if(tilemap.__renderable) {
							var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
							if(!(alpha <= 0)) {
								var graphics = tilemap.__graphics;
								if(graphics != null) {
									openfl_display__$internal_CanvasGraphics.render(graphics,renderer);
									var width = graphics.__width;
									var height = graphics.__height;
									var canvas = graphics.__canvas;
									if(canvas != null && graphics.__visible && width >= 1 && height >= 1) {
										var transform = graphics.__worldTransform;
										var context = renderer.context;
										var scrollRect = tilemap.__scrollRect;
										var scale9Grid = tilemap.__worldScale9Grid;
										if(scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0) {
											renderer.__setBlendMode(tilemap.__worldBlendMode);
											renderer.__pushMaskObject(tilemap);
											context.globalAlpha = alpha;
											if(scale9Grid != null && transform.b == 0 && transform.c == 0) {
												context.setTransform(1,0,0,1,transform.tx,transform.ty);
												var bounds = graphics.__bounds;
												var scaleX = graphics.__renderTransform.a;
												var scaleY = graphics.__renderTransform.d;
												var renderScaleX = transform.a;
												var renderScaleY = transform.d;
												var left = Math.max(1,Math.round(scale9Grid.x * scaleX));
												var top = Math.round(scale9Grid.y * scaleY);
												var right = Math.max(1,Math.round((bounds.get_right() - scale9Grid.get_right()) * scaleX));
												var bottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * scaleY);
												var centerWidth = Math.round(scale9Grid.width * scaleX);
												var centerHeight = Math.round(scale9Grid.height * scaleY);
												var renderLeft = Math.round(scale9Grid.x * renderScaleX);
												var renderTop = Math.round(scale9Grid.y * renderScaleY);
												var renderRight = Math.round((bounds.get_right() - scale9Grid.get_right()) * renderScaleX);
												var renderBottom = Math.round((bounds.get_bottom() - scale9Grid.get_bottom()) * renderScaleY);
												var renderCenterWidth = Math.round(width * renderScaleX) - renderLeft - renderRight;
												var renderCenterHeight = Math.round(height * renderScaleY) - renderTop - renderBottom;
												renderer.applySmoothing(context,false);
												if(centerWidth != 0 && centerHeight != 0) {
													context.drawImage(canvas,0,0,left,top,0,0,renderLeft,renderTop);
													context.drawImage(canvas,left,0,centerWidth,top,renderLeft,0,renderCenterWidth,renderTop);
													context.drawImage(canvas,left + centerWidth,0,right,top,renderLeft + renderCenterWidth,0,renderRight,renderTop);
													context.drawImage(canvas,0,top,left,centerHeight,0,renderTop,renderLeft,renderCenterHeight);
													context.drawImage(canvas,left,top,centerWidth,centerHeight,renderLeft,renderTop,renderCenterWidth,renderCenterHeight);
													context.drawImage(canvas,left + centerWidth,top,right,centerHeight,renderLeft + renderCenterWidth,renderTop,renderRight,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,left,bottom,0,renderTop + renderCenterHeight,renderLeft,renderBottom);
													context.drawImage(canvas,left,top + centerHeight,centerWidth,bottom,renderLeft,renderTop + renderCenterHeight,renderCenterWidth,renderBottom);
													context.drawImage(canvas,left + centerWidth,top + centerHeight,right,bottom,renderLeft + renderCenterWidth,renderTop + renderCenterHeight,renderRight,renderBottom);
												} else if(centerWidth == 0 && centerHeight != 0) {
													var renderWidth = renderLeft + renderCenterWidth + renderRight;
													context.drawImage(canvas,0,0,width,top,0,0,renderWidth,renderTop);
													context.drawImage(canvas,0,top,width,centerHeight,0,renderTop,renderWidth,renderCenterHeight);
													context.drawImage(canvas,0,top + centerHeight,width,bottom,0,renderTop + renderCenterHeight,renderWidth,renderBottom);
												} else if(centerHeight == 0 && centerWidth != 0) {
													var renderHeight = renderTop + renderCenterHeight + renderBottom;
													context.drawImage(canvas,0,0,left,height,0,0,renderLeft,renderHeight);
													context.drawImage(canvas,left,0,centerWidth,height,renderLeft,0,renderCenterWidth,renderHeight);
													context.drawImage(canvas,left + centerWidth,0,right,height,renderLeft + renderCenterWidth,0,renderRight,renderHeight);
												}
											} else {
												renderer.setTransform(transform,context);
												if(renderer.__isDOM) {
													var reverseScale = 1 / renderer.pixelRatio;
													context.scale(reverseScale,reverseScale);
												}
												context.drawImage(canvas,0,0,width,height);
											}
											renderer.__popMaskObject(tilemap);
										}
									}
								}
							}
						}
					}
				}
			}
		}
		if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
			var alpha = renderer.__getAlpha(tilemap.__worldAlpha);
			if(!(alpha <= 0)) {
				var context = renderer.context;
				renderer.__setBlendMode(tilemap.__worldBlendMode);
				renderer.__pushMaskObject(tilemap);
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,tilemap.__width,tilemap.__height);
				renderer.__pushMaskRect(rect,tilemap.__renderTransform);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = false;
				}
				openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer,tilemap.__renderTransform,tilemap.__tileset,renderer.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
				if(!renderer.__allowSmoothing || !tilemap.smoothing) {
					context.imageSmoothingEnabled = true;
				}
				renderer.__popMaskRect();
				renderer.__popMaskObject(tilemap);
				openfl_geom_Rectangle.__pool.release(rect);
			}
		}
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_CanvasTilemap.renderDrawableMask = function(tilemap,renderer) {
};
var openfl_display__$internal_CanvasVideo = function() { };
$hxClasses["openfl.display._internal.CanvasVideo"] = openfl_display__$internal_CanvasVideo;
openfl_display__$internal_CanvasVideo.__name__ = "openfl.display._internal.CanvasVideo";
openfl_display__$internal_CanvasVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__stream == null) {
		return;
	}
	var alpha = renderer.__getAlpha(video.__worldAlpha);
	if(alpha <= 0) {
		return;
	}
	var context = renderer.context;
	if(video.__stream.__video != null) {
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		context.globalAlpha = alpha;
		var scrollRect = video.__scrollRect;
		var smoothing = video.smoothing;
		renderer.setTransform(video.__worldTransform,context);
		if(!smoothing) {
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(video.__stream.__video,0,0,video.get_width(),video.get_height());
		} else {
			context.drawImage(video.__stream.__video,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!smoothing) {
			context.imageSmoothingEnabled = true;
		}
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_CanvasVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_CanvasVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_CanvasVideo.renderDrawableMask = function(video,renderer) {
};
var openfl_display__$internal_Context3DBitmap = function() { };
$hxClasses["openfl.display._internal.Context3DBitmap"] = openfl_display__$internal_Context3DBitmap;
openfl_display__$internal_Context3DBitmap.__name__ = "openfl.display._internal.Context3DBitmap";
openfl_display__$internal_Context3DBitmap.render = function(bitmap,renderer) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		renderer.__setBlendMode(bitmap.__worldBlendMode);
		renderer.__pushMaskObject(bitmap);
		var shader = renderer.__initDisplayShader(bitmap.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(bitmap.__bitmapData,renderer.__allowSmoothing && (bitmap.smoothing || renderer.__upscaled));
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.applyAlpha(bitmap.__worldAlpha);
		renderer.applyColorTransform(bitmap.__worldColorTransform);
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
		renderer.__popMaskObject(bitmap);
	}
};
openfl_display__$internal_Context3DBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.image != null) {
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(bitmap.__cacheBitmap,renderer);
	} else {
		if(!(bitmap.opaqueBackground == null && bitmap.__graphics == null)) {
			if(!(!bitmap.__renderable || bitmap.__worldAlpha <= 0)) {
				if(bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0) {
					renderer.__setBlendMode(bitmap.__worldBlendMode);
					renderer.__pushMaskObject(bitmap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,bitmap.get_width(),bitmap.get_height());
					renderer.__pushMaskRect(rect,bitmap.__renderTransform);
					var color = bitmap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(bitmap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(bitmap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(bitmap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DBitmap.render(bitmap,renderer);
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_Context3DBitmap.renderDrawableMask = function(bitmap,renderer) {
	openfl_display__$internal_Context3DBitmap.renderMask(bitmap,renderer);
};
openfl_display__$internal_Context3DBitmap.renderMask = function(bitmap,renderer) {
	if(bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid) {
		var context = renderer.__context3D;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(bitmap.__renderTransform,bitmap.pixelSnapping));
		renderer.updateShader();
		var vertexBuffer = bitmap.__bitmapData.getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = bitmap.__bitmapData.getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_Context3DBitmapData = function() { };
$hxClasses["openfl.display._internal.Context3DBitmapData"] = openfl_display__$internal_Context3DBitmapData;
openfl_display__$internal_Context3DBitmapData.__name__ = "openfl.display._internal.Context3DBitmapData";
openfl_display__$internal_Context3DBitmapData.renderDrawable = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	renderer.__setBlendMode(10);
	var shader = renderer.__defaultDisplayShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.applyAlpha(bitmapData.__worldAlpha);
	renderer.applyColorTransform(bitmapData.__worldColorTransform);
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
	renderer.__clearShader();
};
openfl_display__$internal_Context3DBitmapData.renderDrawableMask = function(bitmapData,renderer) {
	var context = renderer.__context3D;
	var gl = context.gl;
	var shader = renderer.__maskShader;
	renderer.setShader(shader);
	renderer.applyBitmapData(bitmapData,renderer.__upscaled);
	renderer.applyMatrix(renderer.__getMatrix(bitmapData.__worldTransform,1));
	renderer.updateShader();
	var vertexBuffer = bitmapData.getVertexBuffer(context);
	if(shader.__position != null) {
		context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
	}
	if(shader.__textureCoord != null) {
		context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
	}
	var indexBuffer = bitmapData.getIndexBuffer(context);
	context.drawTriangles(indexBuffer);
	openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
	renderer.__clearShader();
};
var openfl_display__$internal_Context3DBuffer = function(context3D,elementType,elementCount,dataPerVertex) {
	this.context3D = context3D;
	this.elementType = elementType;
	this.dataPerVertex = dataPerVertex;
	this.indexCount = 0;
	this.vertexCount = 0;
	this.resize(elementCount);
};
$hxClasses["openfl.display._internal.Context3DBuffer"] = openfl_display__$internal_Context3DBuffer;
openfl_display__$internal_Context3DBuffer.__name__ = "openfl.display._internal.Context3DBuffer";
openfl_display__$internal_Context3DBuffer.prototype = {
	flushVertexBufferData: function() {
		if(this.vertexBufferData.length > this.vertexCount) {
			this.vertexCount = this.vertexBufferData.length;
			this.vertexBuffer = this.context3D.createVertexBuffer(this.vertexCount,this.dataPerVertex,0);
		}
		this.vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.vertexBufferData));
	}
	,resize: function(elementCount,dataPerVertex) {
		if(dataPerVertex == null) {
			dataPerVertex = -1;
		}
		this.elementCount = elementCount;
		if(dataPerVertex == -1) {
			dataPerVertex = this.dataPerVertex;
		}
		if(dataPerVertex != this.dataPerVertex) {
			this.vertexBuffer = null;
			this.vertexCount = 0;
			this.dataPerVertex = dataPerVertex;
		}
		var numVertices = 0;
		switch(this.elementType._hx_index) {
		case 0:
			numVertices = elementCount * 4;
			break;
		case 1:
			numVertices = elementCount * 3;
			break;
		case 2:
			numVertices = elementCount * 3;
			break;
		}
		var vertexLength = numVertices * dataPerVertex;
		if(this.vertexBufferData == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
		} else if(vertexLength > this.vertexBufferData.length) {
			var cacheBufferData = this.vertexBufferData;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(vertexLength != null) {
				this1 = new Float32Array(vertexLength);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.vertexBufferData = this1;
			this.vertexBufferData.set(cacheBufferData);
		}
	}
	,__class__: openfl_display__$internal_Context3DBuffer
};
var openfl_display__$internal_Context3DElementType = $hxEnums["openfl.display._internal.Context3DElementType"] = { __ename__:"openfl.display._internal.Context3DElementType",__constructs__:null
	,QUADS: {_hx_name:"QUADS",_hx_index:0,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLES: {_hx_name:"TRIANGLES",_hx_index:1,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
	,TRIANGLE_INDICES: {_hx_name:"TRIANGLE_INDICES",_hx_index:2,__enum__:"openfl.display._internal.Context3DElementType",toString:$estr}
};
openfl_display__$internal_Context3DElementType.__constructs__ = [openfl_display__$internal_Context3DElementType.QUADS,openfl_display__$internal_Context3DElementType.TRIANGLES,openfl_display__$internal_Context3DElementType.TRIANGLE_INDICES];
var openfl_display__$internal_Context3DDisplayObject = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObject"] = openfl_display__$internal_Context3DDisplayObject;
openfl_display__$internal_Context3DDisplayObject.__name__ = "openfl.display._internal.Context3DDisplayObject";
openfl_display__$internal_Context3DDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(displayObject.__cacheBitmap,renderer);
	} else if(!(displayObject.opaqueBackground == null && displayObject.__graphics == null)) {
		if(!(!displayObject.__renderable || displayObject.__worldAlpha <= 0)) {
			if(displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0) {
				renderer.__setBlendMode(displayObject.__worldBlendMode);
				renderer.__pushMaskObject(displayObject);
				var context = renderer.__context3D;
				var rect = openfl_geom_Rectangle.__pool.get();
				rect.setTo(0,0,displayObject.get_width(),displayObject.get_height());
				renderer.__pushMaskRect(rect,displayObject.__renderTransform);
				var color = displayObject.opaqueBackground;
				context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
				renderer.__popMaskRect();
				renderer.__popMaskObject(displayObject);
				openfl_geom_Rectangle.__pool.release(rect);
			}
			if(displayObject.__graphics != null) {
				openfl_display__$internal_Context3DShape.render(displayObject,renderer);
			}
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_Context3DDisplayObject.renderDrawableMask = function(displayObject,renderer) {
	if(displayObject.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObject,renderer);
	}
};
var openfl_display__$internal_Context3DDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.Context3DDisplayObjectContainer"] = openfl_display__$internal_Context3DDisplayObjectContainer;
openfl_display__$internal_Context3DDisplayObjectContainer.__name__ = "openfl.display._internal.Context3DDisplayObjectContainer";
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(!displayObjectContainer.__renderable || displayObjectContainer.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__pushMaskObject(displayObjectContainer);
		if(renderer.__stage != null) {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
				child.__renderDirty = false;
			}
			displayObjectContainer.__renderDirty = false;
		} else {
			var _g = 0;
			var _g1 = displayObjectContainer.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				renderer.__renderDrawable(child);
			}
		}
	}
	if(displayObjectContainer.__children.length > 0) {
		renderer.__popMaskObject(displayObjectContainer);
	}
};
openfl_display__$internal_Context3DDisplayObjectContainer.renderDrawableMask = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	if(displayObjectContainer.__graphics != null) {
		openfl_display__$internal_Context3DShape.renderMask(displayObjectContainer,renderer);
	}
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableMask(child);
	}
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = "openfl.geom.ColorTransform";
openfl_geom_ColorTransform.prototype = {
	__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__copyFrom: function(ct) {
		this.redMultiplier = ct.redMultiplier;
		this.greenMultiplier = ct.greenMultiplier;
		this.blueMultiplier = ct.blueMultiplier;
		this.alphaMultiplier = ct.alphaMultiplier;
		this.redOffset = ct.redOffset;
		this.greenOffset = ct.greenOffset;
		this.blueOffset = ct.blueOffset;
		this.alphaOffset = ct.alphaOffset;
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__identity: function() {
		this.redMultiplier = 1;
		this.greenMultiplier = 1;
		this.blueMultiplier = 1;
		this.alphaMultiplier = 1;
		this.redOffset = 0;
		this.greenOffset = 0;
		this.blueOffset = 0;
		this.alphaOffset = 0;
	}
	,__invert: function() {
		this.redMultiplier = this.redMultiplier != 0 ? 1 / this.redMultiplier : 1;
		this.greenMultiplier = this.greenMultiplier != 0 ? 1 / this.greenMultiplier : 1;
		this.blueMultiplier = this.blueMultiplier != 0 ? 1 / this.blueMultiplier : 1;
		this.alphaMultiplier = this.alphaMultiplier != 0 ? 1 / this.alphaMultiplier : 1;
		this.redOffset = -this.redOffset;
		this.greenOffset = -this.greenOffset;
		this.blueOffset = -this.blueOffset;
		this.alphaOffset = -this.alphaOffset;
	}
	,__equals: function(ct,ignoreAlphaMultiplier) {
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (ignoreAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function(ignoreAlphaMultiplier) {
		if(ignoreAlphaMultiplier) {
			if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
				return this.alphaOffset == 0;
			} else {
				return false;
			}
		} else if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,__setArrays: function(colorMultipliers,colorOffsets) {
		colorMultipliers[0] = this.redMultiplier;
		colorMultipliers[1] = this.greenMultiplier;
		colorMultipliers[2] = this.blueMultiplier;
		colorMultipliers[3] = this.alphaMultiplier;
		colorOffsets[0] = this.redOffset;
		colorOffsets[1] = this.greenOffset;
		colorOffsets[2] = this.blueOffset;
		colorOffsets[3] = this.alphaOffset;
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		if(openfl_geom_ColorTransform.__limeColorMatrix == null) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			openfl_geom_ColorTransform.__limeColorMatrix = this1;
		}
		openfl_geom_ColorTransform.__limeColorMatrix[0] = this.redMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[4] = this.redOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[6] = this.greenMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[9] = this.greenOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[12] = this.blueMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[14] = this.blueOffset / 255;
		openfl_geom_ColorTransform.__limeColorMatrix[18] = this.alphaMultiplier;
		openfl_geom_ColorTransform.__limeColorMatrix[19] = this.alphaOffset / 255;
		return openfl_geom_ColorTransform.__limeColorMatrix;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_display__$internal_Context3DGraphics = function() { };
$hxClasses["openfl.display._internal.Context3DGraphics"] = openfl_display__$internal_Context3DGraphics;
openfl_display__$internal_Context3DGraphics.__name__ = "openfl.display._internal.Context3DGraphics";
openfl_display__$internal_Context3DGraphics.buildBuffer = function(graphics,renderer) {
	var quadBufferPosition = 0;
	var triangleIndexBufferPosition = 0;
	var vertexBufferPosition = 0;
	var vertexBufferPositionUVT = 0;
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var context = renderer.__context3D;
	var tileRect = openfl_geom_Rectangle.__pool.get();
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var bitmap = null;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
			var this1 = data;
			var c = this1;
			bitmap = c.buffer.o[c.oPos];
			break;
		case 1:
			bitmap = null;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
			var this2 = data;
			var c1 = this2;
			var shaderBuffer = c1.buffer.o[c1.oPos];
			bitmap = null;
			if(shaderBuffer != null) {
				var _g2 = 0;
				var _g3 = shaderBuffer.inputCount;
				while(_g2 < _g3) {
					var i = _g2++;
					if(shaderBuffer.inputRefs[i].name == "bitmap") {
						bitmap = shaderBuffer.inputs[i];
						break;
					}
				}
			}
			break;
		case 8:
			if(bitmap != null) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
				var this3 = data;
				var c2 = this3;
				var rects = c2.buffer.o[c2.oPos];
				var indices = c2.buffer.o[c2.oPos + 1];
				var transforms = c2.buffer.o[c2.oPos + 2];
				var hasIndices = indices != null;
				var transformABCD = false;
				var transformXY = false;
				var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
				if(length == 0) {
					return;
				}
				if(transforms != null) {
					if(transforms.get_length() >= length * 6) {
						transformABCD = true;
						transformXY = true;
					} else if(transforms.get_length() >= length * 4) {
						transformABCD = true;
					} else if(transforms.get_length() >= length * 2) {
						transformXY = true;
					}
				}
				var dataPerVertex = 4;
				var stride = dataPerVertex * 4;
				if(graphics.__quadBuffer == null) {
					graphics.__quadBuffer = new openfl_display__$internal_Context3DBuffer(context,openfl_display__$internal_Context3DElementType.QUADS,length,dataPerVertex);
				} else {
					graphics.__quadBuffer.resize(quadBufferPosition + length,dataPerVertex);
				}
				var vertexOffset;
				var alpha = 1.0;
				var tileData;
				var id;
				var tileWidth;
				var tileHeight;
				var uvX;
				var uvY;
				var uvWidth;
				var uvHeight;
				var x;
				var y;
				var x2;
				var y2;
				var x3;
				var y3;
				var x4;
				var y4;
				var ri;
				var ti;
				var vertexBufferData = graphics.__quadBuffer.vertexBufferData;
				var bitmapWidth = bitmap.width;
				var bitmapHeight = bitmap.height;
				var sourceRect = bitmap.rect;
				var _g4 = 0;
				var _g5 = length;
				while(_g4 < _g5) {
					var i1 = _g4++;
					vertexOffset = (quadBufferPosition + i1) * stride;
					ri = hasIndices ? indices.get(i1) * 4 : i1 * 4;
					if(ri < 0) {
						continue;
					}
					tileRect.setTo(rects.get(ri),rects.get(ri + 1),rects.get(ri + 2),rects.get(ri + 3));
					tileWidth = tileRect.width;
					tileHeight = tileRect.height;
					if(tileWidth <= 0 || tileHeight <= 0) {
						continue;
					}
					if(transformABCD && transformXY) {
						ti = i1 * 6;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),transforms.get(ti + 4),transforms.get(ti + 5));
					} else if(transformABCD) {
						ti = i1 * 4;
						tileTransform.setTo(transforms.get(ti),transforms.get(ti + 1),transforms.get(ti + 2),transforms.get(ti + 3),tileRect.x,tileRect.y);
					} else if(transformXY) {
						ti = i1 * 2;
						tileTransform.tx = transforms.get(ti);
						tileTransform.ty = transforms.get(ti + 1);
					} else {
						tileTransform.tx = tileRect.x;
						tileTransform.ty = tileRect.y;
					}
					uvX = tileRect.x / bitmapWidth;
					uvY = tileRect.y / bitmapHeight;
					uvWidth = tileRect.get_right() / bitmapWidth;
					uvHeight = tileRect.get_bottom() / bitmapHeight;
					x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
					y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
					x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
					y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
					vertexBufferData[vertexOffset] = x;
					vertexBufferData[vertexOffset + 1] = y;
					vertexBufferData[vertexOffset + 2] = uvX;
					vertexBufferData[vertexOffset + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex] = x2;
					vertexBufferData[vertexOffset + dataPerVertex + 1] = y2;
					vertexBufferData[vertexOffset + dataPerVertex + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex + 3] = uvY;
					vertexBufferData[vertexOffset + dataPerVertex * 2] = x3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 1] = y3;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 2] = uvX;
					vertexBufferData[vertexOffset + dataPerVertex * 2 + 3] = uvHeight;
					vertexBufferData[vertexOffset + dataPerVertex * 3] = x4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 1] = y4;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 2] = uvWidth;
					vertexBufferData[vertexOffset + dataPerVertex * 3 + 3] = uvHeight;
				}
				quadBufferPosition += length;
			}
			break;
		case 12:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
			var this4 = data;
			var c3 = this4;
			var vertices = c3.buffer.o[c3.oPos];
			var indices1 = c3.buffer.o[c3.oPos + 1];
			var uvtData = c3.buffer.o[c3.oPos + 2];
			var culling = c3.buffer.o[c3.oPos + 3];
			var hasIndices1 = indices1 != null;
			var numVertices = Math.floor(vertices.get_length() / 2);
			var length1 = hasIndices1 ? indices1.get_length() : numVertices;
			var hasUVData = uvtData != null;
			var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
			var vertLength = hasUVTData ? 4 : 2;
			var uvStride = hasUVTData ? 3 : 2;
			var dataPerVertex1 = vertLength + 2;
			var vertexOffset1 = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
			openfl_display__$internal_Context3DGraphics.resizeVertexBuffer(graphics,hasUVTData,vertexOffset1 + length1 * dataPerVertex1);
			var vertexBufferData1 = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
			var offset;
			var vertOffset;
			var uvOffset;
			var t;
			var _g6 = 0;
			var _g7 = length1;
			while(_g6 < _g7) {
				var i2 = _g6++;
				offset = vertexOffset1 + i2 * dataPerVertex1;
				vertOffset = hasIndices1 ? indices1.get(i2) * 2 : i2 * 2;
				uvOffset = hasIndices1 ? indices1.get(i2) * uvStride : i2 * uvStride;
				if(hasUVTData) {
					t = uvtData.get(uvOffset + 2);
					vertexBufferData1[offset] = vertices.get(vertOffset) / t;
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1) / t;
					vertexBufferData1[offset + 2] = 0;
					vertexBufferData1[offset + 3] = 1 / t;
				} else {
					vertexBufferData1[offset] = vertices.get(vertOffset);
					vertexBufferData1[offset + 1] = vertices.get(vertOffset + 1);
				}
				vertexBufferData1[offset + vertLength] = hasUVData ? uvtData.get(uvOffset) : 0;
				vertexBufferData1[offset + vertLength + 1] = hasUVData ? uvtData.get(uvOffset + 1) : 0;
			}
			if(hasUVTData) {
				vertexBufferPositionUVT += length1 * dataPerVertex1;
			} else {
				vertexBufferPosition += length1 * dataPerVertex1;
			}
			break;
		case 13:
			bitmap = null;
			break;
		default:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
		}
	}
	if(quadBufferPosition > 0) {
		graphics.__quadBuffer.flushVertexBufferData();
	}
	if(triangleIndexBufferPosition > 0) {
		var buffer = graphics.__triangleIndexBuffer;
		if(buffer == null || triangleIndexBufferPosition > graphics.__triangleIndexBufferCount) {
			buffer = context.createIndexBuffer(triangleIndexBufferPosition,0);
			graphics.__triangleIndexBuffer = buffer;
			graphics.__triangleIndexBufferCount = triangleIndexBufferPosition;
		}
		buffer.uploadFromTypedArray(graphics.__triangleIndexBufferData);
	}
	if(vertexBufferPosition > 0) {
		var buffer = graphics.__vertexBuffer;
		if(buffer == null || vertexBufferPosition > graphics.__vertexBufferCount) {
			buffer = context.createVertexBuffer(vertexBufferPosition,4,0);
			graphics.__vertexBuffer = buffer;
			graphics.__vertexBufferCount = vertexBufferPosition;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferData));
	}
	if(vertexBufferPositionUVT > 0) {
		var buffer = graphics.__vertexBufferUVT;
		if(buffer == null || vertexBufferPositionUVT > graphics.__vertexBufferCountUVT) {
			buffer = context.createVertexBuffer(vertexBufferPositionUVT,6,0);
			graphics.__vertexBufferUVT = buffer;
			graphics.__vertexBufferCountUVT = vertexBufferPositionUVT;
		}
		buffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(graphics.__vertexBufferDataUVT));
	}
	openfl_geom_Rectangle.__pool.release(tileRect);
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DGraphics.isCompatible = function(graphics) {
	if(graphics.__owner.__worldScale9Grid != null) {
		return false;
	}
	var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
	var hasColorFill = false;
	var hasBitmapFill = false;
	var hasShaderFill = false;
	var _g = 0;
	var _g1 = graphics.__commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type._hx_index) {
		case 0:
			hasBitmapFill = true;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 1:
			hasBitmapFill = false;
			hasColorFill = true;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 3:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = true;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 8:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 9:
			if(hasColorFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 12:
			if(hasBitmapFill || hasShaderFill) {
				switch(data.prev._hx_index) {
				case 0:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 1:
					data.iPos += 1;
					data.fPos += 1;
					break;
				case 2:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 3:
					data.oPos += 1;
					break;
				case 4:
					data.fPos += 6;
					break;
				case 5:
					data.fPos += 4;
					break;
				case 6:
					data.fPos += 3;
					break;
				case 7:
					data.fPos += 4;
					break;
				case 8:
					data.oPos += 3;
					break;
				case 9:
					data.fPos += 4;
					break;
				case 10:
					data.fPos += 5;
					data.oPos += 1;
					break;
				case 12:
					data.oPos += 4;
					break;
				case 13:
					break;
				case 14:
					data.oPos += 2;
					data.bPos += 2;
					break;
				case 15:
					data.oPos += 4;
					data.iiPos += 2;
					data.ffPos += 1;
					data.fPos += 1;
					break;
				case 16:
					data.oPos += 4;
					data.iPos += 1;
					data.fPos += 2;
					data.bPos += 1;
					break;
				case 17:
					data.fPos += 2;
					break;
				case 18:
					data.fPos += 2;
					break;
				case 19:
					data.oPos += 1;
					break;
				case 20:
					data.oPos += 1;
					break;
				case 21:case 22:
					break;
				default:
				}
				data.prev = type;
			} else {
				data.destroy();
				return false;
			}
			break;
		case 13:
			hasBitmapFill = false;
			hasColorFill = false;
			hasShaderFill = false;
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 18:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		case 19:
			switch(data.prev._hx_index) {
			case 0:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 1:
				data.iPos += 1;
				data.fPos += 1;
				break;
			case 2:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 3:
				data.oPos += 1;
				break;
			case 4:
				data.fPos += 6;
				break;
			case 5:
				data.fPos += 4;
				break;
			case 6:
				data.fPos += 3;
				break;
			case 7:
				data.fPos += 4;
				break;
			case 8:
				data.oPos += 3;
				break;
			case 9:
				data.fPos += 4;
				break;
			case 10:
				data.fPos += 5;
				data.oPos += 1;
				break;
			case 12:
				data.oPos += 4;
				break;
			case 13:
				break;
			case 14:
				data.oPos += 2;
				data.bPos += 2;
				break;
			case 15:
				data.oPos += 4;
				data.iiPos += 2;
				data.ffPos += 1;
				data.fPos += 1;
				break;
			case 16:
				data.oPos += 4;
				data.iPos += 1;
				data.fPos += 2;
				data.bPos += 1;
				break;
			case 17:
				data.fPos += 2;
				break;
			case 18:
				data.fPos += 2;
				break;
			case 19:
				data.oPos += 1;
				break;
			case 20:
				data.oPos += 1;
				break;
			case 21:case 22:
				break;
			default:
			}
			data.prev = type;
			break;
		default:
			data.destroy();
			return false;
		}
	}
	data.destroy();
	return true;
};
openfl_display__$internal_Context3DGraphics.render = function(graphics,renderer) {
	if(!graphics.__visible || graphics.__commands.get_length() == 0) {
		return;
	}
	if(graphics.__bitmap != null && !graphics.__dirty || !openfl_display__$internal_Context3DGraphics.isCompatible(graphics)) {
		var cacheTransform = renderer.__softwareRenderer.__worldTransform;
		renderer.__softwareRenderer.__worldTransform = renderer.__worldTransform;
		openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__softwareRenderer);
		renderer.__softwareRenderer.__worldTransform = cacheTransform;
	} else {
		graphics.__bitmap = null;
		graphics.__update(renderer.__worldTransform);
		var bounds = graphics.__bounds;
		var width = graphics.__width;
		var height = graphics.__height;
		if(bounds != null && width >= 1 && height >= 1) {
			if(graphics.__hardwareDirty || graphics.__quadBuffer == null && graphics.__vertexBuffer == null && graphics.__vertexBufferUVT == null) {
				openfl_display__$internal_Context3DGraphics.buildBuffer(graphics,renderer);
			}
			var data = new openfl_display__$internal_DrawCommandReader(graphics.__commands);
			var context = renderer.__context3D;
			var gl = context.gl;
			var matrix = openfl_geom_Matrix.__pool.get();
			var shaderBuffer = null;
			var bitmap = null;
			var repeat = false;
			var smooth = false;
			var fill = null;
			var positionX = 0.0;
			var positionY = 0.0;
			var quadBufferPosition = 0;
			var shaderBufferOffset = 0;
			var triangleIndexBufferPosition = 0;
			var vertexBufferPosition = 0;
			var vertexBufferPositionUVT = 0;
			var _g = 0;
			var _g1 = graphics.__commands.types;
			while(_g < _g1.length) {
				var type = _g1[_g];
				++_g;
				switch(type._hx_index) {
				case 0:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL;
					var this1 = data;
					var c = this1;
					bitmap = c.buffer.o[c.oPos];
					repeat = c.buffer.b[c.bPos];
					smooth = c.buffer.b[c.bPos + 1];
					shaderBuffer = null;
					fill = null;
					break;
				case 1:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_FILL;
					var this2 = data;
					var c1 = this2;
					var color = c1.buffer.i[c1.iPos] | 0;
					var alpha = c1.buffer.f[c1.fPos] * 255 | 0;
					fill = color & 16777215 | alpha << 24;
					shaderBuffer = null;
					bitmap = null;
					break;
				case 3:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL;
					var this3 = data;
					var c2 = this3;
					shaderBuffer = c2.buffer.o[c2.oPos];
					shaderBufferOffset = 0;
					if(shaderBuffer == null || shaderBuffer.shader == null || shaderBuffer.shader.__bitmap == null) {
						bitmap = null;
					} else {
						bitmap = shaderBuffer.shader.__bitmap.input;
					}
					fill = null;
					break;
				case 8:
					if(bitmap != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_QUADS;
						var this4 = data;
						var c3 = this4;
						var rects = c3.buffer.o[c3.oPos];
						var indices = c3.buffer.o[c3.oPos + 1];
						var transforms = c3.buffer.o[c3.oPos + 2];
						var hasIndices = indices != null;
						var length = hasIndices ? indices.get_length() : Math.floor(rects.get_length() / 4);
						var uMatrix = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
						var shader;
						if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
							shader = renderer.__initShaderBuffer(shaderBuffer);
							renderer.__setShaderBuffer(shaderBuffer);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,false,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						} else {
							shader = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
							renderer.setShader(shader);
							renderer.applyMatrix(uMatrix);
							renderer.applyBitmapData(bitmap,smooth,repeat);
							renderer.applyAlpha(graphics.__owner.__worldAlpha);
							renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
							renderer.updateShader();
						}
						var end = quadBufferPosition + length;
						while(quadBufferPosition < end) {
							length = Math.min(end - quadBufferPosition,context.__quadIndexBufferElements) | 0;
							if(length <= 0) {
								break;
							}
							if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
								renderer.__updateShaderBuffer(shaderBufferOffset);
							}
							if(shader.__position != null) {
								context.setVertexBufferAt(shader.__position.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16,2);
							}
							if(shader.__textureCoord != null) {
								context.setVertexBufferAt(shader.__textureCoord.index,graphics.__quadBuffer.vertexBuffer,quadBufferPosition * 16 + 2,2);
							}
							context.drawTriangles(context.__quadIndexBuffer,0,length * 2);
							shaderBufferOffset += length * 4;
							quadBufferPosition += length;
						}
						openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
						renderer.__clearShader();
					}
					break;
				case 9:
					if(fill != null) {
						switch(data.prev._hx_index) {
						case 0:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 1:
							data.iPos += 1;
							data.fPos += 1;
							break;
						case 2:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 3:
							data.oPos += 1;
							break;
						case 4:
							data.fPos += 6;
							break;
						case 5:
							data.fPos += 4;
							break;
						case 6:
							data.fPos += 3;
							break;
						case 7:
							data.fPos += 4;
							break;
						case 8:
							data.oPos += 3;
							break;
						case 9:
							data.fPos += 4;
							break;
						case 10:
							data.fPos += 5;
							data.oPos += 1;
							break;
						case 12:
							data.oPos += 4;
							break;
						case 13:
							break;
						case 14:
							data.oPos += 2;
							data.bPos += 2;
							break;
						case 15:
							data.oPos += 4;
							data.iiPos += 2;
							data.ffPos += 1;
							data.fPos += 1;
							break;
						case 16:
							data.oPos += 4;
							data.iPos += 1;
							data.fPos += 2;
							data.bPos += 1;
							break;
						case 17:
							data.fPos += 2;
							break;
						case 18:
							data.fPos += 2;
							break;
						case 19:
							data.oPos += 1;
							break;
						case 20:
							data.oPos += 1;
							break;
						case 21:case 22:
							break;
						default:
						}
						data.prev = openfl_display__$internal_DrawCommandType.DRAW_RECT;
						var this5 = data;
						var c4 = this5;
						var x = c4.buffer.f[c4.fPos];
						var y = c4.buffer.f[c4.fPos + 1];
						var width = c4.buffer.f[c4.fPos + 2];
						var height = c4.buffer.f[c4.fPos + 3];
						var color1 = fill;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.redOffset = color1 >>> 16 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.greenOffset = color1 >>> 8 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.blueOffset = color1 & 255;
						openfl_display__$internal_Context3DGraphics.tempColorTransform.__combine(graphics.__owner.__worldColorTransform);
						matrix.identity();
						matrix.scale(width,height);
						matrix.tx = x;
						matrix.ty = y;
						matrix.concat(graphics.__owner.__renderTransform);
						var shader1 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader1);
						renderer.applyMatrix(renderer.__getMatrix(matrix,1));
						renderer.applyBitmapData(openfl_display__$internal_Context3DGraphics.blankBitmapData,true,repeat);
						renderer.applyAlpha((color1 >>> 24 & 255) / 255 * graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(openfl_display__$internal_Context3DGraphics.tempColorTransform);
						renderer.updateShader();
						var vertexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getVertexBuffer(context);
						if(shader1.__position != null) {
							context.setVertexBufferAt(shader1.__position.index,vertexBuffer,0,3);
						}
						if(shader1.__textureCoord != null) {
							context.setVertexBufferAt(shader1.__textureCoord.index,vertexBuffer,3,2);
						}
						var indexBuffer = openfl_display__$internal_Context3DGraphics.blankBitmapData.getIndexBuffer(context);
						context.drawTriangles(indexBuffer);
						shaderBufferOffset += 4;
						openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
						renderer.__clearShader();
					}
					break;
				case 12:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES;
					var this6 = data;
					var c5 = this6;
					var vertices = c5.buffer.o[c5.oPos];
					var indices1 = c5.buffer.o[c5.oPos + 1];
					var uvtData = c5.buffer.o[c5.oPos + 2];
					var culling = c5.buffer.o[c5.oPos + 3];
					var hasIndices1 = indices1 != null;
					var numVertices = Math.floor(vertices.get_length() / 2);
					var length1 = hasIndices1 ? indices1.get_length() : numVertices;
					var hasUVData = uvtData != null;
					var hasUVTData = hasUVData && uvtData.get_length() >= numVertices * 3;
					var vertLength = hasUVTData ? 4 : 2;
					var uvStride = hasUVTData ? 3 : 2;
					var dataPerVertex = vertLength + 2;
					var vertexBuffer1 = hasUVTData ? graphics.__vertexBufferUVT : graphics.__vertexBuffer;
					var bufferPosition = hasUVTData ? vertexBufferPositionUVT : vertexBufferPosition;
					var uMatrix1 = renderer.__getMatrix(graphics.__owner.__renderTransform,1);
					var shader2;
					if(shaderBuffer != null && !openfl_display__$internal_Context3DGraphics.maskRender) {
						shader2 = renderer.__initShaderBuffer(shaderBuffer);
						renderer.__setShaderBuffer(shaderBuffer);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,false,repeat);
						renderer.applyAlpha(1);
						renderer.applyColorTransform(null);
						renderer.__updateShaderBuffer(shaderBufferOffset);
					} else {
						shader2 = openfl_display__$internal_Context3DGraphics.maskRender ? renderer.__maskShader : renderer.__initGraphicsShader(null);
						renderer.setShader(shader2);
						renderer.applyMatrix(uMatrix1);
						renderer.applyBitmapData(bitmap,smooth,repeat);
						renderer.applyAlpha(graphics.__owner.__worldAlpha);
						renderer.applyColorTransform(graphics.__owner.__worldColorTransform);
						renderer.updateShader();
					}
					if(shader2.__position != null) {
						context.setVertexBufferAt(shader2.__position.index,vertexBuffer1,bufferPosition,hasUVTData ? 4 : 2);
					}
					if(shader2.__textureCoord != null) {
						context.setVertexBufferAt(shader2.__textureCoord.index,vertexBuffer1,bufferPosition + vertLength,2);
					}
					switch(culling) {
					case 0:
						context.setCulling(0);
						break;
					case 1:
						context.setCulling(3);
						break;
					case 2:
						context.setCulling(1);
						break;
					default:
					}
					context.__drawTriangles(0,length1);
					shaderBufferOffset += length1;
					if(hasUVTData) {
						vertexBufferPositionUVT += dataPerVertex * length1;
					} else {
						vertexBufferPosition += dataPerVertex * length1;
					}
					switch(culling) {
					case 1:case 2:
						context.setCulling(0);
						break;
					default:
					}
					openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
					renderer.__clearShader();
					break;
				case 13:
					bitmap = null;
					fill = null;
					shaderBuffer = null;
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
					context.setCulling(3);
					break;
				case 18:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.MOVE_TO;
					var this7 = data;
					var c6 = this7;
					positionX = c6.buffer.f[c6.fPos];
					positionY = c6.buffer.f[c6.fPos + 1];
					break;
				case 19:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE;
					var this8 = data;
					var c7 = this8;
					renderer.__setBlendMode(c7.buffer.o[c7.oPos]);
					break;
				default:
					switch(data.prev._hx_index) {
					case 0:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 1:
						data.iPos += 1;
						data.fPos += 1;
						break;
					case 2:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 3:
						data.oPos += 1;
						break;
					case 4:
						data.fPos += 6;
						break;
					case 5:
						data.fPos += 4;
						break;
					case 6:
						data.fPos += 3;
						break;
					case 7:
						data.fPos += 4;
						break;
					case 8:
						data.oPos += 3;
						break;
					case 9:
						data.fPos += 4;
						break;
					case 10:
						data.fPos += 5;
						data.oPos += 1;
						break;
					case 12:
						data.oPos += 4;
						break;
					case 13:
						break;
					case 14:
						data.oPos += 2;
						data.bPos += 2;
						break;
					case 15:
						data.oPos += 4;
						data.iiPos += 2;
						data.ffPos += 1;
						data.fPos += 1;
						break;
					case 16:
						data.oPos += 4;
						data.iPos += 1;
						data.fPos += 2;
						data.bPos += 1;
						break;
					case 17:
						data.fPos += 2;
						break;
					case 18:
						data.fPos += 2;
						break;
					case 19:
						data.oPos += 1;
						break;
					case 20:
						data.oPos += 1;
						break;
					case 21:case 22:
						break;
					default:
					}
					data.prev = type;
				}
			}
			openfl_geom_Matrix.__pool.release(matrix);
		}
		graphics.__hardwareDirty = false;
		graphics.set___dirty(false);
	}
};
openfl_display__$internal_Context3DGraphics.renderMask = function(graphics,renderer) {
	openfl_display__$internal_Context3DGraphics.maskRender = true;
	openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
	openfl_display__$internal_Context3DGraphics.maskRender = false;
};
openfl_display__$internal_Context3DGraphics.resizeVertexBuffer = function(graphics,hasUVTData,length) {
	var buffer = hasUVTData ? graphics.__vertexBufferDataUVT : graphics.__vertexBufferData;
	var newBuffer = null;
	if(buffer == null) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
	} else if(length > buffer.length) {
		var array = null;
		var vector = null;
		var view = null;
		var buffer1 = null;
		var len = null;
		var this1;
		if(length != null) {
			this1 = new Float32Array(length);
		} else if(array != null) {
			this1 = new Float32Array(array);
		} else if(vector != null) {
			this1 = new Float32Array(vector.__array);
		} else if(view != null) {
			this1 = new Float32Array(view);
		} else if(buffer1 != null) {
			if(len == null) {
				this1 = new Float32Array(buffer1,0);
			} else {
				this1 = new Float32Array(buffer1,0,len);
			}
		} else {
			this1 = null;
		}
		newBuffer = this1;
		newBuffer.set(buffer);
	}
	if(newBuffer != null) {
		if(hasUVTData) {
			graphics.__vertexBufferDataUVT = newBuffer;
		} else {
			graphics.__vertexBufferData = newBuffer;
		}
	}
};
var openfl_display__$internal_Context3DMaskShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\n\t\tvoid main(void) {\n\n\t\t\tvec4 color = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t\tif (color.a == 0.0) {\n\n\t\t\t\tdiscard;\n\n\t\t\t} else {\n\n\t\t\t\tgl_FragColor = color;\n\n\t\t\t}\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.display._internal.Context3DMaskShader"] = openfl_display__$internal_Context3DMaskShader;
openfl_display__$internal_Context3DMaskShader.__name__ = "openfl.display._internal.Context3DMaskShader";
openfl_display__$internal_Context3DMaskShader.__super__ = openfl_display_Shader;
openfl_display__$internal_Context3DMaskShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_display__$internal_Context3DMaskShader
});
var openfl_display__$internal_Context3DShape = function() { };
$hxClasses["openfl.display._internal.Context3DShape"] = openfl_display__$internal_Context3DShape;
openfl_display__$internal_Context3DShape.__name__ = "openfl.display._internal.Context3DShape";
openfl_display__$internal_Context3DShape.render = function(shape,renderer) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		renderer.__setBlendMode(shape.__worldBlendMode);
		renderer.__pushMaskObject(shape);
		openfl_display__$internal_Context3DGraphics.render(graphics,renderer);
		if(graphics.__bitmap != null && graphics.__visible) {
			var context = renderer.__context3D;
			var scale9Grid = shape.__worldScale9Grid;
			var shader = renderer.__initDisplayShader(shape.__worldShader);
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.applyAlpha(shape.__worldAlpha);
			renderer.applyColorTransform(shape.__worldColorTransform);
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
			renderer.__clearShader();
		}
		renderer.__popMaskObject(shape);
	}
};
openfl_display__$internal_Context3DShape.renderMask = function(shape,renderer) {
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl_display__$internal_Context3DGraphics.renderMask(graphics,renderer);
		if(graphics.__bitmap != null) {
			var context = renderer.__context3D;
			var shader = renderer.__maskShader;
			renderer.setShader(shader);
			renderer.applyBitmapData(graphics.__bitmap,true);
			renderer.applyMatrix(renderer.__getMatrix(graphics.__worldTransform,1));
			renderer.updateShader();
			var vertexBuffer = graphics.__bitmap.getVertexBuffer(context);
			if(shader.__position != null) {
				context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
			}
			if(shader.__textureCoord != null) {
				context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
			}
			var indexBuffer = graphics.__bitmap.getIndexBuffer(context);
			context.drawTriangles(indexBuffer);
			openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
			renderer.__clearShader();
		}
	}
};
var openfl_display__$internal_Context3DSimpleButton = function() { };
$hxClasses["openfl.display._internal.Context3DSimpleButton"] = openfl_display__$internal_Context3DSimpleButton;
openfl_display__$internal_Context3DSimpleButton.__name__ = "openfl.display._internal.Context3DSimpleButton";
openfl_display__$internal_Context3DSimpleButton.renderDrawable = function(simpleButton,renderer) {
	if(!simpleButton.__renderable || simpleButton.__worldAlpha <= 0 || simpleButton.__currentState == null) {
		return;
	}
	renderer.__pushMaskObject(simpleButton);
	renderer.__renderDrawable(simpleButton.__currentState);
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_Context3DSimpleButton.renderDrawableMask = function(simpleButton,renderer) {
	if(simpleButton.__currentState == null) {
		return;
	}
	renderer.__renderDrawableMask(simpleButton.__currentState);
};
var openfl_display__$internal_Context3DTextField = function() { };
$hxClasses["openfl.display._internal.Context3DTextField"] = openfl_display__$internal_Context3DTextField;
openfl_display__$internal_Context3DTextField.__name__ = "openfl.display._internal.Context3DTextField";
openfl_display__$internal_Context3DTextField.render = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
openfl_display__$internal_Context3DTextField.renderDrawable = function(textField,renderer) {
	renderer.__updateCacheBitmap(textField,false);
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(textField.__cacheBitmap,renderer);
	} else {
		openfl_display__$internal_Context3DTextField.render(textField,renderer);
		if(!(textField.opaqueBackground == null && textField.__graphics == null)) {
			if(!(!textField.__renderable || textField.__worldAlpha <= 0)) {
				if(textField.opaqueBackground != null && !textField.__isCacheBitmapRender && textField.get_width() > 0 && textField.get_height() > 0) {
					renderer.__setBlendMode(textField.__worldBlendMode);
					renderer.__pushMaskObject(textField);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,textField.get_width(),textField.get_height());
					renderer.__pushMaskRect(rect,textField.__renderTransform);
					var color = textField.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(textField);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(textField.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(textField,renderer);
				}
			}
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_Context3DTextField.renderDrawableMask = function(textField,renderer) {
	openfl_display__$internal_Context3DTextField.renderMask(textField,renderer);
	openfl_display__$internal_Context3DDisplayObject.renderDrawableMask(textField,renderer);
};
openfl_display__$internal_Context3DTextField.renderMask = function(textField,renderer) {
	var renderer1 = renderer.__softwareRenderer;
	var transform = textField.__worldTransform;
	var textEngine = textField.__textEngine;
	var useTextBounds = !(textEngine.background || textEngine.border);
	var bounds = useTextBounds ? textEngine.textBounds : textEngine.bounds;
	var graphics = textField.__graphics;
	var cursorOffsetX = 0.0;
	if(textField.__dirty) {
		textField.__updateLayout();
		if(graphics.__bounds == null) {
			graphics.__bounds = new openfl_geom_Rectangle();
		}
		if(textField.get_text().length == 0) {
			var boundsWidth = textEngine.bounds.width - 4;
			var align = textField.get_defaultTextFormat().align;
			cursorOffsetX = align == 3 ? 0 : align == 4 ? boundsWidth : boundsWidth / 2;
			switch(align) {
			case 0:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin / 2;
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin / 2;
				cursorOffsetX += textField.get_defaultTextFormat().indent / 2;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent / 2;
				break;
			case 1:
				break;
			case 2:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 3:
				cursorOffsetX += textField.get_defaultTextFormat().leftMargin;
				cursorOffsetX += textField.get_defaultTextFormat().indent;
				cursorOffsetX += textField.get_defaultTextFormat().blockIndent;
				break;
			case 4:
				cursorOffsetX -= textField.get_defaultTextFormat().rightMargin;
				break;
			case 5:
				break;
			}
			if(useTextBounds) {
				bounds.y = textEngine.bounds.y;
				bounds.x = cursorOffsetX;
			}
		}
		graphics.__bounds.copyFrom(bounds);
	}
	graphics.__update(renderer1.__worldTransform);
	if(textField.__dirty || graphics.__softwareDirty) {
		var width = graphics.__width;
		var height = graphics.__height;
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus && (textEngine.type != 1 || !textEngine.selectable) || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.__bitmap = null;
			textField.__graphics.__softwareDirty = false;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			if(textField.__graphics.__canvas == null) {
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
			}
			openfl_display__$internal_CanvasTextField.context = graphics.__context;
			var transform = graphics.__renderTransform;
			if(renderer1.__isDOM) {
				var scale = renderer1.pixelRatio;
				graphics.__canvas.width = width * scale | 0;
				graphics.__canvas.height = height * scale | 0;
				graphics.__canvas.style.width = width + "px";
				graphics.__canvas.style.height = height + "px";
				var matrix = openfl_geom_Matrix.__pool.get();
				matrix.copyFrom(transform);
				matrix.scale(scale,scale);
				renderer1.setTransform(matrix,openfl_display__$internal_CanvasTextField.context);
				openfl_geom_Matrix.__pool.release(matrix);
			} else {
				graphics.__canvas.width = width;
				graphics.__canvas.height = height;
				openfl_display__$internal_CanvasTextField.context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
			}
			if(openfl_display__$internal_CanvasTextField.clearRect == null) {
				openfl_display__$internal_CanvasTextField.clearRect = (typeof navigator !== 'undefined' && typeof navigator['isCocoonJS'] !== 'undefined');
			}
			if(openfl_display__$internal_CanvasTextField.clearRect) {
				openfl_display__$internal_CanvasTextField.context.clearRect(0,0,graphics.__canvas.width,graphics.__canvas.height);
			}
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(!renderer1.__allowSmoothing || textEngine.antiAliasType == 0 && textEngine.sharpness == 400) {
					graphics.__context.imageSmoothingEnabled = false;
				} else {
					graphics.__context.imageSmoothingEnabled = true;
				}
				if(textEngine.border || textEngine.background) {
					openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				openfl_display__$internal_CanvasTextField.context.textBaseline = "alphabetic";
				openfl_display__$internal_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g = 0;
				var _g1 = textField.get_scrollV() - 1;
				while(_g < _g1) {
					var i = _g++;
					scrollY -= textEngine.lineHeights.get(i);
				}
				var advance;
				var group = textEngine.layoutGroups.iterator();
				while(group.hasNext()) {
					var group1 = group.next();
					if(group1.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group1.lineIndex > textEngine.get_bottomScrollV() - 1) {
						break;
					}
					var color = "#" + StringTools.hex(group1.format.color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.font = openfl_text__$internal_TextEngine.getFont(group1.format);
					openfl_display__$internal_CanvasTextField.context.fillStyle = color;
					openfl_display__$internal_CanvasTextField.context.fillText(text.substring(group1.startIndex,group1.endIndex),group1.offsetX + scrollX - bounds.x,group1.offsetY + group1.ascent + scrollY - bounds.y);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g = 0;
								var _g1 = textField.__caretIndex - group1.startIndex;
								while(_g < _g1) {
									var i = _g++;
									if(group1.positions.length <= i) {
										break;
									}
									advance += group1.positions[i];
								}
								var scrollY1 = 0.0;
								var _g2 = textField.get_scrollV();
								var _g3 = group1.lineIndex + 1;
								while(_g2 < _g3) {
									var i1 = _g2++;
									scrollY1 += textEngine.lineHeights.get(i1 - 1);
								}
								openfl_display__$internal_CanvasTextField.context.beginPath();
								var tmp = StringTools.hex(group1.format.color & 16777215,6);
								openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
								openfl_display__$internal_CanvasTextField.context.moveTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + 2 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
								openfl_display__$internal_CanvasTextField.context.lineTo(group1.offsetX + advance - textField.get_scrollH() - bounds.x,scrollY1 + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1 - bounds.y);
								openfl_display__$internal_CanvasTextField.context.stroke();
								openfl_display__$internal_CanvasTextField.context.closePath();
							}
						} else if(group1.startIndex <= textField.__caretIndex && group1.endIndex >= textField.__caretIndex || group1.startIndex <= textField.__selectionIndex && group1.endIndex >= textField.__selectionIndex || group1.startIndex > textField.__caretIndex && group1.endIndex < textField.__selectionIndex || group1.startIndex > textField.__selectionIndex && group1.endIndex < textField.__caretIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group1.startIndex > selectionStart) {
								selectionStart = group1.startIndex;
							}
							if(group1.endIndex < selectionEnd) {
								selectionEnd = group1.endIndex;
							}
							var end;
							var start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= group1.endIndex) {
								end = textField.getCharBoundaries(group1.endIndex - 1);
								if(end != null) {
									end.x += end.width + 2;
								}
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#000000";
								openfl_display__$internal_CanvasTextField.context.fillRect(start.x + scrollX - bounds.x,start.y + scrollY,end.x - start.x,group1.height);
								openfl_display__$internal_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl_display__$internal_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x - bounds.x,group1.offsetY + group1.ascent + scrollY);
							}
						}
					}
					if(group1.format.underline) {
						openfl_display__$internal_CanvasTextField.context.beginPath();
						openfl_display__$internal_CanvasTextField.context.strokeStyle = color;
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						var x = group1.offsetX + scrollX - bounds.x;
						var y = Math.floor(group1.offsetY + scrollY + group1.ascent - bounds.y) + 0.5;
						openfl_display__$internal_CanvasTextField.context.moveTo(x,y);
						openfl_display__$internal_CanvasTextField.context.lineTo(x + group1.width,y);
						openfl_display__$internal_CanvasTextField.context.stroke();
						openfl_display__$internal_CanvasTextField.context.closePath();
					}
				}
			} else {
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl_display__$internal_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						var tmp = StringTools.hex(textEngine.backgroundColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.fillStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
						openfl_display__$internal_CanvasTextField.context.lineCap = "square";
						var tmp = StringTools.hex(textEngine.borderColor & 16777215,6);
						openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
						openfl_display__$internal_CanvasTextField.context.stroke();
					}
				}
				if(textField.__caretIndex > -1 && textEngine.selectable && textField.__showCursor) {
					var scrollX = -textField.get_scrollH() + (useTextBounds ? 0 : cursorOffsetX);
					var scrollY = 0.0;
					var _g = 0;
					var _g1 = textField.get_scrollV() - 1;
					while(_g < _g1) {
						var i = _g++;
						scrollY += textEngine.lineHeights.get(i);
					}
					openfl_display__$internal_CanvasTextField.context.beginPath();
					var tmp = StringTools.hex(textField.get_defaultTextFormat().color & 16777215,6);
					openfl_display__$internal_CanvasTextField.context.strokeStyle = "#" + tmp;
					openfl_display__$internal_CanvasTextField.context.moveTo(scrollX + 2.5,scrollY + 2.5);
					openfl_display__$internal_CanvasTextField.context.lineWidth = 1;
					openfl_display__$internal_CanvasTextField.context.lineTo(scrollX + 2.5,scrollY + openfl_text__$internal_TextEngine.getFormatHeight(textField.get_defaultTextFormat()) - 1);
					openfl_display__$internal_CanvasTextField.context.stroke();
					openfl_display__$internal_CanvasTextField.context.closePath();
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			graphics.__visible = true;
			textField.__dirty = false;
			graphics.__softwareDirty = false;
			graphics.set___dirty(false);
		}
	}
	textField.__graphics.__hardwareDirty = false;
};
var openfl_display__$internal_Context3DTilemap = function() { };
$hxClasses["openfl.display._internal.Context3DTilemap"] = openfl_display__$internal_Context3DTilemap;
openfl_display__$internal_Context3DTilemap.__name__ = "openfl.display._internal.Context3DTilemap";
openfl_display__$internal_Context3DTilemap.buildBuffer = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__group.__tiles.length == 0 || tilemap.__worldAlpha <= 0) {
		tilemap.__group.__dirty = false;
		return;
	}
	openfl_display__$internal_Context3DTilemap.numTiles = 0;
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer != null ? tilemap.__buffer.vertexBufferData : null;
	openfl_display__$internal_Context3DTilemap.vertexDataPosition = 0;
	var rect = openfl_geom_Rectangle.__pool.get();
	var matrix = openfl_geom_Matrix.__pool.get();
	var parentTransform = openfl_geom_Matrix.__pool.get();
	openfl_display__$internal_Context3DTilemap.dataPerVertex = 4;
	if(tilemap.tileAlphaEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex++;
	}
	if(tilemap.tileColorTransformEnabled) {
		openfl_display__$internal_Context3DTilemap.dataPerVertex += 8;
	}
	openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tilemap.__group,renderer,parentTransform,tilemap.__tileset,tilemap.tileAlphaEnabled,tilemap.__worldAlpha,tilemap.tileColorTransformEnabled,tilemap.__worldColorTransform,null,rect,matrix);
	tilemap.__buffer.flushVertexBufferData();
	openfl_geom_Rectangle.__pool.release(rect);
	openfl_geom_Matrix.__pool.release(matrix);
	openfl_geom_Matrix.__pool.release(parentTransform);
};
openfl_display__$internal_Context3DTilemap.buildBufferTileContainer = function(tilemap,group,renderer,parentTransform,defaultTileset,alphaEnabled,worldAlpha,colorTransformEnabled,defaultColorTransform,cacheBitmapData,rect,matrix,isTopLevel) {
	if(isTopLevel == null) {
		isTopLevel = true;
	}
	var tileTransform = openfl_geom_Matrix.__pool.get();
	var roundPixels = renderer.__roundPixels;
	var tiles = group.__tiles;
	var length = group.__length;
	var getLength = null;
	getLength = function(_group) {
		var _tiles = _group.__tiles;
		var totalLength = 0;
		var _g = 0;
		while(_g < _tiles.length) {
			var tile = _tiles[_g];
			++_g;
			if(tile.__length > 0) {
				totalLength += getLength(tile);
			} else {
				++totalLength;
			}
		}
		return totalLength;
	};
	if(isTopLevel) {
		openfl_display__$internal_Context3DTilemap.resizeBuffer(tilemap,openfl_display__$internal_Context3DTilemap.numTiles + getLength(group));
	}
	var tile;
	var tileset;
	var alpha;
	var visible;
	var colorTransform = null;
	var id;
	var tileData;
	var tileRect;
	var bitmapData;
	var tileWidth;
	var tileHeight;
	var uvX;
	var uvY;
	var uvHeight;
	var uvWidth;
	var vertexOffset;
	var x;
	var y;
	var x2;
	var y2;
	var x3;
	var y3;
	var x4;
	var y4;
	var alphaPosition = 4;
	var ctPosition = alphaEnabled ? 5 : 4;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileTransform.setTo(1,0,0,1,-tile.get_originX(),-tile.get_originY());
		tileTransform.concat(tile.get_matrix());
		tileTransform.concat(parentTransform);
		if(roundPixels) {
			tileTransform.tx = Math.round(tileTransform.tx);
			tileTransform.ty = Math.round(tileTransform.ty);
		}
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		tile.__dirty = false;
		if(!visible || alpha <= 0) {
			continue;
		}
		if(colorTransformEnabled) {
			if(tile.get_colorTransform() != null) {
				if(defaultColorTransform == null) {
					colorTransform = tile.get_colorTransform();
				} else {
					if(openfl_display__$internal_Context3DTilemap.cacheColorTransform == null) {
						openfl_display__$internal_Context3DTilemap.cacheColorTransform = new openfl_geom_ColorTransform();
					}
					colorTransform = openfl_display__$internal_Context3DTilemap.cacheColorTransform;
					colorTransform.redMultiplier = defaultColorTransform.redMultiplier * tile.get_colorTransform().redMultiplier;
					colorTransform.greenMultiplier = defaultColorTransform.greenMultiplier * tile.get_colorTransform().greenMultiplier;
					colorTransform.blueMultiplier = defaultColorTransform.blueMultiplier * tile.get_colorTransform().blueMultiplier;
					colorTransform.alphaMultiplier = defaultColorTransform.alphaMultiplier * tile.get_colorTransform().alphaMultiplier;
					colorTransform.redOffset = defaultColorTransform.redOffset + tile.get_colorTransform().redOffset;
					colorTransform.greenOffset = defaultColorTransform.greenOffset + tile.get_colorTransform().greenOffset;
					colorTransform.blueOffset = defaultColorTransform.blueOffset + tile.get_colorTransform().blueOffset;
					colorTransform.alphaOffset = defaultColorTransform.alphaOffset + tile.get_colorTransform().alphaOffset;
				}
			} else {
				colorTransform = defaultColorTransform;
			}
		}
		if(!alphaEnabled) {
			alpha = 1;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.buildBufferTileContainer(tilemap,tile,renderer,tileTransform,tileset,alphaEnabled,alpha,colorTransformEnabled,colorTransform,cacheBitmapData,rect,matrix,false);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
				uvX = tileRect.x / bitmapData.width;
				uvY = tileRect.y / bitmapData.height;
				uvWidth = tileRect.get_right() / bitmapData.width;
				uvHeight = tileRect.get_bottom() / bitmapData.height;
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
				rect.setTo(tileData.x,tileData.y,tileData.width,tileData.height);
				tileRect = rect;
				uvX = tileData.__uvX;
				uvY = tileData.__uvY;
				uvWidth = tileData.__uvWidth;
				uvHeight = tileData.__uvHeight;
			}
			tileWidth = tileRect.width;
			tileHeight = tileRect.height;
			x = 0 * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y = 0 * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x2 = tileWidth * tileTransform.a + 0 * tileTransform.c + tileTransform.tx;
			y2 = tileWidth * tileTransform.b + 0 * tileTransform.d + tileTransform.ty;
			x3 = 0 * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y3 = 0 * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			x4 = tileWidth * tileTransform.a + tileHeight * tileTransform.c + tileTransform.tx;
			y4 = tileWidth * tileTransform.b + tileHeight * tileTransform.d + tileTransform.ty;
			vertexOffset = openfl_display__$internal_Context3DTilemap.vertexDataPosition;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset] = x;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 1] = y;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex] = x2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 1] = y2;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + 3] = uvY;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2] = x3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 1] = y3;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 2] = uvX;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + 3] = uvHeight;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3] = x4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 1] = y4;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 2] = uvWidth;
			openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + 3] = uvHeight;
			if(alphaEnabled) {
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 0 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 2 + alphaPosition] = alpha;
				openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * 3 + alphaPosition] = alpha;
			}
			if(colorTransformEnabled) {
				if(colorTransform != null) {
					var _g1 = 0;
					while(_g1 < 4) {
						var i = _g1++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition] = colorTransform.redMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 1] = colorTransform.greenMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 2] = colorTransform.blueMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 3] = colorTransform.alphaMultiplier;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 4] = colorTransform.redOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 5] = colorTransform.greenOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 6] = colorTransform.blueOffset;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i + ctPosition + 7] = colorTransform.alphaOffset;
					}
				} else {
					var _g2 = 0;
					while(_g2 < 4) {
						var i1 = _g2++;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 1] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 2] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 3] = 1;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 4] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 5] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 6] = 0;
						openfl_display__$internal_Context3DTilemap.vertexBufferData[vertexOffset + openfl_display__$internal_Context3DTilemap.dataPerVertex * i1 + ctPosition + 7] = 0;
					}
				}
			}
			openfl_display__$internal_Context3DTilemap.vertexDataPosition += openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		}
	}
	group.__dirty = false;
	openfl_geom_Matrix.__pool.release(tileTransform);
};
openfl_display__$internal_Context3DTilemap.flush = function(tilemap,renderer,blendMode) {
	if(openfl_display__$internal_Context3DTilemap.currentShader == null) {
		openfl_display__$internal_Context3DTilemap.currentShader = renderer.__defaultDisplayShader;
	}
	if(openfl_display__$internal_Context3DTilemap.bufferPosition > openfl_display__$internal_Context3DTilemap.lastFlushedPosition && openfl_display__$internal_Context3DTilemap.currentBitmapData != null && openfl_display__$internal_Context3DTilemap.currentShader != null) {
		var shader = renderer.__initDisplayShader(openfl_display__$internal_Context3DTilemap.currentShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DTilemap.currentBitmapData,tilemap.smoothing);
		renderer.applyMatrix(renderer.__getMatrix(tilemap.__renderTransform,1));
		if(tilemap.tileAlphaEnabled) {
			renderer.useAlphaArray();
		} else {
			renderer.applyAlpha(tilemap.__worldAlpha);
		}
		if(tilemap.tileBlendModeEnabled) {
			renderer.__setBlendMode(blendMode);
		}
		if(tilemap.tileColorTransformEnabled) {
			renderer.applyHasColorTransform(true);
			renderer.useColorTransformArray();
		} else {
			renderer.applyColorTransform(tilemap.__worldColorTransform);
		}
		renderer.updateShader();
		var vertexBuffer = tilemap.__buffer.vertexBuffer;
		var vertexBufferPosition = openfl_display__$internal_Context3DTilemap.lastFlushedPosition * openfl_display__$internal_Context3DTilemap.dataPerVertex * 4;
		var length = openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition;
		while(openfl_display__$internal_Context3DTilemap.lastFlushedPosition < openfl_display__$internal_Context3DTilemap.bufferPosition) {
			length = Math.min(openfl_display__$internal_Context3DTilemap.bufferPosition - openfl_display__$internal_Context3DTilemap.lastFlushedPosition,openfl_display__$internal_Context3DTilemap.context.__quadIndexBufferElements) | 0;
			if(length <= 0) {
				break;
			}
			if(shader.__position != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__position.index,vertexBuffer,vertexBufferPosition,2);
			}
			if(shader.__textureCoord != null) {
				openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,vertexBufferPosition + 2,2);
			}
			if(tilemap.tileAlphaEnabled) {
				if(shader.__alpha != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__alpha.index,vertexBuffer,vertexBufferPosition + 4,1);
				}
			}
			if(tilemap.tileColorTransformEnabled) {
				var position = tilemap.tileAlphaEnabled ? 5 : 4;
				if(shader.__colorMultiplier != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorMultiplier.index,vertexBuffer,vertexBufferPosition + position,4);
				}
				if(shader.__colorOffset != null) {
					openfl_display__$internal_Context3DTilemap.context.setVertexBufferAt(shader.__colorOffset.index,vertexBuffer,vertexBufferPosition + position + 4,4);
				}
			}
			openfl_display__$internal_Context3DTilemap.context.drawTriangles(openfl_display__$internal_Context3DTilemap.context.__quadIndexBuffer,0,length * 2);
			openfl_display__$internal_Context3DTilemap.lastFlushedPosition += length;
		}
		openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = openfl_display__$internal_Context3DTilemap.currentBitmapData;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = openfl_display__$internal_Context3DTilemap.currentShader;
};
openfl_display__$internal_Context3DTilemap.render = function(tilemap,renderer) {
	if(!tilemap.__renderable || tilemap.__worldAlpha <= 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.context = renderer.__context3D;
	openfl_display__$internal_Context3DTilemap.buildBuffer(tilemap,renderer);
	if(openfl_display__$internal_Context3DTilemap.numTiles == 0) {
		return;
	}
	openfl_display__$internal_Context3DTilemap.bufferPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastFlushedPosition = 0;
	openfl_display__$internal_Context3DTilemap.lastUsedBitmapData = null;
	openfl_display__$internal_Context3DTilemap.lastUsedShader = null;
	openfl_display__$internal_Context3DTilemap.currentBitmapData = null;
	openfl_display__$internal_Context3DTilemap.currentShader = null;
	openfl_display__$internal_Context3DTilemap.currentBlendMode = tilemap.__worldBlendMode;
	if(!tilemap.tileBlendModeEnabled) {
		renderer.__setBlendMode(openfl_display__$internal_Context3DTilemap.currentBlendMode);
	}
	renderer.__pushMaskObject(tilemap);
	var rect = openfl_geom_Rectangle.__pool.get();
	rect.setTo(0,0,tilemap.__width,tilemap.__height);
	renderer.__pushMaskRect(rect,tilemap.__renderTransform);
	openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tilemap.__group,tilemap.__worldShader,tilemap.__tileset,tilemap.__worldAlpha,tilemap.tileBlendModeEnabled,openfl_display__$internal_Context3DTilemap.currentBlendMode,null);
	openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
	renderer.__popMaskRect();
	renderer.__popMaskObject(tilemap);
	openfl_geom_Rectangle.__pool.release(rect);
};
openfl_display__$internal_Context3DTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		openfl_display__$internal_Context3DBitmap.render(tilemap.__cacheBitmap,renderer);
	} else {
		if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
			if(!(!tilemap.__renderable || tilemap.__worldAlpha <= 0)) {
				if(tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0) {
					renderer.__setBlendMode(tilemap.__worldBlendMode);
					renderer.__pushMaskObject(tilemap);
					var context = renderer.__context3D;
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,tilemap.get_width(),tilemap.get_height());
					renderer.__pushMaskRect(rect,tilemap.__renderTransform);
					var color = tilemap.opaqueBackground;
					context.clear((color >>> 16 & 255) / 255,(color >>> 8 & 255) / 255,(color & 255) / 255,1,0,0,1);
					renderer.__popMaskRect();
					renderer.__popMaskObject(tilemap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
				if(tilemap.__graphics != null) {
					openfl_display__$internal_Context3DShape.render(tilemap,renderer);
				}
			}
		}
		openfl_display__$internal_Context3DTilemap.render(tilemap,renderer);
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_Context3DTilemap.renderDrawableMask = function(tilemap,renderer) {
	if(!(tilemap.opaqueBackground == null && tilemap.__graphics == null)) {
		var tmp = tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0;
		if(tilemap.__graphics != null) {
			openfl_display__$internal_Context3DShape.renderMask(tilemap,renderer);
		}
	}
	openfl_display__$internal_Context3DTilemap.renderMask(tilemap,renderer);
};
openfl_display__$internal_Context3DTilemap.renderTileContainer = function(tilemap,renderer,group,defaultShader,defaultTileset,worldAlpha,blendModeEnabled,defaultBlendMode,cacheBitmapData) {
	var tiles = group.__tiles;
	var tile;
	var tileset;
	var alpha;
	var visible;
	var blendMode = null;
	var id;
	var tileData;
	var tileRect;
	var shader;
	var bitmapData;
	var _g = 0;
	while(_g < tiles.length) {
		var tile = tiles[_g];
		++_g;
		tileset = tile.get_tileset() != null ? tile.get_tileset() : defaultTileset;
		alpha = tile.get_alpha() * worldAlpha;
		visible = tile.get_visible();
		if(!visible || alpha <= 0) {
			continue;
		}
		shader = tile.get_shader() != null ? tile.get_shader() : defaultShader;
		if(blendModeEnabled) {
			blendMode = tile.__blendMode != null ? tile.__blendMode : defaultBlendMode;
		}
		if(tile.__length > 0) {
			openfl_display__$internal_Context3DTilemap.renderTileContainer(tilemap,renderer,tile,shader,tileset,alpha,blendModeEnabled,blendMode,cacheBitmapData);
		} else {
			if(tileset == null) {
				continue;
			}
			id = tile.get_id();
			bitmapData = tileset.__bitmapData;
			if(bitmapData == null) {
				continue;
			}
			if(id == -1) {
				tileRect = tile.__rect;
				if(tileRect == null || tileRect.width <= 0 || tileRect.height <= 0) {
					continue;
				}
			} else {
				tileData = tileset.__data[id];
				if(tileData == null) {
					continue;
				}
			}
			if(shader != openfl_display__$internal_Context3DTilemap.currentShader || bitmapData != openfl_display__$internal_Context3DTilemap.currentBitmapData && openfl_display__$internal_Context3DTilemap.currentBitmapData != null || openfl_display__$internal_Context3DTilemap.currentBlendMode != blendMode) {
				openfl_display__$internal_Context3DTilemap.flush(tilemap,renderer,openfl_display__$internal_Context3DTilemap.currentBlendMode);
			}
			openfl_display__$internal_Context3DTilemap.currentBitmapData = bitmapData;
			openfl_display__$internal_Context3DTilemap.currentShader = shader;
			openfl_display__$internal_Context3DTilemap.currentBlendMode = blendMode;
			openfl_display__$internal_Context3DTilemap.bufferPosition++;
		}
	}
};
openfl_display__$internal_Context3DTilemap.renderMask = function(tilemap,renderer) {
};
openfl_display__$internal_Context3DTilemap.resizeBuffer = function(tilemap,count) {
	openfl_display__$internal_Context3DTilemap.numTiles = count;
	if(tilemap.__buffer == null) {
		tilemap.__buffer = new openfl_display__$internal_Context3DBuffer(openfl_display__$internal_Context3DTilemap.context,openfl_display__$internal_Context3DElementType.QUADS,openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	} else {
		tilemap.__buffer.resize(openfl_display__$internal_Context3DTilemap.numTiles,openfl_display__$internal_Context3DTilemap.dataPerVertex);
	}
	openfl_display__$internal_Context3DTilemap.vertexBufferData = tilemap.__buffer.vertexBufferData;
};
var openfl_display__$internal_Context3DVideo = function() { };
$hxClasses["openfl.display._internal.Context3DVideo"] = openfl_display__$internal_Context3DVideo;
openfl_display__$internal_Context3DVideo.__name__ = "openfl.display._internal.Context3DVideo";
openfl_display__$internal_Context3DVideo.render = function(video,renderer) {
	if(!video.__renderable || video.__worldAlpha <= 0 || video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var texture = video.__getTexture(context);
		if(texture == null) {
			return;
		}
		renderer.__setBlendMode(video.__worldBlendMode);
		renderer.__pushMaskObject(video);
		var shader = renderer.__initDisplayShader(video.__worldShader);
		renderer.setShader(shader);
		renderer.applyBitmapData(null,true,false);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.applyAlpha(video.__worldAlpha);
		renderer.applyColorTransform(video.__worldColorTransform);
		if(shader.__textureSize != null) {
			openfl_display__$internal_Context3DVideo.__textureSizeValue[0] = video.__stream != null ? video.__stream.__video.videoWidth : 0;
			openfl_display__$internal_Context3DVideo.__textureSizeValue[1] = video.__stream != null ? video.__stream.__video.videoHeight : 0;
			shader.__textureSize.value = openfl_display__$internal_Context3DVideo.__textureSizeValue;
		}
		renderer.updateShader();
		context.setTextureAt(0,video.__getTexture(context));
		context.__flushGLTextures();
		gl.uniform1i(shader.__texture.index,0);
		if(video.smoothing) {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
		} else {
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
		}
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
		renderer.__popMaskObject(video);
	}
};
openfl_display__$internal_Context3DVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_Context3DVideo.renderDrawableMask = function(video,renderer) {
	openfl_display__$internal_Context3DVideo.renderMask(video,renderer);
};
openfl_display__$internal_Context3DVideo.renderMask = function(video,renderer) {
	if(video.__stream == null) {
		return;
	}
	if(video.__stream.__video != null) {
		var context = renderer.__context3D;
		var gl = context.gl;
		var shader = renderer.__maskShader;
		renderer.setShader(shader);
		renderer.applyBitmapData(openfl_display__$internal_Context3DMaskShader.opaqueBitmapData,true);
		renderer.applyMatrix(renderer.__getMatrix(video.__renderTransform,1));
		renderer.updateShader();
		var vertexBuffer = video.__getVertexBuffer(context);
		if(shader.__position != null) {
			context.setVertexBufferAt(shader.__position.index,vertexBuffer,0,3);
		}
		if(shader.__textureCoord != null) {
			context.setVertexBufferAt(shader.__textureCoord.index,vertexBuffer,3,2);
		}
		var indexBuffer = video.__getIndexBuffer(context);
		context.drawTriangles(indexBuffer);
		openfl_display__$internal_stats_Context3DStats.incrementDrawCall(0);
		renderer.__clearShader();
	}
};
var openfl_display__$internal_DOMBitmap = function() { };
$hxClasses["openfl.display._internal.DOMBitmap"] = openfl_display__$internal_DOMBitmap;
openfl_display__$internal_DOMBitmap.__name__ = "openfl.display._internal.DOMBitmap";
openfl_display__$internal_DOMBitmap.clear = function(bitmap,renderer) {
	if(bitmap.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(bitmap.__cacheBitmap,renderer);
	}
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
		bitmap.__style = null;
	}
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
		bitmap.__style = null;
	}
};
openfl_display__$internal_DOMBitmap.renderCanvas = function(bitmap,renderer) {
	if(bitmap.__image != null) {
		renderer.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		bitmap.__imageVersion = -1;
		if(!renderer.__allowSmoothing || !bitmap.smoothing) {
			bitmap.__context.imageSmoothingEnabled = false;
		}
		renderer.__initializeElement(bitmap,bitmap.__canvas);
	}
	if(bitmap.__imageVersion != bitmap.__bitmapData.image.version) {
		lime__$internal_graphics_ImageCanvasUtil.convertToCanvas(bitmap.__bitmapData.image);
		bitmap.__canvas.width = bitmap.__bitmapData.width + 1;
		bitmap.__canvas.width = bitmap.__bitmapData.width;
		bitmap.__canvas.height = bitmap.__bitmapData.height;
		bitmap.__context.drawImage(bitmap.__bitmapData.image.buffer.__srcCanvas,0,0);
		bitmap.__imageVersion = bitmap.__bitmapData.image.version;
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
openfl_display__$internal_DOMBitmap.renderDrawable = function(bitmap,renderer) {
	renderer.__updateCacheBitmap(bitmap,false);
	if(bitmap.__cacheBitmap != null && !bitmap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(bitmap);
		bitmap.__cacheBitmap.stage = bitmap.stage;
		var bitmap1 = bitmap.__cacheBitmap;
		if(bitmap1.stage != null && bitmap1.__worldVisible && bitmap1.__renderable && bitmap1.__bitmapData != null && bitmap1.__bitmapData.__isValid && bitmap1.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap1);
			if(bitmap1.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap1,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap1,renderer);
			}
			renderer.__popMaskObject(bitmap1);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap1,renderer);
		}
	} else {
		var tmp = bitmap.opaqueBackground != null && !bitmap.__isCacheBitmapRender && bitmap.get_width() > 0 && bitmap.get_height() > 0;
		var graphics = bitmap.__graphics;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || bitmap.__worldAlphaChanged || bitmap.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(bitmap.__canvas != graphics.__canvas) {
						if(bitmap.__canvas != null) {
							renderer.element.removeChild(bitmap.__canvas);
						}
						bitmap.__canvas = graphics.__canvas;
						bitmap.__context = graphics.__context;
						renderer.__initializeElement(bitmap,bitmap.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(bitmap,renderer);
				}
			}
			if(bitmap.__canvas != null) {
				renderer.__pushMaskObject(bitmap);
				var cacheTransform = bitmap.__renderTransform;
				bitmap.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					bitmap.__renderTransformChanged = true;
				}
				renderer.__updateClip(bitmap);
				renderer.__applyStyle(bitmap,true,true,true);
				bitmap.__renderTransform = cacheTransform;
				renderer.__popMaskObject(bitmap);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(bitmap,renderer);
		}
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	}
	renderer.__renderEvent(bitmap);
};
openfl_display__$internal_DOMBitmap.renderDrawableClear = function(bitmap,renderer) {
	openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
};
openfl_display__$internal_DOMBitmap.renderImage = function(bitmap,renderer) {
	if(bitmap.__canvas != null) {
		renderer.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.crossOrigin = "Anonymous";
		bitmap.__image.src = bitmap.__bitmapData.image.buffer.__srcImage.src;
		renderer.__initializeElement(bitmap,bitmap.__image);
	}
	renderer.__updateClip(bitmap);
	renderer.__applyStyle(bitmap,true,true,true);
};
var openfl_display__$internal_DOMDisplayObject = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObject"] = openfl_display__$internal_DOMDisplayObject;
openfl_display__$internal_DOMDisplayObject.__name__ = "openfl.display._internal.DOMDisplayObject";
openfl_display__$internal_DOMDisplayObject.clear = function(displayObject,renderer) {
	if(displayObject.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(displayObject.__cacheBitmap,renderer);
	}
	openfl_display__$internal_DOMShape.clear(displayObject,renderer);
};
openfl_display__$internal_DOMDisplayObject.renderDrawable = function(displayObject,renderer) {
	renderer.__updateCacheBitmap(displayObject,false);
	if(displayObject.__cacheBitmap != null && !displayObject.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(displayObject);
		displayObject.__cacheBitmap.stage = displayObject.stage;
		var bitmap = displayObject.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		var tmp = displayObject.opaqueBackground != null && !displayObject.__isCacheBitmapRender && displayObject.get_width() > 0 && displayObject.get_height() > 0;
		var graphics = displayObject.__graphics;
		if(displayObject.stage != null && displayObject.__worldVisible && displayObject.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || displayObject.__worldAlphaChanged || displayObject.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(displayObject.__canvas != graphics.__canvas) {
						if(displayObject.__canvas != null) {
							renderer.element.removeChild(displayObject.__canvas);
						}
						displayObject.__canvas = graphics.__canvas;
						displayObject.__context = graphics.__context;
						renderer.__initializeElement(displayObject,displayObject.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(displayObject,renderer);
				}
			}
			if(displayObject.__canvas != null) {
				renderer.__pushMaskObject(displayObject);
				var cacheTransform = displayObject.__renderTransform;
				displayObject.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					displayObject.__renderTransformChanged = true;
				}
				renderer.__updateClip(displayObject);
				renderer.__applyStyle(displayObject,true,true,true);
				displayObject.__renderTransform = cacheTransform;
				renderer.__popMaskObject(displayObject);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(displayObject,renderer);
		}
	}
	renderer.__renderEvent(displayObject);
};
openfl_display__$internal_DOMDisplayObject.renderDrawableClear = function(displayObject,renderer) {
	openfl_display__$internal_DOMDisplayObject.clear(displayObject,renderer);
};
var openfl_display__$internal_DOMDisplayObjectContainer = function() { };
$hxClasses["openfl.display._internal.DOMDisplayObjectContainer"] = openfl_display__$internal_DOMDisplayObjectContainer;
openfl_display__$internal_DOMDisplayObjectContainer.__name__ = "openfl.display._internal.DOMDisplayObjectContainer";
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawable = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawable(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	openfl_display__$internal_DOMDisplayObject.renderDrawable(displayObjectContainer,renderer);
	if(displayObjectContainer.__cacheBitmap != null && !displayObjectContainer.__isCacheBitmapRender) {
		return;
	}
	renderer.__pushMaskObject(displayObjectContainer);
	if(renderer.__stage != null) {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
			child.__renderDirty = false;
		}
		displayObjectContainer.__renderDirty = false;
	} else {
		var _g = 0;
		var _g1 = displayObjectContainer.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			renderer.__renderDrawable(child);
		}
	}
	renderer.__popMaskObject(displayObjectContainer);
};
openfl_display__$internal_DOMDisplayObjectContainer.renderDrawableClear = function(displayObjectContainer,renderer) {
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			renderer.__renderDrawableClear(orphan1);
		}
	}
	var orphan = displayObjectContainer.__removedChildren.iterator();
	while(orphan.hasNext()) {
		var orphan1 = orphan.next();
		if(orphan1.stage == null) {
			orphan1.__cleanup();
		}
	}
	displayObjectContainer.__removedChildren.set_length(0);
	var _g = 0;
	var _g1 = displayObjectContainer.__children;
	while(_g < _g1.length) {
		var child = _g1[_g];
		++_g;
		renderer.__renderDrawableClear(child);
	}
};
var openfl_display__$internal_DOMShape = function() { };
$hxClasses["openfl.display._internal.DOMShape"] = openfl_display__$internal_DOMShape;
openfl_display__$internal_DOMShape.__name__ = "openfl.display._internal.DOMShape";
openfl_display__$internal_DOMShape.clear = function(shape,renderer) {
	if(shape.__canvas != null) {
		renderer.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl_display__$internal_DOMSimpleButton = function() { };
$hxClasses["openfl.display._internal.DOMSimpleButton"] = openfl_display__$internal_DOMSimpleButton;
openfl_display__$internal_DOMSimpleButton.__name__ = "openfl.display._internal.DOMSimpleButton";
openfl_display__$internal_DOMSimpleButton.renderDrawable = function(simpleButton,renderer) {
	renderer.__pushMaskObject(simpleButton);
	var previousState = simpleButton.__previousStates.iterator();
	while(previousState.hasNext()) {
		var previousState1 = previousState.next();
		renderer.__renderDrawable(previousState1);
	}
	simpleButton.__previousStates.set_length(0);
	if(simpleButton.__currentState != null) {
		if(simpleButton.__currentState.stage != simpleButton.stage) {
			simpleButton.__currentState.__setStageReference(simpleButton.stage);
		}
		renderer.__renderDrawable(simpleButton.__currentState);
	}
	renderer.__popMaskObject(simpleButton);
	renderer.__renderEvent(simpleButton);
};
openfl_display__$internal_DOMSimpleButton.renderDrawableClear = function(simpleButton,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(simpleButton,renderer);
};
var openfl_display__$internal_DOMTextField = function() { };
$hxClasses["openfl.display._internal.DOMTextField"] = openfl_display__$internal_DOMTextField;
openfl_display__$internal_DOMTextField.__name__ = "openfl.display._internal.DOMTextField";
openfl_display__$internal_DOMTextField.clear = function(textField,renderer) {
	if(textField.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(textField.__cacheBitmap,renderer);
	}
	if(textField.__div != null) {
		renderer.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
openfl_display__$internal_DOMTextField.renderDrawable = function(textField,renderer) {
	textField.__domRender = true;
	renderer.__updateCacheBitmap(textField,textField.__forceCachedBitmapUpdate);
	textField.__forceCachedBitmapUpdate = false;
	textField.__domRender = false;
	if(textField.__cacheBitmap != null && !textField.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(textField);
		textField.__cacheBitmap.stage = textField.stage;
		var bitmap = textField.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		if(textField.__renderedOnCanvasWhileOnDOM) {
			textField.__renderedOnCanvasWhileOnDOM = false;
			if(textField.__isHTML && textField.__rawHtmlText != null) {
				textField.__updateText(textField.__rawHtmlText);
				textField.__dirty = true;
				textField.__layoutDirty = true;
				if(!textField.__renderDirty) {
					textField.__renderDirty = true;
					textField.__setParentRenderDirty();
				}
			}
		}
		var textField1 = textField;
		var textEngine = textField1.__textEngine;
		if(textField1.stage != null && textField1.__worldVisible && textField1.__renderable) {
			if(textField1.__dirty || textField1.__renderTransformChanged || textField1.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField1.__div == null) {
						textField1.__div = window.document.createElement("div");
						renderer.__initializeElement(textField1,textField1.__div);
						textField1.__style.setProperty("outline","none",null);
						textField1.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField1.get_htmlText() != textField1.__div.innerHTML) {
								textField1.set_htmlText(textField1.__div.innerHTML);
								var textField = textField1.__displayAsPassword;
								textField1.__dirty = false;
								textField1.dispatchEvent(new openfl_events_TextEvent("textInput",false,false,textField1.get_htmlText()));
							}
						},true);
					}
					if(!textEngine.wordWrap) {
						textField1.__style.setProperty("white-space","nowrap",null);
					} else {
						textField1.__style.setProperty("word-wrap","break-word",null);
					}
					textField1.__style.setProperty("overflow","hidden",null);
					if(textEngine.selectable) {
						textField1.__style.setProperty("cursor","text",null);
						textField1.__style.setProperty("-webkit-user-select","text",null);
						textField1.__style.setProperty("-moz-user-select","text",null);
						textField1.__style.setProperty("-ms-user-select","text",null);
						textField1.__style.setProperty("-o-user-select","text",null);
					} else {
						textField1.__style.setProperty("cursor","inherit",null);
					}
					var div = textField1.__div;
					div.contentEditable = textEngine.type == 1;
					var style = textField1.__style;
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor & 16777215,6),null);
					} else {
						style.removeProperty("background-color");
					}
					var w = textEngine.width;
					var h = textEngine.height;
					var scale = 1;
					var unscaledSize = textField1.__textFormat.size;
					var scaledSize = unscaledSize;
					var t = textField1.__renderTransform;
					if(t.a != 1.0 || t.d != 1.0) {
						if(t.a == t.d) {
							scale = t.a;
							t.a = t.d = 1.0;
						} else if(t.a > t.d) {
							scale = t.a;
							t.d /= t.a;
							t.a = 1.0;
						} else {
							scale = t.d;
							t.a /= t.d;
							t.d = 1.0;
						}
						scaledSize *= scale;
						w = Math.ceil(w * scale);
						h = Math.ceil(h * scale);
					}
					textField1.__textFormat.size = scaledSize;
					var text = textEngine.text;
					var adjustment = 0;
					if(!textField1.__isHTML) {
						text = StringTools.htmlEscape(text);
					} else {
						var matchText = text;
						while(openfl_display__$internal_DOMTextField.__regexFont.match(matchText)) {
							var fontText = openfl_display__$internal_DOMTextField.__regexFont.matched(0);
							var style1 = "";
							if(openfl_display__$internal_DOMTextField.__regexFace.match(fontText)) {
								style1 += "font-family:'" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexFace) + "';";
							}
							if(openfl_display__$internal_DOMTextField.__regexColor.match(fontText)) {
								style1 += "color:#" + openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexColor) + ";";
							}
							if(openfl_display__$internal_DOMTextField.__regexSize.match(fontText)) {
								var sizeAttr = openfl_display__$internal_DOMTextField.__getAttributeMatch(openfl_display__$internal_DOMTextField.__regexSize);
								var firstChar = HxOverrides.cca(sizeAttr,0);
								var size;
								adjustment = parseFloat(sizeAttr) * scale;
								if(firstChar == 43 || firstChar == 45) {
									size = scaledSize + adjustment;
								} else {
									size = adjustment;
								}
								style1 += "font-size:" + size + "px;";
							}
							text = StringTools.replace(text,fontText,"<span style='" + style1 + "'>");
							matchText = openfl_display__$internal_DOMTextField.__regexFont.matchedRight();
						}
						text = text.replace(openfl_display__$internal_DOMTextField.__regexCloseFont.r,"</span>");
					}
					text = StringTools.replace(text,"<p ","<p style='margin-top:0; margin-bottom:0;' ");
					var unscaledLeading = textField1.__textFormat.leading;
					textField1.__textFormat.leading += adjustment | 0;
					var _this_r = new RegExp("\r\n","g".split("u").join(""));
					var tmp = text.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					var _this_r = new RegExp("\n","g".split("u").join(""));
					var tmp = textField1.__div.innerHTML.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					var _this_r = new RegExp("\r","g".split("u").join(""));
					var tmp = textField1.__div.innerHTML.replace(_this_r,"<br>");
					textField1.__div.innerHTML = tmp;
					style.setProperty("font",openfl_text__$internal_TextEngine.getFont(textField1.__textFormat),null);
					textField1.__textFormat.size = unscaledSize;
					textField1.__textFormat.leading = unscaledLeading;
					style.setProperty("top","3px",null);
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor & 16777215,6),null);
						textField1.__renderTransform.translate(-1,-1);
						textField1.__renderTransformChanged = true;
						textField1.__transformDirty = true;
					} else if(style.border != "") {
						style.removeProperty("border");
						textField1.__renderTransformChanged = true;
					}
					style.setProperty("color","#" + StringTools.hex(textField1.__textFormat.color & 16777215,6),null);
					style.setProperty("width",w + "px",null);
					style.setProperty("height",h + "px",null);
					switch(textField1.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField1.__dirty = false;
				} else if(textField1.__div != null) {
					renderer.element.removeChild(textField1.__div);
					textField1.__div = null;
				}
			}
			if(textField1.__div != null) {
				var old = renderer.__roundPixels;
				renderer.__roundPixels = true;
				renderer.__updateClip(textField1);
				renderer.__applyStyle(textField1,true,true,true);
				renderer.__roundPixels = old;
			}
		} else {
			openfl_display__$internal_DOMTextField.clear(textField1,renderer);
		}
	}
	renderer.__renderEvent(textField);
};
openfl_display__$internal_DOMTextField.renderDrawableClear = function(textField,renderer) {
	openfl_display__$internal_DOMTextField.clear(textField,renderer);
};
openfl_display__$internal_DOMTextField.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_display__$internal_DOMTilemap = function() { };
$hxClasses["openfl.display._internal.DOMTilemap"] = openfl_display__$internal_DOMTilemap;
openfl_display__$internal_DOMTilemap.__name__ = "openfl.display._internal.DOMTilemap";
openfl_display__$internal_DOMTilemap.clear = function(tilemap,renderer) {
	if(tilemap.__cacheBitmap != null) {
		openfl_display__$internal_DOMBitmap.clear(tilemap.__cacheBitmap,renderer);
	}
	if(tilemap.__canvas != null) {
		renderer.element.removeChild(tilemap.__canvas);
		tilemap.__canvas = null;
		tilemap.__style = null;
	}
};
openfl_display__$internal_DOMTilemap.renderDrawable = function(tilemap,renderer) {
	renderer.__updateCacheBitmap(tilemap,false);
	if(tilemap.__cacheBitmap != null && !tilemap.__isCacheBitmapRender) {
		renderer.__renderDrawableClear(tilemap);
		tilemap.__cacheBitmap.stage = tilemap.stage;
		var bitmap = tilemap.__cacheBitmap;
		if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.__bitmapData != null && bitmap.__bitmapData.__isValid && bitmap.__bitmapData.readable) {
			renderer.__pushMaskObject(bitmap);
			if(bitmap.__bitmapData.image.buffer.__srcImage != null) {
				openfl_display__$internal_DOMBitmap.renderImage(bitmap,renderer);
			} else {
				openfl_display__$internal_DOMBitmap.renderCanvas(bitmap,renderer);
			}
			renderer.__popMaskObject(bitmap);
		} else {
			openfl_display__$internal_DOMBitmap.clear(bitmap,renderer);
		}
	} else {
		var tmp = tilemap.opaqueBackground != null && !tilemap.__isCacheBitmapRender && tilemap.get_width() > 0 && tilemap.get_height() > 0;
		var graphics = tilemap.__graphics;
		if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && graphics != null) {
			openfl_display__$internal_CanvasGraphics.render(graphics,renderer.__canvasRenderer);
			if(graphics.__softwareDirty || tilemap.__worldAlphaChanged || tilemap.__canvas != graphics.__canvas) {
				if(graphics.__canvas != null) {
					if(tilemap.__canvas != graphics.__canvas) {
						if(tilemap.__canvas != null) {
							renderer.element.removeChild(tilemap.__canvas);
						}
						tilemap.__canvas = graphics.__canvas;
						tilemap.__context = graphics.__context;
						renderer.__initializeElement(tilemap,tilemap.__canvas);
					}
				} else {
					openfl_display__$internal_DOMShape.clear(tilemap,renderer);
				}
			}
			if(tilemap.__canvas != null) {
				renderer.__pushMaskObject(tilemap);
				var cacheTransform = tilemap.__renderTransform;
				tilemap.__renderTransform = graphics.__worldTransform;
				if(graphics.__transformDirty) {
					graphics.__transformDirty = false;
					tilemap.__renderTransformChanged = true;
				}
				renderer.__updateClip(tilemap);
				renderer.__applyStyle(tilemap,true,true,true);
				tilemap.__renderTransform = cacheTransform;
				renderer.__popMaskObject(tilemap);
			}
		} else {
			openfl_display__$internal_DOMShape.clear(tilemap,renderer);
		}
		if(tilemap.stage != null && tilemap.__worldVisible && tilemap.__renderable && tilemap.__group.__tiles.length > 0) {
			if(tilemap.__canvas == null) {
				tilemap.__canvas = window.document.createElement("canvas");
				tilemap.__context = tilemap.__canvas.getContext("2d");
				renderer.__initializeElement(tilemap,tilemap.__canvas);
			}
			tilemap.__canvas.width = tilemap.__width;
			tilemap.__canvas.height = tilemap.__height;
			renderer.__canvasRenderer.context = tilemap.__context;
			var renderer1 = renderer.__canvasRenderer;
			if(!(!tilemap.__renderable || tilemap.__group.__tiles.length == 0)) {
				var alpha = renderer1.__getAlpha(tilemap.__worldAlpha);
				if(!(alpha <= 0)) {
					var context = renderer1.context;
					renderer1.__setBlendMode(tilemap.__worldBlendMode);
					renderer1.__pushMaskObject(tilemap);
					var rect = openfl_geom_Rectangle.__pool.get();
					rect.setTo(0,0,tilemap.__width,tilemap.__height);
					renderer1.__pushMaskRect(rect,tilemap.__renderTransform);
					if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
						context.imageSmoothingEnabled = false;
					}
					openfl_display__$internal_CanvasTilemap.renderTileContainer(tilemap.__group,renderer1,tilemap.__renderTransform,tilemap.__tileset,renderer1.__allowSmoothing && tilemap.smoothing,tilemap.tileAlphaEnabled,alpha,tilemap.tileBlendModeEnabled,tilemap.__worldBlendMode,null,null,rect);
					if(!renderer1.__allowSmoothing || !tilemap.smoothing) {
						context.imageSmoothingEnabled = true;
					}
					renderer1.__popMaskRect();
					renderer1.__popMaskObject(tilemap);
					openfl_geom_Rectangle.__pool.release(rect);
				}
			}
			renderer.__canvasRenderer.context = null;
			renderer.__updateClip(tilemap);
			renderer.__applyStyle(tilemap,true,false,true);
		} else {
			openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
		}
	}
	renderer.__renderEvent(tilemap);
};
openfl_display__$internal_DOMTilemap.renderDrawableClear = function(tilemap,renderer) {
	openfl_display__$internal_DOMTilemap.clear(tilemap,renderer);
};
var openfl_display__$internal_DOMVideo = function() { };
$hxClasses["openfl.display._internal.DOMVideo"] = openfl_display__$internal_DOMVideo;
openfl_display__$internal_DOMVideo.__name__ = "openfl.display._internal.DOMVideo";
openfl_display__$internal_DOMVideo.clear = function(video,renderer) {
	if(video.__active) {
		renderer.element.removeChild(video.__stream.__video);
		video.__active = false;
	}
};
openfl_display__$internal_DOMVideo.render = function(video,renderer) {
	if(video.stage != null && video.__stream != null && video.__worldVisible && video.__renderable) {
		if(!video.__active) {
			renderer.__initializeElement(video,video.__stream.__video);
			video.__active = true;
			video.__dirty = true;
		}
		if(video.__dirty) {
			video.__stream.__video.width = video.__width | 0;
			video.__stream.__video.height = video.__height | 0;
			video.__dirty = false;
		}
		renderer.__updateClip(video);
		renderer.__applyStyle(video,true,true,true);
	} else {
		openfl_display__$internal_DOMVideo.clear(video,renderer);
	}
};
openfl_display__$internal_DOMVideo.renderDrawable = function(video,renderer) {
	openfl_display__$internal_DOMVideo.render(video,renderer);
	renderer.__renderEvent(video);
};
openfl_display__$internal_DOMVideo.renderDrawableClear = function(video,renderer) {
	openfl_display__$internal_DOMDisplayObject.renderDrawableClear(video,renderer);
};
var openfl_display__$internal_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl_display__$internal_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl.display._internal.DrawCommandReader"] = openfl_display__$internal_DrawCommandReader;
openfl_display__$internal_DrawCommandReader.__name__ = "openfl.display._internal.DrawCommandReader";
openfl_display__$internal_DrawCommandReader.prototype = {
	destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,__class__: openfl_display__$internal_DrawCommandReader
};
var openfl_display__$internal_DrawCommandType = $hxEnums["openfl.display._internal.DrawCommandType"] = { __ename__:"openfl.display._internal.DrawCommandType",__constructs__:null
	,BEGIN_BITMAP_FILL: {_hx_name:"BEGIN_BITMAP_FILL",_hx_index:0,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_FILL: {_hx_name:"BEGIN_FILL",_hx_index:1,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_GRADIENT_FILL: {_hx_name:"BEGIN_GRADIENT_FILL",_hx_index:2,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,BEGIN_SHADER_FILL: {_hx_name:"BEGIN_SHADER_FILL",_hx_index:3,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CUBIC_CURVE_TO: {_hx_name:"CUBIC_CURVE_TO",_hx_index:4,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,CURVE_TO: {_hx_name:"CURVE_TO",_hx_index:5,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_CIRCLE: {_hx_name:"DRAW_CIRCLE",_hx_index:6,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ELLIPSE: {_hx_name:"DRAW_ELLIPSE",_hx_index:7,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_QUADS: {_hx_name:"DRAW_QUADS",_hx_index:8,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_RECT: {_hx_name:"DRAW_RECT",_hx_index:9,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_ROUND_RECT: {_hx_name:"DRAW_ROUND_RECT",_hx_index:10,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TILES: {_hx_name:"DRAW_TILES",_hx_index:11,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,DRAW_TRIANGLES: {_hx_name:"DRAW_TRIANGLES",_hx_index:12,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,END_FILL: {_hx_name:"END_FILL",_hx_index:13,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_BITMAP_STYLE: {_hx_name:"LINE_BITMAP_STYLE",_hx_index:14,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_GRADIENT_STYLE: {_hx_name:"LINE_GRADIENT_STYLE",_hx_index:15,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_STYLE: {_hx_name:"LINE_STYLE",_hx_index:16,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,LINE_TO: {_hx_name:"LINE_TO",_hx_index:17,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,MOVE_TO: {_hx_name:"MOVE_TO",_hx_index:18,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_BLEND_MODE: {_hx_name:"OVERRIDE_BLEND_MODE",_hx_index:19,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,OVERRIDE_MATRIX: {_hx_name:"OVERRIDE_MATRIX",_hx_index:20,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_EVEN_ODD: {_hx_name:"WINDING_EVEN_ODD",_hx_index:21,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,WINDING_NON_ZERO: {_hx_name:"WINDING_NON_ZERO",_hx_index:22,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
	,UNKNOWN: {_hx_name:"UNKNOWN",_hx_index:23,__enum__:"openfl.display._internal.DrawCommandType",toString:$estr}
};
openfl_display__$internal_DrawCommandType.__constructs__ = [openfl_display__$internal_DrawCommandType.BEGIN_BITMAP_FILL,openfl_display__$internal_DrawCommandType.BEGIN_FILL,openfl_display__$internal_DrawCommandType.BEGIN_GRADIENT_FILL,openfl_display__$internal_DrawCommandType.BEGIN_SHADER_FILL,openfl_display__$internal_DrawCommandType.CUBIC_CURVE_TO,openfl_display__$internal_DrawCommandType.CURVE_TO,openfl_display__$internal_DrawCommandType.DRAW_CIRCLE,openfl_display__$internal_DrawCommandType.DRAW_ELLIPSE,openfl_display__$internal_DrawCommandType.DRAW_QUADS,openfl_display__$internal_DrawCommandType.DRAW_RECT,openfl_display__$internal_DrawCommandType.DRAW_ROUND_RECT,openfl_display__$internal_DrawCommandType.DRAW_TILES,openfl_display__$internal_DrawCommandType.DRAW_TRIANGLES,openfl_display__$internal_DrawCommandType.END_FILL,openfl_display__$internal_DrawCommandType.LINE_BITMAP_STYLE,openfl_display__$internal_DrawCommandType.LINE_GRADIENT_STYLE,openfl_display__$internal_DrawCommandType.LINE_STYLE,openfl_display__$internal_DrawCommandType.LINE_TO,openfl_display__$internal_DrawCommandType.MOVE_TO,openfl_display__$internal_DrawCommandType.OVERRIDE_BLEND_MODE,openfl_display__$internal_DrawCommandType.OVERRIDE_MATRIX,openfl_display__$internal_DrawCommandType.WINDING_EVEN_ODD,openfl_display__$internal_DrawCommandType.WINDING_NON_ZERO,openfl_display__$internal_DrawCommandType.UNKNOWN];
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = "openfl.geom.Point";
openfl_geom_Point.prototype = {
	clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,__toLimeVector2: function() {
		if(openfl_geom_Point.__limeVector2 == null) {
			openfl_geom_Point.__limeVector2 = new lime_math_Vector2();
		}
		var _this = openfl_geom_Point.__limeVector2;
		_this.x = this.x;
		_this.y = this.y;
		return openfl_geom_Point.__limeVector2;
	}
	,__class__: openfl_geom_Point
};
var openfl_display__$internal_SamplerState = function(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha) {
	if(textureAlpha == null) {
		textureAlpha = false;
	}
	if(centroid == null) {
		centroid = false;
	}
	if(ignoreSampler == null) {
		ignoreSampler = false;
	}
	if(lodBias == null) {
		lodBias = 0.0;
	}
	if(mipfilter == null) {
		mipfilter = 2;
	}
	if(filter == null) {
		filter = 5;
	}
	if(wrap == null) {
		wrap = 0;
	}
	this.wrap = wrap;
	this.filter = filter;
	this.mipfilter = mipfilter;
	this.lodBias = lodBias;
	this.ignoreSampler = ignoreSampler;
	this.centroid = centroid;
	this.textureAlpha = textureAlpha;
};
$hxClasses["openfl.display._internal.SamplerState"] = openfl_display__$internal_SamplerState;
openfl_display__$internal_SamplerState.__name__ = "openfl.display._internal.SamplerState";
openfl_display__$internal_SamplerState.prototype = {
	clone: function() {
		var copy = new openfl_display__$internal_SamplerState(this.wrap,this.filter,this.mipfilter,this.lodBias,this.ignoreSampler,this.centroid,this.textureAlpha);
		copy.mipmapGenerated = this.mipmapGenerated;
		return copy;
	}
	,copyFrom: function(other) {
		if(other == null || other.ignoreSampler) {
			return;
		}
		this.wrap = other.wrap;
		this.filter = other.filter;
		this.mipfilter = other.mipfilter;
		this.lodBias = other.lodBias;
		this.centroid = other.centroid;
		this.textureAlpha = other.textureAlpha;
	}
	,equals: function(other) {
		if(other == null) {
			return false;
		}
		if(this.wrap == other.wrap && this.filter == other.filter && this.mipfilter == other.mipfilter && this.lodBias == other.lodBias) {
			return this.textureAlpha == other.textureAlpha;
		} else {
			return false;
		}
	}
	,__class__: openfl_display__$internal_SamplerState
};
var openfl_display__$internal_ShaderBuffer = function() {
	this.inputRefs = [];
	this.inputFilter = [];
	this.inputMipFilter = [];
	this.inputs = [];
	this.inputWrap = [];
	this.overrideIntNames = [];
	this.overrideIntValues = [];
	this.overrideFloatNames = [];
	this.overrideFloatValues = [];
	this.overrideBoolNames = [];
	this.overrideBoolValues = [];
	this.paramLengths = [];
	this.paramPositions = [];
	this.paramRefs_Bool = [];
	this.paramRefs_Float = [];
	this.paramRefs_Int = [];
	this.paramTypes = [];
};
$hxClasses["openfl.display._internal.ShaderBuffer"] = openfl_display__$internal_ShaderBuffer;
openfl_display__$internal_ShaderBuffer.__name__ = "openfl.display._internal.ShaderBuffer";
openfl_display__$internal_ShaderBuffer.prototype = {
	addBoolOverride: function(name,values) {
		this.overrideBoolNames[this.overrideBoolCount] = name;
		this.overrideBoolValues[this.overrideBoolCount] = values;
		this.overrideBoolCount++;
	}
	,addFloatOverride: function(name,values) {
		this.overrideFloatNames[this.overrideFloatCount] = name;
		this.overrideFloatValues[this.overrideFloatCount] = values;
		this.overrideFloatCount++;
	}
	,clearOverride: function() {
		this.overrideIntCount = 0;
		this.overrideFloatCount = 0;
		this.overrideBoolCount = 0;
	}
	,__class__: openfl_display__$internal_ShaderBuffer
};
var openfl_display__$internal_stats_DrawCallCounter = function() {
	this.drawCallsCounter = 0;
	this.currentDrawCallsNum = 0;
	this.currentDrawCallsNum = 0;
	this.drawCallsCounter = 0;
};
$hxClasses["openfl.display._internal.stats.DrawCallCounter"] = openfl_display__$internal_stats_DrawCallCounter;
openfl_display__$internal_stats_DrawCallCounter.__name__ = "openfl.display._internal.stats.DrawCallCounter";
openfl_display__$internal_stats_DrawCallCounter.prototype = {
	increment: function() {
		this.drawCallsCounter++;
	}
	,reset: function() {
		this.currentDrawCallsNum = this.drawCallsCounter;
		this.drawCallsCounter = 0;
	}
	,__class__: openfl_display__$internal_stats_DrawCallCounter
};
var openfl_display__$internal_stats_Context3DStats = function() { };
$hxClasses["openfl.display._internal.stats.Context3DStats"] = openfl_display__$internal_stats_Context3DStats;
openfl_display__$internal_stats_Context3DStats.__name__ = "openfl.display._internal.stats.Context3DStats";
openfl_display__$internal_stats_Context3DStats.incrementDrawCall = function(context) {
	openfl_display__$internal_stats_Context3DStats.drawCallsCounters.h[context].increment();
};
openfl_display__$internal_stats_Context3DStats.resetDrawCalls = function() {
	var dcCounter = openfl_display__$internal_stats_Context3DStats.drawCallsCounters.iterator();
	while(dcCounter.hasNext()) {
		var dcCounter1 = dcCounter.next();
		dcCounter1.reset();
	}
};
var openfl_display3D_Context3D = function(stage,contextState,stage3D) {
	this.driverInfo = "OpenGL (Direct blitting)";
	this.backBufferWidth = 0;
	this.backBufferHeight = 0;
	openfl_events_EventDispatcher.call(this);
	this.__stage = stage;
	this.__contextState = contextState;
	this.__stage3D = stage3D;
	this.__context = stage.window.context;
	this.gl = this.__context.webgl;
	if(this.__contextState == null) {
		this.__contextState = new openfl_display3D__$internal_Context3DState();
	}
	this.__state = new openfl_display3D__$internal_Context3DState();
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__vertexConstants = this1;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1 = new Float32Array(512);
	this.__fragmentConstants = this1;
	var elements = null;
	var array = [1.0,1.0,1.0,1.0];
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Float32Array(elements);
	} else if(array != null) {
		this1 = new Float32Array(array);
	} else if(vector != null) {
		this1 = new Float32Array(vector.__array);
	} else if(view != null) {
		this1 = new Float32Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Float32Array(buffer,0);
		} else {
			this1 = new Float32Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	this.__positionScale = this1;
	this.__programs = new haxe_ds_StringMap();
	if(openfl_display3D_Context3D.__glMaxViewportDims == -1) {
		openfl_display3D_Context3D.__glMaxViewportDims = this.gl.getParameter(this.gl.MAX_VIEWPORT_DIMS);
	}
	this.maxBackBufferWidth = openfl_display3D_Context3D.__glMaxViewportDims;
	this.maxBackBufferHeight = openfl_display3D_Context3D.__glMaxViewportDims;
	if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy == -1) {
		var extension = this.gl.getExtension("EXT_texture_filter_anisotropic");
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("MOZ_EXT_texture_filter_anisotropic");
		}
		if(extension == null || !Object.prototype.hasOwnProperty.call(extension,"MAX_TEXTURE_MAX_ANISOTROPY_EXT")) {
			extension = this.gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
		}
		if(extension != null) {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = extension.TEXTURE_MAX_ANISOTROPY_EXT;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = this.gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
		} else {
			openfl_display3D_Context3D.__glTextureMaxAnisotropy = 0;
			openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = 0;
		}
	}
	if(openfl_display3D_Context3D.__glDepthStencil == -1) {
		openfl_display3D_Context3D.__glDepthStencil = this.gl.DEPTH_STENCIL;
	}
	if(openfl_display3D_Context3D.__glMemoryTotalAvailable == -1) {
		var extension = this.gl.getExtension("NVX_gpu_memory_info");
		if(extension != null) {
			openfl_display3D_Context3D.__glMemoryTotalAvailable = extension.GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX;
			openfl_display3D_Context3D.__glMemoryCurrentAvailable = extension.GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX;
		}
	}
	if(openfl_display3D_Context3D.__driverInfo == null) {
		var vendor = this.gl.getParameter(this.gl.VENDOR);
		var version = this.gl.getParameter(this.gl.VERSION);
		var renderer = this.gl.getParameter(this.gl.RENDERER);
		var glslVersion = this.gl.getParameter(this.gl.SHADING_LANGUAGE_VERSION);
		openfl_display3D_Context3D.__driverInfo = "OpenGL Vendor=" + vendor + " Version=" + version + " Renderer=" + renderer + " GLSL=" + glslVersion;
	}
	this.driverInfo = openfl_display3D_Context3D.__driverInfo;
	this.__quadIndexBufferElements = 16383;
	this.__quadIndexBufferCount = this.__quadIndexBufferElements * 6;
	var elements = this.__quadIndexBufferCount;
	var array = null;
	var vector = null;
	var view = null;
	var buffer = null;
	var len = null;
	var this1;
	if(elements != null) {
		this1 = new Uint16Array(elements);
	} else if(array != null) {
		this1 = new Uint16Array(array);
	} else if(vector != null) {
		this1 = new Uint16Array(vector.__array);
	} else if(view != null) {
		this1 = new Uint16Array(view);
	} else if(buffer != null) {
		if(len == null) {
			this1 = new Uint16Array(buffer,0);
		} else {
			this1 = new Uint16Array(buffer,0,len);
		}
	} else {
		this1 = null;
	}
	var data = this1;
	var index = 0;
	var vertex = 0;
	var _g = 0;
	var _g1 = this.__quadIndexBufferElements;
	while(_g < _g1) {
		var i = _g++;
		data[index] = vertex;
		data[index + 1] = vertex + 1;
		data[index + 2] = vertex + 2;
		data[index + 3] = vertex + 2;
		data[index + 4] = vertex + 1;
		data[index + 5] = vertex + 3;
		index = index + 6;
		vertex = vertex + 4;
	}
	this.__quadIndexBuffer = this.createIndexBuffer(this.__quadIndexBufferCount);
	this.__quadIndexBuffer.uploadFromTypedArray(data);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = "openfl.display3D.Context3D";
openfl_display3D_Context3D.__super__ = openfl_events_EventDispatcher;
openfl_display3D_Context3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 7;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		var clearMask = 0;
		if((mask & 1) != 0) {
			if(this.__state.renderToTexture == null) {
				if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
					this.__stage.__renderer.__cleared = true;
				}
				this.__cleared = true;
			}
			clearMask |= this.gl.COLOR_BUFFER_BIT;
			if(this.__contextState.colorMaskRed != true || this.__contextState.colorMaskGreen != true || this.__contextState.colorMaskBlue != true || this.__contextState.colorMaskAlpha != true) {
				this.gl.colorMask(true,true,true,true);
				this.__contextState.colorMaskRed = true;
				this.__contextState.colorMaskGreen = true;
				this.__contextState.colorMaskBlue = true;
				this.__contextState.colorMaskAlpha = true;
			}
			this.gl.clearColor(red,green,blue,alpha);
		}
		if((mask & 2) != 0) {
			clearMask |= this.gl.DEPTH_BUFFER_BIT;
			if(this.__contextState.depthMask != true) {
				this.gl.depthMask(true);
				this.__contextState.depthMask = true;
			}
			this.gl.clearDepth(depth);
		}
		if((mask & 4) != 0) {
			clearMask |= this.gl.STENCIL_BUFFER_BIT;
			if(this.__contextState.stencilWriteMask != 255) {
				this.gl.stencilMask(255);
				this.__contextState.stencilWriteMask = 255;
			}
			this.gl.clearStencil(stencil);
			this.__contextState.stencilWriteMask = 255;
		}
		if(clearMask == 0) {
			return;
		}
		this.__setGLScissorTest(false);
		this.gl.clear(clearMask);
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil,wantsBestResolution,wantsBestResolutionOnBrowserZoom) {
		if(wantsBestResolutionOnBrowserZoom == null) {
			wantsBestResolutionOnBrowserZoom = false;
		}
		if(wantsBestResolution == null) {
			wantsBestResolution = false;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		if(this.__stage3D == null) {
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
		} else {
			if(this.__backBufferTexture == null || this.backBufferWidth != width || this.backBufferHeight != height) {
				if(this.__backBufferTexture != null) {
					this.__backBufferTexture.dispose();
				}
				if(this.__frontBufferTexture != null) {
					this.__frontBufferTexture.dispose();
				}
				this.__backBufferTexture = this.createRectangleTexture(width,height,1,true);
				this.__frontBufferTexture = this.createRectangleTexture(width,height,1,true);
				if(this.__stage3D.__vertexBuffer == null) {
					this.__stage3D.__vertexBuffer = this.createVertexBuffer(4,5);
				}
				var vertexData = openfl_Vector.toFloatVector(null,null,null,[width,height,0,1,1,0,height,0,0,1,width,0,0,1,0,0,0,0,0,0.0]);
				this.__stage3D.__vertexBuffer.uploadFromVector(vertexData,0,20);
				if(this.__stage3D.__indexBuffer == null) {
					this.__stage3D.__indexBuffer = this.createIndexBuffer(6);
					var indexData = openfl_Vector.toIntVector(null,null,null,[0,1,2,2,1,3]);
					this.__stage3D.__indexBuffer.uploadFromVector(indexData,0,6);
				}
			}
			this.backBufferWidth = width;
			this.backBufferHeight = height;
			this.__backBufferAntiAlias = antiAlias;
			this.__state.backBufferEnableDepthAndStencil = enableDepthAndStencil;
			this.__backBufferWantsBestResolution = wantsBestResolution;
			this.__backBufferWantsBestResolutionOnBrowserZoom = wantsBestResolutionOnBrowserZoom;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
			this.__frontBufferTexture.__getGLFramebuffer(enableDepthAndStencil,antiAlias,0);
		}
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_IndexBuffer3D(this,numIndices,bufferUsage);
	}
	,createProgram: function(format) {
		if(format == null) {
			format = 0;
		}
		return new openfl_display3D_Program3D(this,format);
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		return new openfl_display3D_textures_RectangleTexture(this,width,height,openfl_display3D_Context3DTextureFormat.toString(format),optimizeForRenderToTexture);
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = 1;
		}
		return new openfl_display3D_VertexBuffer3D(this,numVertices,data32PerVertex,openfl_display3D_Context3DBufferUsage.toString(bufferUsage));
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		var count = numTriangles == -1 ? indexBuffer.__numIndices : numTriangles * 3;
		this.__bindGLElementArrayBuffer(indexBuffer.__id);
		this.gl.drawElements(this.gl.TRIANGLES,count,this.gl.UNSIGNED_SHORT,firstIndex * 2);
	}
	,present: function() {
		this.setRenderToBackBuffer();
		if(this.__stage3D != null && this.__backBufferTexture != null) {
			if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
			var cacheBuffer = this.__backBufferTexture;
			this.__backBufferTexture = this.__frontBufferTexture;
			this.__frontBufferTexture = cacheBuffer;
			this.__state.__primaryGLFramebuffer = this.__backBufferTexture.__getGLFramebuffer(this.__state.backBufferEnableDepthAndStencil,this.__backBufferAntiAlias,0);
			this.__cleared = false;
		}
		this.__present = true;
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.setBlendFactorsSeparate(sourceFactor,destinationFactor,sourceFactor,destinationFactor);
	}
	,setBlendFactorsSeparate: function(sourceRGBFactor,destinationRGBFactor,sourceAlphaFactor,destinationAlphaFactor) {
		this.__state.blendSourceRGBFactor = sourceRGBFactor;
		this.__state.blendDestinationRGBFactor = destinationRGBFactor;
		this.__state.blendSourceAlphaFactor = sourceAlphaFactor;
		this.__state.blendDestinationAlphaFactor = destinationAlphaFactor;
		this.__setGLBlendEquation(this.gl.FUNC_ADD);
	}
	,setColorMask: function(red,green,blue,alpha) {
		this.__state.colorMaskRed = red;
		this.__state.colorMaskGreen = green;
		this.__state.colorMaskBlue = blue;
		this.__state.colorMaskAlpha = alpha;
	}
	,setCulling: function(triangleFaceToCull) {
		this.__state.culling = triangleFaceToCull;
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		this.__state.depthMask = depthMask;
		this.__state.depthCompareMode = passCompareMode;
	}
	,setProgram: function(program) {
		this.__state.program = program;
		this.__state.shader = null;
		if(program != null) {
			var _g = 0;
			var _g1 = program.__samplerStates.length;
			while(_g < _g1) {
				var i = _g++;
				if(this.__state.samplerStates[i] == null) {
					this.__state.samplerStates[i] = program.__samplerStates[i].clone();
				} else {
					this.__state.samplerStates[i].copyFrom(program.__samplerStates[i]);
				}
			}
		}
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		if(this.__state.program != null && this.__state.program.__format == 1) {
			this.__flushGLProgram();
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(16);
			var data = this1;
			data[0] = matrix.rawData.get(0);
			data[1] = matrix.rawData.get(1);
			data[2] = matrix.rawData.get(2);
			data[3] = matrix.rawData.get(3);
			data[4] = matrix.rawData.get(4);
			data[5] = matrix.rawData.get(5);
			data[6] = matrix.rawData.get(6);
			data[7] = matrix.rawData.get(7);
			data[8] = matrix.rawData.get(8);
			data[9] = matrix.rawData.get(9);
			data[10] = matrix.rawData.get(10);
			data[11] = matrix.rawData.get(11);
			data[12] = matrix.rawData.get(12);
			data[13] = matrix.rawData.get(13);
			data[14] = matrix.rawData.get(14);
			data[15] = matrix.rawData.get(15);
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(this.gl,firstRegister,transposedMatrix,data);
		} else {
			var isVertex = programType == 1;
			var dest = isVertex ? this.__vertexConstants : this.__fragmentConstants;
			var source = matrix.rawData;
			var i = firstRegister * 4;
			if(transposedMatrix) {
				dest[i++] = source.get(0);
				dest[i++] = source.get(4);
				dest[i++] = source.get(8);
				dest[i++] = source.get(12);
				dest[i++] = source.get(1);
				dest[i++] = source.get(5);
				dest[i++] = source.get(9);
				dest[i++] = source.get(13);
				dest[i++] = source.get(2);
				dest[i++] = source.get(6);
				dest[i++] = source.get(10);
				dest[i++] = source.get(14);
				dest[i++] = source.get(3);
				dest[i++] = source.get(7);
				dest[i++] = source.get(11);
				dest[i++] = source.get(15);
			} else {
				dest[i++] = source.get(0);
				dest[i++] = source.get(1);
				dest[i++] = source.get(2);
				dest[i++] = source.get(3);
				dest[i++] = source.get(4);
				dest[i++] = source.get(5);
				dest[i++] = source.get(6);
				dest[i++] = source.get(7);
				dest[i++] = source.get(8);
				dest[i++] = source.get(9);
				dest[i++] = source.get(10);
				dest[i++] = source.get(11);
				dest[i++] = source.get(12);
				dest[i++] = source.get(13);
				dest[i++] = source.get(14);
				dest[i++] = source.get(15);
			}
			if(this.__state.program != null) {
				this.__state.program.__markDirty(isVertex,firstRegister,4);
			}
		}
	}
	,setRenderToBackBuffer: function() {
		this.__state.renderToTexture = null;
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		this.__state.renderToTexture = texture;
		this.__state.renderToTextureDepthStencil = enableDepthAndStencil;
		this.__state.renderToTextureAntiAlias = antiAlias;
		this.__state.renderToTextureSurfaceSelector = surfaceSelector;
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(this.__state.samplerStates[sampler] == null) {
			this.__state.samplerStates[sampler] = new openfl_display__$internal_SamplerState();
		}
		var state = this.__state.samplerStates[sampler];
		state.wrap = wrap;
		state.filter = filter;
		state.mipfilter = mipfilter;
	}
	,setScissorRectangle: function(rectangle) {
		if(rectangle != null) {
			this.__state.scissorEnabled = true;
			this.__state.scissorRectangle.copyFrom(rectangle);
		} else {
			this.__state.scissorEnabled = false;
		}
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		if(actionOnDepthPassStencilFail == null) {
			actionOnDepthPassStencilFail = 5;
		}
		if(actionOnDepthFail == null) {
			actionOnDepthFail = 5;
		}
		if(actionOnBothPass == null) {
			actionOnBothPass = 5;
		}
		if(compareMode == null) {
			compareMode = 0;
		}
		if(triangleFace == null) {
			triangleFace = 2;
		}
		this.__state.stencilTriangleFace = triangleFace;
		this.__state.stencilCompareMode = compareMode;
		this.__state.stencilPass = actionOnBothPass;
		this.__state.stencilDepthFail = actionOnDepthFail;
		this.__state.stencilFail = actionOnDepthPassStencilFail;
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.__state.stencilReferenceValue = referenceValue;
		this.__state.stencilReadMask = readMask;
		this.__state.stencilWriteMask = writeMask;
	}
	,setTextureAt: function(sampler,texture) {
		this.__state.textures[sampler] = texture;
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(format == null) {
			format = 4;
		}
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		if(buffer == null) {
			this.gl.disableVertexAttribArray(index);
			this.__bindGLArrayBuffer(null);
			return;
		}
		this.__bindGLArrayBuffer(buffer.__id);
		this.gl.enableVertexAttribArray(index);
		var byteOffset = bufferOffset * 4;
		switch(format) {
		case 0:
			this.gl.vertexAttribPointer(index,4,this.gl.UNSIGNED_BYTE,true,buffer.__stride,byteOffset);
			break;
		case 1:
			this.gl.vertexAttribPointer(index,1,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 2:
			this.gl.vertexAttribPointer(index,2,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 3:
			this.gl.vertexAttribPointer(index,3,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		case 4:
			this.gl.vertexAttribPointer(index,4,this.gl.FLOAT,false,buffer.__stride,byteOffset);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__bindGLArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLArrayBuffer = buffer;
		}
	}
	,__bindGLElementArrayBuffer: function(buffer) {
		if(this.__contextState.__currentGLElementArrayBuffer != buffer) {
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,buffer);
			this.__contextState.__currentGLElementArrayBuffer = buffer;
		}
	}
	,__bindGLFramebuffer: function(framebuffer) {
		if(this.__contextState.__currentGLFramebuffer != framebuffer) {
			this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,framebuffer);
			this.__contextState.__currentGLFramebuffer = framebuffer;
		}
	}
	,__bindGLTexture2D: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_2D,texture);
		this.__contextState.__currentGLTexture2D = texture;
	}
	,__bindGLTextureCubeMap: function(texture) {
		this.gl.bindTexture(this.gl.TEXTURE_CUBE_MAP,texture);
		this.__contextState.__currentGLTextureCubeMap = texture;
	}
	,__dispose: function() {
		this.driverInfo += " (Disposed)";
		if(this.__stage3D != null) {
			this.__stage3D.__indexBuffer = null;
			this.__stage3D.__vertexBuffer = null;
			this.__stage3D.context3D = null;
			this.__stage3D = null;
		}
		this.__backBufferTexture = null;
		this.__context = null;
		this.__renderStage3DProgram = null;
		this.__fragmentConstants = null;
		this.__frontBufferTexture = null;
		this.__positionScale = null;
		this.__present = false;
		this.__quadIndexBuffer = null;
		this.__stage = null;
		this.__vertexConstants = null;
	}
	,__drawTriangles: function(firstIndex,count) {
		if(firstIndex == null) {
			firstIndex = 0;
		}
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this && !this.__stage.__renderer.__cleared) {
				this.__stage.__renderer.__clear();
			} else if(!this.__cleared) {
				this.clear(0,0,0,0,1,0,1);
			}
		}
		this.__flushGL();
		if(this.__state.program != null) {
			this.__state.program.__flush();
		}
		this.gl.drawArrays(this.gl.TRIANGLES,firstIndex,count);
	}
	,__flushGL: function() {
		this.__flushGLProgram();
		this.__flushGLFramebuffer();
		this.__flushGLViewport();
		this.__flushGLBlend();
		if(this.__contextState.colorMaskRed != this.__state.colorMaskRed || this.__contextState.colorMaskGreen != this.__state.colorMaskGreen || this.__contextState.colorMaskBlue != this.__state.colorMaskBlue || this.__contextState.colorMaskAlpha != this.__state.colorMaskAlpha) {
			this.gl.colorMask(this.__state.colorMaskRed,this.__state.colorMaskGreen,this.__state.colorMaskBlue,this.__state.colorMaskAlpha);
			this.__contextState.colorMaskRed = this.__state.colorMaskRed;
			this.__contextState.colorMaskGreen = this.__state.colorMaskGreen;
			this.__contextState.colorMaskBlue = this.__state.colorMaskBlue;
			this.__contextState.colorMaskAlpha = this.__state.colorMaskAlpha;
		}
		this.__flushGLCulling();
		this.__flushGLDepth();
		this.__flushGLScissor();
		this.__flushGLStencil();
		this.__flushGLTextures();
	}
	,__flushGLBlend: function() {
		if(this.__contextState.blendDestinationRGBFactor != this.__state.blendDestinationRGBFactor || this.__contextState.blendSourceRGBFactor != this.__state.blendSourceRGBFactor || this.__contextState.blendDestinationAlphaFactor != this.__state.blendDestinationAlphaFactor || this.__contextState.blendSourceAlphaFactor != this.__state.blendSourceAlphaFactor) {
			this.__setGLBlend(true);
			if(this.__state.blendDestinationRGBFactor == this.__state.blendDestinationAlphaFactor && this.__state.blendSourceRGBFactor == this.__state.blendSourceAlphaFactor) {
				this.gl.blendFunc(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor));
			} else {
				this.gl.blendFuncSeparate(this.__getGLBlend(this.__state.blendSourceRGBFactor),this.__getGLBlend(this.__state.blendDestinationRGBFactor),this.__getGLBlend(this.__state.blendSourceAlphaFactor),this.__getGLBlend(this.__state.blendDestinationAlphaFactor));
			}
			this.__contextState.blendDestinationRGBFactor = this.__state.blendDestinationRGBFactor;
			this.__contextState.blendSourceRGBFactor = this.__state.blendSourceRGBFactor;
			this.__contextState.blendDestinationAlphaFactor = this.__state.blendDestinationAlphaFactor;
			this.__contextState.blendSourceAlphaFactor = this.__state.blendSourceAlphaFactor;
		}
	}
	,__flushGLCulling: function() {
		if(this.__contextState.culling != this.__state.culling) {
			if(this.__state.culling == 3) {
				this.__setGLCullFace(false);
			} else {
				this.__setGLCullFace(true);
				switch(this.__state.culling) {
				case 0:
					this.gl.cullFace(this.gl.BACK);
					break;
				case 1:
					this.gl.cullFace(this.gl.FRONT);
					break;
				case 2:
					this.gl.cullFace(this.gl.FRONT_AND_BACK);
					break;
				case 3:
					break;
				default:
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
				}
			}
			this.__contextState.culling = this.__state.culling;
		}
	}
	,__flushGLDepth: function() {
		var depthMask = this.__state.depthMask && (this.__state.renderToTexture != null ? this.__state.renderToTextureDepthStencil : this.__state.backBufferEnableDepthAndStencil);
		if(this.__contextState.depthMask != depthMask) {
			this.gl.depthMask(depthMask);
			this.__contextState.depthMask = depthMask;
		}
		if(this.__contextState.depthCompareMode != this.__state.depthCompareMode) {
			switch(this.__state.depthCompareMode) {
			case 0:
				this.gl.depthFunc(this.gl.ALWAYS);
				break;
			case 1:
				this.gl.depthFunc(this.gl.EQUAL);
				break;
			case 2:
				this.gl.depthFunc(this.gl.GREATER);
				break;
			case 3:
				this.gl.depthFunc(this.gl.GEQUAL);
				break;
			case 4:
				this.gl.depthFunc(this.gl.LESS);
				break;
			case 5:
				this.gl.depthFunc(this.gl.LEQUAL);
				break;
			case 6:
				this.gl.depthFunc(this.gl.NEVER);
				break;
			case 7:
				this.gl.depthFunc(this.gl.NOTEQUAL);
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			this.__contextState.depthCompareMode = this.__state.depthCompareMode;
		}
	}
	,__flushGLFramebuffer: function() {
		if(this.__state.renderToTexture != null) {
			if(this.__contextState.renderToTexture != this.__state.renderToTexture || this.__contextState.renderToTextureSurfaceSelector != this.__state.renderToTextureSurfaceSelector) {
				var framebuffer = this.__state.renderToTexture.__getGLFramebuffer(this.__state.renderToTextureDepthStencil,this.__state.renderToTextureAntiAlias,this.__state.renderToTextureSurfaceSelector);
				this.__bindGLFramebuffer(framebuffer);
				this.__contextState.renderToTexture = this.__state.renderToTexture;
				this.__contextState.renderToTextureAntiAlias = this.__state.renderToTextureAntiAlias;
				this.__contextState.renderToTextureDepthStencil = this.__state.renderToTextureDepthStencil;
				this.__contextState.renderToTextureSurfaceSelector = this.__state.renderToTextureSurfaceSelector;
			}
			this.__setGLDepthTest(this.__state.renderToTextureDepthStencil);
			this.__setGLStencilTest(this.__state.renderToTextureDepthStencil);
			this.__setGLFrontFace(true);
		} else {
			if(this.__stage == null && this.backBufferWidth == 0 && this.backBufferHeight == 0) {
				throw haxe_Exception.thrown(new openfl_errors_Error("Context3D backbuffer has not been configured"));
			}
			if(this.__contextState.renderToTexture != null || this.__contextState.__currentGLFramebuffer != this.__state.__primaryGLFramebuffer || this.__contextState.backBufferEnableDepthAndStencil != this.__state.backBufferEnableDepthAndStencil) {
				this.__bindGLFramebuffer(this.__state.__primaryGLFramebuffer);
				this.__contextState.renderToTexture = null;
				this.__contextState.backBufferEnableDepthAndStencil = this.__state.backBufferEnableDepthAndStencil;
			}
			this.__setGLDepthTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLStencilTest(this.__state.backBufferEnableDepthAndStencil);
			this.__setGLFrontFace(this.__stage.context3D != this);
		}
	}
	,__flushGLProgram: function() {
		var shader = this.__state.shader;
		var program = this.__state.program;
		if(this.__contextState.shader != shader) {
			if(this.__contextState.shader != null) {
				this.__contextState.shader.__disable();
			}
			if(shader != null) {
				shader.__enable();
			}
			this.__contextState.shader = shader;
		}
		if(this.__contextState.program != program) {
			if(this.__contextState.program != null) {
				this.__contextState.program.__disable();
			}
			if(program != null) {
				program.__enable();
			}
			this.__contextState.program = program;
		}
		if(program != null && program.__format == 0) {
			this.__positionScale[1] = this.__stage.context3D == this && this.__state.renderToTexture == null ? 1.0 : -1.0;
			program.__setPositionScale(this.__positionScale);
		}
	}
	,__flushGLScissor: function() {
		if(!this.__state.scissorEnabled) {
			if(this.__contextState.scissorEnabled != this.__state.scissorEnabled) {
				this.__setGLScissorTest(false);
				this.__contextState.scissorEnabled = false;
			}
		} else {
			this.__setGLScissorTest(true);
			this.__contextState.scissorEnabled = true;
			var scissorX = this.__state.scissorRectangle.x | 0;
			var scissorY = this.__state.scissorRectangle.y | 0;
			var scissorWidth = this.__state.scissorRectangle.width | 0;
			var scissorHeight = this.__state.scissorRectangle.height | 0;
			if(this.__state.renderToTexture == null && this.__stage3D == null) {
				var contextHeight = this.__stage.window.__height * this.__stage.window.__scale | 0;
				scissorY = contextHeight - (this.__state.scissorRectangle.height | 0) - scissorY;
			}
			if(this.__contextState.scissorRectangle.x != scissorX || this.__contextState.scissorRectangle.y != scissorY || this.__contextState.scissorRectangle.width != scissorWidth || this.__contextState.scissorRectangle.height != scissorHeight) {
				this.gl.scissor(scissorX,scissorY,scissorWidth,scissorHeight);
				this.__contextState.scissorRectangle.setTo(scissorX,scissorY,scissorWidth,scissorHeight);
			}
		}
	}
	,__flushGLStencil: function() {
		if(this.__contextState.stencilTriangleFace != this.__state.stencilTriangleFace || this.__contextState.stencilPass != this.__state.stencilPass || this.__contextState.stencilDepthFail != this.__state.stencilDepthFail || this.__contextState.stencilFail != this.__state.stencilFail) {
			this.gl.stencilOpSeparate(this.__getGLTriangleFace(this.__state.stencilTriangleFace),this.__getGLStencilAction(this.__state.stencilFail),this.__getGLStencilAction(this.__state.stencilDepthFail),this.__getGLStencilAction(this.__state.stencilPass));
			this.__contextState.stencilTriangleFace = this.__state.stencilTriangleFace;
			this.__contextState.stencilPass = this.__state.stencilPass;
			this.__contextState.stencilDepthFail = this.__state.stencilDepthFail;
			this.__contextState.stencilFail = this.__state.stencilFail;
		}
		if(this.__contextState.stencilWriteMask != this.__state.stencilWriteMask) {
			this.gl.stencilMask(this.__state.stencilWriteMask);
			this.__contextState.stencilWriteMask = this.__state.stencilWriteMask;
		}
		if(this.__contextState.stencilCompareMode != this.__state.stencilCompareMode || this.__contextState.stencilReferenceValue != this.__state.stencilReferenceValue || this.__contextState.stencilReadMask != this.__state.stencilReadMask) {
			this.gl.stencilFunc(this.__getGLCompareMode(this.__state.stencilCompareMode),this.__state.stencilReferenceValue,this.__state.stencilReadMask);
			this.__contextState.stencilCompareMode = this.__state.stencilCompareMode;
			this.__contextState.stencilReferenceValue = this.__state.stencilReferenceValue;
			this.__contextState.stencilReadMask = this.__state.stencilReadMask;
		}
	}
	,__flushGLTextures: function() {
		var sampler = 0;
		var texture;
		var samplerState;
		var _g = 0;
		var _g1 = this.__state.textures.length;
		while(_g < _g1) {
			var i = _g++;
			texture = this.__state.textures[i];
			samplerState = this.__state.samplerStates[i];
			if(samplerState == null) {
				this.__state.samplerStates[i] = new openfl_display__$internal_SamplerState();
				samplerState = this.__state.samplerStates[i];
			}
			this.gl.activeTexture(this.gl.TEXTURE0 + sampler);
			if(texture != null) {
				if(texture.__textureTarget == this.gl.TEXTURE_2D) {
					this.__bindGLTexture2D(texture.__getTexture());
				} else {
					this.__bindGLTextureCubeMap(texture.__getTexture());
				}
				this.__contextState.textures[i] = texture;
				texture.__setSamplerState(samplerState);
			} else {
				this.__bindGLTexture2D(null);
			}
			if(this.__state.program != null && this.__state.program.__format == 0 && samplerState.textureAlpha) {
				this.gl.activeTexture(this.gl.TEXTURE0 + sampler + 4);
				if(texture != null && texture.__alphaTexture != null) {
					if(texture.__alphaTexture.__textureTarget == this.gl.TEXTURE_2D) {
						this.__bindGLTexture2D(texture.__alphaTexture.__getTexture());
					} else {
						this.__bindGLTextureCubeMap(texture.__alphaTexture.__getTexture());
					}
					texture.__alphaTexture.__setSamplerState(samplerState);
					this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,1);
				} else {
					this.__bindGLTexture2D(null);
					if(this.__state.program.__agalAlphaSamplerEnabled[sampler] != null) {
						this.gl.uniform1i(this.__state.program.__agalAlphaSamplerEnabled[sampler].location,0);
					}
				}
			}
			++sampler;
		}
	}
	,__flushGLViewport: function() {
		if(this.__state.renderToTexture == null) {
			if(this.__stage.context3D == this) {
				var x = this.__stage3D == null ? 0 : this.__stage3D.get_x() | 0;
				var y = this.__stage.window.__height * this.__stage.window.__scale - this.backBufferHeight - (this.__stage3D == null ? 0 : this.__stage3D.get_y()) | 0;
				this.gl.viewport(x,y,this.backBufferWidth,this.backBufferHeight);
			} else {
				this.gl.viewport(0,0,this.backBufferWidth,this.backBufferHeight);
			}
		} else {
			var width = 0;
			var height = 0;
			if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_Texture)) {
				var texture2D = this.__state.renderToTexture;
				width = texture2D.__width;
				height = texture2D.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_RectangleTexture)) {
				var rectTexture = this.__state.renderToTexture;
				width = rectTexture.__width;
				height = rectTexture.__height;
			} else if(((this.__state.renderToTexture) instanceof openfl_display3D_textures_CubeTexture)) {
				var cubeTexture = this.__state.renderToTexture;
				width = cubeTexture.__size;
				height = cubeTexture.__size;
			}
			this.gl.viewport(0,0,width,height);
		}
	}
	,__getGLBlend: function(blendFactor) {
		switch(blendFactor) {
		case 0:
			return this.gl.DST_ALPHA;
		case 1:
			return this.gl.DST_COLOR;
		case 2:
			return this.gl.ONE;
		case 3:
			return this.gl.ONE_MINUS_DST_ALPHA;
		case 4:
			return this.gl.ONE_MINUS_DST_COLOR;
		case 5:
			return this.gl.ONE_MINUS_SRC_ALPHA;
		case 6:
			return this.gl.ONE_MINUS_SRC_COLOR;
		case 7:
			return this.gl.SRC_ALPHA;
		case 8:
			return this.gl.SRC_COLOR;
		case 9:
			return this.gl.ZERO;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
	}
	,__getGLCompareMode: function(mode) {
		switch(mode) {
		case 0:
			return this.gl.ALWAYS;
		case 1:
			return this.gl.EQUAL;
		case 2:
			return this.gl.GREATER;
		case 3:
			return this.gl.GEQUAL;
		case 4:
			return this.gl.LESS;
		case 5:
			return this.gl.LEQUAL;
		case 6:
			return this.gl.NEVER;
		case 7:
			return this.gl.NOTEQUAL;
		default:
			return this.gl.EQUAL;
		}
	}
	,__getGLStencilAction: function(action) {
		switch(action) {
		case 0:
			return this.gl.DECR;
		case 1:
			return this.gl.DECR_WRAP;
		case 2:
			return this.gl.INCR;
		case 3:
			return this.gl.INCR_WRAP;
		case 4:
			return this.gl.INVERT;
		case 5:
			return this.gl.KEEP;
		case 6:
			return this.gl.REPLACE;
		case 7:
			return this.gl.ZERO;
		default:
			return this.gl.KEEP;
		}
	}
	,__getGLTriangleFace: function(face) {
		switch(face) {
		case 0:
			return this.gl.BACK;
		case 1:
			return this.gl.FRONT;
		case 2:
			return this.gl.FRONT_AND_BACK;
		case 3:
			return this.gl.NONE;
		default:
			return this.gl.FRONT_AND_BACK;
		}
	}
	,__renderStage3D: function(stage3D) {
		var context = stage3D.context3D;
		if(context != null && context != this && context.__frontBufferTexture != null && stage3D.visible && this.backBufferHeight > 0 && this.backBufferWidth > 0) {
			if(this.__renderStage3DProgram == null) {
				var vertexAssembler = new openfl_utils_AGALMiniAssembler();
				vertexAssembler.assemble(openfl_display3D_Context3DProgramType.toString(1),"m44 op, va0, vc0\n" + "mov v0, va1");
				var fragmentAssembler = new openfl_utils_AGALMiniAssembler();
				fragmentAssembler.assemble(openfl_display3D_Context3DProgramType.toString(0),"tex ft1, v0, fs0 <2d,nearest,nomip>\n" + "mov oc, ft1");
				this.__renderStage3DProgram = this.createProgram();
				this.__renderStage3DProgram.upload(vertexAssembler.agalcode,fragmentAssembler.agalcode);
			}
			this.setProgram(this.__renderStage3DProgram);
			this.setBlendFactors(2,9);
			this.setColorMask(true,true,true,true);
			this.setCulling(3);
			this.setDepthTest(false,0);
			this.setStencilActions();
			this.setStencilReferenceValue(0,0,0);
			this.setScissorRectangle(null);
			this.setTextureAt(0,context.__frontBufferTexture);
			this.setVertexBufferAt(0,stage3D.__vertexBuffer,0,3);
			this.setVertexBufferAt(1,stage3D.__vertexBuffer,3,2);
			this.setProgramConstantsFromMatrix(1,0,stage3D.__renderTransform,true);
			this.drawTriangles(stage3D.__indexBuffer);
			this.__present = true;
		}
	}
	,__setGLBlend: function(enable) {
		if(this.__contextState.__enableGLBlend != enable) {
			if(enable) {
				this.gl.enable(this.gl.BLEND);
			} else {
				this.gl.disable(this.gl.BLEND);
			}
			this.__contextState.__enableGLBlend = enable;
		}
	}
	,__setGLBlendEquation: function(value) {
		if(this.__contextState.__glBlendEquation != value) {
			this.gl.blendEquation(value);
			this.__contextState.__glBlendEquation = value;
		}
	}
	,__setGLCullFace: function(enable) {
		if(this.__contextState.__enableGLCullFace != enable) {
			if(enable) {
				this.gl.enable(this.gl.CULL_FACE);
			} else {
				this.gl.disable(this.gl.CULL_FACE);
			}
			this.__contextState.__enableGLCullFace = enable;
		}
	}
	,__setGLDepthTest: function(enable) {
		if(this.__contextState.__enableGLDepthTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.DEPTH_TEST);
			} else {
				this.gl.disable(this.gl.DEPTH_TEST);
			}
			this.__contextState.__enableGLDepthTest = enable;
		}
	}
	,__setGLFrontFace: function(counterClockWise) {
		if(this.__contextState.__frontFaceGLCCW != counterClockWise) {
			this.gl.frontFace(counterClockWise ? this.gl.CCW : this.gl.CW);
			this.__contextState.__frontFaceGLCCW = counterClockWise;
		}
	}
	,__setGLScissorTest: function(enable) {
		if(this.__contextState.__enableGLScissorTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.SCISSOR_TEST);
			} else {
				this.gl.disable(this.gl.SCISSOR_TEST);
			}
			this.__contextState.__enableGLScissorTest = enable;
		}
	}
	,__setGLStencilTest: function(enable) {
		if(this.__contextState.__enableGLStencilTest != enable) {
			if(enable) {
				this.gl.enable(this.gl.STENCIL_TEST);
			} else {
				this.gl.disable(this.gl.STENCIL_TEST);
			}
			this.__contextState.__enableGLStencilTest = enable;
		}
	}
	,__class__: openfl_display3D_Context3D
});
var openfl_display3D_Context3DBufferUsage = {};
openfl_display3D_Context3DBufferUsage.fromString = function(value) {
	switch(value) {
	case "dynamicDraw":
		return 0;
	case "staticDraw":
		return 1;
	default:
		return null;
	}
};
openfl_display3D_Context3DBufferUsage.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamicDraw";
	case 1:
		return "staticDraw";
	default:
		return null;
	}
};
var openfl_display3D_Context3DProgramType = {};
openfl_display3D_Context3DProgramType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "fragment";
	case 1:
		return "vertex";
	default:
		return null;
	}
};
var openfl_display3D_Context3DTextureFormat = {};
openfl_display3D_Context3DTextureFormat.toString = function(this1) {
	switch(this1) {
	case 0:
		return "bgrPacked565";
	case 1:
		return "bgra";
	case 2:
		return "bgraPacked4444";
	case 3:
		return "compressed";
	case 4:
		return "compressedAlpha";
	case 5:
		return "rgbaHalfFloat";
	default:
		return null;
	}
};
var openfl_display3D_IndexBuffer3D = function(context3D,numIndices,bufferUsage) {
	this.__context = context3D;
	this.__numIndices = numIndices;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__usage = bufferUsage == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = "openfl.display3D.IndexBuffer3D";
openfl_display3D_IndexBuffer3D.prototype = {
	uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLElementArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ELEMENT_ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var length = startOffset + count;
		var existingUInt16Array = this.__tempUInt16Array;
		if(this.__tempUInt16Array == null || this.__tempUInt16Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Uint16Array(count);
			} else if(array != null) {
				this1 = new Uint16Array(array);
			} else if(vector != null) {
				this1 = new Uint16Array(vector.__array);
			} else if(view != null) {
				this1 = new Uint16Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Uint16Array(buffer,0);
				} else {
					this1 = new Uint16Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempUInt16Array = this1;
			if(existingUInt16Array != null) {
				this.__tempUInt16Array.set(existingUInt16Array);
			}
		}
		var _g = startOffset;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempUInt16Array[i - startOffset] = data.get(i);
		}
		this.uploadFromTypedArray(this.__tempUInt16Array);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context3D,format) {
	this.__context = context3D;
	this.__format = format;
	if(this.__format == 0) {
		this.__agalSamplerUsageMask = 0;
		this.__agalUniforms = new haxe_ds_List();
		this.__agalSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerUniforms = new haxe_ds_List();
		this.__agalAlphaSamplerEnabled = [];
	} else {
		this.__glslAttribNames = [];
		this.__glslAttribTypes = [];
		this.__glslSamplerNames = [];
		this.__glslUniformLocations = [];
		this.__glslUniformNames = [];
		this.__glslUniformTypes = [];
	}
	this.__samplerStates = [];
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = "openfl.display3D.Program3D";
openfl_display3D_Program3D.prototype = {
	upload: function(vertexProgram,fragmentProgram) {
		if(this.__format != 0) {
			return;
		}
		var samplerStates = [];
		var glslVertex = openfl_display3D__$internal_AGALConverter.convertToGLSL(vertexProgram,null);
		var glslFragment = openfl_display3D__$internal_AGALConverter.convertToGLSL(fragmentProgram,samplerStates);
		if(lime_utils_Log.level == 5) {
			lime_utils_Log.info(glslVertex,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 399, className : "openfl.display3D.Program3D", methodName : "upload"});
			lime_utils_Log.info(glslFragment,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 400, className : "openfl.display3D.Program3D", methodName : "upload"});
		}
		this.__deleteShaders();
		this.__uploadFromGLSL(glslVertex,glslFragment);
		this.__buildAGALUniformList();
		var _g = 0;
		var _g1 = samplerStates.length;
		while(_g < _g1) {
			var i = _g++;
			this.__samplerStates[i] = samplerStates[i];
		}
	}
	,__buildAGALUniformList: function() {
		if(this.__format == 1) {
			return;
		}
		var gl = this.__context.gl;
		this.__agalUniforms.clear();
		this.__agalSamplerUniforms.clear();
		this.__agalAlphaSamplerUniforms.clear();
		this.__agalAlphaSamplerEnabled = [];
		this.__agalSamplerUsageMask = 0;
		var numActive = 0;
		numActive = gl.getProgramParameter(this.__glProgram,gl.ACTIVE_UNIFORMS);
		var vertexUniforms = new haxe_ds_List();
		var fragmentUniforms = new haxe_ds_List();
		var _g = 0;
		var _g1 = numActive;
		while(_g < _g1) {
			var i = _g++;
			var info = gl.getActiveUniform(this.__glProgram,i);
			var name = info.name;
			var size = info.size;
			var uniformType = info.type;
			var uniform = new openfl_display3D_Uniform(this.__context);
			uniform.name = name;
			uniform.size = size;
			uniform.type = uniformType;
			uniform.location = gl.getUniformLocation(this.__glProgram,uniform.name);
			var indexBracket = uniform.name.indexOf("[");
			if(indexBracket >= 0) {
				uniform.name = uniform.name.substring(0,indexBracket);
			}
			switch(uniform.type) {
			case 35674:
				uniform.regCount = 2;
				break;
			case 35675:
				uniform.regCount = 3;
				break;
			case 35676:
				uniform.regCount = 4;
				break;
			default:
				uniform.regCount = 1;
			}
			uniform.regCount *= uniform.size;
			this.__agalUniforms.add(uniform);
			if(uniform.name == "vcPositionScale") {
				this.__agalPositionScale = uniform;
			} else if(StringTools.startsWith(uniform.name,"vc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__vertexConstants;
				vertexUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"fc")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(2));
				uniform.regData = this.__context.__fragmentConstants;
				fragmentUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && uniform.name.indexOf("alpha") == -1) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalSamplerUniforms.add(uniform);
				var _g2 = 0;
				var _g3 = uniform.regCount;
				while(_g2 < _g3) {
					var reg = _g2++;
					this.__agalSamplerUsageMask |= 1 << uniform.regIndex + reg;
				}
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alpha")) {
				var len = uniform.name.indexOf("_") - 7;
				uniform.regIndex = Std.parseInt(uniform.name.substring(7,7 + len)) + 4;
				this.__agalAlphaSamplerUniforms.add(uniform);
			} else if(StringTools.startsWith(uniform.name,"sampler") && StringTools.endsWith(uniform.name,"_alphaEnabled")) {
				uniform.regIndex = Std.parseInt(uniform.name.substring(7));
				this.__agalAlphaSamplerEnabled[uniform.regIndex] = uniform;
			}
			if(lime_utils_Log.level == 5) {
				lime_utils_Log.verbose("" + i + " name:" + uniform.name + " type:" + uniform.type + " size:" + uniform.size + " location:" + Std.string(uniform.location),{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 577, className : "openfl.display3D.Program3D", methodName : "__buildAGALUniformList"});
			}
		}
		this.__agalVertexUniformMap = new openfl_display3D_UniformMap(Lambda.array(vertexUniforms));
		this.__agalFragmentUniformMap = new openfl_display3D_UniformMap(Lambda.array(fragmentUniforms));
	}
	,__deleteShaders: function() {
		var gl = this.__context.gl;
		if(this.__glProgram != null) {
			this.__glProgram = null;
		}
		if(this.__glVertexShader != null) {
			gl.deleteShader(this.__glVertexShader);
			this.__glVertexShader = null;
		}
		if(this.__glFragmentShader != null) {
			gl.deleteShader(this.__glFragmentShader);
			this.__glFragmentShader = null;
		}
	}
	,__disable: function() {
		var tmp = this.__format == 1;
	}
	,__enable: function() {
		var gl = this.__context.gl;
		gl.useProgram(this.__glProgram);
		if(this.__format == 0) {
			this.__agalVertexUniformMap.markAllDirty();
			this.__agalFragmentUniformMap.markAllDirty();
			var _g_head = this.__agalSamplerUniforms.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
			var _g1_head = this.__agalAlphaSamplerUniforms.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var sampler = val;
				if(sampler.regCount == 1) {
					gl.uniform1i(sampler.location,sampler.regIndex);
				} else {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("!!! TODO: uniform location on webgl"));
				}
			}
		}
	}
	,__flush: function() {
		if(this.__format == 0) {
			this.__agalVertexUniformMap.flush();
			this.__agalFragmentUniformMap.flush();
		} else {
			return;
		}
	}
	,__markDirty: function(isVertex,index,count) {
		if(this.__format == 1) {
			return;
		}
		if(isVertex) {
			this.__agalVertexUniformMap.markDirty(index,count);
		} else {
			this.__agalFragmentUniformMap.markDirty(index,count);
		}
	}
	,__setPositionScale: function(positionScale) {
		if(this.__format == 1) {
			return;
		}
		if(this.__agalPositionScale != null) {
			var gl = this.__context.gl;
			var location = this.__agalPositionScale.location;
			var data = positionScale;
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__uploadFromGLSL: function(vertexShaderSource,fragmentShaderSource) {
		var gl = this.__context.gl;
		this.__glVertexSource = vertexShaderSource;
		this.__glFragmentSource = fragmentShaderSource;
		this.__glVertexShader = gl.createShader(gl.VERTEX_SHADER);
		gl.shaderSource(this.__glVertexShader,vertexShaderSource);
		gl.compileShader(this.__glVertexShader);
		if(gl.getShaderParameter(this.__glVertexShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling vertex shader";
			message += "\n" + gl.getShaderInfoLog(this.__glVertexShader);
			message += "\n" + vertexShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 869, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glFragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
		gl.shaderSource(this.__glFragmentShader,fragmentShaderSource);
		gl.compileShader(this.__glFragmentShader);
		if(gl.getShaderParameter(this.__glFragmentShader,gl.COMPILE_STATUS) == 0) {
			var message = "Error compiling fragment shader";
			message += "\n" + gl.getShaderInfoLog(this.__glFragmentShader);
			message += "\n" + fragmentShaderSource;
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 881, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
		this.__glProgram = gl.createProgram();
		if(this.__format == 0) {
			var _g = 0;
			while(_g < 16) {
				var i = _g++;
				var name = "va" + i;
				if(vertexShaderSource.indexOf(" " + name) != -1) {
					gl.bindAttribLocation(this.__glProgram,i,name);
				}
			}
		} else {
			var _g = 0;
			var _g1 = this.__glslAttribNames;
			while(_g < _g1.length) {
				var name = _g1[_g];
				++_g;
				if(name.indexOf("Position") > -1 && StringTools.startsWith(name,"openfl_")) {
					gl.bindAttribLocation(this.__glProgram,0,name);
					break;
				}
			}
		}
		gl.attachShader(this.__glProgram,this.__glVertexShader);
		gl.attachShader(this.__glProgram,this.__glFragmentShader);
		gl.linkProgram(this.__glProgram);
		if(gl.getProgramParameter(this.__glProgram,gl.LINK_STATUS) == 0) {
			var message = "Unable to initialize the shader program";
			message += "\n" + gl.getProgramInfoLog(this.__glProgram);
			lime_utils_Log.error(message,{ fileName : "openfl/display3D/Program3D.hx", lineNumber : 922, className : "openfl.display3D.Program3D", methodName : "__uploadFromGLSL"});
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_Uniform = function(context) {
	this.context = context;
	this.isDirty = true;
	var this1 = new lime_utils_BytePointerData(null,0);
	this.regDataPointer = this1;
};
$hxClasses["openfl.display3D.Uniform"] = openfl_display3D_Uniform;
openfl_display3D_Uniform.__name__ = "openfl.display3D.Uniform";
openfl_display3D_Uniform.prototype = {
	flush: function() {
		var gl = this.context.gl;
		var index = this.regIndex * 4;
		switch(this.type) {
		case 35664:
			lime_graphics_WebGL2RenderContext.uniform2fv(gl,this.location,this.regData.subarray(index,index + this.regCount * 2));
			break;
		case 35665:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 3);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform3fv(location,data,srcOffset,null);
			} else {
				gl.uniform3fv(location,data);
			}
			break;
		case 35666:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
			break;
		case 35674:
			lime_graphics_WebGLRenderContext.uniformMatrix2fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 2 * 2));
			break;
		case 35675:
			lime_graphics_WebGLRenderContext.uniformMatrix3fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 3 * 3));
			break;
		case 35676:
			lime_graphics_WebGLRenderContext.uniformMatrix4fv(gl,this.location,false,this.regData.subarray(index,index + this.size * 4 * 4));
			break;
		default:
			var location = this.location;
			var data = this.regData.subarray(index,index + this.regCount * 4);
			var srcOffset = null;
			if(srcOffset != null) {
				gl.uniform4fv(location,data,srcOffset,null);
			} else {
				gl.uniform4fv(location,data);
			}
		}
	}
	,__class__: openfl_display3D_Uniform
};
var openfl_display3D_UniformMap = function(list) {
	this.__uniforms = list;
	this.__uniforms.sort(function(a,b) {
		return Reflect.compare(a.regIndex,b.regIndex);
	});
	var total = 0;
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		if(uniform.regIndex + uniform.regCount > total) {
			total = uniform.regIndex + uniform.regCount;
		}
	}
	this.__registerLookup = openfl_Vector.toObjectVector(null,total);
	var _g = 0;
	var _g1 = this.__uniforms;
	while(_g < _g1.length) {
		var uniform = _g1[_g];
		++_g;
		var _g2 = 0;
		var _g3 = uniform.regCount;
		while(_g2 < _g3) {
			var i = _g2++;
			this.__registerLookup.set(uniform.regIndex + i,uniform);
		}
	}
	this.__anyDirty = this.__allDirty = true;
};
$hxClasses["openfl.display3D.UniformMap"] = openfl_display3D_UniformMap;
openfl_display3D_UniformMap.__name__ = "openfl.display3D.UniformMap";
openfl_display3D_UniformMap.prototype = {
	flush: function() {
		if(this.__anyDirty) {
			var _g = 0;
			var _g1 = this.__uniforms;
			while(_g < _g1.length) {
				var uniform = _g1[_g];
				++_g;
				if(this.__allDirty || uniform.isDirty) {
					uniform.flush();
					uniform.isDirty = false;
				}
			}
			this.__anyDirty = this.__allDirty = false;
		}
	}
	,markAllDirty: function() {
		this.__allDirty = true;
		this.__anyDirty = true;
	}
	,markDirty: function(start,count) {
		if(this.__allDirty) {
			return;
		}
		var end = start + count;
		if(end > this.__registerLookup.get_length()) {
			end = this.__registerLookup.get_length();
		}
		var index = start;
		while(index < end) {
			var uniform = this.__registerLookup.get(index);
			if(uniform != null) {
				uniform.isDirty = true;
				this.__anyDirty = true;
				index = uniform.regIndex + uniform.regCount;
			} else {
				++index;
			}
		}
	}
	,__class__: openfl_display3D_UniformMap
};
var openfl_display3D_VertexBuffer3D = function(context3D,numVertices,dataPerVertex,bufferUsage) {
	this.__context = context3D;
	this.__numVertices = numVertices;
	this.__vertexSize = dataPerVertex;
	var gl = this.__context.gl;
	this.__id = gl.createBuffer();
	this.__stride = this.__vertexSize * 4;
	this.__usage = openfl_display3D_Context3DBufferUsage.fromString(bufferUsage) == 0 ? gl.DYNAMIC_DRAW : gl.STATIC_DRAW;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = "openfl.display3D.VertexBuffer3D";
openfl_display3D_VertexBuffer3D.prototype = {
	uploadFromTypedArray: function(data,byteLength) {
		if(byteLength == null) {
			byteLength = -1;
		}
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		this.__context.__bindGLArrayBuffer(this.__id);
		lime_graphics_WebGLRenderContext.bufferData(gl,gl.ARRAY_BUFFER,data,this.__usage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		if(data == null) {
			return;
		}
		var gl = this.__context.gl;
		var start = startVertex * this.__vertexSize;
		var count = numVertices * this.__vertexSize;
		var length = start + count;
		var existingFloat32Array = this.__tempFloat32Array;
		if(this.__tempFloat32Array == null || this.__tempFloat32Array.length < count) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1;
			if(count != null) {
				this1 = new Float32Array(count);
			} else if(array != null) {
				this1 = new Float32Array(array);
			} else if(vector != null) {
				this1 = new Float32Array(vector.__array);
			} else if(view != null) {
				this1 = new Float32Array(view);
			} else if(buffer != null) {
				if(len == null) {
					this1 = new Float32Array(buffer,0);
				} else {
					this1 = new Float32Array(buffer,0,len);
				}
			} else {
				this1 = null;
			}
			this.__tempFloat32Array = this1;
			if(existingFloat32Array != null) {
				this.__tempFloat32Array.set(existingFloat32Array);
			}
		}
		var _g = start;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.__tempFloat32Array[i - start] = data.get(i);
		}
		this.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__tempFloat32Array));
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D__$internal_AGALConverter = function() { };
$hxClasses["openfl.display3D._internal.AGALConverter"] = openfl_display3D__$internal_AGALConverter;
openfl_display3D__$internal_AGALConverter.__name__ = "openfl.display3D._internal.AGALConverter";
openfl_display3D__$internal_AGALConverter.prefixFromType = function(regType,programType) {
	switch(regType) {
	case 0:
		return "va";
	case 1:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vc";
		} else {
			return "fc";
		}
		break;
	case 2:
		if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
			return "vt";
		} else {
			return "ft";
		}
		break;
	case 3:
		return "output_";
	case 4:
		return "v";
	case 5:
		return "sampler";
	default:
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Invalid data!"));
	}
};
openfl_display3D__$internal_AGALConverter.readUInt64 = function(byteArray) {
	var low = byteArray.readInt();
	var high = byteArray.readInt();
	var this1 = new haxe__$Int64__$_$_$Int64(high,low);
	return this1;
};
openfl_display3D__$internal_AGALConverter.convertToGLSL = function(agal,samplerState) {
	agal.position = 0;
	agal.__endian = 1;
	var magic = agal.readByte() & 255;
	if(magic == 176) {
		return agal.readUTF();
	}
	if(magic != 160) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Magic value must be 0xA0, may not be AGAL"));
	}
	var version = agal.readInt();
	if(version != 1) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Version must be 1"));
	}
	var shaderTypeID = agal.readByte() & 255;
	if(shaderTypeID != 161) {
		throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Shader type ID must be 0xA1"));
	}
	var programType = (agal.readByte() & 255) == 0 ? openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX : openfl_display3D__$internal__$AGALConverter_ProgramType.FRAGMENT;
	var map = new openfl_display3D__$internal_RegisterMap();
	var sb_b = "";
	while(true) {
		var a = agal.position;
		if(!UInt.gt(openfl_utils_ByteArray.get_length(agal),a)) {
			break;
		}
		var opcode = agal.readInt();
		var dest = agal.readUnsignedInt();
		var source1 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var source2 = openfl_display3D__$internal_AGALConverter.readUInt64(agal);
		var dr = openfl_display3D__$internal__$AGALConverter_DestRegister.parse(dest,programType);
		var sr1 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source1,programType,dr.mask);
		var sr2 = openfl_display3D__$internal__$AGALConverter_SourceRegister.parse(source2,programType,dr.mask);
		sb_b += "\t";
		switch(opcode) {
		case 0:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + "; // mov");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 1:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " + " + sr2.toGLSL() + "; // add");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 2:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " - " + sr2.toGLSL() + "; // sub");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 3:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL() + "; // mul");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 4:
			sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " / " + sr2.toGLSL() + "; // div");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 5:
			var sr = sr1.toGLSL();
			if(sr.indexOf(".") > -1) {
				sb_b += Std.string(dr.toGLSL() + " = 1.0 / " + sr1.toGLSL() + "; // rcp");
			} else {
				sb_b += Std.string(dr.toGLSL() + " = vec4(1) / " + sr1.toGLSL() + "; // rcp");
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 6:
			sb_b += Std.string(dr.toGLSL() + " = min(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // min");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 7:
			sb_b += Std.string(dr.toGLSL() + " = max(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // max");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 8:
			sb_b += Std.string(dr.toGLSL() + " = fract(" + sr1.toGLSL() + "); // frc");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 9:
			sb_b += Std.string(dr.toGLSL() + " = sqrt(" + sr1.toGLSL() + "); // sqrt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 10:
			sb_b += Std.string(dr.toGLSL() + " = inversesqrt(" + sr1.toGLSL() + "); // rsq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 11:
			sb_b += Std.string(dr.toGLSL() + " = pow(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "); // pow");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 12:
			sb_b += Std.string(dr.toGLSL() + " = log2(" + sr1.toGLSL() + "); // log");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 13:
			sb_b += Std.string(dr.toGLSL() + " = exp2(" + sr1.toGLSL() + "); // exp");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 14:
			sb_b += Std.string(dr.toGLSL() + " = normalize(" + sr1.toGLSL() + "); // normalize");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 15:
			sb_b += Std.string(dr.toGLSL() + " = sin(" + sr1.toGLSL() + "); // sin");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 16:
			sb_b += Std.string(dr.toGLSL() + " = cos(" + sr1.toGLSL() + "); // cos");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 17:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = cross(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")); // crs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 18:
			sr1.sourceMask = sr2.sourceMask = 7;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec3(" + sr1.toGLSL() + "), vec3(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp3");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 19:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(dot(vec4(" + sr1.toGLSL() + "), vec4(" + sr2.toGLSL() + ")))" + dr.getWriteMask() + "; // dp4");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 20:
			sb_b += Std.string(dr.toGLSL() + " = abs(" + sr1.toGLSL() + "); // abs");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 21:
			sb_b += Std.string(dr.toGLSL() + " = -" + sr1.toGLSL() + "; // neg");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 22:
			sb_b += Std.string(dr.toGLSL() + " = clamp(" + sr1.toGLSL() + ", 0.0, 1.0); // saturate");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 23:
			var existingUsage = map.getRegisterUsage(sr2);
			if(existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * mat3(" + sr2.toGLSL(false) + "); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 7;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m33");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 24:
			var existingUsage1 = map.getRegisterUsage(sr2);
			if(existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage1 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec4(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,3) + ")); // m44");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,3);
			}
			break;
		case 25:
			dr.mask &= 7;
			var existingUsage2 = map.getRegisterUsage(sr2);
			if(existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4 && existingUsage2 != openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(dr.toGLSL() + " = " + sr1.toGLSL() + " * " + sr2.toGLSL(false) + "; // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4);
			} else {
				sr1.sourceMask = sr2.sourceMask = 15;
				sb_b += Std.string(dr.toGLSL() + " = vec3(" + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,0) + "), " + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,1) + ")," + "dot(" + sr1.toGLSL(true) + "," + sr2.toGLSL(true,2) + ")); // m34");
				map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,0);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,1);
				map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,2);
			}
			break;
		case 39:
			sr1.sourceMask = 15;
			sb_b += Std.string("if (any(lessThan(" + sr1.toGLSL() + ", vec4(0)))) discard;");
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 40:
			var sampler = openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse(source2,programType);
			switch(sampler.d) {
			case 0:
				if(sampler.t == 2) {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, texture2D(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex\n");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 3;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D);
					sb_b += Std.string(dr.toGLSL() + " = texture2D(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
				}
				break;
			case 1:
				if(sampler.t == 2) {
					sr1.sourceMask = 7;
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA);
					sb_b += Std.string("if (" + sampler.toGLSL() + "_alphaEnabled) {\n");
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = vec4(textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + ").xyz, textureCube(" + sampler.toGLSL() + "_alpha, " + sr1.toGLSL() + ").x); // tex + alpha\n");
					sb_b += "\t} else {\n";
					sb_b += Std.string("\t\t" + dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					sb_b += "\t}";
				} else {
					sr1.sourceMask = 7;
					sb_b += Std.string(dr.toGLSL() + " = textureCube(" + sampler.toGLSL() + ", " + sr1.toGLSL() + "); // tex");
					map.addSaR(sampler,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE);
				}
				break;
			}
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			if(samplerState != null) {
				samplerState[sampler.n] = sampler.toSamplerState();
			}
			break;
		case 41:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(greaterThanEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // ste");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 42:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(lessThan(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // slt");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 44:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(equal(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // seq");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		case 45:
			sr1.sourceMask = sr2.sourceMask = 15;
			sb_b += Std.string(dr.toGLSL() + " = vec4(notEqual(" + sr1.toGLSL() + ", " + sr2.toGLSL() + "))" + dr.getWriteMask() + "; // sne");
			map.addDR(dr,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr1,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			map.addSR(sr2,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Opcode " + opcode));
		}
		sb_b += "\n";
	}
	if(openfl_display3D__$internal_AGALConverter.limitedProfile == null) {
		var version = lime_graphics_opengl_GL.context.getParameter(7938);
		openfl_display3D__$internal_AGALConverter.limitedProfile = version.indexOf("OpenGL ES") > -1 || version.indexOf("WebGL") > -1;
	}
	var glsl_b = "";
	glsl_b += Std.string("// AGAL " + (programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "vertex" : "fragment") + " shader\n");
	if(openfl_display3D__$internal_AGALConverter.limitedProfile) {
		glsl_b += "#version 100\n";
		glsl_b += "#ifdef GL_FRAGMENT_PRECISION_HIGH\n";
		glsl_b += "precision highp float;\n";
		glsl_b += "#else\n";
		glsl_b += "precision mediump float;\n";
		glsl_b += "#endif\n";
	} else {
		glsl_b += "#version 120\n";
	}
	glsl_b += Std.string(map.toGLSL(false));
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "uniform vec4 vcPositionScale;\n";
	}
	glsl_b += "void main() {\n";
	glsl_b += Std.string(map.toGLSL(true));
	glsl_b += Std.string(sb_b);
	if(programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
		glsl_b += "\tgl_Position *= vcPositionScale;\n";
	}
	glsl_b += "}\n";
	return glsl_b;
};
var openfl_display3D__$internal__$AGALConverter_DestRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.DestRegister"] = openfl_display3D__$internal__$AGALConverter_DestRegister;
openfl_display3D__$internal__$AGALConverter_DestRegister.__name__ = "openfl.display3D._internal._AGALConverter.DestRegister";
openfl_display3D__$internal__$AGALConverter_DestRegister.parse = function(v,programType) {
	var dr = new openfl_display3D__$internal__$AGALConverter_DestRegister();
	dr.programType = programType;
	dr.type = v >>> 24 & 15;
	dr.mask = v >>> 16 & 15;
	dr.n = v & 65535;
	return dr;
};
openfl_display3D__$internal__$AGALConverter_DestRegister.prototype = {
	getWriteMask: function() {
		var str = ".";
		if((this.mask & 1) != 0) {
			str += "x";
		}
		if((this.mask & 2) != 0) {
			str += "y";
		}
		if((this.mask & 4) != 0) {
			str += "z";
		}
		if((this.mask & 8) != 0) {
			str += "w";
		}
		return str;
	}
	,toGLSL: function(useMask) {
		if(useMask == null) {
			useMask = true;
		}
		var str;
		if(this.type == 3) {
			str = this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX ? "gl_Position" : "gl_FragColor";
		} else {
			str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		}
		if(useMask && this.mask != 15) {
			str += this.getWriteMask();
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_DestRegister
};
var openfl_display3D__$internal__$AGALConverter_ProgramType = $hxEnums["openfl.display3D._internal._AGALConverter.ProgramType"] = { __ename__:"openfl.display3D._internal._AGALConverter.ProgramType",__constructs__:null
	,VERTEX: {_hx_name:"VERTEX",_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
	,FRAGMENT: {_hx_name:"FRAGMENT",_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.ProgramType",toString:$estr}
};
openfl_display3D__$internal__$AGALConverter_ProgramType.__constructs__ = [openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX,openfl_display3D__$internal__$AGALConverter_ProgramType.FRAGMENT];
var openfl_display3D__$internal_RegisterMap = function() {
	this.mEntries = [];
};
$hxClasses["openfl.display3D._internal.RegisterMap"] = openfl_display3D__$internal_RegisterMap;
openfl_display3D__$internal_RegisterMap.__name__ = "openfl.display3D._internal.RegisterMap";
openfl_display3D__$internal_RegisterMap.prototype = {
	add: function(type,name,number,usage) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				if(entry.usage != usage) {
					throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError("Cannot use register in multiple ways yet (mat4/vec4)"));
				}
				return;
			}
		}
		var entry = new openfl_display3D__$internal__$AGALConverter_RegisterMapEntry();
		entry.type = type;
		entry.name = name;
		entry.number = number;
		entry.usage = usage;
		this.mEntries.push(entry);
	}
	,addDR: function(dr,usage) {
		this.add(dr.type,dr.toGLSL(false),dr.n,usage);
	}
	,addSaR: function(sr,usage) {
		this.add(sr.type,sr.toGLSL(),sr.n,usage);
	}
	,addSR: function(sr,usage,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(sr.d != 0) {
			this.add(sr.itype,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.itype,sr.programType) + sr.n,sr.n,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4);
			this.add(sr.type,openfl_display3D__$internal_AGALConverter.prefixFromType(sr.type,sr.programType) + sr.o,sr.o,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY);
			return;
		}
		this.add(sr.type,sr.toGLSL(false,offset),sr.n + offset,usage);
	}
	,getRegisterUsage: function(sr) {
		if(sr.d != 0) {
			return openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY;
		}
		return this.getUsage(sr.type,sr.toGLSL(false),sr.n);
	}
	,getUsage: function(type,name,number) {
		var _g = 0;
		var _g1 = this.mEntries;
		while(_g < _g1.length) {
			var entry = _g1[_g];
			++_g;
			if(entry.type == type && entry.name == name && entry.number == number) {
				return entry.usage;
			}
		}
		return openfl_display3D__$internal__$AGALConverter_RegisterUsage.UNUSED;
	}
	,toGLSL: function(tempRegistersOnly) {
		this.mEntries.sort(function(a,b) {
			return a.number - b.number;
		});
		var entry;
		this.mEntries.sort(function(a,b) {
			return js_Boot.__cast(a.type , Int) - js_Boot.__cast(b.type , Int);
		});
		var sb_b = "";
		var _g = 0;
		var _g1 = this.mEntries.length;
		while(_g < _g1) {
			var i = _g++;
			entry = this.mEntries[i];
			if(tempRegistersOnly && entry.type != 2 || !tempRegistersOnly && entry.type == 2) {
				continue;
			}
			if(entry.type == 3) {
				continue;
			}
			switch(entry.type) {
			case 0:
				sb_b += "attribute ";
				break;
			case 1:
				sb_b += "uniform ";
				break;
			case 2:
				sb_b += "\t";
				break;
			case 3:
				break;
			case 4:
				sb_b += "varying ";
				break;
			case 5:
				sb_b += "uniform ";
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
			}
			switch(entry.usage._hx_index) {
			case 0:
				lime_utils_Log.info("Missing switch patten: RegisterUsage.UNUSED",{ fileName : "openfl/display3D/_internal/AGALConverter.hx", lineNumber : 750, className : "openfl.display3D._internal.RegisterMap", methodName : "toGLSL"});
				break;
			case 1:
				sb_b += "vec4 ";
				break;
			case 2:
				sb_b += "mat4 ";
				break;
			case 3:
				sb_b += "sampler2D ";
				break;
			case 4:
				break;
			case 5:
				sb_b += "samplerCube ";
				break;
			case 6:
				break;
			case 7:
				sb_b += "vec4 ";
				break;
			}
			if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA) {
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "sampler2D ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA) {
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "samplerCube ";
				sb_b += Std.string(entry.name + "_alpha");
				sb_b += ";\n";
				sb_b += "uniform ";
				sb_b += "bool ";
				sb_b += Std.string(entry.name + "_alphaEnabled");
				sb_b += ";\n";
			} else if(entry.usage == openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY) {
				sb_b += Std.string(entry.name + "[128]");
				sb_b += ";\n";
			} else {
				sb_b += Std.string(entry.name);
				sb_b += ";\n";
			}
		}
		return sb_b;
	}
	,__class__: openfl_display3D__$internal_RegisterMap
};
var openfl_display3D__$internal__$AGALConverter_RegisterMapEntry = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.RegisterMapEntry"] = openfl_display3D__$internal__$AGALConverter_RegisterMapEntry;
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.__name__ = "openfl.display3D._internal._AGALConverter.RegisterMapEntry";
openfl_display3D__$internal__$AGALConverter_RegisterMapEntry.prototype = {
	__class__: openfl_display3D__$internal__$AGALConverter_RegisterMapEntry
};
var openfl_display3D__$internal__$AGALConverter_RegisterUsage = $hxEnums["openfl.display3D._internal._AGALConverter.RegisterUsage"] = { __ename__:"openfl.display3D._internal._AGALConverter.RegisterUsage",__constructs__:null
	,UNUSED: {_hx_name:"UNUSED",_hx_index:0,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4: {_hx_name:"VECTOR_4",_hx_index:1,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,MATRIX_4_4: {_hx_name:"MATRIX_4_4",_hx_index:2,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D: {_hx_name:"SAMPLER_2D",_hx_index:3,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_2D_ALPHA: {_hx_name:"SAMPLER_2D_ALPHA",_hx_index:4,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE: {_hx_name:"SAMPLER_CUBE",_hx_index:5,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,SAMPLER_CUBE_ALPHA: {_hx_name:"SAMPLER_CUBE_ALPHA",_hx_index:6,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
	,VECTOR_4_ARRAY: {_hx_name:"VECTOR_4_ARRAY",_hx_index:7,__enum__:"openfl.display3D._internal._AGALConverter.RegisterUsage",toString:$estr}
};
openfl_display3D__$internal__$AGALConverter_RegisterUsage.__constructs__ = [openfl_display3D__$internal__$AGALConverter_RegisterUsage.UNUSED,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4,openfl_display3D__$internal__$AGALConverter_RegisterUsage.MATRIX_4_4,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_2D_ALPHA,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE,openfl_display3D__$internal__$AGALConverter_RegisterUsage.SAMPLER_CUBE_ALPHA,openfl_display3D__$internal__$AGALConverter_RegisterUsage.VECTOR_4_ARRAY];
var openfl_display3D__$internal__$AGALConverter_SamplerRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SamplerRegister"] = openfl_display3D__$internal__$AGALConverter_SamplerRegister;
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__name__ = "openfl.display3D._internal._AGALConverter.SamplerRegister";
openfl_display3D__$internal__$AGALConverter_SamplerRegister.parse = function(v,programType) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SamplerRegister();
	sr.programType = programType;
	var b = 60;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.f = this_low;
	var b = 56;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.m = this_low;
	var b = 52;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.w = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 44;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.t = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.b = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.prototype = {
	toGLSL: function() {
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType) + this.n;
		return str;
	}
	,toSamplerState: function() {
		var wrap;
		var filter;
		var mipfilter;
		switch(this.f) {
		case 0:
			filter = 5;
			break;
		case 1:
			filter = 4;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.m) {
		case 0:
			mipfilter = 2;
			break;
		case 1:
			mipfilter = 1;
			break;
		case 2:
			mipfilter = 0;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		switch(this.w) {
		case 0:
			wrap = 0;
			break;
		case 1:
			wrap = 2;
			break;
		default:
			throw haxe_Exception.thrown(new openfl_errors_IllegalOperationError());
		}
		var ignoreSampler = (this.s & 4) == 4;
		var centroid = (this.s & 1) == 1;
		var textureAlpha = this.t == 2;
		var lodBias = (this.b << 24 >> 24) / 8.0;
		return new openfl_display__$internal_SamplerState(wrap,filter,mipfilter,lodBias,ignoreSampler,centroid,textureAlpha);
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SamplerRegister
};
var openfl_display3D__$internal__$AGALConverter_SourceRegister = function() {
};
$hxClasses["openfl.display3D._internal._AGALConverter.SourceRegister"] = openfl_display3D__$internal__$AGALConverter_SourceRegister;
openfl_display3D__$internal__$AGALConverter_SourceRegister.__name__ = "openfl.display3D._internal._AGALConverter.SourceRegister";
openfl_display3D__$internal__$AGALConverter_SourceRegister.parse = function(v,programType,sourceMask) {
	var sr = new openfl_display3D__$internal__$AGALConverter_SourceRegister();
	sr.programType = programType;
	var b = 63;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 1;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.d = this_low;
	var b = 48;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 3;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.q = this_low;
	var b = 40;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.itype = this_low;
	var b = 32;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 15;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.type = this_low;
	var b = 24;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.s = this_low;
	var b = 16;
	b &= 63;
	var a;
	if(b == 0) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high,v.low);
		a = this1;
	} else if(b < 32) {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> b,v.high << 32 - b | v.low >>> b);
		a = this1;
	} else {
		var this1 = new haxe__$Int64__$_$_$Int64(v.high >> 31,v.high >> b - 32);
		a = this1;
	}
	var b_high = 0;
	var b_low = 255;
	var this_high = a.high & b_high;
	var this_low = a.low & b_low;
	sr.o = this_low;
	var b_high = 0;
	var b_low = 65535;
	var this_high = v.high & b_high;
	var this_low = v.low & b_low;
	sr.n = this_low;
	sr.sourceMask = sourceMask;
	return sr;
};
openfl_display3D__$internal__$AGALConverter_SourceRegister.prototype = {
	toGLSL: function(emitSwizzle,offset) {
		if(offset == null) {
			offset = 0;
		}
		if(emitSwizzle == null) {
			emitSwizzle = true;
		}
		if(this.type == 3) {
			if(this.programType == openfl_display3D__$internal__$AGALConverter_ProgramType.VERTEX) {
				return "gl_Position";
			} else {
				return "gl_FragColor";
			}
		}
		var fullxyzw = this.s == 228 && this.sourceMask == 15;
		var swizzle = "";
		if(this.type != 5 && !fullxyzw) {
			if((this.sourceMask & 1) != 0) {
				switch(this.s & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 2) != 0) {
				switch(this.s >> 2 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 4) != 0) {
				switch(this.s >> 4 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
			if((this.sourceMask & 8) != 0) {
				switch(this.s >> 6 & 3) {
				case 0:
					swizzle += "x";
					break;
				case 1:
					swizzle += "y";
					break;
				case 2:
					swizzle += "z";
					break;
				case 3:
					swizzle += "w";
					break;
				}
			}
		}
		var str = openfl_display3D__$internal_AGALConverter.prefixFromType(this.type,this.programType);
		if(this.d == 0) {
			str += this.n + offset;
		} else {
			str += this.o;
			var indexComponent = "";
			switch(this.q) {
			case 0:
				indexComponent = "x";
				break;
			case 1:
				indexComponent = "y";
				break;
			case 2:
				indexComponent = "z";
				break;
			case 3:
				indexComponent = "w";
				break;
			}
			var indexRegister = openfl_display3D__$internal_AGALConverter.prefixFromType(this.itype,this.programType) + this.n + "." + indexComponent;
			str += "[ int(" + indexRegister + ") +" + offset + "]";
		}
		if(emitSwizzle && swizzle != "") {
			str += "." + swizzle;
		}
		return str;
	}
	,__class__: openfl_display3D__$internal__$AGALConverter_SourceRegister
};
var openfl_display3D__$internal_Context3DState = function() {
	this.backBufferEnableDepthAndStencil = false;
	this.blendDestinationAlphaFactor = 9;
	this.blendSourceAlphaFactor = 2;
	this.blendDestinationRGBFactor = 9;
	this.blendSourceRGBFactor = 2;
	this.colorMaskRed = true;
	this.colorMaskGreen = true;
	this.colorMaskBlue = true;
	this.colorMaskAlpha = true;
	this.culling = 3;
	this.depthCompareMode = 4;
	this.depthMask = true;
	this.samplerStates = [];
	this.scissorRectangle = new openfl_geom_Rectangle();
	this.stencilCompareMode = 0;
	this.stencilDepthFail = 5;
	this.stencilFail = 5;
	this.stencilPass = 5;
	this.stencilReadMask = 255;
	this.stencilReferenceValue = 0;
	this.stencilTriangleFace = 2;
	this.stencilWriteMask = 255;
	this.textures = [];
	this.__frontFaceGLCCW = true;
	this.__glBlendEquation = 32774;
};
$hxClasses["openfl.display3D._internal.Context3DState"] = openfl_display3D__$internal_Context3DState;
openfl_display3D__$internal_Context3DState.__name__ = "openfl.display3D._internal.Context3DState";
openfl_display3D__$internal_Context3DState.prototype = {
	__class__: openfl_display3D__$internal_Context3DState
};
var openfl_display3D_textures_TextureBase = function(context) {
	openfl_events_EventDispatcher.call(this);
	this.__context = context;
	var gl = this.__context.gl;
	this.__textureID = gl.createTexture();
	this.__textureContext = this.__context.__context;
	if(openfl_display3D_textures_TextureBase.__supportsBGRA == null) {
		openfl_display3D_textures_TextureBase.__textureInternalFormat = gl.RGBA;
		var bgraExtension = null;
		if(bgraExtension != null) {
			openfl_display3D_textures_TextureBase.__supportsBGRA = true;
			openfl_display3D_textures_TextureBase.__textureFormat = bgraExtension.BGRA_EXT;
			if(context.__context.type == "opengles") {
				openfl_display3D_textures_TextureBase.__textureInternalFormat = bgraExtension.BGRA_EXT;
			}
		} else {
			openfl_display3D_textures_TextureBase.__supportsBGRA = false;
			openfl_display3D_textures_TextureBase.__textureFormat = gl.RGBA;
		}
		openfl_display3D_textures_TextureBase.__compressedFormats = new haxe_ds_IntMap();
		openfl_display3D_textures_TextureBase.__compressedFormatsAlpha = new haxe_ds_IntMap();
		var dxtExtension = gl.getExtension("WEBGL_compressed_texture_s3tc");
		var etc1Extension = gl.getExtension("WEBGL_compressed_texture_etc1");
		var pvrtcExtension = gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
		if(dxtExtension != null) {
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[0] = v;
			var v = dxtExtension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[0] = v;
		}
		if(etc1Extension != null) {
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[2] = v;
			var v = etc1Extension.COMPRESSED_RGB_ETC1_WEBGL;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[2] = v;
		}
		if(pvrtcExtension != null) {
			var v = pvrtcExtension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormats.h[1] = v;
			var v = pvrtcExtension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
			openfl_display3D_textures_TextureBase.__compressedFormatsAlpha.h[1] = v;
		}
	}
	this.__internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
	this.__format = openfl_display3D_textures_TextureBase.__textureFormat;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = "openfl.display3D.textures.TextureBase";
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	dispose: function() {
		var gl = this.__context.gl;
		if(this.__alphaTexture != null) {
			this.__alphaTexture.dispose();
			this.__alphaTexture = null;
		}
		if(this.__textureID != null) {
			gl.deleteTexture(this.__textureID);
			this.__textureID = null;
		}
		if(this.__glFramebuffer != null) {
			gl.deleteFramebuffer(this.__glFramebuffer);
			this.__glFramebuffer = null;
		}
		if(this.__glDepthRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glDepthRenderbuffer);
			this.__glDepthRenderbuffer = null;
		}
		if(this.__glStencilRenderbuffer != null) {
			gl.deleteRenderbuffer(this.__glStencilRenderbuffer);
			this.__glStencilRenderbuffer = null;
		}
	}
	,__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 201, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
		}
		if(enableDepthAndStencil && this.__glDepthRenderbuffer == null) {
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			if(openfl_display3D_Context3D.__glDepthStencil != 0) {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = this.__glDepthRenderbuffer;
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,openfl_display3D_Context3D.__glDepthStencil,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
			} else {
				this.__glDepthRenderbuffer = gl.createRenderbuffer();
				this.__glStencilRenderbuffer = gl.createRenderbuffer();
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.DEPTH_COMPONENT16,this.__width,this.__height);
				gl.bindRenderbuffer(gl.RENDERBUFFER,this.__glStencilRenderbuffer);
				gl.renderbufferStorage(gl.RENDERBUFFER,gl.STENCIL_INDEX8,this.__width,this.__height);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_ATTACHMENT,gl.RENDERBUFFER,this.__glDepthRenderbuffer);
				gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.__glStencilRenderbuffer);
			}
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.warn("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/TextureBase.hx", lineNumber : 239, className : "openfl.display3D.textures.TextureBase", methodName : "__getGLFramebuffer"});
				}
			}
			gl.bindRenderbuffer(gl.RENDERBUFFER,null);
		}
		return this.__glFramebuffer;
	}
	,__getTexture: function() {
		return this.__textureID;
	}
	,__setSamplerState: function(state) {
		if(!state.equals(this.__samplerState)) {
			var gl = this.__context.gl;
			if(this.__textureTarget == this.__context.gl.TEXTURE_CUBE_MAP) {
				this.__context.__bindGLTextureCubeMap(this.__textureID);
			} else {
				this.__context.__bindGLTexture2D(this.__textureID);
			}
			var wrapModeS = 0;
			var wrapModeT = 0;
			switch(state.wrap) {
			case 0:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			case 1:
				wrapModeS = gl.CLAMP_TO_EDGE;
				wrapModeT = gl.REPEAT;
				break;
			case 2:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.REPEAT;
				break;
			case 3:
				wrapModeS = gl.REPEAT;
				wrapModeT = gl.CLAMP_TO_EDGE;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("wrap bad enum"));
			}
			var magFilter = 0;
			var minFilter = 0;
			if(state.filter == 5) {
				magFilter = gl.NEAREST;
			} else {
				magFilter = gl.LINEAR;
			}
			switch(state.mipfilter) {
			case 0:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_LINEAR;
				break;
			case 1:
				minFilter = state.filter == 5 ? gl.NEAREST_MIPMAP_NEAREST : gl.LINEAR_MIPMAP_NEAREST;
				break;
			case 2:
				minFilter = state.filter == 5 ? gl.NEAREST : gl.LINEAR;
				break;
			default:
				throw haxe_Exception.thrown(new openfl_errors_Error("mipfiter bad enum"));
			}
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MIN_FILTER,minFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_MAG_FILTER,magFilter);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_S,wrapModeS);
			gl.texParameteri(this.__textureTarget,gl.TEXTURE_WRAP_T,wrapModeT);
			var tmp = state.lodBias != 0.0;
			if(this.__samplerState == null) {
				this.__samplerState = state.clone();
			}
			this.__samplerState.copyFrom(state);
			return true;
		}
		return false;
	}
	,__uploadFromImage: function(image) {
		var gl = this.__context.gl;
		var internalFormat;
		var format;
		if(this.__textureTarget != gl.TEXTURE_2D) {
			return;
		}
		if(image.buffer.bitsPerPixel == 1) {
			internalFormat = gl.ALPHA;
			format = gl.ALPHA;
		} else {
			internalFormat = openfl_display3D_textures_TextureBase.__textureInternalFormat;
			format = openfl_display3D_textures_TextureBase.__textureFormat;
		}
		this.__context.__bindGLTexture2D(this.__textureID);
		if(image.type != lime_graphics_ImageType.DATA && !image.get_premultiplied()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		} else if(!image.get_premultiplied() && image.get_transparent()) {
			gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1);
		}
		if(image.type == lime_graphics_ImageType.DATA) {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,image.buffer.width,image.buffer.height,0,format,gl.UNSIGNED_BYTE,image.get_data());
		} else {
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,image.get_src());
		}
		this.__context.__bindGLTexture2D(null);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,size,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__size = size;
	this.__width = this.__height = this.__size;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	this.__textureTarget = this.__context.gl.TEXTURE_CUBE_MAP;
	this.__uploadedSides = 0;
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = "openfl.display3D.textures.CubeTexture";
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__getGLFramebuffer: function(enableDepthAndStencil,antiAlias,surfaceSelector) {
		var gl = this.__context.gl;
		if(this.__glFramebuffer == null) {
			this.__glFramebuffer = gl.createFramebuffer();
			this.__framebufferSurface = -1;
		}
		if(this.__framebufferSurface != surfaceSelector) {
			this.__framebufferSurface = surfaceSelector;
			this.__context.__bindGLFramebuffer(this.__glFramebuffer);
			gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_CUBE_MAP_POSITIVE_X + surfaceSelector,this.__textureID,0);
			if(this.__context.__enableErrorChecking) {
				var code = gl.checkFramebufferStatus(gl.FRAMEBUFFER);
				if(code != gl.FRAMEBUFFER_COMPLETE) {
					lime_utils_Log.error("Error: Context3D.setRenderToTexture status:" + code + " width:" + this.__width + " height:" + this.__height,{ fileName : "openfl/display3D/textures/CubeTexture.hx", lineNumber : 278, className : "openfl.display3D.textures.CubeTexture", methodName : "__getGLFramebuffer"});
				}
			}
		}
		return openfl_display3D_textures_TextureBase.prototype.__getGLFramebuffer.call(this,enableDepthAndStencil,antiAlias,surfaceSelector);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_CUBE_MAP);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_CUBE_MAP,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,width,height,format,optimizeForRenderToTexture) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
	this.uploadFromTypedArray(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = "openfl.display3D.textures.RectangleTexture";
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	uploadFromTypedArray: function(data) {
		var gl = this.__context.gl;
		this.__context.__bindGLTexture2D(this.__textureID);
		lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,data);
		this.__context.__bindGLTexture2D(null);
	}
	,__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,width,height,format,optimizeForRenderToTexture,streamingLevels) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__width = width;
	this.__height = height;
	this.__optimizeForRenderToTexture = optimizeForRenderToTexture;
	this.__streamingLevels = streamingLevels;
	var gl = this.__context.gl;
	this.__textureTarget = gl.TEXTURE_2D;
	this.__context.__bindGLTexture2D(this.__textureID);
	lime_graphics_WebGLRenderContext.texImage2D(gl,this.__textureTarget,0,this.__internalFormat,this.__width,this.__height,0,this.__format,gl.UNSIGNED_BYTE,null);
	this.__context.__bindGLTexture2D(null);
	if(optimizeForRenderToTexture) {
		this.__getGLFramebuffer(true,0,0);
	}
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = "openfl.display3D.textures.Texture";
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	__setSamplerState: function(state) {
		if(openfl_display3D_textures_TextureBase.prototype.__setSamplerState.call(this,state)) {
			var gl = this.__context.gl;
			if(state.mipfilter != 2 && !this.__samplerState.mipmapGenerated) {
				gl.generateMipmap(gl.TEXTURE_2D);
				this.__samplerState.mipmapGenerated = true;
			}
			if(openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy != 0) {
				var aniso;
				switch(state.filter) {
				case 0:
					aniso = 16;
					break;
				case 1:
					aniso = 2;
					break;
				case 2:
					aniso = 4;
					break;
				case 3:
					aniso = 8;
					break;
				default:
					aniso = 1;
				}
				if(aniso > openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy) {
					aniso = openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy;
				}
				gl.texParameterf(gl.TEXTURE_2D,openfl_display3D_Context3D.__glTextureMaxAnisotropy,aniso);
			}
			return true;
		}
		return false;
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_display3D_textures_VideoTexture = function(context) {
	openfl_display3D_textures_TextureBase.call(this,context);
	this.__textureTarget = this.__context.gl.TEXTURE_2D;
};
$hxClasses["openfl.display3D.textures.VideoTexture"] = openfl_display3D_textures_VideoTexture;
openfl_display3D_textures_VideoTexture.__name__ = "openfl.display3D.textures.VideoTexture";
openfl_display3D_textures_VideoTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_VideoTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	dispose: function() {
		if(this.__netStream != null && this.__netStream.__video != null) {
			this.__netStream.__video.removeEventListener("timeupdate",$bind(this,this.__onTimeUpdate));
		}
		openfl_display3D_textures_TextureBase.prototype.dispose.call(this);
	}
	,__onTimeUpdate: function(_) {
		if(this.__netStream != null && this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			this.__textureReady();
		}
	}
	,__getTexture: function() {
		if(this.__netStream.__video.currentTime != this.__cacheTime && this.__netStream.__video.readyState >= 2) {
			var gl = this.__context.gl;
			this.__context.__bindGLTexture2D(this.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,gl.RGBA,gl.RGBA,gl.UNSIGNED_BYTE,this.__netStream.__video);
			this.__cacheTime = this.__netStream.__video.currentTime;
		}
		return this.__textureID;
	}
	,__textureReady: function() {
		this.videoWidth = this.__netStream.__video.videoWidth;
		this.videoHeight = this.__netStream.__video.videoHeight;
		var event = null;
		event = new openfl_events_Event("textureReady");
		this.dispatchEvent(event);
	}
	,__class__: openfl_display3D_textures_VideoTexture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = "openfl.errors.Error";
openfl_errors_Error.prototype = {
	toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = "openfl.errors.ArgumentError";
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = "openfl.errors.IOError";
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function(message,id) {
	if(id == null) {
		id = 0;
	}
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = "openfl.errors.EOFError";
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_IllegalOperationError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "IllegalOperationError";
};
$hxClasses["openfl.errors.IllegalOperationError"] = openfl_errors_IllegalOperationError;
openfl_errors_IllegalOperationError.__name__ = "openfl.errors.IllegalOperationError";
openfl_errors_IllegalOperationError.__super__ = openfl_errors_Error;
openfl_errors_IllegalOperationError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IllegalOperationError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = "openfl.errors.RangeError";
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = "openfl.errors.TypeError";
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = "openfl.events.ActivityEvent";
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = "openfl.events.TextEvent";
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = "openfl.events.ErrorEvent";
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_DispatchIterator = function(list) {
	this.active = false;
	this.reset(list);
};
$hxClasses["openfl.events._EventDispatcher.DispatchIterator"] = openfl_events__$EventDispatcher_DispatchIterator;
openfl_events__$EventDispatcher_DispatchIterator.__name__ = "openfl.events._EventDispatcher.DispatchIterator";
openfl_events__$EventDispatcher_DispatchIterator.prototype = {
	copy: function() {
		if(!this.isCopy) {
			this.list = this.list.slice();
			this.isCopy = true;
		}
	}
	,hasNext: function() {
		return this.index < this.list.length;
	}
	,next: function() {
		return this.list[this.index++];
	}
	,remove: function(listener,listIndex) {
		if(this.active) {
			if(!this.isCopy) {
				if(listIndex < this.index) {
					this.index--;
				}
			} else {
				var _g = this.index;
				var _g1 = this.list.length;
				while(_g < _g1) {
					var i = _g++;
					if(this.list[i] == listener) {
						this.list.splice(i,1);
						break;
					}
				}
			}
		}
	}
	,reset: function(list) {
		this.list = list;
		this.isCopy = false;
		this.index = 0;
	}
	,start: function() {
		this.active = true;
	}
	,stop: function() {
		this.active = false;
	}
	,__class__: openfl_events__$EventDispatcher_DispatchIterator
};
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = "openfl.events._EventDispatcher.Listener";
openfl_events__$EventDispatcher_Listener.prototype = {
	match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = "openfl.events.FocusEvent";
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = "openfl.events.FullScreenEvent";
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = "openfl.events.GameInputEvent";
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = "openfl.events.HTTPStatusEvent";
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = "openfl.events.IOErrorEvent";
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null ? keyLocationValue : 0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = "openfl.events.KeyboardEvent";
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
	this.isRelatedObjectInaccessible = false;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = "openfl.events.MouseEvent";
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = "openfl.events.NetStatusEvent";
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = "openfl.events.ProgressEvent";
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_ProgressEvent
});
var openfl_events_RenderEvent = function(type,bubbles,cancelable,objectMatrix,objectColorTransform,allowSmoothing) {
	if(allowSmoothing == null) {
		allowSmoothing = true;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.objectMatrix = objectMatrix;
	this.objectColorTransform = objectColorTransform;
	this.allowSmoothing = allowSmoothing;
};
$hxClasses["openfl.events.RenderEvent"] = openfl_events_RenderEvent;
openfl_events_RenderEvent.__name__ = "openfl.events.RenderEvent";
openfl_events_RenderEvent.__super__ = openfl_events_Event;
openfl_events_RenderEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_RenderEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = "openfl.events.SecurityErrorEvent";
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TimerEvent = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.TimerEvent"] = openfl_events_TimerEvent;
openfl_events_TimerEvent.__name__ = "openfl.events.TimerEvent";
openfl_events_TimerEvent.__super__ = openfl_events_Event;
openfl_events_TimerEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TimerEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
	this.stageX = NaN;
	this.stageY = NaN;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = "openfl.events.TouchEvent";
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	__class__: openfl_events_TouchEvent
});
var openfl_events_UncaughtErrorEvent = function(type,bubbles,cancelable,error) {
	if(cancelable == null) {
		cancelable = true;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable);
	this.error = error;
};
$hxClasses["openfl.events.UncaughtErrorEvent"] = openfl_events_UncaughtErrorEvent;
openfl_events_UncaughtErrorEvent.__name__ = "openfl.events.UncaughtErrorEvent";
openfl_events_UncaughtErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_UncaughtErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	__class__: openfl_events_UncaughtErrorEvent
});
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = "openfl.events.UncaughtErrorEvents";
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_filters_BitmapFilter = function() {
	this.__bottomExtension = 0;
	this.__leftExtension = 0;
	this.__needSecondBitmapData = true;
	this.__numShaderPasses = 0;
	this.__preserveObject = false;
	this.__rightExtension = 0;
	this.__shaderBlendMode = 10;
	this.__topExtension = 0;
	this.__smooth = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = "openfl.filters.BitmapFilter";
openfl_filters_BitmapFilter.prototype = {
	__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass,sourceBitmapData) {
		return null;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BitmapFilterShader = function(code) {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "varying vec2 openfl_TextureCoordv;\n\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\tgl_FragColor = texture2D (openfl_Texture, openfl_TextureCoordv);\n\n\t\t}";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tvarying vec2 openfl_TextureCoordv;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tvoid main(void) {\n\n\t\t\topenfl_TextureCoordv = openfl_TextureCoord;\n\n\t\tgl_Position = openfl_Matrix * openfl_Position;\n\n\t\t}";
	}
	openfl_display_Shader.call(this,code);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters.BitmapFilterShader"] = openfl_filters_BitmapFilterShader;
openfl_filters_BitmapFilterShader.__name__ = "openfl.filters.BitmapFilterShader";
openfl_filters_BitmapFilterShader.__super__ = openfl_display_Shader;
openfl_filters_BitmapFilterShader.prototype = $extend(openfl_display_Shader.prototype,{
	__class__: openfl_filters_BitmapFilterShader
});
var openfl_filters__$DropShadowFilter_HideShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_FragColor = texture2D(openfl_Texture, textureCoords.zw);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.offset.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._DropShadowFilter.HideShader"] = openfl_filters__$DropShadowFilter_HideShader;
openfl_filters__$DropShadowFilter_HideShader.__name__ = "openfl.filters._DropShadowFilter.HideShader";
openfl_filters__$DropShadowFilter_HideShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$DropShadowFilter_HideShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$DropShadowFilter_HideShader
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__offsetX = 0;
	this.__offsetY = 0;
	this.__distance = distance;
	this.__angle = angle;
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__quality = quality;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__hideObject = hideObject;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = "openfl.filters.DropShadowFilter";
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var point = new openfl_geom_Point(destPoint.x + this.__offsetX,destPoint.y + this.__offsetY);
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),point.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass,sourceBitmapData) {
		if(this.__inner && pass == 0) {
			return openfl_filters_GlowFilter.__invertAlphaShader;
		}
		var blurPass = pass - (this.__inner ? 1 : 0);
		var numBlurPasses = this.__horizontalPasses + this.__verticalPasses;
		if(blurPass < numBlurPasses) {
			var shader = openfl_filters_GlowFilter.__blurAlphaShader;
			if(blurPass < this.__horizontalPasses) {
				var scale = Math.pow(0.5,blurPass >> 1) * 0.5;
				shader.uRadius.value[0] = this.get_blurX() * scale;
				shader.uRadius.value[1] = 0;
			} else {
				var scale = Math.pow(0.5,blurPass - this.__horizontalPasses >> 1) * 0.5;
				shader.uRadius.value[0] = 0;
				shader.uRadius.value[1] = this.get_blurY() * scale;
			}
			shader.uColor.value[0] = (this.get_color() >> 16 & 255) / 255;
			shader.uColor.value[1] = (this.get_color() >> 8 & 255) / 255;
			shader.uColor.value[2] = (this.get_color() & 255) / 255;
			shader.uColor.value[3] = this.get_alpha();
			shader.uStrength.value[0] = blurPass == numBlurPasses - 1 ? this.__strength : 1.0;
			return shader;
		}
		if(this.__inner) {
			if(this.__knockout || this.__hideObject) {
				var shader = openfl_filters_GlowFilter.__innerCombineKnockoutShader;
				shader.sourceBitmap.input = sourceBitmapData;
				shader.offset.value[0] = this.__offsetX;
				shader.offset.value[1] = this.__offsetY;
				return shader;
			}
			var shader = openfl_filters_GlowFilter.__innerCombineShader;
			shader.sourceBitmap.input = sourceBitmapData;
			shader.offset.value[0] = this.__offsetX;
			shader.offset.value[1] = this.__offsetY;
			return shader;
		} else {
			if(this.__knockout) {
				var shader = openfl_filters_GlowFilter.__combineKnockoutShader;
				shader.sourceBitmap.input = sourceBitmapData;
				shader.offset.value[0] = this.__offsetX;
				shader.offset.value[1] = this.__offsetY;
				return shader;
			} else if(this.__hideObject) {
				var shader = openfl_filters_DropShadowFilter.__hideShader;
				shader.sourceBitmap.input = sourceBitmapData;
				shader.offset.value[0] = this.__offsetX;
				shader.offset.value[1] = this.__offsetY;
				return shader;
			}
			var shader = openfl_filters_GlowFilter.__combineShader;
			shader.sourceBitmap.input = sourceBitmapData;
			shader.offset.value[0] = this.__offsetX;
			shader.offset.value[1] = this.__offsetY;
			return shader;
		}
	}
	,__updateSize: function() {
		this.__offsetX = this.__distance * Math.cos(this.__angle * Math.PI / 180) | 0;
		this.__offsetY = this.__distance * Math.sin(this.__angle * Math.PI / 180) | 0;
		this.__topExtension = Math.ceil((this.__offsetY < 0 ? -this.__offsetY : 0) + this.__blurY);
		this.__bottomExtension = Math.ceil((this.__offsetY > 0 ? this.__offsetY : 0) + this.__blurY);
		this.__leftExtension = Math.ceil((this.__offsetX < 0 ? -this.__offsetX : 0) + this.__blurX);
		this.__rightExtension = Math.ceil((this.__offsetX > 0 ? this.__offsetX : 0) + this.__blurX);
		this.__calculateNumShaderPasses();
	}
	,__calculateNumShaderPasses: function() {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (this.__quality / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (this.__quality / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses + (this.__inner ? 2 : 1);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,get_color: function() {
		return this.__color;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {get_color:"get_color",get_blurY:"get_blurY",get_blurX:"get_blurX",get_alpha:"get_alpha"}
});
var openfl_filters__$GlowFilter_BlurAlphaShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform vec4 uColor;\n\t\tuniform float uStrength;\n\t\tvarying vec2 vTexCoord;\n\t\tvarying vec2 vBlurCoords[6];\n\n\t\tvoid main(void)\n\t\t{\n            vec4 texel = texture2D(openfl_Texture, vTexCoord);\n\n            vec3 contributions = vec3(0.00443, 0.05399, 0.24197);\n            vec3 top = vec3(\n                texture2D(openfl_Texture, vBlurCoords[0]).a,\n                texture2D(openfl_Texture, vBlurCoords[1]).a,\n                texture2D(openfl_Texture, vBlurCoords[2]).a\n            );\n            vec3 bottom = vec3(\n                texture2D(openfl_Texture, vBlurCoords[3]).a,\n                texture2D(openfl_Texture, vBlurCoords[4]).a,\n                texture2D(openfl_Texture, vBlurCoords[5]).a\n            );\n\n            float a = texel.a * 0.39894;\n\t\t\ta += dot(top, contributions.xyz);\n            a += dot(bottom, contributions.zyx);\n\n\t\t\tgl_FragColor = uColor * clamp(a * uStrength, 0.0, 1.0);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\n\t\tuniform vec2 uRadius;\n\t\tvarying vec2 vTexCoord;\n\t\tvarying vec2 vBlurCoords[6];\n\n\t\tvoid main(void) {\n\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\tvTexCoord = openfl_TextureCoord;\n\n\t\t\tvec3 offset = vec3(0.5, 0.75, 1.0);\n\t\t\tvec2 r = uRadius / openfl_TextureSize;\n\t\t\tvBlurCoords[0] = openfl_TextureCoord - r * offset.z;\n\t\t\tvBlurCoords[1] = openfl_TextureCoord - r * offset.y;\n\t\t\tvBlurCoords[2] = openfl_TextureCoord - r * offset.x;\n\t\t\tvBlurCoords[3] = openfl_TextureCoord + r * offset.x;\n\t\t\tvBlurCoords[4] = openfl_TextureCoord + r * offset.y;\n\t\t\tvBlurCoords[5] = openfl_TextureCoord + r * offset.z;\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.uRadius.value = [0,0];
	this.uColor.value = [0,0,0,0];
	this.uStrength.value = [1];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.BlurAlphaShader"] = openfl_filters__$GlowFilter_BlurAlphaShader;
openfl_filters__$GlowFilter_BlurAlphaShader.__name__ = "openfl.filters._GlowFilter.BlurAlphaShader";
openfl_filters__$GlowFilter_BlurAlphaShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_BlurAlphaShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_BlurAlphaShader
});
var openfl_filters__$GlowFilter_CombineKnockoutShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = glow * (1.0 - src.a);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.offset.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.CombineKnockoutShader"] = openfl_filters__$GlowFilter_CombineKnockoutShader;
openfl_filters__$GlowFilter_CombineKnockoutShader.__name__ = "openfl.filters._GlowFilter.CombineKnockoutShader";
openfl_filters__$GlowFilter_CombineKnockoutShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_CombineKnockoutShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_CombineKnockoutShader
});
var openfl_filters__$GlowFilter_CombineShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = src + glow * (1.0 - src.a);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.offset.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.CombineShader"] = openfl_filters__$GlowFilter_CombineShader;
openfl_filters__$GlowFilter_CombineShader.__name__ = "openfl.filters._GlowFilter.CombineShader";
openfl_filters__$GlowFilter_CombineShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_CombineShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_CombineShader
});
var openfl_filters__$GlowFilter_InnerCombineKnockoutShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = glow * src.a;\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.offset.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.InnerCombineKnockoutShader"] = openfl_filters__$GlowFilter_InnerCombineKnockoutShader;
openfl_filters__$GlowFilter_InnerCombineKnockoutShader.__name__ = "openfl.filters._GlowFilter.InnerCombineKnockoutShader";
openfl_filters__$GlowFilter_InnerCombineKnockoutShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_InnerCombineKnockoutShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_InnerCombineKnockoutShader
});
var openfl_filters__$GlowFilter_InnerCombineShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tuniform sampler2D sourceBitmap;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tvec4 src = texture2D(sourceBitmap, textureCoords.xy);\n\t\t\tvec4 glow = texture2D(openfl_Texture, textureCoords.zw);\n\n\t\t\tgl_FragColor = vec4((src.rgb * (1.0 - glow.a)) + (glow.rgb * src.a), src.a);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "attribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tuniform vec2 openfl_TextureSize;\n\t\tuniform vec2 offset;\n\t\tvarying vec4 textureCoords;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\ttextureCoords = vec4(openfl_TextureCoord, openfl_TextureCoord - offset / openfl_TextureSize);\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.offset.value = [0,0];
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.InnerCombineShader"] = openfl_filters__$GlowFilter_InnerCombineShader;
openfl_filters__$GlowFilter_InnerCombineShader.__name__ = "openfl.filters._GlowFilter.InnerCombineShader";
openfl_filters__$GlowFilter_InnerCombineShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_InnerCombineShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_InnerCombineShader
});
var openfl_filters__$GlowFilter_InvertAlphaShader = function() {
	if(this.__glFragmentSource == null) {
		this.__glFragmentSource = "\n\t\tuniform sampler2D openfl_Texture;\n\t\tvarying vec2 vTexCoord;\n\n\t\tvoid main(void) {\n\t\t\tvec4 texel = texture2D(openfl_Texture, vTexCoord);\n\t\t\tgl_FragColor = vec4(texel.rgb, 1.0 - texel.a);\n\t\t}\n\t";
	}
	if(this.__glVertexSource == null) {
		this.__glVertexSource = "\n\t\tattribute vec4 openfl_Position;\n\t\tattribute vec2 openfl_TextureCoord;\n\t\tuniform mat4 openfl_Matrix;\n\t\tvarying vec2 vTexCoord;\n\n\t\tvoid main(void) {\n\t\t\tgl_Position = openfl_Matrix * openfl_Position;\n\t\t\tvTexCoord = openfl_TextureCoord;\n\t\t}\n\t";
	}
	openfl_filters_BitmapFilterShader.call(this);
	this.__isGenerated = true;
	this.__initGL();
};
$hxClasses["openfl.filters._GlowFilter.InvertAlphaShader"] = openfl_filters__$GlowFilter_InvertAlphaShader;
openfl_filters__$GlowFilter_InvertAlphaShader.__name__ = "openfl.filters._GlowFilter.InvertAlphaShader";
openfl_filters__$GlowFilter_InvertAlphaShader.__super__ = openfl_filters_BitmapFilterShader;
openfl_filters__$GlowFilter_InvertAlphaShader.prototype = $extend(openfl_filters_BitmapFilterShader.prototype,{
	__class__: openfl_filters__$GlowFilter_InvertAlphaShader
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.__color = color;
	this.__alpha = alpha;
	this.__blurX = blurX;
	this.__blurY = blurY;
	this.__strength = strength;
	this.__inner = inner;
	this.__knockout = knockout;
	this.__quality = quality;
	this.__updateSize();
	this.__needSecondBitmapData = true;
	this.__preserveObject = true;
	this.__renderDirty = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = "openfl.filters.GlowFilter";
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	__applyFilter: function(bitmapData,sourceBitmapData,sourceRect,destPoint) {
		var r = this.__color >> 16 & 255;
		var g = this.__color >> 8 & 255;
		var b = this.__color & 255;
		var finalImage = lime__$internal_graphics_ImageDataUtil.gaussianBlur(bitmapData.image,sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),this.__blurX,this.__blurY,this.__quality,this.__strength);
		finalImage.colorTransform(finalImage.get_rect(),new openfl_geom_ColorTransform(0,0,0,this.__alpha,r,g,b,0).__toLimeColorMatrix());
		if(finalImage == bitmapData.image) {
			return bitmapData;
		}
		return sourceBitmapData;
	}
	,__initShader: function(renderer,pass,sourceBitmapData) {
		if(this.__inner && pass == 0) {
			return openfl_filters_GlowFilter.__invertAlphaShader;
		}
		var blurPass = pass - (this.__inner ? 1 : 0);
		var numBlurPasses = this.__horizontalPasses + this.__verticalPasses;
		if(blurPass < numBlurPasses) {
			var shader = openfl_filters_GlowFilter.__blurAlphaShader;
			if(blurPass < this.__horizontalPasses) {
				var scale = Math.pow(0.5,blurPass >> 1) * 0.5;
				shader.uRadius.value[0] = this.get_blurX() * scale;
				shader.uRadius.value[1] = 0;
			} else {
				var scale = Math.pow(0.5,blurPass - this.__horizontalPasses >> 1) * 0.5;
				shader.uRadius.value[0] = 0;
				shader.uRadius.value[1] = this.get_blurY() * scale;
			}
			shader.uColor.value[0] = (this.get_color() >> 16 & 255) / 255;
			shader.uColor.value[1] = (this.get_color() >> 8 & 255) / 255;
			shader.uColor.value[2] = (this.get_color() & 255) / 255;
			shader.uColor.value[3] = this.get_alpha();
			shader.uStrength.value[0] = blurPass == numBlurPasses - 1 ? this.__strength : 1.0;
			return shader;
		}
		if(this.__inner) {
			if(this.__knockout) {
				var shader = openfl_filters_GlowFilter.__innerCombineKnockoutShader;
				shader.sourceBitmap.input = sourceBitmapData;
				shader.offset.value[0] = 0.0;
				shader.offset.value[1] = 0.0;
				return shader;
			}
			var shader = openfl_filters_GlowFilter.__innerCombineShader;
			shader.sourceBitmap.input = sourceBitmapData;
			shader.offset.value[0] = 0.0;
			shader.offset.value[1] = 0.0;
			return shader;
		} else {
			if(this.__knockout) {
				var shader = openfl_filters_GlowFilter.__combineKnockoutShader;
				shader.sourceBitmap.input = sourceBitmapData;
				shader.offset.value[0] = 0.0;
				shader.offset.value[1] = 0.0;
				return shader;
			}
			var shader = openfl_filters_GlowFilter.__combineShader;
			shader.sourceBitmap.input = sourceBitmapData;
			shader.offset.value[0] = 0.0;
			shader.offset.value[1] = 0.0;
			return shader;
		}
	}
	,__updateSize: function() {
		this.__leftExtension = this.__blurX > 0 ? Math.ceil(this.__blurX * 1.5) : 0;
		this.__rightExtension = this.__leftExtension;
		this.__topExtension = this.__blurY > 0 ? Math.ceil(this.__blurY * 1.5) : 0;
		this.__bottomExtension = this.__topExtension;
		this.__calculateNumShaderPasses();
	}
	,__calculateNumShaderPasses: function() {
		this.__horizontalPasses = this.__blurX <= 0 ? 0 : Math.round(this.__blurX * (this.__quality / 4)) + 1;
		this.__verticalPasses = this.__blurY <= 0 ? 0 : Math.round(this.__blurY * (this.__quality / 4)) + 1;
		this.__numShaderPasses = this.__horizontalPasses + this.__verticalPasses + (this.__inner ? 2 : 1);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,get_blurX: function() {
		return this.__blurX;
	}
	,get_blurY: function() {
		return this.__blurY;
	}
	,get_color: function() {
		return this.__color;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {get_color:"get_color",get_blurY:"get_blurY",get_blurX:"get_blurX",get_alpha:"get_alpha"}
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.get_length() == 16) {
		this.rawData = v.concat(null);
	} else {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = "openfl.geom.Matrix3D";
openfl_geom_Matrix3D.prototype = {
	append: function(lhs) {
		var m111 = this.rawData.get(0);
		var m121 = this.rawData.get(4);
		var m131 = this.rawData.get(8);
		var m141 = this.rawData.get(12);
		var m112 = this.rawData.get(1);
		var m122 = this.rawData.get(5);
		var m132 = this.rawData.get(9);
		var m142 = this.rawData.get(13);
		var m113 = this.rawData.get(2);
		var m123 = this.rawData.get(6);
		var m133 = this.rawData.get(10);
		var m143 = this.rawData.get(14);
		var m114 = this.rawData.get(3);
		var m124 = this.rawData.get(7);
		var m134 = this.rawData.get(11);
		var m144 = this.rawData.get(15);
		var m211 = lhs.rawData.get(0);
		var m221 = lhs.rawData.get(4);
		var m231 = lhs.rawData.get(8);
		var m241 = lhs.rawData.get(12);
		var m212 = lhs.rawData.get(1);
		var m222 = lhs.rawData.get(5);
		var m232 = lhs.rawData.get(9);
		var m242 = lhs.rawData.get(13);
		var m213 = lhs.rawData.get(2);
		var m223 = lhs.rawData.get(6);
		var m233 = lhs.rawData.get(10);
		var m243 = lhs.rawData.get(14);
		var m214 = lhs.rawData.get(3);
		var m224 = lhs.rawData.get(7);
		var m234 = lhs.rawData.get(11);
		var m244 = lhs.rawData.get(15);
		this.rawData.set(0,m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241);
		this.rawData.set(1,m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242);
		this.rawData.set(2,m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243);
		this.rawData.set(3,m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244);
		this.rawData.set(4,m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241);
		this.rawData.set(5,m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242);
		this.rawData.set(6,m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243);
		this.rawData.set(7,m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244);
		this.rawData.set(8,m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241);
		this.rawData.set(9,m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242);
		this.rawData.set(10,m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243);
		this.rawData.set(11,m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244);
		this.rawData.set(12,m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241);
		this.rawData.set(13,m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242);
		this.rawData.set(14,m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243);
		this.rawData.set(15,m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244);
	}
	,appendTranslation: function(x,y,z) {
		var _g = this.rawData;
		_g.set(12,_g.get(12) + x);
		var _g = this.rawData;
		_g.set(13,_g.get(13) + y);
		var _g = this.rawData;
		_g.set(14,_g.get(14) + z);
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.get_length() - index;
		var _g = 0;
		var _g1 = length;
		while(_g < _g1) {
			var i = _g++;
			this.rawData.set(i,vector.get(i + index));
		}
		if(transpose) {
			this.transpose();
		}
	}
	,identity: function() {
		this.rawData = openfl_Vector.toFloatVector(null,null,null,[1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0]);
	}
	,transpose: function() {
		var oRawData = this.rawData.copy();
		this.rawData.set(1,oRawData.get(4));
		this.rawData.set(2,oRawData.get(8));
		this.rawData.set(3,oRawData.get(12));
		this.rawData.set(4,oRawData.get(1));
		this.rawData.set(6,oRawData.get(9));
		this.rawData.set(7,oRawData.get(13));
		this.rawData.set(8,oRawData.get(2));
		this.rawData.set(9,oRawData.get(6));
		this.rawData.set(11,oRawData.get(14));
		this.rawData.set(12,oRawData.get(3));
		this.rawData.set(13,oRawData.get(7));
		this.rawData.set(14,oRawData.get(11));
	}
	,__class__: openfl_geom_Matrix3D
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = "openfl.geom.Transform";
openfl_geom_Transform.prototype = {
	get_colorTransform: function() {
		return this.__colorTransform.__clone();
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value,false)) {
			this.__colorTransform.__copyFrom(value);
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__renderDirty = true;
				_this.__setParentRenderDirty();
			}
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			this.__setTransform(value.a,value.b,value.c,value.d,value.tx,value.ty);
		}
		return value;
	}
	,__setTransform: function(a,b,c,d,tx,ty) {
		if(this.__displayObject != null) {
			var transform = this.__displayObject.__transform;
			if(transform.a == a && transform.b == b && transform.c == c && transform.d == d && transform.tx == tx && transform.ty == ty) {
				return;
			}
			var scaleX = 0.0;
			var scaleY = 0.0;
			if(b == 0) {
				scaleX = a;
			} else {
				scaleX = Math.sqrt(a * a + b * b);
			}
			if(c == 0) {
				scaleY = d;
			} else {
				scaleY = Math.sqrt(c * c + d * d);
			}
			this.__displayObject.__scaleX = scaleX;
			this.__displayObject.__scaleY = scaleY;
			var rotation = 180 / Math.PI * Math.atan2(d,c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			transform.a = a;
			transform.b = b;
			transform.c = c;
			transform.d = d;
			transform.tx = tx;
			transform.ty = ty;
			this.__displayObject.__setTransformDirty();
		}
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix:"set_matrix",get_matrix:"get_matrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = "openfl.media.Sound";
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	load: function(stream,context) {
		var _gthis = this;
		this.url = stream.url;
		var defaultLibrary = lime_utils_Assets.getLibrary("default");
		if(defaultLibrary != null && Object.prototype.hasOwnProperty.call(defaultLibrary.cachedAudioBuffers.h,this.url)) {
			this.AudioBuffer_onURLLoad(defaultLibrary.cachedAudioBuffers.h[this.url]);
		} else {
			lime_media_AudioBuffer.loadFromFile(this.url).onComplete($bind(this,this.AudioBuffer_onURLLoad)).onError(function(_) {
				_gthis.AudioBuffer_onURLLoad(null);
			});
		}
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(this.__buffer == null || openfl_media_SoundMixer.__soundChannels.length >= 32) {
			return null;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform();
		} else {
			sndTransform = sndTransform.clone();
		}
		var pan = openfl_media_SoundMixer.__soundTransform.pan + sndTransform.pan;
		if(pan > 1) {
			pan = 1;
		}
		if(pan < -1) {
			pan = -1;
		}
		var volume = openfl_media_SoundMixer.__soundTransform.volume * sndTransform.volume;
		var source = new lime_media_AudioSource(this.__buffer);
		source.offset = startTime | 0;
		if(loops > 1) {
			source.set_loops(loops - 1);
		}
		source.set_gain(volume);
		var position = source.get_position();
		position.x = pan;
		position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
		source.set_position(position);
		return new openfl_media_SoundChannel(source,sndTransform);
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,__class__: openfl_media_Sound
});
var openfl_media_SoundChannel = function(source,soundTransform) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundTransform != null) {
		this.__soundTransform = soundTransform;
	} else {
		this.__soundTransform = new openfl_media_SoundTransform();
	}
	if(source != null) {
		this.__source = source;
		this.__source.onComplete.add($bind(this,this.source_onComplete));
		this.__isValid = true;
		this.__source.play();
	}
	openfl_media_SoundMixer.__registerSoundChannel(this);
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = "openfl.media.SoundChannel";
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	stop: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		if(!this.__isValid) {
			return;
		}
		this.__source.stop();
		this.__dispose();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__source.onComplete.remove($bind(this,this.source_onComplete));
		this.__source.dispose();
		this.__source = null;
		this.__isValid = false;
	}
	,__updateTransform: function() {
		this.set_soundTransform(this.get_soundTransform());
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__source.get_currentTime() + this.__source.offset;
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__source.set_currentTime((value | 0) - this.__source.offset);
		return value;
	}
	,get_soundTransform: function() {
		return this.__soundTransform.clone();
	}
	,set_soundTransform: function(value) {
		if(value != null) {
			this.__soundTransform.pan = value.pan;
			this.__soundTransform.volume = value.volume;
			var pan = openfl_media_SoundMixer.__soundTransform.pan + this.__soundTransform.pan;
			if(pan < -1) {
				pan = -1;
			}
			if(pan > 1) {
				pan = 1;
			}
			var volume = openfl_media_SoundMixer.__soundTransform.volume * this.__soundTransform.volume;
			if(this.__isValid) {
				this.__source.set_gain(volume);
				var position = this.__source.get_position();
				position.x = pan;
				position.z = -1 * Math.sqrt(1 - Math.pow(pan,2));
				this.__source.set_position(position);
				return value;
			}
		}
		return value;
	}
	,source_onComplete: function() {
		openfl_media_SoundMixer.__unregisterSoundChannel(this);
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function() { };
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = "openfl.media.SoundLoaderContext";
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = "openfl.media.SoundTransform";
openfl_media_SoundTransform.prototype = {
	clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_media_SoundMixer = function() { };
$hxClasses["openfl.media.SoundMixer"] = openfl_media_SoundMixer;
openfl_media_SoundMixer.__name__ = "openfl.media.SoundMixer";
openfl_media_SoundMixer.__registerSoundChannel = function(soundChannel) {
	openfl_media_SoundMixer.__soundChannels.push(soundChannel);
};
openfl_media_SoundMixer.__unregisterSoundChannel = function(soundChannel) {
	HxOverrides.remove(openfl_media_SoundMixer.__soundChannels,soundChannel);
};
var openfl_media_Video = function(width,height) {
	if(height == null) {
		height = 240;
	}
	if(width == null) {
		width = 320;
	}
	openfl_display_DisplayObject.call(this);
	this.__drawableType = 8;
	this.__width = width;
	this.__height = height;
	this.__textureTime = -1;
	this.smoothing = false;
	this.deblocking = 0;
};
$hxClasses["openfl.media.Video"] = openfl_media_Video;
openfl_media_Video.__name__ = "openfl.media.Video";
openfl_media_Video.__super__ = openfl_display_DisplayObject;
openfl_media_Video.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__enterFrame: function(deltaTime) {
		if(this.__renderable && this.__stream != null) {
			if(!this.__renderDirty) {
				this.__renderDirty = true;
				this.__setParentRenderDirty();
			}
		}
	}
	,__getBounds: function(rect,matrix) {
		var bounds = openfl_geom_Rectangle.__pool.get();
		bounds.setTo(0,0,this.__width,this.__height);
		bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		openfl_geom_Rectangle.__pool.release(bounds);
	}
	,__getIndexBuffer: function(context) {
		var gl = context.gl;
		if(this.__indexBuffer == null || this.__indexBufferContext != context.__context) {
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Uint16Array(6);
			this.__indexBufferData = this1;
			this.__indexBufferData[0] = 0;
			this.__indexBufferData[1] = 1;
			this.__indexBufferData[2] = 2;
			this.__indexBufferData[3] = 2;
			this.__indexBufferData[4] = 1;
			this.__indexBufferData[5] = 3;
			this.__indexBufferContext = context.__context;
			this.__indexBuffer = context.createIndexBuffer(6);
			this.__indexBuffer.uploadFromTypedArray(this.__indexBufferData);
		}
		return this.__indexBuffer;
	}
	,__getTexture: function(context) {
		if(this.__stream == null || this.__stream.__video == null) {
			return null;
		}
		var gl = context.__context.webgl;
		var internalFormat = gl.RGBA;
		var format = gl.RGBA;
		if(!this.__stream.__closed && this.__stream.__video.currentTime != this.__textureTime) {
			if(this.__texture == null) {
				this.__texture = context.createRectangleTexture(this.__stream.__video.videoWidth,this.__stream.__video.videoHeight,1,false);
			}
			context.__bindGLTexture2D(this.__texture.__textureID);
			lime_graphics_WebGLRenderContext.texImage2D(gl,gl.TEXTURE_2D,0,internalFormat,format,gl.UNSIGNED_BYTE,this.__stream.__video);
			this.__textureTime = this.__stream.__video.currentTime;
		}
		return this.__texture;
	}
	,__getVertexBuffer: function(context) {
		var gl = context.gl;
		if(this.__vertexBuffer == null || this.__vertexBufferContext != context.__context) {
			var uvWidth = 1;
			var uvHeight = 1;
			var array = null;
			var vector = null;
			var view = null;
			var buffer = null;
			var len = null;
			var this1 = new Float32Array(20);
			this.__vertexBufferData = this1;
			this.__vertexBufferData[0] = this.get_width();
			this.__vertexBufferData[1] = this.get_height();
			this.__vertexBufferData[3] = uvWidth;
			this.__vertexBufferData[4] = uvHeight;
			this.__vertexBufferData[6] = this.get_height();
			this.__vertexBufferData[9] = uvHeight;
			this.__vertexBufferData[10] = this.get_width();
			this.__vertexBufferData[13] = uvWidth;
			this.__vertexBufferContext = context.__context;
			this.__vertexBuffer = context.createVertexBuffer(3,5);
			this.__vertexBuffer.uploadFromTypedArray(lime_utils_Float32Array.toArrayBufferView(this.__vertexBufferData));
		}
		return this.__vertexBuffer;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getRenderTransform();
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0 ? -_this.tx : 1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this = this.__renderTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var py = norm == 0 ? -_this.ty : 1.0 / norm * (_this.a * (y - _this.ty) + _this.b * (_this.tx - x));
		if(px > 0 && py > 0 && px <= this.__width && py <= this.__height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var point = openfl_geom_Point.__pool.get();
		point.setTo(x,y);
		this.__globalToLocal(point,point);
		var hit = point.x > 0 && point.y > 0 && point.x <= this.__width && point.y <= this.__height;
		openfl_geom_Point.__pool.release(point);
		return hit;
	}
	,get_height: function() {
		return this.__height * this.get_scaleY();
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__height) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleY(1);
		return this.__height = value;
	}
	,get_width: function() {
		return this.__width * this.__scaleX;
	}
	,set_width: function(value) {
		if(this.__scaleX != 1 || this.__width != value) {
			this.__setTransformDirty();
			this.__dirty = true;
		}
		this.set_scaleX(1);
		return this.__width = value;
	}
	,__class__: openfl_media_Video
});
var openfl_net_FileFilter = function(description,extension,macType) {
	this.description = description;
	this.extension = extension;
	this.macType = macType;
};
$hxClasses["openfl.net.FileFilter"] = openfl_net_FileFilter;
openfl_net_FileFilter.__name__ = "openfl.net.FileFilter";
openfl_net_FileFilter.prototype = {
	__class__: openfl_net_FileFilter
};
var openfl_net_FileReference = function() {
	openfl_events_EventDispatcher.call(this);
	this.__inputControl = window.document.createElement("input");
	this.__inputControl.setAttribute("type","file");
	this.__inputControl.onclick = function(e) {
		e.cancelBubble = true;
		e.stopPropagation();
	};
};
$hxClasses["openfl.net.FileReference"] = openfl_net_FileReference;
openfl_net_FileReference.__name__ = "openfl.net.FileReference";
openfl_net_FileReference.__super__ = openfl_events_EventDispatcher;
openfl_net_FileReference.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	browse: function(typeFilter) {
		var _gthis = this;
		this.__data = null;
		this.__path = null;
		var filter = null;
		if(typeFilter != null) {
			var filters = [];
			var _g = 0;
			while(_g < typeFilter.length) {
				var type = typeFilter[_g];
				++_g;
				filters.push(StringTools.replace(StringTools.replace(type.extension,"*.","."),";",","));
			}
			filter = filters.join(",");
		}
		if(filter != null) {
			this.__inputControl.setAttribute("accept",filter);
		}
		this.__inputControl.onchange = function() {
			var file = _gthis.__inputControl.files[0];
			var tmp = new Date(file.lastModified);
			_gthis.modificationDate = tmp;
			_gthis.creationDate = _gthis.modificationDate;
			_gthis.size = file.size;
			var tmp = haxe_io_Path.extension(file.name);
			_gthis.type = "." + tmp;
			_gthis.name = haxe_io_Path.withoutDirectory(file.name);
			_gthis.__path = file.name;
			_gthis.dispatchEvent(new openfl_events_Event("select"));
		};
		this.__inputControl.click();
		return true;
	}
	,load: function() {
		var _gthis = this;
		var file = this.__inputControl.files[0];
		var reader = new FileReader();
		reader.onload = function(evt) {
			_gthis.data = openfl_utils_ByteArray.fromArrayBuffer(evt.target.result);
			_gthis.openFileDialog_onComplete();
		};
		reader.readAsArrayBuffer(file);
	}
	,save: function(data,defaultFileName) {
		this.__data = null;
		this.__path = null;
		if(data == null) {
			return;
		}
		if(((data) instanceof openfl_utils_ByteArrayData)) {
			this.__data = data;
		} else {
			var this1 = new openfl_utils_ByteArrayData(0);
			this.__data = this1;
			this.__data.writeUTFBytes(Std.string(data));
		}
		var saveFileDialog = new lime_ui_FileDialog();
		saveFileDialog.onCancel.add($bind(this,this.saveFileDialog_onCancel));
		saveFileDialog.onSave.add($bind(this,this.saveFileDialog_onSave));
		saveFileDialog.save(this.__data,defaultFileName != null ? haxe_io_Path.extension(defaultFileName) : null,defaultFileName);
	}
	,openFileDialog_onComplete: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,saveFileDialog_onCancel: function() {
		this.dispatchEvent(new openfl_events_Event("cancel"));
	}
	,saveFileDialog_onSave: function(path) {
		var _gthis = this;
		haxe_Timer.delay(function() {
			_gthis.dispatchEvent(new openfl_events_Event("complete"));
		},1);
	}
	,__class__: openfl_net_FileReference
});
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = "openfl.net.NetConnection";
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_net_NetConnection
});
var openfl_net_NetStream = function(connection,peerID) {
	openfl_events_EventDispatcher.call(this);
	this.__connection = connection;
	this.__soundTransform = new openfl_media_SoundTransform();
	this.__video = window.document.createElement("video");
	this.__video.setAttribute("playsinline","");
	this.__video.setAttribute("webkit-playsinline","");
	this.__video.setAttribute("crossorigin","anonymous");
	this.__video.addEventListener("error",$bind(this,this.video_onError),false);
	this.__video.addEventListener("waiting",$bind(this,this.video_onWaiting),false);
	this.__video.addEventListener("ended",$bind(this,this.video_onEnd),false);
	this.__video.addEventListener("pause",$bind(this,this.video_onPause),false);
	this.__video.addEventListener("seeking",$bind(this,this.video_onSeeking),false);
	this.__video.addEventListener("playing",$bind(this,this.video_onPlaying),false);
	this.__video.addEventListener("timeupdate",$bind(this,this.video_onTimeUpdate),false);
	this.__video.addEventListener("loadstart",$bind(this,this.video_onLoadStart),false);
	this.__video.addEventListener("stalled",$bind(this,this.video_onStalled),false);
	this.__video.addEventListener("durationchanged",$bind(this,this.video_onDurationChanged),false);
	this.__video.addEventListener("canplay",$bind(this,this.video_onCanPlay),false);
	this.__video.addEventListener("canplaythrough",$bind(this,this.video_onCanPlayThrough),false);
	this.__video.addEventListener("loadedmetadata",$bind(this,this.video_onLoadMetaData),false);
};
$hxClasses["openfl.net.NetStream"] = openfl_net_NetStream;
openfl_net_NetStream.__name__ = "openfl.net.NetStream";
openfl_net_NetStream.__super__ = openfl_events_EventDispatcher;
openfl_net_NetStream.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__dispatchStatus: function(code) {
		var event = new openfl_events_NetStatusEvent("netStatus",false,false,{ code : code});
		this.__connection.dispatchEvent(event);
		this.dispatchEvent(event);
	}
	,__playStatus: function(code) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onPlayStatus;
				handler({ code : code, duration : this.__video.duration, position : this.__video.currentTime, speed : this.__video.playbackRate, start : this.__video.startTime});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onCanPlay: function(event) {
		this.__playStatus("NetStream.Play.canplay");
	}
	,video_onCanPlayThrough: function(event) {
		this.__playStatus("NetStream.Play.canplaythrough");
	}
	,video_onDurationChanged: function(event) {
		this.__playStatus("NetStream.Play.durationchanged");
	}
	,video_onEnd: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__dispatchStatus("NetStream.Play.Complete");
		this.__playStatus("NetStream.Play.Complete");
	}
	,video_onError: function(event) {
		this.__dispatchStatus("NetStream.Play.Stop");
		this.__playStatus("NetStream.Play.error");
	}
	,video_onLoadMetaData: function(event) {
		if(this.__video == null) {
			return;
		}
		if(this.client != null) {
			try {
				var handler = this.client.onMetaData;
				handler({ width : this.__video.videoWidth, height : this.__video.videoHeight, duration : this.__video.duration});
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
	}
	,video_onLoadStart: function(event) {
		this.__playStatus("NetStream.Play.loadstart");
	}
	,video_onPause: function(event) {
		this.__playStatus("NetStream.Play.pause");
	}
	,video_onPlaying: function(event) {
		this.__dispatchStatus("NetStream.Play.Start");
		this.__playStatus("NetStream.Play.playing");
	}
	,video_onSeeking: function(event) {
		this.__playStatus("NetStream.Play.seeking");
		this.__dispatchStatus("NetStream.Seek.Complete");
	}
	,video_onStalled: function(event) {
		this.__playStatus("NetStream.Play.stalled");
	}
	,video_onTimeUpdate: function(event) {
		if(this.__video == null) {
			return;
		}
		this.time = this.__video.currentTime;
		this.__playStatus("NetStream.Play.timeupdate");
	}
	,video_onWaiting: function(event) {
		this.__playStatus("NetStream.Play.waiting");
	}
	,__class__: openfl_net_NetStream
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = openfl_net_SharedObject.defaultObjectEncoding;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = "openfl.net.SharedObject";
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	var illegalValues = [" ","~","%","&","\\",";",":","\"","'",",","<",">","?","#"];
	var allowed = true;
	if(name == null || name == "") {
		allowed = false;
	} else {
		var _g = 0;
		while(_g < illegalValues.length) {
			var value = illegalValues[_g];
			++_g;
			if(name.indexOf(value) > -1) {
				allowed = false;
				break;
			}
		}
	}
	if(!allowed) {
		throw haxe_Exception.thrown(new openfl_errors_Error("Error #2134: Cannot create SharedObject."));
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		if(lime_app_Application.current != null) {
			lime_app_Application.current.onExit.add(openfl_net_SharedObject.application_onExit);
		}
	}
	var id = localPath + "/" + name;
	if(!Object.prototype.hasOwnProperty.call(openfl_net_SharedObject.__sharedObjects.h,id)) {
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(localPath == null) {
				if(storage != null) {
					encodedData = storage.getItem(window.location.href + ":" + name);
					storage.removeItem(window.location.href + ":" + name);
				}
				localPath = window.location.pathname;
			}
			if(storage != null && encodedData == null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( _g ) {
				haxe_NativeStackTrace.lastError = _g;
			}
		}
		openfl_net_SharedObject.__sharedObjects.h[id] = sharedObject;
	}
	return openfl_net_SharedObject.__sharedObjects.h[id];
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return $hxClasses[name];
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var h = openfl_net_SharedObject.__sharedObjects.h;
	var sharedObject_h = h;
	var sharedObject_keys = Object.keys(h);
	var sharedObject_length = sharedObject_keys.length;
	var sharedObject_current = 0;
	while(sharedObject_current < sharedObject_length) {
		var sharedObject = sharedObject_h[sharedObject_keys[sharedObject_current++]];
		sharedObject.flush();
	}
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
		}
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( _g ) {
			haxe_NativeStackTrace.lastError = _g;
			return 1;
		}
		return 0;
	}
	,__class__: openfl_net_SharedObject
});
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.dataFormat = 1;
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = "openfl.net.URLLoader";
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	load: function(request) {
		var _gthis = this;
		if(this.dataFormat == 0) {
			var httpRequest = new lime_net__$HTTPRequest_$openfl_$utils_$ByteArray();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		} else {
			var httpRequest = new lime_net__$HTTPRequest_$String();
			this.__prepareRequest(httpRequest,request);
			httpRequest.load().onProgress($bind(this,this.httpRequest_onProgress)).onError($bind(this,this.httpRequest_onError)).onComplete(function(data) {
				_gthis.__dispatchStatus();
				_gthis.data = data;
				var event = new openfl_events_Event("complete");
				_gthis.dispatchEvent(event);
			});
		}
	}
	,__dispatchStatus: function() {
		var event = new openfl_events_HTTPStatusEvent("httpStatus",false,false,this.__httpRequest.responseStatus);
		event.responseURL = this.__httpRequest.uri;
		var headers = [];
		if(this.__httpRequest.enableResponseHeaders && this.__httpRequest.responseHeaders != null) {
			var _g = 0;
			var _g1 = this.__httpRequest.responseHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				headers.push(new openfl_net_URLRequestHeader(header.name,header.value));
			}
		}
		event.responseHeaders = headers;
		this.dispatchEvent(event);
	}
	,__prepareRequest: function(httpRequest,request) {
		this.__httpRequest = httpRequest;
		this.__httpRequest.uri = request.url;
		this.__httpRequest.method = request.method;
		if(request.data != null) {
			if(Type.typeof(request.data) == ValueType.TObject) {
				var fields = Reflect.fields(request.data);
				var _g = 0;
				while(_g < fields.length) {
					var field = fields[_g];
					++_g;
					this.__httpRequest.formData.h[field] = Reflect.field(request.data,field);
				}
			} else if(((request.data) instanceof haxe_io_Bytes)) {
				this.__httpRequest.data = request.data;
			} else {
				this.__httpRequest.data = haxe_io_Bytes.ofString(Std.string(request.data));
			}
		}
		this.__httpRequest.contentType = request.contentType;
		if(request.requestHeaders != null) {
			var _g = 0;
			var _g1 = request.requestHeaders;
			while(_g < _g1.length) {
				var header = _g1[_g];
				++_g;
				this.__httpRequest.headers.push(new lime_net_HTTPRequestHeader(header.name,header.value));
			}
		}
		this.__httpRequest.followRedirects = request.followRedirects;
		this.__httpRequest.timeout = request.idleTimeout | 0;
		this.__httpRequest.withCredentials = request.manageCookies;
		var userAgent = request.userAgent;
		if(userAgent == null) {
			userAgent = "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) OpenFL/1.0";
		}
		this.__httpRequest.userAgent = request.userAgent;
		this.__httpRequest.enableResponseHeaders = true;
	}
	,httpRequest_onError: function(error) {
		this.__dispatchStatus();
		if(error == 403) {
			var event = new openfl_events_SecurityErrorEvent("securityError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		} else {
			var event = new openfl_events_IOErrorEvent("ioError");
			event.text = Std.string(error);
			this.dispatchEvent(event);
		}
	}
	,httpRequest_onProgress: function(bytesLoaded,bytesTotal) {
		var event = new openfl_events_ProgressEvent("progress");
		event.bytesLoaded = bytesLoaded;
		event.bytesTotal = bytesTotal;
		this.dispatchEvent(event);
	}
	,__class__: openfl_net_URLLoader
});
var openfl_net_URLRequest = function(url) {
	if(url != null) {
		this.url = url;
	}
	this.contentType = null;
	this.followRedirects = openfl_net_URLRequestDefaults.followRedirects;
	if(openfl_net_URLRequestDefaults.idleTimeout > 0) {
		this.idleTimeout = openfl_net_URLRequestDefaults.idleTimeout;
	} else {
		this.idleTimeout = 30000;
	}
	this.manageCookies = openfl_net_URLRequestDefaults.manageCookies;
	this.method = "GET";
	this.requestHeaders = [];
	this.userAgent = openfl_net_URLRequestDefaults.userAgent;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = "openfl.net.URLRequest";
openfl_net_URLRequest.prototype = {
	__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestDefaults = function() { };
$hxClasses["openfl.net.URLRequestDefaults"] = openfl_net_URLRequestDefaults;
openfl_net_URLRequestDefaults.__name__ = "openfl.net.URLRequestDefaults";
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = "openfl.net.URLRequestHeader";
openfl_net_URLRequestHeader.prototype = {
	__class__: openfl_net_URLRequestHeader
};
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = "openfl.system.ApplicationDomain";
openfl_system_ApplicationDomain.prototype = {
	__class__: openfl_system_ApplicationDomain
};
var openfl_text_TextFieldType = {};
openfl_text_TextFieldType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = "openfl.text.TextFormat";
openfl_text_TextFormat.prototype = {
	clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		newFormat.__ascent = this.__ascent;
		newFormat.__descent = this.__descent;
		newFormat.__cacheKey = this.__toCacheKey();
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
		if(format.__ascent != null) {
			this.__ascent = format.__ascent;
		}
		if(format.__descent != null) {
			this.__descent = format.__descent;
		}
		this.__toCacheKey();
	}
	,__toCacheKey: function() {
		return this.__cacheKey = "" + this.font + this.size + Std.string(this.bold) + Std.string(this.italic);
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text_TextFormatAlign = {};
openfl_text_TextFormatAlign.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = "openfl.text.TextLineMetrics";
openfl_text_TextLineMetrics.prototype = {
	__class__: openfl_text_TextLineMetrics
};
var openfl_text__$internal_CacheMeasurement = function(wordKey,positions) {
	this.__collisions = [];
	this.__wordMap = new haxe_ds_IntMap();
	this.set(wordKey,positions);
};
$hxClasses["openfl.text._internal.CacheMeasurement"] = openfl_text__$internal_CacheMeasurement;
openfl_text__$internal_CacheMeasurement.__name__ = "openfl.text._internal.CacheMeasurement";
openfl_text__$internal_CacheMeasurement.prototype = {
	set: function(wordKey,positions) {
		this.__addCollision(wordKey,positions);
	}
	,get: function(wordKey) {
		if(this.__collisions.length > 1) {
			return this.__wordMap.h[this.__collisions.indexOf(wordKey)];
		}
		return this.__wordMap.h[0];
	}
	,__addCollision: function(wordKey,positions) {
		if(!this.exists(wordKey)) {
			var _this = this.__wordMap;
			var key = this.__collisions.push(wordKey) - 1;
			_this.h[key] = positions;
		}
	}
	,exists: function(wordKey) {
		if(this.__collisions.length == 0) {
			return false;
		}
		return this.__collisions.indexOf(wordKey) > -1;
	}
	,__class__: openfl_text__$internal_CacheMeasurement
};
var openfl_text__$internal_HTMLParser = function() { };
$hxClasses["openfl.text._internal.HTMLParser"] = openfl_text__$internal_HTMLParser;
openfl_text__$internal_HTMLParser.__name__ = "openfl.text._internal.HTMLParser";
openfl_text__$internal_HTMLParser.parse = function(value,textFormat,textFormatRanges) {
	value = value.replace(openfl_text__$internal_HTMLParser.__regexBreakTag.r,"\n");
	value = value.replace(openfl_text__$internal_HTMLParser.__regexEntities[5].r," ");
	var segments = value.split("<");
	if(segments.length == 1) {
		value = StringTools.htmlUnescape(value.replace(openfl_text__$internal_HTMLParser.__regexHTMLTag.r,""));
		if(textFormatRanges.get_length() > 1) {
			textFormatRanges.splice(1,textFormatRanges.get_length() - 1);
		}
		var range = textFormatRanges.get(0);
		range.format = textFormat;
		range.start = 0;
		range.end = value.length;
		return value;
	} else {
		textFormatRanges.splice(0,textFormatRanges.get_length());
		value = "";
		var segment;
		var formatStack = [textFormat.clone()];
		var tagStack = [];
		var sub;
		var noLineBreak = false;
		var _g = 0;
		while(_g < segments.length) {
			var segment = segments[_g];
			++_g;
			if(segment == "") {
				continue;
			}
			var isClosingTag = HxOverrides.substr(segment,0,1) == "/";
			var tagEndIndex = segment.indexOf(">");
			var start = tagEndIndex + 1;
			var spaceIndex = segment.indexOf(" ");
			var tagName = segment.substring(isClosingTag ? 1 : 0,spaceIndex > -1 && spaceIndex < tagEndIndex ? spaceIndex : tagEndIndex);
			var format;
			if(isClosingTag) {
				if(tagStack.length == 0 || tagName.toLowerCase() != tagStack[tagStack.length - 1].toLowerCase()) {
					lime_utils_Log.info("Invalid HTML, unexpected closing tag ignored: " + tagName,{ fileName : "openfl/text/_internal/HTMLParser.hx", lineNumber : 82, className : "openfl.text._internal.HTMLParser", methodName : "parse"});
					continue;
				}
				tagStack.pop();
				formatStack.pop();
				format = formatStack[formatStack.length - 1].clone();
				if(tagName.toLowerCase() == "p" && textFormatRanges.get_length() > 0) {
					value += "\n";
					noLineBreak = true;
				}
				if(start < segment.length) {
					sub = StringTools.htmlUnescape(HxOverrides.substr(segment,start,null));
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			} else {
				format = formatStack[formatStack.length - 1].clone();
				if(tagEndIndex > -1) {
					switch(tagName.toLowerCase()) {
					case "a":
						if(openfl_text__$internal_HTMLParser.__regexHref.match(segment)) {
							format.url = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexHref);
						}
						break;
					case "b":
						format.bold = true;
						break;
					case "em":case "i":
						format.italic = true;
						break;
					case "font":
						if(openfl_text__$internal_HTMLParser.__regexFace.match(segment)) {
							format.font = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexFace);
						}
						if(openfl_text__$internal_HTMLParser.__regexColor.match(segment)) {
							format.color = Std.parseInt("0x" + openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexColor));
						}
						if(openfl_text__$internal_HTMLParser.__regexSize.match(segment)) {
							var sizeAttr = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexSize);
							var firstChar = HxOverrides.cca(sizeAttr,0);
							if(firstChar == 43 || firstChar == 45) {
								var parentFormat = formatStack.length >= 2 ? formatStack[formatStack.length - 2] : textFormat;
								format.size = parentFormat.size + Std.parseInt(sizeAttr);
							} else {
								format.size = Std.parseInt(sizeAttr);
							}
						}
						break;
					case "p":
						if(textFormatRanges.get_length() > 0 && !noLineBreak) {
							value += "\n";
						}
						if(openfl_text__$internal_HTMLParser.__regexAlign.match(segment)) {
							var align = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexAlign).toLowerCase();
							format.align = openfl_text_TextFormatAlign.fromString(align);
						}
						break;
					case "textformat":
						if(openfl_text__$internal_HTMLParser.__regexBlockIndent.match(segment)) {
							format.blockIndent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexBlockIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexIndent.match(segment)) {
							format.indent = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexIndent));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeading.match(segment)) {
							format.leading = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeading));
						}
						if(openfl_text__$internal_HTMLParser.__regexLeftMargin.match(segment)) {
							format.leftMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexLeftMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexRightMargin.match(segment)) {
							format.rightMargin = Std.parseInt(openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexRightMargin));
						}
						if(openfl_text__$internal_HTMLParser.__regexTabStops.match(segment)) {
							var values = openfl_text__$internal_HTMLParser.__getAttributeMatch(openfl_text__$internal_HTMLParser.__regexTabStops).split(" ");
							var tabStops = [];
							var _g1 = 0;
							while(_g1 < values.length) {
								var stop = values[_g1];
								++_g1;
								tabStops.push(Std.parseInt(stop));
							}
							format.tabStops = tabStops;
						}
						break;
					case "u":
						format.underline = true;
						break;
					}
					formatStack.push(format);
					tagStack.push(tagName);
					if(start < segment.length) {
						sub = StringTools.htmlUnescape(segment.substring(start));
						textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						noLineBreak = false;
					}
				} else {
					sub = StringTools.htmlUnescape(segment);
					textFormatRanges.push(new openfl_text__$internal_TextFormatRange(format,value.length,value.length + sub.length));
					value += sub;
					noLineBreak = false;
				}
			}
		}
		if(textFormatRanges.get_length() == 0) {
			textFormatRanges.push(new openfl_text__$internal_TextFormatRange(formatStack[0],0,0));
		}
	}
	return value;
};
openfl_text__$internal_HTMLParser.__getAttributeMatch = function(regex) {
	if(regex.matched(2) != null) {
		return regex.matched(2);
	} else {
		return regex.matched(3);
	}
};
var openfl_text__$internal_ShapeCache = function() {
	this.__shortWordMap = new haxe_ds_StringMap();
	this.__longWordMap = new haxe_ds_StringMap();
};
$hxClasses["openfl.text._internal.ShapeCache"] = openfl_text__$internal_ShapeCache;
openfl_text__$internal_ShapeCache.__name__ = "openfl.text._internal.ShapeCache";
openfl_text__$internal_ShapeCache.hashFunction = function(key) {
	var hash = 0;
	var i;
	var chr;
	var _g = 0;
	var _g1 = key.length;
	while(_g < _g1) {
		var i = _g++;
		chr = HxOverrides.cca(key,i);
		hash = (hash << 5) - hash + chr;
		hash |= 0;
	}
	return hash;
};
openfl_text__$internal_ShapeCache.prototype = {
	cache: function(formatRange,getPositions,wordKey) {
		var formatKey = formatRange.format.__cacheKey;
		if(wordKey.length > 15) {
			return this.__cacheLongWord(wordKey,formatKey,getPositions);
		} else {
			return this.__cacheShortWord(wordKey,formatKey,getPositions);
		}
	}
	,__cacheShortWord: function(wordKey,formatKey,getPositions) {
		if(Object.prototype.hasOwnProperty.call(this.__shortWordMap.h,formatKey)) {
			var formatMap = this.__shortWordMap.h[formatKey];
			if(Object.prototype.hasOwnProperty.call(formatMap.h,wordKey)) {
				return formatMap.h[wordKey];
			} else {
				var value = getPositions();
				formatMap.h[wordKey] = value;
			}
		} else {
			var formatMap = new haxe_ds_StringMap();
			var value = getPositions();
			formatMap.h[wordKey] = value;
			this.__shortWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__cacheLongWord: function(wordKey,formatKey,getPositions) {
		var hash = openfl_text__$internal_ShapeCache.hashFunction(wordKey);
		if(Object.prototype.hasOwnProperty.call(this.__longWordMap.h,formatKey)) {
			var formatMap = this.__longWordMap.h[formatKey];
			if(formatMap.h.hasOwnProperty(hash)) {
				var measurement = formatMap.h[hash];
				if(measurement.exists(wordKey)) {
					return measurement.get(wordKey);
				} else {
					measurement.set(wordKey,getPositions());
				}
			} else {
				var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
				formatMap.h[hash] = measurement;
			}
		} else {
			var formatMap = new haxe_ds_IntMap();
			var measurement = new openfl_text__$internal_CacheMeasurement(wordKey,getPositions());
			measurement.hash = hash;
			formatMap.h[hash] = measurement;
			this.__longWordMap.h[formatKey] = formatMap;
		}
		return getPositions();
	}
	,__class__: openfl_text__$internal_ShapeCache
};
var openfl_text__$internal_TextEngine = function(textField) {
	this.__shapeCache = new openfl_text__$internal_ShapeCache();
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.set_text("");
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.textBounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.numLines = 1;
	this.sharpness = 0;
	this.scrollH = 0;
	this.set_scrollV(1);
	this.wordWrap = false;
	this.lineAscents = openfl_Vector.toFloatVector(null);
	this.lineBreaks = openfl_Vector.toIntVector(null);
	this.lineDescents = openfl_Vector.toFloatVector(null);
	this.lineLeadings = openfl_Vector.toFloatVector(null);
	this.lineHeights = openfl_Vector.toFloatVector(null);
	this.lineWidths = openfl_Vector.toFloatVector(null);
	this.layoutGroups = openfl_Vector.toObjectVector(null);
	this.textFormatRanges = openfl_Vector.toObjectVector(null);
	if(openfl_text__$internal_TextEngine.__context == null) {
		openfl_text__$internal_TextEngine.__context = window.document.createElement("canvas").getContext("2d");
	}
};
$hxClasses["openfl.text._internal.TextEngine"] = openfl_text__$internal_TextEngine;
openfl_text__$internal_TextEngine.__name__ = "openfl.text._internal.TextEngine";
openfl_text__$internal_TextEngine.findFont = function(name) {
	return openfl_text_Font.__fontByName.h[name];
};
openfl_text__$internal_TextEngine.findFontVariant = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold Italic");
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Bold");
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		return openfl_text__$internal_TextEngine.findFont(fontNamePrefix + " Italic");
	}
	return openfl_text__$internal_TextEngine.findFont(fontName);
};
openfl_text__$internal_TextEngine.getFormatHeight = function(format) {
	var ascent;
	var descent;
	openfl_text__$internal_TextEngine.__context.font = openfl_text__$internal_TextEngine.getFont(format);
	var font = openfl_text__$internal_TextEngine.getFontInstance(format);
	if(format.__ascent != null) {
		ascent = format.size * format.__ascent;
		descent = format.size * format.__descent;
	} else if(font != null && font.unitsPerEM != 0) {
		ascent = font.ascender / font.unitsPerEM * format.size;
		descent = Math.abs(font.descender / font.unitsPerEM * format.size);
	} else {
		ascent = format.size;
		descent = format.size * 0.185;
	}
	var leading = format.leading;
	return ascent + descent + leading;
};
openfl_text__$internal_TextEngine.getFont = function(format) {
	var fontName = format.font;
	var bold = format.bold;
	var italic = format.italic;
	if(fontName == null) {
		fontName = "_serif";
	}
	var fontNamePrefix = StringTools.replace(StringTools.replace(fontName," Normal","")," Regular","");
	if(bold && italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold Italic")) {
		fontName = fontNamePrefix + " Bold Italic";
		bold = false;
		italic = false;
	} else if(bold && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Bold")) {
		fontName = fontNamePrefix + " Bold";
		bold = false;
	} else if(italic && Object.prototype.hasOwnProperty.call(openfl_text_Font.__fontByName.h,fontNamePrefix + " Italic")) {
		fontName = fontNamePrefix + " Italic";
		italic = false;
	} else {
		if(bold && (fontName.indexOf(" Bold ") > -1 || StringTools.endsWith(fontName," Bold"))) {
			bold = false;
		}
		if(italic && (fontName.indexOf(" Italic ") > -1 || StringTools.endsWith(fontName," Italic"))) {
			italic = false;
		}
	}
	var font = italic ? "italic " : "normal ";
	font += "normal ";
	font += bold ? "bold " : "normal ";
	font += format.size + "px";
	font += "/" + (format.leading + format.size + 3) + "px ";
	var font1;
	switch(fontName) {
	case "_sans":
		font1 = "sans-serif";
		break;
	case "_serif":
		font1 = "serif";
		break;
	case "_typewriter":
		font1 = "monospace";
		break;
	default:
		var _this_r = new RegExp("^[\\s'\"]+(.*)[\\s'\"]+$","".split("u").join(""));
		font1 = "'" + fontName.replace(_this_r,"$1") + "'";
	}
	font += "" + font1;
	return font;
};
openfl_text__$internal_TextEngine.getFontInstance = function(format) {
	return openfl_text__$internal_TextEngine.findFontVariant(format);
};
openfl_text__$internal_TextEngine.prototype = {
	createRestrictRegexp: function(restrict) {
		var declinedRange = new EReg("\\^(.-.|.)","gu");
		var declined = "";
		var accepted = declinedRange.map(restrict,function(ereg) {
			declined += ereg.matched(1);
			return "";
		});
		var testRegexpParts = [];
		if(accepted.length > 0) {
			testRegexpParts.push("[^" + restrict + "]");
		}
		if(declined.length > 0) {
			testRegexpParts.push("[" + declined + "]");
		}
		return new EReg("(" + testRegexpParts.join("|") + ")","g");
	}
	,getBounds: function() {
		var padding = this.border ? 1 : 0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
		var x = this.width;
		var y = this.width;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			if(group1.offsetX < x) {
				x = group1.offsetX;
			}
			if(group1.offsetY < y) {
				y = group1.offsetY;
			}
		}
		if(x >= this.width) {
			x = 2;
		}
		if(y >= this.height) {
			y = 2;
		}
		var textHeight = this.textHeight * 1.185;
		this.textBounds.setTo(Math.max(x - 2,0),Math.max(y - 2,0),Math.min(this.textWidth + 4,this.bounds.width + 4),Math.min(textHeight + 4,this.bounds.height + 4));
	}
	,getLineBreaks: function() {
		this.lineBreaks.set_length(0);
		var index = -1;
		var cr = -1;
		var lf = -1;
		while(index < this.text.length) {
			lf = this.text.indexOf("\n",index + 1);
			cr = this.text.indexOf("\r",index + 1);
			index = cr == -1 ? lf : lf == -1 ? cr : cr < lf ? cr : lf;
			if(index > -1) {
				this.lineBreaks.push(index);
			} else {
				break;
			}
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.set_length(0);
		this.lineDescents.set_length(0);
		this.lineLeadings.set_length(0);
		this.lineHeights.set_length(0);
		this.lineWidths.set_length(0);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		var currentTextHeight = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.maxScrollH = 0;
		var group = this.layoutGroups.iterator();
		while(group.hasNext()) {
			var group1 = group.next();
			while(group1.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
			}
			currentLineAscent = Math.max(currentLineAscent,group1.ascent);
			currentLineDescent = Math.max(currentLineDescent,group1.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group1.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group1.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group1.height);
			currentLineWidth = group1.offsetX - 2 + group1.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			currentTextHeight = group1.offsetY - 2 + group1.ascent + group1.descent;
			if(currentTextHeight > this.textHeight) {
				this.textHeight = currentTextHeight;
			}
		}
		if(this.textHeight == 0 && this.textField != null && this.textField.get_type() == 1) {
			var currentFormat = this.textField.__textFormat;
			var ascent;
			var descent;
			var font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			var leading = currentFormat.leading;
			var heightValue = ascent + descent + leading;
			currentLineAscent = ascent;
			currentLineDescent = descent;
			currentLineLeading = leading;
			currentTextHeight = ascent + descent;
			this.textHeight = currentTextHeight;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null ? currentLineLeading : 0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		}
		if(this.layoutGroups.get_length() > 0) {
			var group = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
			if(group != null && group.startIndex == group.endIndex) {
				this.textHeight -= currentLineHeight;
			}
		}
		if(this.autoSize != 2) {
			switch(this.autoSize) {
			case 0:case 1:case 3:
				if(!this.wordWrap) {
					this.width = this.textWidth + 4;
				}
				this.height = this.textHeight + 4;
				this.bottomScrollV = this.numLines;
				break;
			default:
			}
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		if(this.scrollH > this.maxScrollH) {
			this.scrollH = this.maxScrollH;
		}
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.set_length(0);
		if(this.text == null || this.text == "") {
			return;
		}
		var rangeIndex = -1;
		var formatRange = null;
		var font = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var maxAscent = 0.0;
		var descent = 0.0;
		var align = 3;
		var blockIndent = 0;
		var bullet = false;
		var indent = 0;
		var leftMargin = 0;
		var rightMargin = 0;
		var firstLineOfParagraph = true;
		var tabStops = null;
		var layoutGroup = null;
		var positions = null;
		var widthValue = 0.0;
		var heightValue = 0;
		var maxHeightValue = 0;
		var previousSpaceIndex = -2;
		var previousBreakIndex = -1;
		var spaceIndex = this.text.indexOf(" ");
		var breakCount = 0;
		var breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
		var offsetX = 0.0;
		var offsetY = 0.0;
		var textIndex = 0;
		var lineIndex = 0;
		var getPositions = function(text,startIndex,endIndex) {
			var letterSpacing = 0.0;
			if(formatRange.format.letterSpacing != null) {
				letterSpacing = formatRange.format.letterSpacing;
			}
			var html5Positions = function() {
				var positions = [];
				if(_gthis.__useIntAdvances == null) {
					var html5Positions = new EReg("Trident/7.0","");
					_gthis.__useIntAdvances = html5Positions.match($global.navigator.userAgent);
				}
				if(_gthis.__useIntAdvances) {
					var previousWidth = 0.0;
					var width;
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						width = openfl_text__$internal_TextEngine.__context.measureText(text.substring(startIndex,i + 1)).width;
						positions.push(width - previousWidth);
						previousWidth = width;
					}
				} else {
					var _g = startIndex;
					var _g1 = endIndex;
					while(_g < _g1) {
						var i = _g++;
						var advance;
						if(i < text.length - 1) {
							var nextWidth = openfl_text__$internal_TextEngine.__context.measureText(text.charAt(i + 1)).width;
							var twoWidths = openfl_text__$internal_TextEngine.__context.measureText(HxOverrides.substr(text,i,2)).width;
							advance = twoWidths - nextWidth;
						} else {
							advance = openfl_text__$internal_TextEngine.__context.measureText(text.charAt(i)).width;
						}
						positions.push(advance);
					}
				}
				return positions;
			};
			return _gthis.__shapeCache.cache(formatRange,html5Positions,text.substring(startIndex,endIndex));
		};
		var getPositionsWidth = function(positions) {
			var width = 0.0;
			var _g = 0;
			while(_g < positions.length) {
				var position = positions[_g];
				++_g;
				width += position;
			}
			return width;
		};
		var getTextWidth = function(text) {
			return openfl_text__$internal_TextEngine.__context.measureText(text).width;
		};
		var getBaseX = function() {
			return 2 + leftMargin + blockIndent + (firstLineOfParagraph ? indent : 0);
		};
		var getWrapWidth = function() {
			return _gthis.width - 2 - rightMargin - getBaseX();
		};
		var nextLayoutGroup = function(startIndex,endIndex) {
			if(layoutGroup == null || layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = new openfl_text__$internal_TextLayoutGroup(formatRange.format,startIndex,endIndex);
				_gthis.layoutGroups.push(layoutGroup);
			} else {
				layoutGroup.format = formatRange.format;
				layoutGroup.startIndex = startIndex;
				layoutGroup.endIndex = endIndex;
			}
		};
		var setLineMetrics = function() {
			if(currentFormat.__ascent != null) {
				ascent = currentFormat.size * currentFormat.__ascent;
				descent = currentFormat.size * currentFormat.__descent;
			} else if(font != null && font.unitsPerEM != 0) {
				ascent = font.ascender / font.unitsPerEM * currentFormat.size;
				descent = Math.abs(font.descender / font.unitsPerEM * currentFormat.size);
			} else {
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
			}
			leading = currentFormat.leading;
			heightValue = Math.ceil(ascent + descent + leading);
			if(heightValue > maxHeightValue) {
				maxHeightValue = heightValue;
			}
			if(ascent > maxAscent) {
				maxAscent = ascent;
			}
		};
		var setParagraphMetrics = function() {
			firstLineOfParagraph = true;
			align = currentFormat.align != null ? currentFormat.align : 3;
			blockIndent = currentFormat.blockIndent != null ? currentFormat.blockIndent : 0;
			indent = currentFormat.indent != null ? currentFormat.indent : 0;
			leftMargin = currentFormat.leftMargin != null ? currentFormat.leftMargin : 0;
			rightMargin = currentFormat.rightMargin != null ? currentFormat.rightMargin : 0;
			var setParagraphMetrics = currentFormat.bullet != null;
			var setParagraphMetrics = currentFormat.tabStops != null;
		};
		var nextFormatRange = function() {
			if(rangeIndex < _gthis.textFormatRanges.get_length() - 1) {
				rangeIndex += 1;
				formatRange = _gthis.textFormatRanges.get(rangeIndex);
				currentFormat.__merge(formatRange.format);
				openfl_text__$internal_TextEngine.__context.font = openfl_text__$internal_TextEngine.getFont(currentFormat);
				font = openfl_text__$internal_TextEngine.getFontInstance(currentFormat);
				return true;
			}
			return false;
		};
		var setFormattedPositions = function(startIndex,endIndex) {
			if(startIndex >= endIndex) {
				positions = [];
				widthValue = 0;
			} else if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,startIndex,endIndex);
				widthValue = getPositionsWidth(positions);
			} else {
				var tempIndex = startIndex;
				var tempRangeEnd = formatRange.end;
				var countRanges = 0;
				positions = [];
				widthValue = 0;
				while(true) {
					if(tempIndex != tempRangeEnd) {
						var tempPositions = getPositions(_gthis.text,tempIndex,tempRangeEnd);
						positions = positions.concat(tempPositions);
					}
					if(tempRangeEnd != endIndex) {
						if(!nextFormatRange()) {
							lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1092, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
							break;
						}
						tempIndex = tempRangeEnd;
						tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
						++countRanges;
					} else {
						widthValue = getPositionsWidth(positions);
						break;
					}
				}
				rangeIndex -= countRanges + 1;
				nextFormatRange();
			}
		};
		var placeFormattedText = function(endIndex) {
			if(endIndex <= formatRange.end) {
				positions = getPositions(_gthis.text,textIndex,endIndex);
				widthValue = getPositionsWidth(positions);
				nextLayoutGroup(textIndex,endIndex);
				layoutGroup.positions = positions;
				var offsetX1 = offsetX;
				var placeFormattedText = getBaseX();
				layoutGroup.offsetX = offsetX1 + placeFormattedText;
				layoutGroup.ascent = ascent;
				layoutGroup.descent = descent;
				layoutGroup.leading = leading;
				layoutGroup.lineIndex = lineIndex;
				layoutGroup.offsetY = offsetY + 2;
				layoutGroup.width = widthValue;
				layoutGroup.height = heightValue;
				offsetX += widthValue;
				if(endIndex == formatRange.end) {
					layoutGroup = null;
					nextFormatRange();
					setLineMetrics();
				}
			} else {
				while(true) {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(textIndex != tempRangeEnd) {
						positions = getPositions(_gthis.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
						nextLayoutGroup(textIndex,tempRangeEnd);
						layoutGroup.positions = positions;
						var offsetX1 = offsetX;
						var placeFormattedText = getBaseX();
						layoutGroup.offsetX = offsetX1 + placeFormattedText;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY + 2;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						offsetX += widthValue;
						textIndex = tempRangeEnd;
					}
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
					}
					if(tempRangeEnd == endIndex) {
						break;
					}
					if(!nextFormatRange()) {
						lime_utils_Log.warn("You found a bug in OpenFL's text code! Please save a copy of your project and contact Joshua Granick (@singmajesty) so we can fix this.",{ fileName : "openfl/text/_internal/TextEngine.hx", lineNumber : 1180, className : "openfl.text._internal.TextEngine", methodName : "getLayoutGroups"});
						break;
					}
					setLineMetrics();
				}
			}
			textIndex = endIndex;
		};
		var alignBaseline = function() {
			setLineMetrics();
			var i = _gthis.layoutGroups.get_length();
			while(--i > -1) {
				var lg = _gthis.layoutGroups.get(i);
				if(lg.lineIndex < lineIndex) {
					break;
				}
				if(lg.lineIndex > lineIndex) {
					continue;
				}
				lg.ascent = maxAscent;
				lg.height = maxHeightValue;
			}
			offsetY += maxHeightValue;
			maxAscent = 0.0;
			maxHeightValue = 0;
			lineIndex += 1;
			offsetX = 0;
			firstLineOfParagraph = false;
		};
		var breakLongWords = function(endIndex) {
			var remainingPositions = positions;
			var i;
			var bufferCount;
			var placeIndex;
			var positionWidth;
			var currentPosition;
			var tempWidth = getPositionsWidth(remainingPositions);
			while(remainingPositions.length > 0 && offsetX + tempWidth > getWrapWidth()) {
				bufferCount = 0;
				i = bufferCount;
				positionWidth = 0.0;
				while(offsetX + positionWidth < getWrapWidth()) {
					currentPosition = remainingPositions[i];
					if(currentPosition == 0.0) {
						++i;
						++bufferCount;
					} else {
						positionWidth += currentPosition;
						++i;
					}
				}
				if(i == bufferCount) {
					i = bufferCount + 1;
				} else {
					while(i > 1 && offsetX + positionWidth > getWrapWidth()) {
						--i;
						if(i - bufferCount > 0) {
							setFormattedPositions(textIndex,textIndex + i - bufferCount);
							positionWidth = widthValue;
						} else {
							i = 1;
							bufferCount = 0;
							setFormattedPositions(textIndex,textIndex + 1);
							positionWidth = 0;
						}
					}
				}
				placeIndex = textIndex + i - bufferCount;
				placeFormattedText(placeIndex);
				alignBaseline();
				setFormattedPositions(placeIndex,endIndex);
				remainingPositions = positions;
				tempWidth = widthValue;
			}
		};
		var placeText = function(endIndex) {
			if(_gthis.width >= 4 && _gthis.wordWrap) {
				breakLongWords(endIndex);
			}
			placeFormattedText(endIndex);
		};
		nextFormatRange();
		setParagraphMetrics();
		setLineMetrics();
		var wrap;
		var maxLoops = this.text.length + 1;
		while(textIndex < maxLoops) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex)) {
			if(textIndex <= breakIndex) {
				setFormattedPositions(textIndex,breakIndex);
				placeText(breakIndex);
				layoutGroup = null;
			} else if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				if(layoutGroup.endIndex == spaceIndex) {
					layoutGroup.width -= layoutGroup.positions[layoutGroup.positions.length - 1];
				}
				layoutGroup = null;
			}
			alignBaseline();
			if(formatRange.end == breakIndex) {
				nextFormatRange();
				setLineMetrics();
			}
			textIndex = breakIndex + 1;
			previousBreakIndex = breakIndex;
			++breakCount;
			breakIndex = breakCount < this.lineBreaks.get_length() ? this.lineBreaks.get(breakCount) : -1;
			setParagraphMetrics();
		} else if(spaceIndex > -1) {
			if(layoutGroup != null && layoutGroup.startIndex != layoutGroup.endIndex) {
				layoutGroup = null;
			}
			wrap = false;
			while(textIndex < this.text.length) {
				var endIndex = -1;
				if(spaceIndex == -1) {
					endIndex = breakIndex;
				} else {
					endIndex = spaceIndex + 1;
					if(breakIndex > -1 && breakIndex < endIndex) {
						endIndex = breakIndex;
					}
				}
				if(endIndex == -1) {
					endIndex = this.text.length;
				}
				setFormattedPositions(textIndex,endIndex);
				if(align == 2) {
					if(positions.length > 0 && textIndex == previousSpaceIndex) {
						textIndex += 1;
						var spaceWidth = positions.shift();
						widthValue -= spaceWidth;
						offsetX += spaceWidth;
					}
					if(positions.length > 0 && endIndex == spaceIndex + 1) {
						--endIndex;
						var spaceWidth1 = positions.pop();
						widthValue -= spaceWidth1;
					}
				}
				if(this.wordWrap) {
					if(offsetX + widthValue > getWrapWidth()) {
						wrap = true;
						if(positions.length > 0 && endIndex == spaceIndex + 1) {
							var lastPosition = positions[positions.length - 1];
							var spaceWidth2 = lastPosition;
							if(offsetX + widthValue - spaceWidth2 <= getWrapWidth()) {
								wrap = false;
							}
						}
					}
				}
				if(wrap) {
					if(align != 2 && (layoutGroup != null || this.layoutGroups.get_length() > 0)) {
						var previous = layoutGroup;
						if(previous == null) {
							previous = this.layoutGroups.get(this.layoutGroups.get_length() - 1);
						}
						previous.width -= previous.positions[previous.positions.length - 1];
						previous.endIndex--;
					}
					var i = this.layoutGroups.get_length() - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups.get(i);
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					if(textIndex == previousSpaceIndex + 1) {
						alignBaseline();
					}
					offsetX = 0;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups.get(this.layoutGroups.get_length() - offsetCount).offsetX;
						var _g = this.layoutGroups.get_length() - offsetCount;
						var _g1 = this.layoutGroups.get_length();
						while(_g < _g1) {
							var i1 = _g++;
							layoutGroup = this.layoutGroups.get(i1);
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY + 2;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					placeText(endIndex);
					wrap = false;
				} else if(layoutGroup != null && textIndex == spaceIndex) {
					if(align != 2) {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.positions = layoutGroup.positions.concat(positions);
						layoutGroup.width += widthValue;
					}
					offsetX += widthValue;
					textIndex = endIndex;
				} else if(layoutGroup == null || align == 2) {
					placeText(endIndex);
					if(endIndex == this.text.length) {
						alignBaseline();
					}
				} else {
					var tempRangeEnd = endIndex < formatRange.end ? endIndex : formatRange.end;
					if(tempRangeEnd < endIndex) {
						positions = getPositions(this.text,textIndex,tempRangeEnd);
						widthValue = getPositionsWidth(positions);
					}
					layoutGroup.endIndex = tempRangeEnd;
					layoutGroup.positions = layoutGroup.positions.concat(positions);
					layoutGroup.width += widthValue;
					offsetX += widthValue;
					if(tempRangeEnd == formatRange.end) {
						layoutGroup = null;
						nextFormatRange();
						setLineMetrics();
						textIndex = tempRangeEnd;
						if(tempRangeEnd != endIndex) {
							placeFormattedText(endIndex);
						}
					}
					if(breakIndex == endIndex) {
						++endIndex;
					}
					textIndex = endIndex;
					if(endIndex == this.text.length) {
						alignBaseline();
					}
				}
				var nextSpaceIndex = this.text.indexOf(" ",textIndex);
				if(breakIndex == previousSpaceIndex) {
					layoutGroup.endIndex = breakIndex;
					if(breakIndex - layoutGroup.startIndex - layoutGroup.positions.length < 0) {
						layoutGroup.positions.push(0.0);
					}
					textIndex = breakIndex + 1;
				}
				previousSpaceIndex = spaceIndex;
				spaceIndex = nextSpaceIndex;
				if(breakIndex > -1 && breakIndex <= textIndex && (spaceIndex > breakIndex || spaceIndex == -1) || textIndex > this.text.length) {
					break;
				}
			}
		} else {
			if(textIndex < this.text.length) {
				setFormattedPositions(textIndex,this.text.length);
				placeText(this.text.length);
				alignBaseline();
			}
			textIndex += 1;
		}
		if(previousBreakIndex == textIndex - 2 && previousBreakIndex > -1) {
			nextLayoutGroup(textIndex - 1,textIndex - 1);
			layoutGroup.positions = [];
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetX = getBaseX();
			layoutGroup.offsetY = offsetY + 2;
			layoutGroup.width = 0;
			var tmp = openfl_text_TextFieldType.toString(this.type) == "input" ? heightValue : 0;
			layoutGroup.height = tmp;
		}
	}
	,restrictText: function(value) {
		if(value == null) {
			return value;
		}
		if(this.__restrictRegexp != null) {
			value = this.__restrictRegexp.split(value).join("");
		}
		return value;
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var totalWidth = this.width - 4;
		var group;
		var lineLength;
		var lineMeasurementsDirty = false;
		var _g = 0;
		var _g1 = this.layoutGroups.get_length();
		while(_g < _g1) {
			var i = _g++;
			group = this.layoutGroups.get(i);
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				totalWidth = this.width - 4 - group.format.rightMargin;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round((totalWidth - this.lineWidths.get(lineIndex)) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						lineLength = 1;
						var _g2 = i + 1;
						var _g3 = this.layoutGroups.get_length();
						while(_g2 < _g3) {
							var j = _g2++;
							if(this.layoutGroups.get(j).lineIndex == lineIndex) {
								if(j == 0 || HxOverrides.cca(this.text,this.layoutGroups.get(j).startIndex - 1) == 32) {
									++lineLength;
								}
							} else {
								break;
							}
						}
						if(lineLength > 1) {
							group = this.layoutGroups.get(i + lineLength - 1);
							var endChar = HxOverrides.cca(this.text,group.endIndex);
							if(group.endIndex < this.text.length && endChar != 10 && endChar != 13) {
								offsetX = (totalWidth - this.lineWidths.get(lineIndex)) / (lineLength - 1);
								lineMeasurementsDirty = true;
								var j1 = 1;
								while(true) {
									this.layoutGroups.get(i + j1).offsetX += offsetX * j1;
									if(!(++j1 < lineLength)) {
										break;
									}
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths.get(lineIndex) < totalWidth) {
						offsetX = Math.round(totalWidth - this.lineWidths.get(lineIndex));
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
		if(lineMeasurementsDirty) {
			this.getLineMeasurements();
		}
	}
	,update: function() {
		if(this.text == null || this.textFormatRanges.get_length() == 0) {
			this.lineAscents.set_length(0);
			this.lineBreaks.set_length(0);
			this.lineDescents.set_length(0);
			this.lineLeadings.set_length(0);
			this.lineHeights.set_length(0);
			this.lineWidths.set_length(0);
			this.layoutGroups.set_length(0);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLineBreaks();
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,get_bottomScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var ret = this.lineHeights.get_length();
			var tempHeight = this.lineLeadings.get_length() == ret ? -this.lineLeadings.get(ret - 1) : 0.0;
			var _g = this.get_scrollV() - 1;
			var _g1 = this.lineHeights.get_length();
			while(_g < _g1) {
				var i = _g++;
				if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
					tempHeight += this.lineHeights.get(i);
				} else {
					ret = i;
					break;
				}
			}
			if(ret < this.get_scrollV()) {
				return this.get_scrollV();
			}
			return ret;
		}
	}
	,get_maxScrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		} else {
			var i = this.numLines - 1;
			var tempHeight = 0.0;
			var j = i;
			while(i >= 0) if(tempHeight + this.lineHeights.get(i) <= this.height - 4) {
				tempHeight += this.lineHeights.get(i);
				--i;
			} else {
				break;
			}
			if(i == j) {
				i = this.numLines;
			} else {
				i += 2;
			}
			if(i < 1) {
				return 1;
			}
			return i;
		}
	}
	,set_restrict: function(value) {
		if(this.restrict == value) {
			return this.restrict;
		}
		this.restrict = value;
		if(this.restrict == null || this.restrict.length == 0) {
			this.__restrictRegexp = null;
		} else {
			this.__restrictRegexp = this.createRestrictRegexp(value);
		}
		return this.restrict;
	}
	,get_scrollV: function() {
		if(this.numLines == 1 || this.lineHeights == null) {
			return 1;
		}
		var max = this.get_maxScrollV();
		if(this.scrollV > max) {
			return max;
		}
		return this.scrollV;
	}
	,set_scrollV: function(value) {
		if(value < 1) {
			value = 1;
		}
		return this.scrollV = value;
	}
	,set_text: function(value) {
		return this.text = value;
	}
	,__class__: openfl_text__$internal_TextEngine
	,__properties__: {set_text:"set_text",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_restrict:"set_restrict",get_maxScrollV:"get_maxScrollV",get_bottomScrollV:"get_bottomScrollV"}
};
var openfl_text__$internal_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl.text._internal.TextFormatRange"] = openfl_text__$internal_TextFormatRange;
openfl_text__$internal_TextFormatRange.__name__ = "openfl.text._internal.TextFormatRange";
openfl_text__$internal_TextFormatRange.prototype = {
	__class__: openfl_text__$internal_TextFormatRange
};
var openfl_text__$internal_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl.text._internal.TextLayoutGroup"] = openfl_text__$internal_TextLayoutGroup;
openfl_text__$internal_TextLayoutGroup.__name__ = "openfl.text._internal.TextLayoutGroup";
openfl_text__$internal_TextLayoutGroup.prototype = {
	__class__: openfl_text__$internal_TextLayoutGroup
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = "openfl.ui.GameInput";
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var devices = lime_ui_Joystick.__getDeviceData();
		var device = devices[gamepad.id].id;
		var devices = lime_ui_Joystick.__getDeviceData();
		var device1 = new openfl_ui_GameInputDevice(device,devices[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device1);
		openfl_ui_GameInput.__devices.set(gamepad,device1);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var control;
			if(axis == null) {
				control = "null";
			} else {
				switch(axis) {
				case 0:
					control = "LEFT_X";
					break;
				case 1:
					control = "LEFT_Y";
					break;
				case 2:
					control = "RIGHT_X";
					break;
				case 3:
					control = "RIGHT_Y";
					break;
				case 4:
					control = "TRIGGER_LEFT";
					break;
				case 5:
					control = "TRIGGER_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + axis + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"AXIS_" + control,-1,1);
			device.__axis.h[axis] = control1;
			device.__controls.push(control1);
		}
		var control = device.__axis.h[axis];
		control.value = value;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 1;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var control;
			if(button == null) {
				control = "null";
			} else {
				switch(button) {
				case 0:
					control = "A";
					break;
				case 1:
					control = "B";
					break;
				case 2:
					control = "X";
					break;
				case 3:
					control = "Y";
					break;
				case 4:
					control = "BACK";
					break;
				case 5:
					control = "GUIDE";
					break;
				case 6:
					control = "START";
					break;
				case 7:
					control = "LEFT_STICK";
					break;
				case 8:
					control = "RIGHT_STICK";
					break;
				case 9:
					control = "LEFT_SHOULDER";
					break;
				case 10:
					control = "RIGHT_SHOULDER";
					break;
				case 11:
					control = "DPAD_UP";
					break;
				case 12:
					control = "DPAD_DOWN";
					break;
				case 13:
					control = "DPAD_LEFT";
					break;
				case 14:
					control = "DPAD_RIGHT";
					break;
				default:
					control = "UNKNOWN (" + button + ")";
				}
			}
			var control1 = new openfl_ui_GameInputControl(device,"BUTTON_" + control,0,1);
			device.__button.h[button] = control1;
			device.__controls.push(control1);
		}
		var control = device.__button.h[button];
		control.value = 0;
		control.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",true,false,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		openfl_events_EventDispatcher.prototype.addEventListener.call(this,type,listener,useCapture,priority,useWeakReference);
		if(type == "deviceAdded") {
			var _g = 0;
			var _g1 = openfl_ui_GameInput.__deviceList;
			while(_g < _g1.length) {
				var device = _g1[_g];
				++_g;
				this.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",true,false,device));
			}
		}
	}
	,__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = "openfl.ui.GameInputControl";
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 0,-1,1);
	this.__axis.h[0] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 1,-1,1);
	this.__axis.h[1] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 2,-1,1);
	this.__axis.h[2] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 3,-1,1);
	this.__axis.h[3] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 4,-1,1);
	this.__axis.h[4] = control;
	this.__controls.push(control);
	control = new openfl_ui_GameInputControl(this,"AXIS_" + 5,-1,1);
	this.__axis.h[5] = control;
	this.__controls.push(control);
	var _g = 0;
	while(_g < 15) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i,0,1);
		this.__button.h[i] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = "openfl.ui.GameInputDevice";
openfl_ui_GameInputDevice.prototype = {
	__class__: openfl_ui_GameInputDevice
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = "openfl.ui.Keyboard";
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = "openfl.ui.Mouse";
var openfl_ui_MouseCursor = {};
openfl_ui_MouseCursor.toLimeCursor = function(this1) {
	switch(this1) {
	case "arrow":
		return lime_ui_MouseCursor.ARROW;
	case "auto":
		return lime_ui_MouseCursor.DEFAULT;
	case "button":
		return lime_ui_MouseCursor.POINTER;
	case "crosshair":
		return lime_ui_MouseCursor.CROSSHAIR;
	case "custom":
		return lime_ui_MouseCursor.CUSTOM;
	case "hand":
		return lime_ui_MouseCursor.MOVE;
	case "ibeam":
		return lime_ui_MouseCursor.TEXT;
	case "resize_nesw":
		return lime_ui_MouseCursor.RESIZE_NESW;
	case "resize_ns":
		return lime_ui_MouseCursor.RESIZE_NS;
	case "resize_nwse":
		return lime_ui_MouseCursor.RESIZE_NWSE;
	case "resize_we":
		return lime_ui_MouseCursor.RESIZE_WE;
	case "wait":
		return lime_ui_MouseCursor.WAIT;
	case "waitarrow":
		return lime_ui_MouseCursor.WAIT_ARROW;
	default:
		return lime_ui_MouseCursor.DEFAULT;
	}
};
var openfl_utils_AGALMiniAssembler = function(debugging) {
	if(debugging == null) {
		debugging = false;
	}
	this.debugEnabled = false;
	this.debugEnabled = debugging;
	if(!openfl_utils_AGALMiniAssembler.initialized) {
		openfl_utils_AGALMiniAssembler.init();
	}
};
$hxClasses["openfl.utils.AGALMiniAssembler"] = openfl_utils_AGALMiniAssembler;
openfl_utils_AGALMiniAssembler.__name__ = "openfl.utils.AGALMiniAssembler";
openfl_utils_AGALMiniAssembler.init = function() {
	openfl_utils_AGALMiniAssembler.initialized = true;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mov",2,0,0);
	this1.h["mov"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("add",3,1,0);
	this1.h["add"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sub",3,2,0);
	this1.h["sub"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("mul",3,3,0);
	this1.h["mul"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("div",3,4,0);
	this1.h["div"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rcp",2,5,0);
	this1.h["rcp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("min",3,6,0);
	this1.h["min"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("max",3,7,0);
	this1.h["max"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("frc",2,8,0);
	this1.h["frc"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sqt",2,9,0);
	this1.h["sqt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("rsq",2,10,0);
	this1.h["rsq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("pow",3,11,0);
	this1.h["pow"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("log",2,12,0);
	this1.h["log"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("exp",2,13,0);
	this1.h["exp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("nrm",2,14,0);
	this1.h["nrm"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sin",2,15,0);
	this1.h["sin"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("cos",2,16,0);
	this1.h["cos"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("crs",3,17,0);
	this1.h["crs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp3",3,18,0);
	this1.h["dp3"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("dp4",3,19,0);
	this1.h["dp4"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("abs",2,20,0);
	this1.h["abs"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("neg",2,21,0);
	this1.h["neg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sat",2,22,0);
	this1.h["sat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m33",3,23,16);
	this1.h["m33"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m44",3,24,16);
	this1.h["m44"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("m34",3,25,16);
	this1.h["m34"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddx",2,26,288);
	this1.h["ddx"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ddy",2,27,288);
	this1.h["ddy"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ife",2,28,897);
	this1.h["ife"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ine",2,29,897);
	this1.h["ine"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifg",2,30,897);
	this1.h["ifg"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("ifl",2,31,897);
	this1.h["ifl"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("els",0,32,1921);
	this1.h["els"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("eif",0,33,1409);
	this1.h["eif"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("kil",1,39,160);
	this1.h["kil"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("tex",3,40,40);
	this1.h["tex"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sge",3,41,0);
	this1.h["sge"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("slt",3,42,0);
	this1.h["slt"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sgn",2,43,0);
	this1.h["sgn"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("seq",3,44,0);
	this1.h["seq"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.OPMAP;
	var v = new openfl_utils__$AGALMiniAssembler_OpCode("sne",3,45,0);
	this1.h["sne"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("rgba",8,0);
	this1.h["rgba"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressed",8,1);
	this1.h["compressed"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("compressedalpha",8,2);
	this1.h["compressedalpha"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt1",8,1);
	this1.h["dxt1"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("dxt5",8,2);
	this1.h["dxt5"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("video",8,3);
	this1.h["video"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("2d",12,0);
	this1.h["2d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("3d",12,2);
	this1.h["3d"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("cube",12,1);
	this1.h["cube"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnearest",24,1);
	this1.h["mipnearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("miplinear",24,2);
	this1.h["miplinear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("mipnone",24,0);
	this1.h["mipnone"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nomip",24,0);
	this1.h["nomip"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("nearest",28,0);
	this1.h["nearest"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("linear",28,1);
	this1.h["linear"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic2x",28,2);
	this1.h["anisotropic2x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic4x",28,3);
	this1.h["anisotropic4x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic8x",28,4);
	this1.h["anisotropic8x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("anisotropic16x",28,5);
	this1.h["anisotropic16x"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("centroid",16,1);
	this1.h["centroid"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("single",16,2);
	this1.h["single"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("ignoresampler",16,4);
	this1.h["ignoresampler"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat",20,1);
	this1.h["repeat"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("wrap",20,1);
	this1.h["wrap"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp",20,0);
	this1.h["clamp"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("clamp_u_repeat_v",20,2);
	this1.h["clamp_u_repeat_v"] = v;
	var this1 = openfl_utils_AGALMiniAssembler.SAMPLEMAP;
	var v = new openfl_utils__$AGALMiniAssembler_Sampler("repeat_u_clamp_v",20,3);
	this1.h["repeat_u_clamp_v"] = v;
};
openfl_utils_AGALMiniAssembler.prototype = {
	assemble: function(mode,source,version,ignoreLimits) {
		if(ignoreLimits == null) {
			ignoreLimits = false;
		}
		if(version == null) {
			version = 1;
		}
		var start = openfl_Lib.getTimer();
		var this1 = new openfl_utils_ByteArrayData(0);
		this.agalcode = this1;
		this.error = "";
		var isFrag = false;
		if(mode == "fragment") {
			isFrag = true;
		} else if(mode != "vertex") {
			this.error = "ERROR: mode needs to be \"" + "fragment" + "\" or \"" + "vertex" + "\" but is \"" + mode + "\".";
		}
		this.agalcode.__endian = 1;
		this.agalcode.writeByte(160);
		this.agalcode.writeUnsignedInt(version);
		this.agalcode.writeByte(161);
		this.agalcode.writeByte(isFrag ? 1 : 0);
		this.initregmap(version,ignoreLimits);
		var lines = StringTools.replace(source,"\r","\n").split("\n");
		var nops = 0;
		var lng = lines.length;
		var reg1 = new EReg("<.*>","g");
		var reg2 = new EReg("([\\w\\.\\-\\+]+)","gi");
		var reg3 = new EReg("^\\w{3}","ig");
		var reg4 = new EReg("vc\\[([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw](\\+\\d{1,3})?)?\\](\\.[xyzw]{1,4})?|([vofi][acostdip]?[d]?)(\\d*)?(\\.[xyzw]{1,4})?","gi");
		var reg5 = new EReg("\\[.*\\]","ig");
		var reg6 = new EReg("^\\b[A-Za-z]{1,3}","ig");
		var reg7 = new EReg("\\d+","");
		var reg8 = new EReg("(\\.[xyzw]{1,4})","");
		var reg9 = new EReg("[A-Za-z]{1,3}","ig");
		var reg10 = new EReg("(\\.[xyzw]{1,1})","");
		var reg11 = new EReg("\\+\\d{1,3}","ig");
		var i = 0;
		while(i < lng && this.error == "") {
			var line = StringTools.trim(lines[i]);
			var startcomment = line.indexOf("//");
			if(startcomment != -1) {
				line = HxOverrides.substr(line,0,startcomment);
			}
			var optsi = reg1.match(line) ? reg1.matchedPos().pos : -1;
			var opts = null;
			if(optsi != -1) {
				opts = this.match(HxOverrides.substr(line,optsi,null),reg2);
				line = HxOverrides.substr(line,0,optsi);
			}
			var opCode = null;
			var opFound = null;
			if(reg3.match(line)) {
				opCode = reg3.matched(0);
				opFound = openfl_utils_AGALMiniAssembler.OPMAP.h[opCode];
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 262, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			if(this.debugEnabled) {
				lime_utils_Log.info(opFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 272, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			if(opFound == null) {
				if(line.length >= 3) {
					lime_utils_Log.warn("warning: bad line " + i + ": " + lines[i],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 279, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				++i;
				continue;
			}
			line = HxOverrides.substr(line,line.indexOf(opFound.name) + opFound.name.length,null);
			if((opFound.flags & 256) != 0 && version < 2) {
				this.error = "error: opcode requires version 2.";
				break;
			}
			if((opFound.flags & 64) != 0 && isFrag) {
				this.error = "error: opcode is only allowed in vertex programs.";
				break;
			}
			if((opFound.flags & 32) != 0 && !isFrag) {
				this.error = "error: opcode is only allowed in fragment programs.";
				break;
			}
			if(this.verbose) {
				lime_utils_Log.info("emit opcode=" + Std.string(opFound),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 308, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
			}
			this.agalcode.writeUnsignedInt(opFound.emitCode);
			++nops;
			if(nops > 4096) {
				this.error = "error: too many opcodes. maximum is " + 4096 + ".";
				break;
			}
			var regs = this.match(line,reg4);
			if(regs.length != opFound.numRegister) {
				this.error = "error: wrong number of operands. found " + regs.length + " but expected " + opFound.numRegister + ".";
				break;
			}
			var badreg = false;
			var pad = 160;
			var regLength = regs.length;
			var _g = 0;
			var _g1 = regLength;
			while(_g < _g1) {
				var j = _g++;
				var isRelative = false;
				var relreg = this.match(regs[j],reg5);
				if(relreg.length > 0) {
					regs[j] = StringTools.replace(regs[j],relreg[0],"0");
					if(this.verbose) {
						lime_utils_Log.info("IS REL",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 344, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					isRelative = true;
				}
				var res = this.match(regs[j],reg6);
				if(res.length == 0) {
					this.error = "error: could not parse operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				var regFound = openfl_utils_AGALMiniAssembler.REGMAP.h[res[0]];
				if(this.debugEnabled) {
					lime_utils_Log.info(regFound,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 363, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(regFound == null) {
					this.error = "error: could not find register name for operand " + j + " (" + regs[j] + ").";
					badreg = true;
					break;
				}
				if(isFrag) {
					if((regFound.flags & 32) == 0) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in vertex programs.";
						badreg = true;
						break;
					}
					if(isRelative) {
						this.error = "error: register operand " + j + " (" + regs[j] + ") relative adressing not allowed in fragment programs.";
						badreg = true;
						break;
					}
				} else if((regFound.flags & 64) == 0) {
					this.error = "error: register operand " + j + " (" + regs[j] + ") only allowed in fragment programs.";
					badreg = true;
					break;
				}
				regs[j] = HxOverrides.substr(regs[j],regs[j].indexOf(regFound.name) + regFound.name.length,null);
				var idxmatch = isRelative ? this.match(relreg[0],reg7) : this.match(regs[j],reg7);
				var regidx = 0;
				if(idxmatch.length > 0) {
					regidx = Std.parseInt(idxmatch[0]);
				}
				if(UInt.gt(regidx,regFound.range)) {
					var tmp = regFound.range + 1;
					this.error = "error: register operand " + j + " (" + regs[j] + ") index exceeds limit of " + (tmp == null ? "null" : Std.string(UInt.toFloat(tmp))) + ".";
					badreg = true;
					break;
				}
				var regmask = 0;
				var maskmatch = this.match(regs[j],reg8);
				var isDest = j == 0 && (opFound.flags & 128) == 0;
				var isSampler = j == 2 && (opFound.flags & 8) != 0;
				var reltype = 0;
				var relsel = 0;
				var reloffset = 0;
				if(isDest && isRelative) {
					this.error = "error: relative can not be destination";
					badreg = true;
					break;
				}
				if(maskmatch.length > 0) {
					regmask = 0;
					var cv = 0;
					var maskLength = maskmatch[0].length;
					var k = 1;
					while(k < maskLength) {
						cv = HxOverrides.cca(maskmatch[0],k) - 120;
						if(UInt.gt(cv,2)) {
							cv = 3;
						}
						if(isDest) {
							regmask |= 1 << cv;
						} else {
							regmask = regmask | cv << (k - 1 << 1);
						}
						++k;
					}
					if(!isDest) {
						while(k <= 4) {
							regmask = regmask | cv << (k - 1 << 1);
							++k;
						}
					}
				} else {
					regmask = isDest ? 15 : 228;
				}
				if(isRelative) {
					var relname = this.match(relreg[0],reg9);
					var regFoundRel = openfl_utils_AGALMiniAssembler.REGMAP.h[relname[0]];
					if(regFoundRel == null) {
						this.error = "error: bad index register";
						badreg = true;
						break;
					}
					reltype = regFoundRel.emitCode;
					var selmatch = this.match(relreg[0],reg10);
					if(selmatch.length == 0) {
						this.error = "error: bad index register select";
						badreg = true;
						break;
					}
					relsel = HxOverrides.cca(selmatch[0],1) - 120;
					if(UInt.gt(relsel,2)) {
						relsel = 3;
					}
					var relofs = this.match(relreg[0],reg11);
					if(relofs.length > 0) {
						reloffset = Std.parseInt(relofs[0]);
					}
					if(reloffset < 0 || reloffset > 255) {
						this.error = "error: index offset " + reloffset + " out of bounds. [0..255]";
						badreg = true;
						break;
					}
					if(this.verbose) {
						lime_utils_Log.info("RELATIVE: type=" + reltype + "==" + relname[0] + " sel=" + (relsel == null ? "null" : Std.string(UInt.toFloat(relsel))) + "==" + selmatch[0] + " idx=" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + " offset=" + reloffset,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 518, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
				}
				if(this.verbose) {
					lime_utils_Log.info("  emit argcode=" + Std.string(regFound) + "[" + (regidx == null ? "null" : Std.string(UInt.toFloat(regidx))) + "][" + regmask + "]",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 525, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
				}
				if(isDest) {
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					pad -= 32;
				} else if(isSampler) {
					if(this.verbose) {
						lime_utils_Log.info("  emit sampler",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 541, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					var samplerbits = 5;
					var optsLength = opts == null ? 0 : opts.length;
					var bias = 0.0;
					var _g2 = 0;
					var _g3 = optsLength;
					while(_g2 < _g3) {
						var k1 = _g2++;
						if(this.verbose) {
							lime_utils_Log.info("    opt: " + opts[k1],{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 552, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
						}
						var optfound = openfl_utils_AGALMiniAssembler.SAMPLEMAP.h[opts[k1]];
						if(optfound == null) {
							bias = parseFloat(opts[k1]);
							if(this.verbose) {
								lime_utils_Log.info("    bias: " + bias,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 565, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
							}
						} else {
							if(optfound.flag != 16) {
								samplerbits &= ~(15 << optfound.flag);
							}
							samplerbits = samplerbits | optfound.mask << optfound.flag;
						}
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(bias * 8.0 | 0);
					this.agalcode.writeByte(0);
					this.agalcode.writeUnsignedInt(samplerbits);
					if(this.verbose) {
						lime_utils_Log.info("    bits: " + (samplerbits - 5),{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 586, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
					}
					pad -= 64;
				} else {
					if(j == 0) {
						this.agalcode.writeUnsignedInt(0);
						pad -= 32;
					}
					this.agalcode.writeShort(regidx);
					this.agalcode.writeByte(reloffset);
					this.agalcode.writeByte(regmask);
					this.agalcode.writeByte(regFound.emitCode);
					this.agalcode.writeByte(reltype);
					this.agalcode.writeShort(isRelative ? relsel | 32768 : 0);
					pad -= 64;
				}
			}
			var j1 = 0;
			while(j1 < pad) {
				this.agalcode.writeByte(0);
				j1 += 8;
			}
			if(badreg) {
				break;
			}
			++i;
		}
		if(this.error != "") {
			this.error += "\n  at line " + i + " " + lines[i];
			openfl_utils_ByteArray.set_length(this.agalcode,0);
			lime_utils_Log.info(this.error,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 631, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.debugEnabled) {
			var dbgLine = "generated bytecode:";
			var agalLength = openfl_utils_ByteArray.get_length(this.agalcode);
			var _g = 0;
			var _g1 = agalLength;
			while(_g < _g1) {
				var index = _g++;
				if(index % 16 == 0) {
					dbgLine += "\n";
				}
				if(index % 4 == 0) {
					dbgLine += " ";
				}
				var byteStr = StringTools.hex(this.agalcode.b[index],2);
				if(byteStr.length < 2) {
					byteStr = "0" + byteStr;
				}
				dbgLine += byteStr;
			}
			lime_utils_Log.info(dbgLine,{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 662, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		if(this.verbose) {
			lime_utils_Log.info("AGALMiniAssembler.assemble time: " + (openfl_Lib.getTimer() - start) / 1000 + "s",{ fileName : "openfl/utils/AGALMiniAssembler.hx", lineNumber : 667, className : "openfl.utils.AGALMiniAssembler", methodName : "assemble"});
		}
		return this.agalcode;
	}
	,initregmap: function(version,ignorelimits) {
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("va","vertex attribute",0,ignorelimits ? 1024 : version == 1 || version == 2 ? 7 : 15,66);
		this1.h["va"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vc","vertex constant",1,ignorelimits ? 1024 : version == 1 ? 127 : 249,66);
		this1.h["vc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vt","vertex temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,67);
		this1.h["vt"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vo","vertex output",3,ignorelimits ? 1024 : 0,65);
		this1.h["vo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("vi","varying",4,ignorelimits ? 1024 : version == 1 ? 7 : 9,99);
		this1.h["vi"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fc","fragment constant",1,ignorelimits ? 1024 : version == 1 ? 27 : version == 2 ? 63 : 199,34);
		this1.h["fc"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("ft","fragment temporary",2,ignorelimits ? 1024 : version == 1 ? 7 : 25,35);
		this1.h["ft"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fs","texture sampler",5,ignorelimits ? 1024 : 7,34);
		this1.h["fs"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fo","fragment output",3,ignorelimits ? 1024 : version == 1 ? 0 : 3,33);
		this1.h["fo"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("fd","fragment depth output",6,ignorelimits ? 1024 : version == 1 ? -1 : 0,33);
		this1.h["fd"] = v;
		var this1 = openfl_utils_AGALMiniAssembler.REGMAP;
		var v = new openfl_utils__$AGALMiniAssembler_Register("iid","instance id",7,ignorelimits ? 1024 : 0,66);
		this1.h["iid"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["op"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["i"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["v"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fo"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["oc"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["fd"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["od"] = v;
		var v = openfl_utils_AGALMiniAssembler.REGMAP.h["vi"];
		openfl_utils_AGALMiniAssembler.REGMAP.h["fi"] = v;
	}
	,match: function(value,reg) {
		var matches = [];
		var index = 0;
		var match;
		while(reg.matchSub(value,index)) {
			match = reg.matched(0);
			matches.push(match);
			index = reg.matchedPos().pos + match.length;
		}
		return matches;
	}
	,__class__: openfl_utils_AGALMiniAssembler
};
var openfl_utils__$AGALMiniAssembler_OpCode = function(name,numRegister,emitCode,flags) {
	this.name = name;
	this.numRegister = numRegister;
	this.emitCode = emitCode;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.OpCode"] = openfl_utils__$AGALMiniAssembler_OpCode;
openfl_utils__$AGALMiniAssembler_OpCode.__name__ = "openfl.utils._AGALMiniAssembler.OpCode";
openfl_utils__$AGALMiniAssembler_OpCode.prototype = {
	__class__: openfl_utils__$AGALMiniAssembler_OpCode
};
var openfl_utils__$AGALMiniAssembler_Register = function(name,longName,emitCode,range,flags) {
	this.name = name;
	this.longName = longName;
	this.emitCode = emitCode;
	this.range = range;
	this.flags = flags;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Register"] = openfl_utils__$AGALMiniAssembler_Register;
openfl_utils__$AGALMiniAssembler_Register.__name__ = "openfl.utils._AGALMiniAssembler.Register";
openfl_utils__$AGALMiniAssembler_Register.prototype = {
	toString: function() {
		return "[Register name=\"" + this.name + "\", longName=\"" + this.longName + "\", emitCode=" + (this.emitCode == null ? "null" : Std.string(UInt.toFloat(this.emitCode))) + ", range=" + (this.range == null ? "null" : Std.string(UInt.toFloat(this.range))) + ", flags=" + (this.flags == null ? "null" : Std.string(UInt.toFloat(this.flags))) + "]";
	}
	,__class__: openfl_utils__$AGALMiniAssembler_Register
};
var openfl_utils__$AGALMiniAssembler_Sampler = function(name,flag,mask) {
	this.name = name;
	this.flag = flag;
	this.mask = mask;
};
$hxClasses["openfl.utils._AGALMiniAssembler.Sampler"] = openfl_utils__$AGALMiniAssembler_Sampler;
openfl_utils__$AGALMiniAssembler_Sampler.__name__ = "openfl.utils._AGALMiniAssembler.Sampler";
openfl_utils__$AGALMiniAssembler_Sampler.prototype = {
	__class__: openfl_utils__$AGALMiniAssembler_Sampler
};
var openfl_utils_IAssetCache = function() { };
$hxClasses["openfl.utils.IAssetCache"] = openfl_utils_IAssetCache;
openfl_utils_IAssetCache.__name__ = "openfl.utils.IAssetCache";
openfl_utils_IAssetCache.__isInterface__ = true;
openfl_utils_IAssetCache.prototype = {
	__class__: openfl_utils_IAssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.utils.AssetCache"] = openfl_utils_AssetCache;
openfl_utils_AssetCache.__name__ = "openfl.utils.AssetCache";
openfl_utils_AssetCache.__interfaces__ = [openfl_utils_IAssetCache];
openfl_utils_AssetCache.prototype = {
	getBitmapData: function(id) {
		return this.bitmapData.h[id];
	}
	,getFont: function(id) {
		return this.font.h[id];
	}
	,getSound: function(id) {
		return this.sound.h[id];
	}
	,hasBitmapData: function(id) {
		return Object.prototype.hasOwnProperty.call(this.bitmapData.h,id);
	}
	,hasFont: function(id) {
		return Object.prototype.hasOwnProperty.call(this.font.h,id);
	}
	,hasSound: function(id) {
		return Object.prototype.hasOwnProperty.call(this.sound.h,id);
	}
	,setBitmapData: function(id,bitmapData) {
		this.bitmapData.h[id] = bitmapData;
	}
	,setFont: function(id,font) {
		this.font.h[id] = font;
	}
	,setSound: function(id,sound) {
		this.sound.h[id] = sound;
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,__class__: openfl_utils_AssetCache
	,__properties__: {get_enabled:"get_enabled"}
};
var openfl_utils_Assets = function() { };
$hxClasses["openfl.utils.Assets"] = openfl_utils_Assets;
openfl_utils_Assets.__name__ = "openfl.utils.Assets";
openfl_utils_Assets.exists = function(id,type) {
	return lime_utils_Assets.exists(id,type);
};
openfl_utils_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_utils_Assets.cache.getBitmapData(id);
		if(openfl_utils_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_utils_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setBitmapData(id,bitmapData);
		}
		return bitmapData;
	}
	return null;
};
openfl_utils_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasFont(id)) {
		return openfl_utils_Assets.cache.getFont(id);
	}
	var limeFont = lime_utils_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = new openfl_text_Font();
		font.__fromLimeFont(limeFont);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_utils_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_utils_Assets.cache.get_enabled() && openfl_utils_Assets.cache.hasSound(id)) {
		var sound = openfl_utils_Assets.cache.getSound(id);
		if(openfl_utils_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var buffer = lime_utils_Assets.getAudioBuffer(id,false);
	if(buffer != null) {
		var sound = openfl_media_Sound.fromAudioBuffer(buffer);
		if(useCache && openfl_utils_Assets.cache.get_enabled()) {
			openfl_utils_Assets.cache.setSound(id,sound);
		}
		return sound;
	}
	return null;
};
openfl_utils_Assets.getText = function(id) {
	return lime_utils_Assets.getText(id);
};
openfl_utils_Assets.isValidBitmapData = function(bitmapData) {
	return bitmapData != null && bitmapData.image != null;
};
openfl_utils_Assets.isValidSound = function(sound) {
	return true;
};
openfl_utils_Assets.loadSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	lime_utils_Assets.loadAudioBuffer(id,useCache).onComplete(function(buffer) {
		if(buffer != null) {
			var sound = openfl_media_Sound.fromAudioBuffer(buffer);
			if(useCache && openfl_utils_Assets.cache.get_enabled()) {
				openfl_utils_Assets.cache.setSound(id,sound);
			}
			promise.complete(sound);
		} else {
			promise.error("[Assets] Could not load Sound \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
var openfl_utils_ByteArray = {};
openfl_utils_ByteArray.__properties__ = {set_length:"set_length",get_length:"get_length"};
openfl_utils_ByteArray.fromArrayBuffer = function(buffer) {
	if(buffer == null) {
		return null;
	}
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils_ByteArray.fromBytes = function(bytes) {
	if(bytes == null) {
		return null;
	}
	if(((bytes) instanceof openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils_ByteArray.get_length = function(this1) {
	if(this1 == null) {
		return 0;
	} else {
		return this1.length;
	}
};
openfl_utils_ByteArray.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
		if(value < this1.position) {
			this1.position = value;
		}
	}
	this1.length = value;
	return value;
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = "openfl.utils.IDataOutput";
openfl_utils_IDataOutput.__isInterface__ = true;
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = "openfl.utils.IDataInput";
openfl_utils_IDataInput.__isInterface__ = true;
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	haxe_io_Bytes.call(this,bytes.b.buffer);
	this.__length = length;
	if(openfl_utils_ByteArrayData.__defaultEndian == null) {
		if(lime_system_System.get_endianness() == lime_system_Endian.LITTLE_ENDIAN) {
			openfl_utils_ByteArrayData.__defaultEndian = 1;
		} else {
			openfl_utils_ByteArrayData.__defaultEndian = 0;
		}
	}
	this.__endian = openfl_utils_ByteArrayData.__defaultEndian;
	this.objectEncoding = openfl_utils_ByteArrayData.defaultObjectEncoding;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = "openfl.utils.ByteArrayData";
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.length) {
			return this.b[this.position++];
		} else {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		var bytesCount = this.readUnsignedShort();
		return this.readUTFBytes(bytesCount);
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.length) {
			throw haxe_Exception.thrown(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils_ByteArray.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils_ByteArray.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 24 & 255 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255 & 255;
			this.b[this.position++] = value >> 16 & 255 & 255;
			this.b[this.position++] = value >> 8 & 255 & 255;
			this.b[this.position++] = value & 255 & 255;
		}
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTFBytes: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils_ByteArray.fromBytes(bytes));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.__length = bytes.length;
		this.data = bytes.data;
		this.length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.__length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			if(this.__length > 0) {
				var cacheLength = this.length;
				this.length = this.__length;
				bytes.blit(0,this,0,this.__length);
				this.length = cacheLength;
			}
			this.b = bytes.b;
			this.__length = bytes.length;
			this.data = bytes.data;
		}
		if(this.length < size) {
			this.length = size;
		}
	}
	,__class__: openfl_utils_ByteArrayData
});
var openfl_utils_Object = {};
openfl_utils_Object.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return new haxe_iterators_ArrayIterator(fields);
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = "haxe.lang.Iterator";
haxe_lang_Iterator.__isInterface__ = true;
haxe_lang_Iterator.prototype = {
	__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = "haxe.lang.Iterable";
haxe_lang_Iterable.__isInterface__ = true;
haxe_lang_Iterable.prototype = {
	__class__: haxe_lang_Iterable
};
var openfl_utils__$internal_Lib = function() { };
$hxClasses["openfl.utils._internal.Lib"] = openfl_utils__$internal_Lib;
openfl_utils__$internal_Lib.__name__ = "openfl.utils._internal.Lib";
var openfl_utils__$internal_TouchData = function() {
	this.rollOutStack = [];
};
$hxClasses["openfl.utils._internal.TouchData"] = openfl_utils__$internal_TouchData;
openfl_utils__$internal_TouchData.__name__ = "openfl.utils._internal.TouchData";
openfl_utils__$internal_TouchData.prototype = {
	reset: function() {
		this.touch = null;
		this.touchDownTarget = null;
		this.touchOverTarget = null;
		this.rollOutStack.splice(0,this.rollOutStack.length);
	}
	,__class__: openfl_utils__$internal_TouchData
};
function $iterator(o) { if( o instanceof Array ) return function() { return new haxe_iterators_ArrayIterator(o); }; return typeof(o.iterator) == 'function' ? $bind(o,o.iterator) : o.iterator; }
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
var _init = lime__$internal_backend_html5_HTML5Application;
var init = lime_app_Application;
haxe_ds_ObjectMap.count = 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
js_Boot.__toStr = ({ }).toString;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_lib__$ArrayBuffer_ArrayBufferCompat.sliceImpl;
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint32Array(256);
lime_math_RGBA.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_RGBA.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var array = null;
var vector = null;
var view = null;
var buffer = null;
var len = null;
var this1 = new Uint8Array(511);
lime_math_RGBA.__clamp = this1;
var _g = 0;
while(_g < 255) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = i;
}
var _g = 255;
var _g1 = 511;
while(_g < _g1) {
	var i = _g++;
	lime_math_RGBA.__clamp[i] = 255;
}
lime_utils_Log.level = 3;
if(typeof console == "undefined") {
	console = {}
}
if(console.log == null) {
	console.log = function() {
	};
}
msignal_SlotList.NIL = new msignal_SlotList(null,null);
openfl_display__$internal_CanvasGraphics.hitTestCanvas = js_Browser.get_supported() ? window.document.createElement("canvas") : null;
openfl_display__$internal_CanvasGraphics.hitTestContext = js_Browser.get_supported() ? openfl_display__$internal_CanvasGraphics.hitTestCanvas.getContext("2d") : null;
openfl_display_DisplayObject.__meta__ = { fields : { __cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}, removeEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DisplayObject.__broadcastEvents = new haxe_ds_StringMap();
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__tempStack = new lime_utils_ObjectPool(function() {
	return openfl_Vector.toObjectVector(null);
},function(stack) {
	stack.set_length(0);
});
openfl_text_Font.__fontByName = new haxe_ds_StringMap();
openfl_text_Font.__registeredFonts = [];
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
com_coffeebreak_data_AnimationTypes.TIMER = "timer";
com_coffeebreak_data_AnimationTypes.ENTER_FRAME = "enterframe";
com_coffeebreak_managers_OrientationManager.PORTRAIT = "portrait";
com_coffeebreak_managers_OrientationManager.LANDSCAPE = "landscape";
com_coffeebreak_CoffeeConstants.MULTISCREEN = false;
com_coffeebreak_CoffeeConstants.CHECK_MOBILE_BROWSER = false;
com_coffeebreak_CoffeeConstants.MAIN_MUSIC_THEME = "";
com_coffeebreak_CoffeeConstants.SOUND_SUFIX = ".mp3";
com_coffeebreak_CoffeeConstants.MAIN_SOUND_VOLUME = 1.0;
com_coffeebreak_CoffeeConstants.RATIO = 0.0;
com_coffeebreak_CoffeeConstants.SHOULD_RESIZE = true;
com_coffeebreak_CoffeeConstants.FORCE_ORIENTATION = false;
com_coffeebreak_CoffeeConstants.GAME_GRAF_SUFIX = com_coffeebreak_managers_OrientationManager.LANDSCAPE;
com_coffeebreak_CoffeeConstants.FONT_MANAGER = new com_coffeebreak_managers_FontManager();
com_coffeebreak_CoffeeConstants.COMPONENT_HOLDER = new com_coffeebreak_data_ComponentsHolder();
com_coffeebreak_CoffeeConstants.NAME_CONVERTER = new com_coffeebreak_utils_MultiScreenNamesConverter();
com_coffeebreak_CoffeeConstants.ANIMATION_TYPE = com_coffeebreak_data_AnimationTypes.TIMER;
com_coffeebreak_CoffeeConstants.USE_IMG_FROM_TEXTURE = false;
com_coffeebreak_GameProperties.CURRENT_LANGUAGE = "en";
com_coffeebreak_GameProperties.STARTING_MAP_MARKER = "City State,615,615";
com_coffeebreak_GameProperties.FONTS = [new com_coffeebreak_core_FontItem("Minecraftia","fonts/Minecraftia.ttf"),new com_coffeebreak_core_FontItem("Arial","fonts/ARIAL.TTF")];
com_coffeebreak_GameProperties.IS_GAME_PAUSED = false;
com_coffeebreak_GameProperties.SAVE_FILE_NAME = "gcdata.json";
com_coffeebreak_GameProperties.TEST_TIME = false;
com_coffeebreak_core_BaseScreen.__meta__ = { fields : { pauseGame : { keep : null}}};
com_coffeebreak_core_CoffeeItemFactory.VERBOSE = false;
com_coffeebreak_core_CoffeeMovieClip.ANIMATION_DONE = "animationdone";
com_coffeebreak_managers_DataManager.DATA_LOADED = "dataloaded";
com_coffeebreak_data_MarkerNames.TRADING_POST = "Trading Post";
com_coffeebreak_data_MarkerNames.STRONG_ISLE = "Strongs Isle";
com_coffeebreak_data_ResizeEventRegister.instance = new com_coffeebreak_data_ResizeEventRegister();
com_coffeebreak_events_CoffeeEvent.KLIK = "klik";
com_coffeebreak_managers_GrindcraftSaveManager.DATA_NAME = "GrindCratfData";
com_coffeebreak_managers_PositionManager.DATA_PARSED = "dataparsed";
com_coffeebreak_managers_SoundManager.SOUNDS_PATH = "sounds/";
openfl_geom_Matrix.__meta__ = { fields : { equals : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_geom_Matrix.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Matrix();
},function(m) {
	m.identity();
});
com_coffeebreak_utils_ImageScaling.matrix = new openfl_geom_Matrix();
feathers_core_FeathersControl.__meta__ = { fields : { layoutData : { style : null}, focusRectSkin : { style : null}}};
feathers_controls_Button.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_Button.VARIANT_PRIMARY = "primary";
feathers_controls_Button.VARIANT_DANGER = "danger";
feathers_controls_Callout.__meta__ = { obj : { defaultXmlProperty : ["content"]}};
feathers_controls_Callout.INVALIDATION_FLAG_ORIGIN = feathers_core_InvalidationFlag.CUSTOM("origin");
feathers_controls_ToggleButton.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_supportClasses_BaseScrollContainer.INVALIDATION_FLAG_SCROLLER_FACTORY = feathers_core_InvalidationFlag.CUSTOM("scrollerFactory");
feathers_controls_supportClasses_BaseScrollContainer.INVALIDATION_FLAG_SCROLL_BAR_FACTORY = feathers_core_InvalidationFlag.CUSTOM("scrollBarFactory");
feathers_controls_supportClasses_BaseScrollContainer.defaultScrollBarXFactory = feathers_utils_DisplayObjectFactory.withClass(feathers_controls_HScrollBar);
feathers_controls_supportClasses_BaseScrollContainer.defaultScrollBarYFactory = feathers_utils_DisplayObjectFactory.withClass(feathers_controls_VScrollBar);
feathers_controls_ListView.__meta__ = { obj : { defaultXmlProperty : ["dataProvider"]}};
feathers_controls_ListView.VARIANT_BORDERLESS = "borderless";
feathers_controls_ListView.VARIANT_BORDER = "border";
feathers_controls_ListView.VARIANT_POP_UP = "popUp";
feathers_controls_ListView.CHILD_VARIANT_ITEM_RENDERER = "listView_itemRenderer";
feathers_controls_ListView.INVALIDATION_FLAG_ITEM_RENDERER_FACTORY = feathers_core_InvalidationFlag.CUSTOM("itemRendererFactory");
feathers_controls_ListView.RESET_ITEM_STATE = new feathers_data_ListViewItemState();
feathers_controls_TextInput.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_TextInput.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY = feathers_core_InvalidationFlag.CUSTOM("errorCalloutFactory");
feathers_controls_TextInput.VARIANT_SEARCH = "search";
feathers_controls_TextInput.CHILD_VARIANT_ERROR_CALLOUT = "textInput_errorCallout";
feathers_controls_ComboBox.__meta__ = { obj : { defaultXmlProperty : ["dataProvider"]}};
feathers_controls_ComboBox.INVALIDATION_FLAG_BUTTON_FACTORY = feathers_core_InvalidationFlag.CUSTOM("buttonFactory");
feathers_controls_ComboBox.INVALIDATION_FLAG_TEXT_INPUT_FACTORY = feathers_core_InvalidationFlag.CUSTOM("textInputFactory");
feathers_controls_ComboBox.INVALIDATION_FLAG_LIST_VIEW_FACTORY = feathers_core_InvalidationFlag.CUSTOM("listViewFactory");
feathers_controls_ComboBox.CHILD_VARIANT_BUTTON = "comboBox_button";
feathers_controls_ComboBox.CHILD_VARIANT_TEXT_INPUT = "comboBox_textInput";
feathers_controls_ComboBox.CHILD_VARIANT_LIST_VIEW = "comboBox_listView";
feathers_controls_ComboBox.defaultButtonFactory = feathers_utils_DisplayObjectFactory.withClass(feathers_controls_Button);
feathers_controls_ComboBox.defaultTextInputFactory = feathers_utils_DisplayObjectFactory.withClass(feathers_controls_TextInput);
feathers_controls_ComboBox.defaultListViewFactory = feathers_utils_DisplayObjectFactory.withClass(feathers_controls_ListView);
feathers_controls_Label.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_Label.VARIANT_HEADING = "heading";
feathers_controls_Label.VARIANT_DETAIL = "detail";
feathers_controls_LayoutGroup.__meta__ = { obj : { defaultXmlProperty : ["xmlContent"]}};
feathers_controls_LayoutGroup.VARIANT_TOOL_BAR = "toolBar";
feathers_controls_ScrollContainer.__meta__ = { obj : { defaultXmlProperty : ["xmlContent"]}};
feathers_controls_TextArea.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_TextArea.INVALIDATION_FLAG_ERROR_CALLOUT_FACTORY = feathers_core_InvalidationFlag.CUSTOM("errorCalloutFactory");
feathers_controls_TextArea.CHILD_VARIANT_ERROR_CALLOUT = "textArea_errorCallout";
feathers_controls_TextCallout.__meta__ = { obj : { defaultXmlProperty : ["text"]}};
feathers_controls_TextCallout.VARIANT_DANGER = "danger";
feathers_core_PopUpManager.stageToManager = new haxe_ds_ObjectMap();
feathers_core_ValidationQueue.STAGE_TO_VALIDATION_QUEUE = new haxe_ds_ObjectMap();
feathers_data_ArrayCollection.__meta__ = { obj : { defaultXmlProperty : ["array"]}};
feathers_events_FeathersEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_FeathersEvent(null,false,false);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
});
feathers_events_FlatCollectionEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_FlatCollectionEvent(null,-1,false,false);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
	event.addedItem = null;
	event.removedItem = null;
});
feathers_events_ListViewEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_ListViewEvent(null,null);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
	event.state = null;
});
feathers_events_ScrollEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_ScrollEvent(null,false,false);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
});
feathers_events_StyleProviderEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_StyleProviderEvent(null,null);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
	event.affectsTarget = null;
});
feathers_events_TriggerEvent._pool = new lime_utils_ObjectPool(function() {
	return new feathers_events_TriggerEvent(null);
},function(event) {
	event.target = null;
	event.currentTarget = null;
	event.__preventDefault = false;
	event.__isCanceled = false;
	event.__isCanceledNow = false;
	event.relatedObject = null;
});
feathers_utils_DeviceUtil.MEDIA_QUERY_DESKTOP = "screen and (hover: hover) and (pointer: fine)";
feathers_utils_ExclusivePointer.stageToObject = new haxe_ds_ObjectMap();
feathers_utils_Scroller.MINIMUM_VELOCITY = 0.02;
feathers_utils_Scroller.POINTER_ID_MOUSE = -1000;
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
lime__$internal_backend_html5_HTML5HTTPRequest.activeRequests = 0;
lime__$internal_backend_html5_HTML5HTTPRequest.requestLimit = 17;
lime__$internal_backend_html5_HTML5HTTPRequest.requestQueue = new haxe_ds_List();
lime__$internal_backend_html5_HTML5Window.dummyCharacter = "";
lime__$internal_backend_html5_HTML5Window.windowID = 0;
lime__$internal_format_Base64.DICTIONARY = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
lime__$internal_format_Base64.EXTENDED_DICTIONARY = (function($this) {
	var $r;
	var result = [];
	{
		var _g = 0;
		var _g1 = lime__$internal_format_Base64.DICTIONARY;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = lime__$internal_format_Base64.DICTIONARY;
			while(_g2 < _g3.length) {
				var b = _g3[_g2];
				++_g2;
				result.push(a + b);
			}
		}
	}
	$r = result;
	return $r;
}(this));
lime__$internal_graphics_StackBlur.MUL_TABLE = [1,171,205,293,57,373,79,137,241,27,391,357,41,19,283,265,497,469,443,421,25,191,365,349,335,161,155,149,9,278,269,261,505,245,475,231,449,437,213,415,405,395,193,377,369,361,353,345,169,331,325,319,313,307,301,37,145,285,281,69,271,267,263,259,509,501,493,243,479,118,465,459,113,446,55,435,429,423,209,413,51,403,199,393,97,3,379,375,371,367,363,359,355,351,347,43,85,337,333,165,327,323,5,317,157,311,77,305,303,75,297,294,73,289,287,71,141,279,277,275,68,135,67,133,33,262,260,129,511,507,503,499,495,491,61,121,481,477,237,235,467,232,115,457,227,451,7,445,221,439,218,433,215,427,425,211,419,417,207,411,409,203,202,401,399,396,197,49,389,387,385,383,95,189,47,187,93,185,23,183,91,181,45,179,89,177,11,175,87,173,345,343,341,339,337,21,167,83,331,329,327,163,81,323,321,319,159,79,315,313,39,155,309,307,153,305,303,151,75,299,149,37,295,147,73,291,145,289,287,143,285,71,141,281,35,279,139,69,275,137,273,17,271,135,269,267,133,265,33,263,131,261,130,259,129,257,1];
lime__$internal_graphics_StackBlur.SHG_TABLE = [0,9,10,11,9,12,10,11,12,9,13,13,10,9,13,13,14,14,14,14,10,13,14,14,14,13,13,13,9,14,14,14,15,14,15,14,15,15,14,15,15,15,14,15,15,15,15,15,14,15,15,15,15,15,15,12,14,15,15,13,15,15,15,15,16,16,16,15,16,14,16,16,14,16,13,16,16,16,15,16,13,16,15,16,14,9,16,16,16,16,16,16,16,16,16,13,14,16,16,15,16,16,10,16,15,16,14,16,16,14,16,16,14,16,16,14,15,16,16,16,14,15,14,15,13,16,16,15,17,17,17,17,17,17,14,15,17,17,16,16,17,16,15,17,16,17,11,17,16,17,16,17,16,17,17,16,17,17,16,17,17,16,16,17,17,17,16,14,17,17,17,17,15,16,14,16,15,16,13,16,15,16,14,16,15,16,12,16,15,16,17,17,17,17,17,13,16,15,17,17,17,16,15,17,17,17,16,15,17,17,14,16,17,17,16,17,17,16,15,17,16,14,17,16,15,17,16,17,17,16,17,15,16,17,14,17,16,15,17,16,17,13,17,16,17,17,16,17,14,17,16,17,16,17,16,17,9];
lime_math_Matrix4.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_system_Clipboard.onUpdate = new lime_app__$Event_$Void_$Void();
lime_system_Sensor.sensorByID = new haxe_ds_IntMap();
lime_system_Sensor.sensors = [];
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app__$Event_$lime_$ui_$Gamepad_$Void();
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app__$Event_$lime_$ui_$Joystick_$Void();
lime_ui_Touch.onCancel = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onEnd = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app__$Event_$lime_$ui_$Touch_$Void();
lime_utils_Assets.cache = new lime_utils_AssetCache();
lime_utils_Assets.onChange = new lime_app__$Event_$Void_$Void();
lime_utils_Assets.bundlePaths = new haxe_ds_StringMap();
lime_utils_Assets.libraries = new haxe_ds_StringMap();
lime_utils_Assets.libraryPaths = new haxe_ds_StringMap();
lime_utils_Log.throwErrors = true;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_easing_Expo.easeOut = new motion_easing__$Expo_ExpoEaseOut();
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.easeOut;
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
motion_easing_Quart.easeOut = new motion_easing__$Quart_QuartEaseOut();
openfl_Lib.__lastTimerID = 0;
openfl_Lib.__timers = new haxe_ds_IntMap();
openfl__$Vector_IVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl__$Vector_BoolVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FloatVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_FunctionVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_IntVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl__$Vector_ObjectVector.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { toJSON : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Application.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_BitmapData.__meta__ = { fields : { image : { SuppressWarnings : ["checkstyle:Dynamic"]}, __framebufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __indexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __surface : { SuppressWarnings : ["checkstyle:Dynamic"]}, __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __vertexBufferContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __fromImage : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_BitmapData.__tempVector = new lime_math_Vector2();
openfl_display_DisplayObjectRenderer.__meta__ = { fields : { __context : { SuppressWarnings : ["checkstyle:Dynamic"]}, __type : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CairoRenderer.__meta__ = { fields : { cairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix3 : { SuppressWarnings : ["checkstyle:Dynamic"]}, applyMatrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeCairo : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_CanvasRenderer.__meta__ = { fields : { context : { SuppressWarnings : ["checkstyle:Dynamic"]}, applySmoothing : { SuppressWarnings : ["checkstyle:Dynamic"]}, setTransform : { SuppressWarnings : ["checkstyle:Dynamic"]}, __setBlendModeContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DOMElement.__meta__ = { fields : { __element : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DOMRenderer.__meta__ = { fields : { element : { SuppressWarnings : ["checkstyle:Dynamic"]}, _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_Shader.__meta__ = { fields : { glProgram : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__meta__ = { statics : { create : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}, fields : { parameters : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_LoaderInfo.__rootURL = js_Browser.get_supported() ? window.document.URL : "";
openfl_geom_Rectangle.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Rectangle();
},function(r) {
	r.setTo(0,0,0,0);
});
openfl_display_OpenGLRenderer.__meta__ = { fields : { gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __gl : { SuppressWarnings : ["checkstyle:Dynamic"]}, __matrix : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projection : { SuppressWarnings : ["checkstyle:Dynamic"]}, __projectionFlipped : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_OpenGLRenderer.__alphaValue = [1];
openfl_display_OpenGLRenderer.__colorMultipliersValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__colorOffsetsValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__emptyColorValue = [0,0,0,0];
openfl_display_OpenGLRenderer.__hasColorTransformValue = [false];
openfl_display_OpenGLRenderer.__scissorRectangle = new openfl_geom_Rectangle();
openfl_display_OpenGLRenderer.__textureSizeValue = [0,0];
openfl_display_Preloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { onComplete : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display_DefaultPreloader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_ShaderInput.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_ShaderParameter.__meta__ = { fields : { index : { SuppressWarnings : ["checkstyle:Dynamic"]}, name : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_display_Stage.__meta__ = { fields : { __broadcastEvent : { SuppressWarnings : ["checkstyle:Dynamic"]}, __dispatchEvent : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchStack : { SuppressWarnings : [["checkstyle:Dynamic","checkstyle:LeftCurly"]]}, __dispatchTarget : { SuppressWarnings : ["checkstyle:Dynamic"]}, __handleError : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$Tileset_TileData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display_Window.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { _ : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { o : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_DrawCommandBuffer.empty = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { windingRule : { SuppressWarnings : ["checkstyle:Dynamic"]}, createBitmapFill : { SuppressWarnings : ["checkstyle:Dynamic"]}, createGradientPattern : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasGraphics.fillCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasGraphics.strokeCommands = new openfl_display__$internal_DrawCommandBuffer();
openfl_display__$internal_CanvasTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_CanvasTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, statics : { renderTileContainer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_CanvasVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_ColorTransform.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_ColorTransform();
},function(ct) {
	ct.__identity();
});
openfl_display__$internal_Context3DGraphics.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DGraphics.blankBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DGraphics.tempColorTransform = new openfl_geom_ColorTransform(1,1,1,1,0,0,0,0);
openfl_display__$internal_Context3DMaskShader.opaqueBitmapData = new openfl_display_BitmapData(1,1,false,0);
openfl_display__$internal_Context3DShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_Context3DVideo.__textureSizeValue = [0,0.];
openfl_display__$internal_DOMBitmap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMDisplayObject.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMShape.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMTextField.__regexColor = new EReg("color=(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFace = new EReg("face=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTextField.__regexFont = new EReg("<font ([^>]+)>","gi");
openfl_display__$internal_DOMTextField.__regexCloseFont = new EReg("</font>","gi");
openfl_display__$internal_DOMTextField.__regexSize = new EReg("size=(\"([^\"]+)\"|'([^']+)')","i");
openfl_display__$internal_DOMTilemap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DOMVideo.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_DrawCommandReader.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_geom_Point.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_geom_Point();
},function(p) {
	p.setTo(0,0);
});
openfl_display__$internal_SamplerState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_ShaderBuffer.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { overrideIntValues : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_display__$internal_stats_DrawCallCounter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_stats_Context3DStats.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display__$internal_stats_Context3DStats.drawCallsCounters = (function($this) {
	var $r;
	var _g = new haxe_ds_IntMap();
	{
		var value = new openfl_display__$internal_stats_DrawCallCounter();
		_g.h[0] = value;
	}
	{
		var value = new openfl_display__$internal_stats_DrawCallCounter();
		_g.h[1] = value;
	}
	$r = _g;
	return $r;
}(this));
openfl_display3D_Context3D.__glDepthStencil = -1;
openfl_display3D_Context3D.__glMaxTextureMaxAnisotropy = -1;
openfl_display3D_Context3D.__glMaxViewportDims = -1;
openfl_display3D_Context3D.__glMemoryCurrentAvailable = -1;
openfl_display3D_Context3D.__glMemoryTotalAvailable = -1;
openfl_display3D_Context3D.__glTextureMaxAnisotropy = -1;
openfl_display3D_Uniform.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_UniformMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_AGALConverter.limitedProfile = true;
openfl_display3D__$internal__$AGALConverter_DestRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_RegisterMap.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SamplerRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal__$AGALConverter_SourceRegister.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D__$internal_Context3DState.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_display3D_textures_TextureBase.__meta__ = { fields : { __textureContext : { SuppressWarnings : ["checkstyle:Dynamic"]}, __getGLFramebuffer : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_events__$EventDispatcher_DispatchIterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_events__$EventDispatcher_Listener.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_filters_DropShadowFilter.__hideShader = new openfl_filters__$DropShadowFilter_HideShader();
openfl_filters_GlowFilter.__invertAlphaShader = new openfl_filters__$GlowFilter_InvertAlphaShader();
openfl_filters_GlowFilter.__blurAlphaShader = new openfl_filters__$GlowFilter_BlurAlphaShader();
openfl_filters_GlowFilter.__combineShader = new openfl_filters__$GlowFilter_CombineShader();
openfl_filters_GlowFilter.__innerCombineShader = new openfl_filters__$GlowFilter_InnerCombineShader();
openfl_filters_GlowFilter.__combineKnockoutShader = new openfl_filters__$GlowFilter_CombineKnockoutShader();
openfl_filters_GlowFilter.__innerCombineKnockoutShader = new openfl_filters__$GlowFilter_InnerCombineKnockoutShader();
openfl_media_SoundTransform.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_media_SoundMixer.__soundChannels = [];
openfl_media_SoundMixer.__soundTransform = new openfl_media_SoundTransform();
openfl_net_SharedObject.defaultObjectEncoding = 10;
openfl_net_URLRequestDefaults.followRedirects = true;
openfl_net_URLRequestDefaults.idleTimeout = 0;
openfl_net_URLRequestDefaults.manageCookies = false;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_text_TextFormat.__meta__ = { fields : { clone : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
openfl_text__$internal_CacheMeasurement.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_HTMLParser.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_HTMLParser.__regexAlign = new EReg("align\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexBreakTag = new EReg("<br\\s*/?>","gi");
openfl_text__$internal_HTMLParser.__regexBlockIndent = new EReg("blockindent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexColor = new EReg("color\\s?=\\s?(\"#([^\"]+)\"|'#([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexEntities = [new EReg("&quot;","g"),new EReg("&apos;","g"),new EReg("&amp;","g"),new EReg("&lt;","g"),new EReg("&gt;","g"),new EReg("&nbsp;","g")];
openfl_text__$internal_HTMLParser.__regexFace = new EReg("face\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexHTMLTag = new EReg("<.*?>","g");
openfl_text__$internal_HTMLParser.__regexHref = new EReg("href\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexIndent = new EReg(" indent\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeading = new EReg("leading\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexLeftMargin = new EReg("leftmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexRightMargin = new EReg("rightmargin\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexSize = new EReg("size\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_HTMLParser.__regexTabStops = new EReg("tabstops\\s?=\\s?(\"([^\"]+)\"|'([^']+)')","i");
openfl_text__$internal_ShapeCache.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_TextEngine.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_text__$internal_TextLayoutGroup.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_ui_GameInput.__meta__ = { fields : { addEventListener : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_Mouse.__cursor = "auto";
openfl_utils_AGALMiniAssembler.__meta__ = { obj : { SuppressWarnings : [["checkstyle:ConstantName","checkstyle:FieldDocComment"]]}};
openfl_utils_AGALMiniAssembler.OPMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.REGMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.SAMPLEMAP = new haxe_ds_StringMap();
openfl_utils_AGALMiniAssembler.initialized = false;
openfl_utils__$AGALMiniAssembler_OpCode.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Register.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$AGALMiniAssembler_Sampler.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_Assets.cache = new openfl_utils_AssetCache();
openfl_utils_ByteArrayData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils_ByteArrayData.defaultObjectEncoding = 10;
openfl_utils_Object.__meta__ = { statics : { iterator : { SuppressWarnings : ["checkstyle:FieldDocComment"]}}};
haxe_lang_Iterator.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
haxe_lang_Iterable.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$internal_Lib.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}};
openfl_utils__$internal_TouchData.__meta__ = { obj : { SuppressWarnings : ["checkstyle:FieldDocComment"]}, fields : { touch : { SuppressWarnings : ["checkstyle:Dynamic"]}}};
openfl_utils__$internal_TouchData.__pool = new lime_utils_ObjectPool(function() {
	return new openfl_utils__$internal_TouchData();
},function(data) {
	data.reset();
});
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

});
$hx_exports.lime = $hx_exports.lime || {};
$hx_exports.lime.$scripts = $hx_exports.lime.$scripts || {};
$hx_exports.lime.$scripts["GrindCraft"] = $hx_script;
$hx_exports.lime.embed = function(projectName) { var exports = {};
	var script = $hx_exports.lime.$scripts[projectName];
	if (!script) throw Error("Cannot find project name \"" + projectName + "\"");
	script(exports, $global);
	for (var key in exports) $hx_exports[key] = $hx_exports[key] || exports[key];
	var lime = exports.lime || window.lime;
	if (lime && lime.embed && this != lime.embed) lime.embed.apply(lime, arguments);
	return exports;
};
if(typeof define == "function" && define.amd) {
	define([], function() { return $hx_exports.lime; });
	define.__amd = define.amd;
	define.amd = null;
}
})(typeof exports != "undefined" ? exports : typeof define == "function" && define.amd ? {} : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

/*! howler.js v2.1.1 | (c) 2013-2018, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
!function(){"use strict";var e=function(){this.init()};e.prototype={init:function(){var e=this||n;return e._counter=1e3,e._html5AudioPool=[],e.html5PoolSize=10,e._codecs={},e._howls=[],e._muted=!1,e._volume=1,e._canPlayEvent="canplaythrough",e._navigator="undefined"!=typeof window&&window.navigator?window.navigator:null,e.masterGain=null,e.noAudio=!1,e.usingWebAudio=!0,e.autoSuspend=!0,e.ctx=null,e.autoUnlock=!0,e._setup(),e},volume:function(e){var o=this||n;if(e=parseFloat(e),o.ctx||_(),void 0!==e&&e>=0&&e<=1){if(o._volume=e,o._muted)return o;o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.volume=u._volume*e)}return o}return o._volume},mute:function(e){var o=this||n;o.ctx||_(),o._muted=e,o.usingWebAudio&&o.masterGain.gain.setValueAtTime(e?0:o._volume,n.ctx.currentTime);for(var t=0;t<o._howls.length;t++)if(!o._howls[t]._webAudio)for(var r=o._howls[t]._getSoundIds(),a=0;a<r.length;a++){var u=o._howls[t]._soundById(r[a]);u&&u._node&&(u._node.muted=!!e||u._muted)}return o},unload:function(){for(var e=this||n,o=e._howls.length-1;o>=0;o--)e._howls[o].unload();return e.usingWebAudio&&e.ctx&&void 0!==e.ctx.close&&(e.ctx.close(),e.ctx=null,_()),e},codecs:function(e){return(this||n)._codecs[e.replace(/^x-/,"")]},_setup:function(){var e=this||n;if(e.state=e.ctx?e.ctx.state||"suspended":"suspended",e._autoSuspend(),!e.usingWebAudio)if("undefined"!=typeof Audio)try{var o=new Audio;void 0===o.oncanplaythrough&&(e._canPlayEvent="canplay")}catch(n){e.noAudio=!0}else e.noAudio=!0;try{var o=new Audio;o.muted&&(e.noAudio=!0)}catch(e){}return e.noAudio||e._setupCodecs(),e},_setupCodecs:function(){var e=this||n,o=null;try{o="undefined"!=typeof Audio?new Audio:null}catch(n){return e}if(!o||"function"!=typeof o.canPlayType)return e;var t=o.canPlayType("audio/mpeg;").replace(/^no$/,""),r=e._navigator&&e._navigator.userAgent.match(/OPR\/([0-6].)/g),a=r&&parseInt(r[0].split("/")[1],10)<33;return e._codecs={mp3:!(a||!t&&!o.canPlayType("audio/mp3;").replace(/^no$/,"")),mpeg:!!t,opus:!!o.canPlayType('audio/ogg; codecs="opus"').replace(/^no$/,""),ogg:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),oga:!!o.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),wav:!!o.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),aac:!!o.canPlayType("audio/aac;").replace(/^no$/,""),caf:!!o.canPlayType("audio/x-caf;").replace(/^no$/,""),m4a:!!(o.canPlayType("audio/x-m4a;")||o.canPlayType("audio/m4a;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),mp4:!!(o.canPlayType("audio/x-mp4;")||o.canPlayType("audio/mp4;")||o.canPlayType("audio/aac;")).replace(/^no$/,""),weba:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),webm:!!o.canPlayType('audio/webm; codecs="vorbis"').replace(/^no$/,""),dolby:!!o.canPlayType('audio/mp4; codecs="ec-3"').replace(/^no$/,""),flac:!!(o.canPlayType("audio/x-flac;")||o.canPlayType("audio/flac;")).replace(/^no$/,"")},e},_unlockAudio:function(){var e=this||n,o=/iPhone|iPad|iPod|Android|BlackBerry|BB10|Silk|Mobi|Chrome|Safari/i.test(e._navigator&&e._navigator.userAgent);if(!e._audioUnlocked&&e.ctx&&o){e._audioUnlocked=!1,e.autoUnlock=!1,e._mobileUnloaded||44100===e.ctx.sampleRate||(e._mobileUnloaded=!0,e.unload()),e._scratchBuffer=e.ctx.createBuffer(1,1,22050);var t=function(n){for(var o=0;o<e.html5PoolSize;o++){var r=new Audio;r._unlocked=!0,e._releaseHtml5Audio(r)}for(var o=0;o<e._howls.length;o++)if(!e._howls[o]._webAudio)for(var a=e._howls[o]._getSoundIds(),u=0;u<a.length;u++){var i=e._howls[o]._soundById(a[u]);i&&i._node&&!i._node._unlocked&&(i._node._unlocked=!0,i._node.load())}e._autoResume();var d=e.ctx.createBufferSource();d.buffer=e._scratchBuffer,d.connect(e.ctx.destination),void 0===d.start?d.noteOn(0):d.start(0),"function"==typeof e.ctx.resume&&e.ctx.resume(),d.onended=function(){d.disconnect(0),e._audioUnlocked=!0,document.removeEventListener("touchstart",t,!0),document.removeEventListener("touchend",t,!0),document.removeEventListener("click",t,!0);for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("unlock")}};return document.addEventListener("touchstart",t,!0),document.addEventListener("touchend",t,!0),document.addEventListener("click",t,!0),e}},_obtainHtml5Audio:function(){var e=this||n;if(e._html5AudioPool.length)return e._html5AudioPool.pop();var o=(new Audio).play();return o&&"undefined"!=typeof Promise&&(o instanceof Promise||"function"==typeof o.then)&&o.catch(function(){console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.")}),new Audio},_releaseHtml5Audio:function(e){var o=this||n;return e._unlocked&&o._html5AudioPool.push(e),o},_autoSuspend:function(){var e=this;if(e.autoSuspend&&e.ctx&&void 0!==e.ctx.suspend&&n.usingWebAudio){for(var o=0;o<e._howls.length;o++)if(e._howls[o]._webAudio)for(var t=0;t<e._howls[o]._sounds.length;t++)if(!e._howls[o]._sounds[t]._paused)return e;return e._suspendTimer&&clearTimeout(e._suspendTimer),e._suspendTimer=setTimeout(function(){e.autoSuspend&&(e._suspendTimer=null,e.state="suspending",e.ctx.suspend().then(function(){e.state="suspended",e._resumeAfterSuspend&&(delete e._resumeAfterSuspend,e._autoResume())}))},3e4),e}},_autoResume:function(){var e=this;if(e.ctx&&void 0!==e.ctx.resume&&n.usingWebAudio)return"running"===e.state&&e._suspendTimer?(clearTimeout(e._suspendTimer),e._suspendTimer=null):"suspended"===e.state?(e.ctx.resume().then(function(){e.state="running";for(var n=0;n<e._howls.length;n++)e._howls[n]._emit("resume")}),e._suspendTimer&&(clearTimeout(e._suspendTimer),e._suspendTimer=null)):"suspending"===e.state&&(e._resumeAfterSuspend=!0),e}};var n=new e,o=function(e){var n=this;if(!e.src||0===e.src.length)return void console.error("An array of source files must be passed with any new Howl.");n.init(e)};o.prototype={init:function(e){var o=this;return n.ctx||_(),o._autoplay=e.autoplay||!1,o._format="string"!=typeof e.format?e.format:[e.format],o._html5=e.html5||!1,o._muted=e.mute||!1,o._loop=e.loop||!1,o._pool=e.pool||5,o._preload="boolean"!=typeof e.preload||e.preload,o._rate=e.rate||1,o._sprite=e.sprite||{},o._src="string"!=typeof e.src?e.src:[e.src],o._volume=void 0!==e.volume?e.volume:1,o._xhrWithCredentials=e.xhrWithCredentials||!1,o._duration=0,o._state="unloaded",o._sounds=[],o._endTimers={},o._queue=[],o._playLock=!1,o._onend=e.onend?[{fn:e.onend}]:[],o._onfade=e.onfade?[{fn:e.onfade}]:[],o._onload=e.onload?[{fn:e.onload}]:[],o._onloaderror=e.onloaderror?[{fn:e.onloaderror}]:[],o._onplayerror=e.onplayerror?[{fn:e.onplayerror}]:[],o._onpause=e.onpause?[{fn:e.onpause}]:[],o._onplay=e.onplay?[{fn:e.onplay}]:[],o._onstop=e.onstop?[{fn:e.onstop}]:[],o._onmute=e.onmute?[{fn:e.onmute}]:[],o._onvolume=e.onvolume?[{fn:e.onvolume}]:[],o._onrate=e.onrate?[{fn:e.onrate}]:[],o._onseek=e.onseek?[{fn:e.onseek}]:[],o._onunlock=e.onunlock?[{fn:e.onunlock}]:[],o._onresume=[],o._webAudio=n.usingWebAudio&&!o._html5,void 0!==n.ctx&&n.ctx&&n.autoUnlock&&n._unlockAudio(),n._howls.push(o),o._autoplay&&o._queue.push({event:"play",action:function(){o.play()}}),o._preload&&o.load(),o},load:function(){var e=this,o=null;if(n.noAudio)return void e._emit("loaderror",null,"No audio support.");"string"==typeof e._src&&(e._src=[e._src]);for(var r=0;r<e._src.length;r++){var u,i;if(e._format&&e._format[r])u=e._format[r];else{if("string"!=typeof(i=e._src[r])){e._emit("loaderror",null,"Non-string found in selected audio sources - ignoring.");continue}u=/^data:audio\/([^;,]+);/i.exec(i),u||(u=/\.([^.]+)$/.exec(i.split("?",1)[0])),u&&(u=u[1].toLowerCase())}if(u||console.warn('No file extension was found. Consider using the "format" property or specify an extension.'),u&&n.codecs(u)){o=e._src[r];break}}return o?(e._src=o,e._state="loading","https:"===window.location.protocol&&"http:"===o.slice(0,5)&&(e._html5=!0,e._webAudio=!1),new t(e),e._webAudio&&a(e),e):void e._emit("loaderror",null,"No codec support for selected audio sources.")},play:function(e,o){var t=this,r=null;if("number"==typeof e)r=e,e=null;else{if("string"==typeof e&&"loaded"===t._state&&!t._sprite[e])return null;if(void 0===e&&(e="__default",!t._playLock)){for(var a=0,u=0;u<t._sounds.length;u++)t._sounds[u]._paused&&!t._sounds[u]._ended&&(a++,r=t._sounds[u]._id);1===a?e=null:r=null}}var i=r?t._soundById(r):t._inactiveSound();if(!i)return null;if(r&&!e&&(e=i._sprite||"__default"),"loaded"!==t._state){i._sprite=e,i._ended=!1;var d=i._id;return t._queue.push({event:"play",action:function(){t.play(d)}}),d}if(r&&!i._paused)return o||t._loadQueue("play"),i._id;t._webAudio&&n._autoResume();var _=Math.max(0,i._seek>0?i._seek:t._sprite[e][0]/1e3),s=Math.max(0,(t._sprite[e][0]+t._sprite[e][1])/1e3-_),l=1e3*s/Math.abs(i._rate),c=t._sprite[e][0]/1e3,f=(t._sprite[e][0]+t._sprite[e][1])/1e3,p=!(!i._loop&&!t._sprite[e][2]);i._sprite=e,i._ended=!1;var m=function(){i._paused=!1,i._seek=_,i._start=c,i._stop=f,i._loop=p};if(_>=f)return void t._ended(i);var v=i._node;if(t._webAudio){var h=function(){t._playLock=!1,m(),t._refreshBuffer(i);var e=i._muted||t._muted?0:i._volume;v.gain.setValueAtTime(e,n.ctx.currentTime),i._playStart=n.ctx.currentTime,void 0===v.bufferSource.start?i._loop?v.bufferSource.noteGrainOn(0,_,86400):v.bufferSource.noteGrainOn(0,_,s):i._loop?v.bufferSource.start(0,_,86400):v.bufferSource.start(0,_,s),l!==1/0&&(t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l)),o||setTimeout(function(){t._emit("play",i._id),t._loadQueue()},0)};"running"===n.state?h():(t._playLock=!0,t.once("resume",h),t._clearTimer(i._id))}else{var y=function(){v.currentTime=_,v.muted=i._muted||t._muted||n._muted||v.muted,v.volume=i._volume*n.volume(),v.playbackRate=i._rate;try{var r=v.play();if(r&&"undefined"!=typeof Promise&&(r instanceof Promise||"function"==typeof r.then)?(t._playLock=!0,m(),r.then(function(){t._playLock=!1,v._unlocked=!0,o||(t._emit("play",i._id),t._loadQueue())}).catch(function(){t._playLock=!1,t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."),i._ended=!0,i._paused=!0})):o||(t._playLock=!1,m(),t._emit("play",i._id),t._loadQueue()),v.playbackRate=i._rate,v.paused)return void t._emit("playerror",i._id,"Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");"__default"!==e||i._loop?t._endTimers[i._id]=setTimeout(t._ended.bind(t,i),l):(t._endTimers[i._id]=function(){t._ended(i),v.removeEventListener("ended",t._endTimers[i._id],!1)},v.addEventListener("ended",t._endTimers[i._id],!1))}catch(e){t._emit("playerror",i._id,e)}},g=window&&window.ejecta||!v.readyState&&n._navigator.isCocoonJS;if(v.readyState>=3||g)y();else{t._playLock=!0;var b=function(){y(),v.removeEventListener(n._canPlayEvent,b,!1)};v.addEventListener(n._canPlayEvent,b,!1),t._clearTimer(i._id)}}return i._id},pause:function(e){var n=this;if("loaded"!==n._state||n._playLock)return n._queue.push({event:"pause",action:function(){n.pause(e)}}),n;for(var o=n._getSoundIds(e),t=0;t<o.length;t++){n._clearTimer(o[t]);var r=n._soundById(o[t]);if(r&&!r._paused&&(r._seek=n.seek(o[t]),r._rateSeek=0,r._paused=!0,n._stopFade(o[t]),r._node))if(n._webAudio){if(!r._node.bufferSource)continue;void 0===r._node.bufferSource.stop?r._node.bufferSource.noteOff(0):r._node.bufferSource.stop(0),n._cleanBuffer(r._node)}else isNaN(r._node.duration)&&r._node.duration!==1/0||r._node.pause();arguments[1]||n._emit("pause",r?r._id:null)}return n},stop:function(e,n){var o=this;if("loaded"!==o._state||o._playLock)return o._queue.push({event:"stop",action:function(){o.stop(e)}}),o;for(var t=o._getSoundIds(e),r=0;r<t.length;r++){o._clearTimer(t[r]);var a=o._soundById(t[r]);a&&(a._seek=a._start||0,a._rateSeek=0,a._paused=!0,a._ended=!0,o._stopFade(t[r]),a._node&&(o._webAudio?a._node.bufferSource&&(void 0===a._node.bufferSource.stop?a._node.bufferSource.noteOff(0):a._node.bufferSource.stop(0),o._cleanBuffer(a._node)):isNaN(a._node.duration)&&a._node.duration!==1/0||(a._node.currentTime=a._start||0,a._node.pause())),n||o._emit("stop",a._id))}return o},mute:function(e,o){var t=this;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"mute",action:function(){t.mute(e,o)}}),t;if(void 0===o){if("boolean"!=typeof e)return t._muted;t._muted=e}for(var r=t._getSoundIds(o),a=0;a<r.length;a++){var u=t._soundById(r[a]);u&&(u._muted=e,u._interval&&t._stopFade(u._id),t._webAudio&&u._node?u._node.gain.setValueAtTime(e?0:u._volume,n.ctx.currentTime):u._node&&(u._node.muted=!!n._muted||e),t._emit("mute",u._id))}return t},volume:function(){var e,o,t=this,r=arguments;if(0===r.length)return t._volume;if(1===r.length||2===r.length&&void 0===r[1]){t._getSoundIds().indexOf(r[0])>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else r.length>=2&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var a;if(!(void 0!==e&&e>=0&&e<=1))return a=o?t._soundById(o):t._sounds[0],a?a._volume:0;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"volume",action:function(){t.volume.apply(t,r)}}),t;void 0===o&&(t._volume=e),o=t._getSoundIds(o);for(var u=0;u<o.length;u++)(a=t._soundById(o[u]))&&(a._volume=e,r[2]||t._stopFade(o[u]),t._webAudio&&a._node&&!a._muted?a._node.gain.setValueAtTime(e,n.ctx.currentTime):a._node&&!a._muted&&(a._node.volume=e*n.volume()),t._emit("volume",a._id));return t},fade:function(e,o,t,r){var a=this;if("loaded"!==a._state||a._playLock)return a._queue.push({event:"fade",action:function(){a.fade(e,o,t,r)}}),a;e=parseFloat(e),o=parseFloat(o),t=parseFloat(t),a.volume(e,r);for(var u=a._getSoundIds(r),i=0;i<u.length;i++){var d=a._soundById(u[i]);if(d){if(r||a._stopFade(u[i]),a._webAudio&&!d._muted){var _=n.ctx.currentTime,s=_+t/1e3;d._volume=e,d._node.gain.setValueAtTime(e,_),d._node.gain.linearRampToValueAtTime(o,s)}a._startFadeInterval(d,e,o,t,u[i],void 0===r)}}return a},_startFadeInterval:function(e,n,o,t,r,a){var u=this,i=n,d=o-n,_=Math.abs(d/.01),s=Math.max(4,_>0?t/_:t),l=Date.now();e._fadeTo=o,e._interval=setInterval(function(){var r=(Date.now()-l)/t;l=Date.now(),i+=d*r,i=Math.max(0,i),i=Math.min(1,i),i=Math.round(100*i)/100,u._webAudio?e._volume=i:u.volume(i,e._id,!0),a&&(u._volume=i),(o<n&&i<=o||o>n&&i>=o)&&(clearInterval(e._interval),e._interval=null,e._fadeTo=null,u.volume(o,e._id),u._emit("fade",e._id))},s)},_stopFade:function(e){var o=this,t=o._soundById(e);return t&&t._interval&&(o._webAudio&&t._node.gain.cancelScheduledValues(n.ctx.currentTime),clearInterval(t._interval),t._interval=null,o.volume(t._fadeTo,e),t._fadeTo=null,o._emit("fade",e)),o},loop:function(){var e,n,o,t=this,r=arguments;if(0===r.length)return t._loop;if(1===r.length){if("boolean"!=typeof r[0])return!!(o=t._soundById(parseInt(r[0],10)))&&o._loop;e=r[0],t._loop=e}else 2===r.length&&(e=r[0],n=parseInt(r[1],10));for(var a=t._getSoundIds(n),u=0;u<a.length;u++)(o=t._soundById(a[u]))&&(o._loop=e,t._webAudio&&o._node&&o._node.bufferSource&&(o._node.bufferSource.loop=e,e&&(o._node.bufferSource.loopStart=o._start||0,o._node.bufferSource.loopEnd=o._stop)));return t},rate:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):e=parseFloat(r[0])}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));var i;if("number"!=typeof e)return i=t._soundById(o),i?i._rate:t._rate;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"rate",action:function(){t.rate.apply(t,r)}}),t;void 0===o&&(t._rate=e),o=t._getSoundIds(o);for(var d=0;d<o.length;d++)if(i=t._soundById(o[d])){t.playing(o[d])&&(i._rateSeek=t.seek(o[d]),i._playStart=t._webAudio?n.ctx.currentTime:i._playStart),i._rate=e,t._webAudio&&i._node&&i._node.bufferSource?i._node.bufferSource.playbackRate.setValueAtTime(e,n.ctx.currentTime):i._node&&(i._node.playbackRate=e);var _=t.seek(o[d]),s=(t._sprite[i._sprite][0]+t._sprite[i._sprite][1])/1e3-_,l=1e3*s/Math.abs(i._rate);!t._endTimers[o[d]]&&i._paused||(t._clearTimer(o[d]),t._endTimers[o[d]]=setTimeout(t._ended.bind(t,i),l)),t._emit("rate",i._id)}return t},seek:function(){var e,o,t=this,r=arguments;if(0===r.length)o=t._sounds[0]._id;else if(1===r.length){var a=t._getSoundIds(),u=a.indexOf(r[0]);u>=0?o=parseInt(r[0],10):t._sounds.length&&(o=t._sounds[0]._id,e=parseFloat(r[0]))}else 2===r.length&&(e=parseFloat(r[0]),o=parseInt(r[1],10));if(void 0===o)return t;if("loaded"!==t._state||t._playLock)return t._queue.push({event:"seek",action:function(){t.seek.apply(t,r)}}),t;var i=t._soundById(o);if(i){if(!("number"==typeof e&&e>=0)){if(t._webAudio){var d=t.playing(o)?n.ctx.currentTime-i._playStart:0,_=i._rateSeek?i._rateSeek-i._seek:0;return i._seek+(_+d*Math.abs(i._rate))}return i._node.currentTime}var s=t.playing(o);s&&t.pause(o,!0),i._seek=e,i._ended=!1,t._clearTimer(o),t._webAudio||!i._node||isNaN(i._node.duration)||(i._node.currentTime=e);var l=function(){t._emit("seek",o),s&&t.play(o,!0)};if(s&&!t._webAudio){var c=function(){t._playLock?setTimeout(c,0):l()};setTimeout(c,0)}else l()}return t},playing:function(e){var n=this;if("number"==typeof e){var o=n._soundById(e);return!!o&&!o._paused}for(var t=0;t<n._sounds.length;t++)if(!n._sounds[t]._paused)return!0;return!1},duration:function(e){var n=this,o=n._duration,t=n._soundById(e);return t&&(o=n._sprite[t._sprite][1]/1e3),o},state:function(){return this._state},unload:function(){for(var e=this,o=e._sounds,t=0;t<o.length;t++){if(o[t]._paused||e.stop(o[t]._id),!e._webAudio){/MSIE |Trident\//.test(n._navigator&&n._navigator.userAgent)||(o[t]._node.src="data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA"),o[t]._node.removeEventListener("error",o[t]._errorFn,!1),o[t]._node.removeEventListener(n._canPlayEvent,o[t]._loadFn,!1),n._releaseHtml5Audio(o[t]._node)}delete o[t]._node,e._clearTimer(o[t]._id)}var a=n._howls.indexOf(e);a>=0&&n._howls.splice(a,1);var u=!0;for(t=0;t<n._howls.length;t++)if(n._howls[t]._src===e._src||e._src.indexOf(n._howls[t]._src)>=0){u=!1;break}return r&&u&&delete r[e._src],n.noAudio=!1,e._state="unloaded",e._sounds=[],e=null,null},on:function(e,n,o,t){var r=this,a=r["_on"+e];return"function"==typeof n&&a.push(t?{id:o,fn:n,once:t}:{id:o,fn:n}),r},off:function(e,n,o){var t=this,r=t["_on"+e],a=0;if("number"==typeof n&&(o=n,n=null),n||o)for(a=0;a<r.length;a++){var u=o===r[a].id;if(n===r[a].fn&&u||!n&&u){r.splice(a,1);break}}else if(e)t["_on"+e]=[];else{var i=Object.keys(t);for(a=0;a<i.length;a++)0===i[a].indexOf("_on")&&Array.isArray(t[i[a]])&&(t[i[a]]=[])}return t},once:function(e,n,o){var t=this;return t.on(e,n,o,1),t},_emit:function(e,n,o){for(var t=this,r=t["_on"+e],a=r.length-1;a>=0;a--)r[a].id&&r[a].id!==n&&"load"!==e||(setTimeout(function(e){e.call(this,n,o)}.bind(t,r[a].fn),0),r[a].once&&t.off(e,r[a].fn,r[a].id));return t._loadQueue(e),t},_loadQueue:function(e){var n=this;if(n._queue.length>0){var o=n._queue[0];o.event===e&&(n._queue.shift(),n._loadQueue()),e||o.action()}return n},_ended:function(e){var o=this,t=e._sprite;if(!o._webAudio&&e._node&&!e._node.paused&&!e._node.ended&&e._node.currentTime<e._stop)return setTimeout(o._ended.bind(o,e),100),o;var r=!(!e._loop&&!o._sprite[t][2]);if(o._emit("end",e._id),!o._webAudio&&r&&o.stop(e._id,!0).play(e._id),o._webAudio&&r){o._emit("play",e._id),e._seek=e._start||0,e._rateSeek=0,e._playStart=n.ctx.currentTime;var a=1e3*(e._stop-e._start)/Math.abs(e._rate);o._endTimers[e._id]=setTimeout(o._ended.bind(o,e),a)}return o._webAudio&&!r&&(e._paused=!0,e._ended=!0,e._seek=e._start||0,e._rateSeek=0,o._clearTimer(e._id),o._cleanBuffer(e._node),n._autoSuspend()),o._webAudio||r||o.stop(e._id,!0),o},_clearTimer:function(e){var n=this;if(n._endTimers[e]){if("function"!=typeof n._endTimers[e])clearTimeout(n._endTimers[e]);else{var o=n._soundById(e);o&&o._node&&o._node.removeEventListener("ended",n._endTimers[e],!1)}delete n._endTimers[e]}return n},_soundById:function(e){for(var n=this,o=0;o<n._sounds.length;o++)if(e===n._sounds[o]._id)return n._sounds[o];return null},_inactiveSound:function(){var e=this;e._drain();for(var n=0;n<e._sounds.length;n++)if(e._sounds[n]._ended)return e._sounds[n].reset();return new t(e)},_drain:function(){var e=this,n=e._pool,o=0,t=0;if(!(e._sounds.length<n)){for(t=0;t<e._sounds.length;t++)e._sounds[t]._ended&&o++;for(t=e._sounds.length-1;t>=0;t--){if(o<=n)return;e._sounds[t]._ended&&(e._webAudio&&e._sounds[t]._node&&e._sounds[t]._node.disconnect(0),e._sounds.splice(t,1),o--)}}},_getSoundIds:function(e){var n=this;if(void 0===e){for(var o=[],t=0;t<n._sounds.length;t++)o.push(n._sounds[t]._id);return o}return[e]},_refreshBuffer:function(e){var o=this;return e._node.bufferSource=n.ctx.createBufferSource(),e._node.bufferSource.buffer=r[o._src],e._panner?e._node.bufferSource.connect(e._panner):e._node.bufferSource.connect(e._node),e._node.bufferSource.loop=e._loop,e._loop&&(e._node.bufferSource.loopStart=e._start||0,e._node.bufferSource.loopEnd=e._stop||0),e._node.bufferSource.playbackRate.setValueAtTime(e._rate,n.ctx.currentTime),o},_cleanBuffer:function(e){var o=this,t=n._navigator&&n._navigator.vendor.indexOf("Apple")>=0;if(n._scratchBuffer&&e.bufferSource&&(e.bufferSource.onended=null,e.bufferSource.disconnect(0),t))try{e.bufferSource.buffer=n._scratchBuffer}catch(e){}return e.bufferSource=null,o}};var t=function(e){this._parent=e,this.init()};t.prototype={init:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,o._sounds.push(e),e.create(),e},create:function(){var e=this,o=e._parent,t=n._muted||e._muted||e._parent._muted?0:e._volume;return o._webAudio?(e._node=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),e._node.gain.setValueAtTime(t,n.ctx.currentTime),e._node.paused=!0,e._node.connect(n.masterGain)):(e._node=n._obtainHtml5Audio(),e._errorFn=e._errorListener.bind(e),e._node.addEventListener("error",e._errorFn,!1),e._loadFn=e._loadListener.bind(e),e._node.addEventListener(n._canPlayEvent,e._loadFn,!1),e._node.src=o._src,e._node.preload="auto",e._node.volume=t*n.volume(),e._node.load()),e},reset:function(){var e=this,o=e._parent;return e._muted=o._muted,e._loop=o._loop,e._volume=o._volume,e._rate=o._rate,e._seek=0,e._rateSeek=0,e._paused=!0,e._ended=!0,e._sprite="__default",e._id=++n._counter,e},_errorListener:function(){var e=this;e._parent._emit("loaderror",e._id,e._node.error?e._node.error.code:0),e._node.removeEventListener("error",e._errorFn,!1)},_loadListener:function(){var e=this,o=e._parent;o._duration=Math.ceil(10*e._node.duration)/10,0===Object.keys(o._sprite).length&&(o._sprite={__default:[0,1e3*o._duration]}),"loaded"!==o._state&&(o._state="loaded",o._emit("load"),o._loadQueue()),e._node.removeEventListener(n._canPlayEvent,e._loadFn,!1)}};var r={},a=function(e){var n=e._src;if(r[n])return e._duration=r[n].duration,void d(e);if(/^data:[^;]+;base64,/.test(n)){for(var o=atob(n.split(",")[1]),t=new Uint8Array(o.length),a=0;a<o.length;++a)t[a]=o.charCodeAt(a);i(t.buffer,e)}else{var _=new XMLHttpRequest;_.open("GET",n,!0),_.withCredentials=e._xhrWithCredentials,_.responseType="arraybuffer",_.onload=function(){var n=(_.status+"")[0];if("0"!==n&&"2"!==n&&"3"!==n)return void e._emit("loaderror",null,"Failed loading audio file with status: "+_.status+".");i(_.response,e)},_.onerror=function(){e._webAudio&&(e._html5=!0,e._webAudio=!1,e._sounds=[],delete r[n],e.load())},u(_)}},u=function(e){try{e.send()}catch(n){e.onerror()}},i=function(e,o){var t=function(){o._emit("loaderror",null,"Decoding audio data failed.")},a=function(e){e&&o._sounds.length>0?(r[o._src]=e,d(o,e)):t()};"undefined"!=typeof Promise&&1===n.ctx.decodeAudioData.length?n.ctx.decodeAudioData(e).then(a).catch(t):n.ctx.decodeAudioData(e,a,t)},d=function(e,n){n&&!e._duration&&(e._duration=n.duration),0===Object.keys(e._sprite).length&&(e._sprite={__default:[0,1e3*e._duration]}),"loaded"!==e._state&&(e._state="loaded",e._emit("load"),e._loadQueue())},_=function(){if(n.usingWebAudio){try{"undefined"!=typeof AudioContext?n.ctx=new AudioContext:"undefined"!=typeof webkitAudioContext?n.ctx=new webkitAudioContext:n.usingWebAudio=!1}catch(e){n.usingWebAudio=!1}n.ctx||(n.usingWebAudio=!1);var e=/iP(hone|od|ad)/.test(n._navigator&&n._navigator.platform),o=n._navigator&&n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/),t=o?parseInt(o[1],10):null;if(e&&t&&t<9){var r=/safari/.test(n._navigator&&n._navigator.userAgent.toLowerCase());(n._navigator&&n._navigator.standalone&&!r||n._navigator&&!n._navigator.standalone&&!r)&&(n.usingWebAudio=!1)}n.usingWebAudio&&(n.masterGain=void 0===n.ctx.createGain?n.ctx.createGainNode():n.ctx.createGain(),n.masterGain.gain.setValueAtTime(n._muted?0:1,n.ctx.currentTime),n.masterGain.connect(n.ctx.destination)),n._setup()}};"function"==typeof define&&define.amd&&define([],function(){return{Howler:n,Howl:o}}),"undefined"!=typeof exports&&(exports.Howler=n,exports.Howl=o),"undefined"!=typeof window?(window.HowlerGlobal=e,window.Howler=n,window.Howl=o,window.Sound=t):"undefined"!=typeof global&&(global.HowlerGlobal=e,global.Howler=n,global.Howl=o,global.Sound=t)}();
/*! Spatial Plugin */
!function(){"use strict";HowlerGlobal.prototype._pos=[0,0,0],HowlerGlobal.prototype._orientation=[0,0,-1,0,1,0],HowlerGlobal.prototype.stereo=function(e){var n=this;if(!n.ctx||!n.ctx.listener)return n;for(var t=n._howls.length-1;t>=0;t--)n._howls[t].stereo(e);return n},HowlerGlobal.prototype.pos=function(e,n,t){var r=this;return r.ctx&&r.ctx.listener?(n="number"!=typeof n?r._pos[1]:n,t="number"!=typeof t?r._pos[2]:t,"number"!=typeof e?r._pos:(r._pos=[e,n,t],void 0!==r.ctx.listener.positionX?(r.ctx.listener.positionX.setTargetAtTime(r._pos[0],Howler.ctx.currentTime,.1),r.ctx.listener.positionY.setTargetAtTime(r._pos[1],Howler.ctx.currentTime,.1),r.ctx.listener.positionZ.setTargetAtTime(r._pos[2],Howler.ctx.currentTime,.1)):r.ctx.listener.setPosition(r._pos[0],r._pos[1],r._pos[2]),r)):r},HowlerGlobal.prototype.orientation=function(e,n,t,r,o,i){var a=this;if(!a.ctx||!a.ctx.listener)return a;var s=a._orientation;return n="number"!=typeof n?s[1]:n,t="number"!=typeof t?s[2]:t,r="number"!=typeof r?s[3]:r,o="number"!=typeof o?s[4]:o,i="number"!=typeof i?s[5]:i,"number"!=typeof e?s:(a._orientation=[e,n,t,r,o,i],void 0!==a.ctx.listener.forwardX?(a.ctx.listener.forwardX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.forwardY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.forwardZ.setTargetAtTime(t,Howler.ctx.currentTime,.1),a.ctx.listener.upX.setTargetAtTime(e,Howler.ctx.currentTime,.1),a.ctx.listener.upY.setTargetAtTime(n,Howler.ctx.currentTime,.1),a.ctx.listener.upZ.setTargetAtTime(t,Howler.ctx.currentTime,.1)):a.ctx.listener.setOrientation(e,n,t,r,o,i),a)},Howl.prototype.init=function(e){return function(n){var t=this;return t._orientation=n.orientation||[1,0,0],t._stereo=n.stereo||null,t._pos=n.pos||null,t._pannerAttr={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:360,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:360,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:0,distanceModel:void 0!==n.distanceModel?n.distanceModel:"inverse",maxDistance:void 0!==n.maxDistance?n.maxDistance:1e4,panningModel:void 0!==n.panningModel?n.panningModel:"HRTF",refDistance:void 0!==n.refDistance?n.refDistance:1,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:1},t._onstereo=n.onstereo?[{fn:n.onstereo}]:[],t._onpos=n.onpos?[{fn:n.onpos}]:[],t._onorientation=n.onorientation?[{fn:n.onorientation}]:[],e.call(this,n)}}(Howl.prototype.init),Howl.prototype.stereo=function(n,t){var r=this;if(!r._webAudio)return r;if("loaded"!==r._state)return r._queue.push({event:"stereo",action:function(){r.stereo(n,t)}}),r;var o=void 0===Howler.ctx.createStereoPanner?"spatial":"stereo";if(void 0===t){if("number"!=typeof n)return r._stereo;r._stereo=n,r._pos=[n,0,0]}for(var i=r._getSoundIds(t),a=0;a<i.length;a++){var s=r._soundById(i[a]);if(s){if("number"!=typeof n)return s._stereo;s._stereo=n,s._pos=[n,0,0],s._node&&(s._pannerAttr.panningModel="equalpower",s._panner&&s._panner.pan||e(s,o),"spatial"===o?void 0!==s._panner.positionX?(s._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),s._panner.positionY.setValueAtTime(0,Howler.ctx.currentTime),s._panner.positionZ.setValueAtTime(0,Howler.ctx.currentTime)):s._panner.setPosition(n,0,0):s._panner.pan.setValueAtTime(n,Howler.ctx.currentTime)),r._emit("stereo",s._id)}}return r},Howl.prototype.pos=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"pos",action:function(){i.pos(n,t,r,o)}}),i;if(t="number"!=typeof t?0:t,r="number"!=typeof r?-.5:r,void 0===o){if("number"!=typeof n)return i._pos;i._pos=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._pos;p._pos=[n,t,r],p._node&&(p._panner&&!p._panner.pan||e(p,"spatial"),void 0!==p._panner.positionX?(p._panner.positionX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.positionY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.positionZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setPosition(n,t,r)),i._emit("pos",p._id)}}return i},Howl.prototype.orientation=function(n,t,r,o){var i=this;if(!i._webAudio)return i;if("loaded"!==i._state)return i._queue.push({event:"orientation",action:function(){i.orientation(n,t,r,o)}}),i;if(t="number"!=typeof t?i._orientation[1]:t,r="number"!=typeof r?i._orientation[2]:r,void 0===o){if("number"!=typeof n)return i._orientation;i._orientation=[n,t,r]}for(var a=i._getSoundIds(o),s=0;s<a.length;s++){var p=i._soundById(a[s]);if(p){if("number"!=typeof n)return p._orientation;p._orientation=[n,t,r],p._node&&(p._panner||(p._pos||(p._pos=i._pos||[0,0,-.5]),e(p,"spatial")),void 0!==p._panner.orientationX?(p._panner.orientationX.setValueAtTime(n,Howler.ctx.currentTime),p._panner.orientationY.setValueAtTime(t,Howler.ctx.currentTime),p._panner.orientationZ.setValueAtTime(r,Howler.ctx.currentTime)):p._panner.setOrientation(n,t,r)),i._emit("orientation",p._id)}}return i},Howl.prototype.pannerAttr=function(){var n,t,r,o=this,i=arguments;if(!o._webAudio)return o;if(0===i.length)return o._pannerAttr;if(1===i.length){if("object"!=typeof i[0])return r=o._soundById(parseInt(i[0],10)),r?r._pannerAttr:o._pannerAttr;n=i[0],void 0===t&&(n.pannerAttr||(n.pannerAttr={coneInnerAngle:n.coneInnerAngle,coneOuterAngle:n.coneOuterAngle,coneOuterGain:n.coneOuterGain,distanceModel:n.distanceModel,maxDistance:n.maxDistance,refDistance:n.refDistance,rolloffFactor:n.rolloffFactor,panningModel:n.panningModel}),o._pannerAttr={coneInnerAngle:void 0!==n.pannerAttr.coneInnerAngle?n.pannerAttr.coneInnerAngle:o._coneInnerAngle,coneOuterAngle:void 0!==n.pannerAttr.coneOuterAngle?n.pannerAttr.coneOuterAngle:o._coneOuterAngle,coneOuterGain:void 0!==n.pannerAttr.coneOuterGain?n.pannerAttr.coneOuterGain:o._coneOuterGain,distanceModel:void 0!==n.pannerAttr.distanceModel?n.pannerAttr.distanceModel:o._distanceModel,maxDistance:void 0!==n.pannerAttr.maxDistance?n.pannerAttr.maxDistance:o._maxDistance,refDistance:void 0!==n.pannerAttr.refDistance?n.pannerAttr.refDistance:o._refDistance,rolloffFactor:void 0!==n.pannerAttr.rolloffFactor?n.pannerAttr.rolloffFactor:o._rolloffFactor,panningModel:void 0!==n.pannerAttr.panningModel?n.pannerAttr.panningModel:o._panningModel})}else 2===i.length&&(n=i[0],t=parseInt(i[1],10));for(var a=o._getSoundIds(t),s=0;s<a.length;s++)if(r=o._soundById(a[s])){var p=r._pannerAttr;p={coneInnerAngle:void 0!==n.coneInnerAngle?n.coneInnerAngle:p.coneInnerAngle,coneOuterAngle:void 0!==n.coneOuterAngle?n.coneOuterAngle:p.coneOuterAngle,coneOuterGain:void 0!==n.coneOuterGain?n.coneOuterGain:p.coneOuterGain,distanceModel:void 0!==n.distanceModel?n.distanceModel:p.distanceModel,maxDistance:void 0!==n.maxDistance?n.maxDistance:p.maxDistance,refDistance:void 0!==n.refDistance?n.refDistance:p.refDistance,rolloffFactor:void 0!==n.rolloffFactor?n.rolloffFactor:p.rolloffFactor,panningModel:void 0!==n.panningModel?n.panningModel:p.panningModel};var c=r._panner;c?(c.coneInnerAngle=p.coneInnerAngle,c.coneOuterAngle=p.coneOuterAngle,c.coneOuterGain=p.coneOuterGain,c.distanceModel=p.distanceModel,c.maxDistance=p.maxDistance,c.refDistance=p.refDistance,c.rolloffFactor=p.rolloffFactor,c.panningModel=p.panningModel):(r._pos||(r._pos=o._pos||[0,0,-.5]),e(r,"spatial"))}return o},Sound.prototype.init=function(e){return function(){var n=this,t=n._parent;n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,e.call(this),n._stereo?t.stereo(n._stereo):n._pos&&t.pos(n._pos[0],n._pos[1],n._pos[2],n._id)}}(Sound.prototype.init),Sound.prototype.reset=function(e){return function(){var n=this,t=n._parent;return n._orientation=t._orientation,n._stereo=t._stereo,n._pos=t._pos,n._pannerAttr=t._pannerAttr,n._stereo?t.stereo(n._stereo):n._pos?t.pos(n._pos[0],n._pos[1],n._pos[2],n._id):n._panner&&(n._panner.disconnect(0),n._panner=void 0,t._refreshBuffer(n)),e.call(this)}}(Sound.prototype.reset);var e=function(e,n){n=n||"spatial","spatial"===n?(e._panner=Howler.ctx.createPanner(),e._panner.coneInnerAngle=e._pannerAttr.coneInnerAngle,e._panner.coneOuterAngle=e._pannerAttr.coneOuterAngle,e._panner.coneOuterGain=e._pannerAttr.coneOuterGain,e._panner.distanceModel=e._pannerAttr.distanceModel,e._panner.maxDistance=e._pannerAttr.maxDistance,e._panner.refDistance=e._pannerAttr.refDistance,e._panner.rolloffFactor=e._pannerAttr.rolloffFactor,e._panner.panningModel=e._pannerAttr.panningModel,void 0!==e._panner.positionX?(e._panner.positionX.setValueAtTime(e._pos[0],Howler.ctx.currentTime),e._panner.positionY.setValueAtTime(e._pos[1],Howler.ctx.currentTime),e._panner.positionZ.setValueAtTime(e._pos[2],Howler.ctx.currentTime)):e._panner.setPosition(e._pos[0],e._pos[1],e._pos[2]),void 0!==e._panner.orientationX?(e._panner.orientationX.setValueAtTime(e._orientation[0],Howler.ctx.currentTime),e._panner.orientationY.setValueAtTime(e._orientation[1],Howler.ctx.currentTime),e._panner.orientationZ.setValueAtTime(e._orientation[2],Howler.ctx.currentTime)):e._panner.setOrientation(e._orientation[0],e._orientation[1],e._orientation[2])):(e._panner=Howler.ctx.createStereoPanner(),e._panner.pan.setValueAtTime(e._stereo,Howler.ctx.currentTime)),e._panner.connect(e._node),e._paused||e._parent.pause(e._id,!0).play(e._id,!0)}}();
/* pako 1.0.2 nodeca/pako */
!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var e;e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,e.pako=t()}}(function(){return function t(e,a,i){function n(s,o){if(!a[s]){if(!e[s]){var l="function"==typeof require&&require;if(!o&&l)return l(s,!0);if(r)return r(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var d=a[s]={exports:{}};e[s][0].call(d.exports,function(t){var a=e[s][1][t];return n(a?a:t)},d,d.exports,t,e,a,i)}return a[s].exports}for(var r="function"==typeof require&&require,s=0;s<i.length;s++)n(i[s]);return n}({1:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=l.assign({level:w,method:v,chunkSize:16384,windowBits:15,memLevel:8,strategy:p,to:""},t||{});var e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=o.deflateInit2(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(a!==b)throw new Error(d[a]);if(e.header&&o.deflateSetHeader(this.strm,e.header),e.dictionary){var n;if(n="string"==typeof e.dictionary?h.string2buf(e.dictionary):"[object ArrayBuffer]"===_.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,a=o.deflateSetDictionary(this.strm,n),a!==b)throw new Error(d[a]);this._dict_set=!0}}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}function s(t,e){return e=e||{},e.gzip=!0,n(t,e)}var o=t("./zlib/deflate"),l=t("./utils/common"),h=t("./utils/strings"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=Object.prototype.toString,u=0,c=4,b=0,g=1,m=2,w=-1,p=0,v=8;i.prototype.push=function(t,e){var a,i,n=this.strm,r=this.options.chunkSize;if(this.ended)return!1;i=e===~~e?e:e===!0?c:u,"string"==typeof t?n.input=h.string2buf(t):"[object ArrayBuffer]"===_.call(t)?n.input=new Uint8Array(t):n.input=t,n.next_in=0,n.avail_in=n.input.length;do{if(0===n.avail_out&&(n.output=new l.Buf8(r),n.next_out=0,n.avail_out=r),a=o.deflate(n,i),a!==g&&a!==b)return this.onEnd(a),this.ended=!0,!1;0!==n.avail_out&&(0!==n.avail_in||i!==c&&i!==m)||("string"===this.options.to?this.onData(h.buf2binstring(l.shrinkBuf(n.output,n.next_out))):this.onData(l.shrinkBuf(n.output,n.next_out)))}while((n.avail_in>0||0===n.avail_out)&&a!==g);return i===c?(a=o.deflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===b):i!==m||(this.onEnd(b),n.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===b&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=l.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Deflate=i,a.deflate=n,a.deflateRaw=r,a.gzip=s},{"./utils/common":3,"./utils/strings":4,"./zlib/deflate":8,"./zlib/messages":13,"./zlib/zstream":15}],2:[function(t,e,a){"use strict";function i(t){if(!(this instanceof i))return new i(t);this.options=o.assign({chunkSize:16384,windowBits:0,to:""},t||{});var e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0===(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new f,this.strm.avail_out=0;var a=s.inflateInit2(this.strm,e.windowBits);if(a!==h.Z_OK)throw new Error(d[a]);this.header=new _,s.inflateGetHeader(this.strm,this.header)}function n(t,e){var a=new i(e);if(a.push(t,!0),a.err)throw a.msg;return a.result}function r(t,e){return e=e||{},e.raw=!0,n(t,e)}var s=t("./zlib/inflate"),o=t("./utils/common"),l=t("./utils/strings"),h=t("./zlib/constants"),d=t("./zlib/messages"),f=t("./zlib/zstream"),_=t("./zlib/gzheader"),u=Object.prototype.toString;i.prototype.push=function(t,e){var a,i,n,r,d,f,_=this.strm,c=this.options.chunkSize,b=this.options.dictionary,g=!1;if(this.ended)return!1;i=e===~~e?e:e===!0?h.Z_FINISH:h.Z_NO_FLUSH,"string"==typeof t?_.input=l.binstring2buf(t):"[object ArrayBuffer]"===u.call(t)?_.input=new Uint8Array(t):_.input=t,_.next_in=0,_.avail_in=_.input.length;do{if(0===_.avail_out&&(_.output=new o.Buf8(c),_.next_out=0,_.avail_out=c),a=s.inflate(_,h.Z_NO_FLUSH),a===h.Z_NEED_DICT&&b&&(f="string"==typeof b?l.string2buf(b):"[object ArrayBuffer]"===u.call(b)?new Uint8Array(b):b,a=s.inflateSetDictionary(this.strm,f)),a===h.Z_BUF_ERROR&&g===!0&&(a=h.Z_OK,g=!1),a!==h.Z_STREAM_END&&a!==h.Z_OK)return this.onEnd(a),this.ended=!0,!1;_.next_out&&(0!==_.avail_out&&a!==h.Z_STREAM_END&&(0!==_.avail_in||i!==h.Z_FINISH&&i!==h.Z_SYNC_FLUSH)||("string"===this.options.to?(n=l.utf8border(_.output,_.next_out),r=_.next_out-n,d=l.buf2string(_.output,n),_.next_out=r,_.avail_out=c-r,r&&o.arraySet(_.output,_.output,n,r,0),this.onData(d)):this.onData(o.shrinkBuf(_.output,_.next_out)))),0===_.avail_in&&0===_.avail_out&&(g=!0)}while((_.avail_in>0||0===_.avail_out)&&a!==h.Z_STREAM_END);return a===h.Z_STREAM_END&&(i=h.Z_FINISH),i===h.Z_FINISH?(a=s.inflateEnd(this.strm),this.onEnd(a),this.ended=!0,a===h.Z_OK):i!==h.Z_SYNC_FLUSH||(this.onEnd(h.Z_OK),_.avail_out=0,!0)},i.prototype.onData=function(t){this.chunks.push(t)},i.prototype.onEnd=function(t){t===h.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg},a.Inflate=i,a.inflate=n,a.inflateRaw=r,a.ungzip=n},{"./utils/common":3,"./utils/strings":4,"./zlib/constants":6,"./zlib/gzheader":9,"./zlib/inflate":11,"./zlib/messages":13,"./zlib/zstream":15}],3:[function(t,e,a){"use strict";var i="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;a.assign=function(t){for(var e=Array.prototype.slice.call(arguments,1);e.length;){var a=e.shift();if(a){if("object"!=typeof a)throw new TypeError(a+"must be non-object");for(var i in a)a.hasOwnProperty(i)&&(t[i]=a[i])}}return t},a.shrinkBuf=function(t,e){return t.length===e?t:t.subarray?t.subarray(0,e):(t.length=e,t)};var n={arraySet:function(t,e,a,i,n){if(e.subarray&&t.subarray)return void t.set(e.subarray(a,a+i),n);for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){var e,a,i,n,r,s;for(i=0,e=0,a=t.length;e<a;e++)i+=t[e].length;for(s=new Uint8Array(i),n=0,e=0,a=t.length;e<a;e++)r=t[e],s.set(r,n),n+=r.length;return s}},r={arraySet:function(t,e,a,i,n){for(var r=0;r<i;r++)t[n+r]=e[a+r]},flattenChunks:function(t){return[].concat.apply([],t)}};a.setTyped=function(t){t?(a.Buf8=Uint8Array,a.Buf16=Uint16Array,a.Buf32=Int32Array,a.assign(a,n)):(a.Buf8=Array,a.Buf16=Array,a.Buf32=Array,a.assign(a,r))},a.setTyped(i)},{}],4:[function(t,e,a){"use strict";function i(t,e){if(e<65537&&(t.subarray&&s||!t.subarray&&r))return String.fromCharCode.apply(null,n.shrinkBuf(t,e));for(var a="",i=0;i<e;i++)a+=String.fromCharCode(t[i]);return a}var n=t("./common"),r=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(t){r=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){s=!1}for(var o=new n.Buf8(256),l=0;l<256;l++)o[l]=l>=252?6:l>=248?5:l>=240?4:l>=224?3:l>=192?2:1;o[254]=o[254]=1,a.string2buf=function(t){var e,a,i,r,s,o=t.length,l=0;for(r=0;r<o;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),l+=a<128?1:a<2048?2:a<65536?3:4;for(e=new n.Buf8(l),s=0,r=0;s<l;r++)a=t.charCodeAt(r),55296===(64512&a)&&r+1<o&&(i=t.charCodeAt(r+1),56320===(64512&i)&&(a=65536+(a-55296<<10)+(i-56320),r++)),a<128?e[s++]=a:a<2048?(e[s++]=192|a>>>6,e[s++]=128|63&a):a<65536?(e[s++]=224|a>>>12,e[s++]=128|a>>>6&63,e[s++]=128|63&a):(e[s++]=240|a>>>18,e[s++]=128|a>>>12&63,e[s++]=128|a>>>6&63,e[s++]=128|63&a);return e},a.buf2binstring=function(t){return i(t,t.length)},a.binstring2buf=function(t){for(var e=new n.Buf8(t.length),a=0,i=e.length;a<i;a++)e[a]=t.charCodeAt(a);return e},a.buf2string=function(t,e){var a,n,r,s,l=e||t.length,h=new Array(2*l);for(n=0,a=0;a<l;)if(r=t[a++],r<128)h[n++]=r;else if(s=o[r],s>4)h[n++]=65533,a+=s-1;else{for(r&=2===s?31:3===s?15:7;s>1&&a<l;)r=r<<6|63&t[a++],s--;s>1?h[n++]=65533:r<65536?h[n++]=r:(r-=65536,h[n++]=55296|r>>10&1023,h[n++]=56320|1023&r)}return i(h,n)},a.utf8border=function(t,e){var a;for(e=e||t.length,e>t.length&&(e=t.length),a=e-1;a>=0&&128===(192&t[a]);)a--;return a<0?e:0===a?e:a+o[t[a]]>e?a:e}},{"./common":3}],5:[function(t,e,a){"use strict";function i(t,e,a,i){for(var n=65535&t|0,r=t>>>16&65535|0,s=0;0!==a;){s=a>2e3?2e3:a,a-=s;do n=n+e[i++]|0,r=r+n|0;while(--s);n%=65521,r%=65521}return n|r<<16|0}e.exports=i},{}],6:[function(t,e,a){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],7:[function(t,e,a){"use strict";function i(){for(var t,e=[],a=0;a<256;a++){t=a;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[a]=t}return e}function n(t,e,a,i){var n=r,s=i+a;t^=-1;for(var o=i;o<s;o++)t=t>>>8^n[255&(t^e[o])];return t^-1}var r=i();e.exports=n},{}],8:[function(t,e,a){"use strict";function i(t,e){return t.msg=D[e],e}function n(t){return(t<<1)-(t>4?9:0)}function r(t){for(var e=t.length;--e>=0;)t[e]=0}function s(t){var e=t.state,a=e.pending;a>t.avail_out&&(a=t.avail_out),0!==a&&(R.arraySet(t.output,e.pending_buf,e.pending_out,a,t.next_out),t.next_out+=a,e.pending_out+=a,t.total_out+=a,t.avail_out-=a,e.pending-=a,0===e.pending&&(e.pending_out=0))}function o(t,e){C._tr_flush_block(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,s(t.strm)}function l(t,e){t.pending_buf[t.pending++]=e}function h(t,e){t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e}function d(t,e,a,i){var n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,R.arraySet(e,t.input,t.next_in,n,a),1===t.state.wrap?t.adler=N(t.adler,e,n,a):2===t.state.wrap&&(t.adler=O(t.adler,e,n,a)),t.next_in+=n,t.total_in+=n,n)}function f(t,e){var a,i,n=t.max_chain_length,r=t.strstart,s=t.prev_length,o=t.nice_match,l=t.strstart>t.w_size-ft?t.strstart-(t.w_size-ft):0,h=t.window,d=t.w_mask,f=t.prev,_=t.strstart+dt,u=h[r+s-1],c=h[r+s];t.prev_length>=t.good_match&&(n>>=2),o>t.lookahead&&(o=t.lookahead);do if(a=e,h[a+s]===c&&h[a+s-1]===u&&h[a]===h[r]&&h[++a]===h[r+1]){r+=2,a++;do;while(h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&h[++r]===h[++a]&&r<_);if(i=dt-(_-r),r=_-dt,i>s){if(t.match_start=e,s=i,i>=o)break;u=h[r+s-1],c=h[r+s]}}while((e=f[e&d])>l&&0!==--n);return s<=t.lookahead?s:t.lookahead}function _(t){var e,a,i,n,r,s=t.w_size;do{if(n=t.window_size-t.lookahead-t.strstart,t.strstart>=s+(s-ft)){R.arraySet(t.window,t.window,s,s,0),t.match_start-=s,t.strstart-=s,t.block_start-=s,a=t.hash_size,e=a;do i=t.head[--e],t.head[e]=i>=s?i-s:0;while(--a);a=s,e=a;do i=t.prev[--e],t.prev[e]=i>=s?i-s:0;while(--a);n+=s}if(0===t.strm.avail_in)break;if(a=d(t.strm,t.window,t.strstart+t.lookahead,n),t.lookahead+=a,t.lookahead+t.insert>=ht)for(r=t.strstart-t.insert,t.ins_h=t.window[r],t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+1])&t.hash_mask;t.insert&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[r+ht-1])&t.hash_mask,t.prev[r&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=r,r++,t.insert--,!(t.lookahead+t.insert<ht)););}while(t.lookahead<ft&&0!==t.strm.avail_in)}function u(t,e){var a=65535;for(a>t.pending_buf_size-5&&(a=t.pending_buf_size-5);;){if(t.lookahead<=1){if(_(t),0===t.lookahead&&e===I)return vt;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;var i=t.block_start+a;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,o(t,!1),0===t.strm.avail_out))return vt;if(t.strstart-t.block_start>=t.w_size-ft&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.strstart>t.block_start&&(o(t,!1),0===t.strm.avail_out)?vt:vt}function c(t,e){for(var a,i;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==a&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a)),t.match_length>=ht)if(i=C._tr_tally(t,t.strstart-t.match_start,t.match_length-ht),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=ht){t.match_length--;do t.strstart++,t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart;while(0!==--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+1])&t.hash_mask;else i=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function b(t,e){for(var a,i,n;;){if(t.lookahead<ft){if(_(t),t.lookahead<ft&&e===I)return vt;if(0===t.lookahead)break}if(a=0,t.lookahead>=ht&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=ht-1,0!==a&&t.prev_length<t.max_lazy_match&&t.strstart-a<=t.w_size-ft&&(t.match_length=f(t,a),t.match_length<=5&&(t.strategy===q||t.match_length===ht&&t.strstart-t.match_start>4096)&&(t.match_length=ht-1)),t.prev_length>=ht&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-ht,i=C._tr_tally(t,t.strstart-1-t.prev_match,t.prev_length-ht),t.lookahead-=t.prev_length-1,t.prev_length-=2;do++t.strstart<=n&&(t.ins_h=(t.ins_h<<t.hash_shift^t.window[t.strstart+ht-1])&t.hash_mask,a=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart);while(0!==--t.prev_length);if(t.match_available=0,t.match_length=ht-1,t.strstart++,i&&(o(t,!1),0===t.strm.avail_out))return vt}else if(t.match_available){if(i=C._tr_tally(t,0,t.window[t.strstart-1]),i&&o(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return vt}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=C._tr_tally(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<ht-1?t.strstart:ht-1,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function g(t,e){for(var a,i,n,r,s=t.window;;){if(t.lookahead<=dt){if(_(t),t.lookahead<=dt&&e===I)return vt;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=ht&&t.strstart>0&&(n=t.strstart-1,i=s[n],i===s[++n]&&i===s[++n]&&i===s[++n])){r=t.strstart+dt;do;while(i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&i===s[++n]&&n<r);t.match_length=dt-(r-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=ht?(a=C._tr_tally(t,1,t.match_length-ht),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function m(t,e){for(var a;;){if(0===t.lookahead&&(_(t),0===t.lookahead)){if(e===I)return vt;break}if(t.match_length=0,a=C._tr_tally(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,a&&(o(t,!1),0===t.strm.avail_out))return vt}return t.insert=0,e===F?(o(t,!0),0===t.strm.avail_out?yt:xt):t.last_lit&&(o(t,!1),0===t.strm.avail_out)?vt:kt}function w(t,e,a,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=a,this.max_chain=i,this.func=n}function p(t){t.window_size=2*t.w_size,r(t.head),t.max_lazy_match=Z[t.level].max_lazy,t.good_match=Z[t.level].good_length,t.nice_match=Z[t.level].nice_length,t.max_chain_length=Z[t.level].max_chain,t.strstart=0,t.block_start=0,t.lookahead=0,t.insert=0,t.match_length=t.prev_length=ht-1,t.match_available=0,t.ins_h=0}function v(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=V,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new R.Buf16(2*ot),this.dyn_dtree=new R.Buf16(2*(2*rt+1)),this.bl_tree=new R.Buf16(2*(2*st+1)),r(this.dyn_ltree),r(this.dyn_dtree),r(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new R.Buf16(lt+1),this.heap=new R.Buf16(2*nt+1),r(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new R.Buf16(2*nt+1),r(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function k(t){var e;return t&&t.state?(t.total_in=t.total_out=0,t.data_type=Q,e=t.state,e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?ut:wt,t.adler=2===e.wrap?0:1,e.last_flush=I,C._tr_init(e),H):i(t,K)}function y(t){var e=k(t);return e===H&&p(t.state),e}function x(t,e){return t&&t.state?2!==t.state.wrap?K:(t.state.gzhead=e,H):K}function z(t,e,a,n,r,s){if(!t)return K;var o=1;if(e===Y&&(e=6),n<0?(o=0,n=-n):n>15&&(o=2,n-=16),r<1||r>$||a!==V||n<8||n>15||e<0||e>9||s<0||s>W)return i(t,K);8===n&&(n=9);var l=new v;return t.state=l,l.strm=t,l.wrap=o,l.gzhead=null,l.w_bits=n,l.w_size=1<<l.w_bits,l.w_mask=l.w_size-1,l.hash_bits=r+7,l.hash_size=1<<l.hash_bits,l.hash_mask=l.hash_size-1,l.hash_shift=~~((l.hash_bits+ht-1)/ht),l.window=new R.Buf8(2*l.w_size),l.head=new R.Buf16(l.hash_size),l.prev=new R.Buf16(l.w_size),l.lit_bufsize=1<<r+6,l.pending_buf_size=4*l.lit_bufsize,l.pending_buf=new R.Buf8(l.pending_buf_size),l.d_buf=1*l.lit_bufsize,l.l_buf=3*l.lit_bufsize,l.level=e,l.strategy=s,l.method=a,y(t)}function B(t,e){return z(t,e,V,tt,et,J)}function S(t,e){var a,o,d,f;if(!t||!t.state||e>L||e<0)return t?i(t,K):K;if(o=t.state,!t.output||!t.input&&0!==t.avail_in||o.status===pt&&e!==F)return i(t,0===t.avail_out?P:K);if(o.strm=t,a=o.last_flush,o.last_flush=e,o.status===ut)if(2===o.wrap)t.adler=0,l(o,31),l(o,139),l(o,8),o.gzhead?(l(o,(o.gzhead.text?1:0)+(o.gzhead.hcrc?2:0)+(o.gzhead.extra?4:0)+(o.gzhead.name?8:0)+(o.gzhead.comment?16:0)),l(o,255&o.gzhead.time),l(o,o.gzhead.time>>8&255),l(o,o.gzhead.time>>16&255),l(o,o.gzhead.time>>24&255),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,255&o.gzhead.os),o.gzhead.extra&&o.gzhead.extra.length&&(l(o,255&o.gzhead.extra.length),l(o,o.gzhead.extra.length>>8&255)),o.gzhead.hcrc&&(t.adler=O(t.adler,o.pending_buf,o.pending,0)),o.gzindex=0,o.status=ct):(l(o,0),l(o,0),l(o,0),l(o,0),l(o,0),l(o,9===o.level?2:o.strategy>=G||o.level<2?4:0),l(o,zt),o.status=wt);else{var _=V+(o.w_bits-8<<4)<<8,u=-1;u=o.strategy>=G||o.level<2?0:o.level<6?1:6===o.level?2:3,_|=u<<6,0!==o.strstart&&(_|=_t),_+=31-_%31,o.status=wt,h(o,_),0!==o.strstart&&(h(o,t.adler>>>16),h(o,65535&t.adler)),t.adler=1}if(o.status===ct)if(o.gzhead.extra){for(d=o.pending;o.gzindex<(65535&o.gzhead.extra.length)&&(o.pending!==o.pending_buf_size||(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending!==o.pending_buf_size));)l(o,255&o.gzhead.extra[o.gzindex]),o.gzindex++;o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),o.gzindex===o.gzhead.extra.length&&(o.gzindex=0,o.status=bt)}else o.status=bt;if(o.status===bt)if(o.gzhead.name){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.name.length?255&o.gzhead.name.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.gzindex=0,o.status=gt)}else o.status=gt;if(o.status===gt)if(o.gzhead.comment){d=o.pending;do{if(o.pending===o.pending_buf_size&&(o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),s(t),d=o.pending,o.pending===o.pending_buf_size)){f=1;break}f=o.gzindex<o.gzhead.comment.length?255&o.gzhead.comment.charCodeAt(o.gzindex++):0,l(o,f)}while(0!==f);o.gzhead.hcrc&&o.pending>d&&(t.adler=O(t.adler,o.pending_buf,o.pending-d,d)),0===f&&(o.status=mt)}else o.status=mt;if(o.status===mt&&(o.gzhead.hcrc?(o.pending+2>o.pending_buf_size&&s(t),o.pending+2<=o.pending_buf_size&&(l(o,255&t.adler),l(o,t.adler>>8&255),t.adler=0,o.status=wt)):o.status=wt),0!==o.pending){if(s(t),0===t.avail_out)return o.last_flush=-1,H}else if(0===t.avail_in&&n(e)<=n(a)&&e!==F)return i(t,P);if(o.status===pt&&0!==t.avail_in)return i(t,P);if(0!==t.avail_in||0!==o.lookahead||e!==I&&o.status!==pt){var c=o.strategy===G?m(o,e):o.strategy===X?g(o,e):Z[o.level].func(o,e);if(c!==yt&&c!==xt||(o.status=pt),c===vt||c===yt)return 0===t.avail_out&&(o.last_flush=-1),H;if(c===kt&&(e===U?C._tr_align(o):e!==L&&(C._tr_stored_block(o,0,0,!1),e===T&&(r(o.head),0===o.lookahead&&(o.strstart=0,o.block_start=0,o.insert=0))),s(t),0===t.avail_out))return o.last_flush=-1,H}return e!==F?H:o.wrap<=0?j:(2===o.wrap?(l(o,255&t.adler),l(o,t.adler>>8&255),l(o,t.adler>>16&255),l(o,t.adler>>24&255),l(o,255&t.total_in),l(o,t.total_in>>8&255),l(o,t.total_in>>16&255),l(o,t.total_in>>24&255)):(h(o,t.adler>>>16),h(o,65535&t.adler)),s(t),o.wrap>0&&(o.wrap=-o.wrap),0!==o.pending?H:j)}function E(t){var e;return t&&t.state?(e=t.state.status,e!==ut&&e!==ct&&e!==bt&&e!==gt&&e!==mt&&e!==wt&&e!==pt?i(t,K):(t.state=null,e===wt?i(t,M):H)):K}function A(t,e){var a,i,n,s,o,l,h,d,f=e.length;if(!t||!t.state)return K;if(a=t.state,s=a.wrap,2===s||1===s&&a.status!==ut||a.lookahead)return K;for(1===s&&(t.adler=N(t.adler,e,f,0)),a.wrap=0,f>=a.w_size&&(0===s&&(r(a.head),a.strstart=0,a.block_start=0,a.insert=0),d=new R.Buf8(a.w_size),R.arraySet(d,e,f-a.w_size,a.w_size,0),e=d,f=a.w_size),o=t.avail_in,l=t.next_in,h=t.input,t.avail_in=f,t.next_in=0,t.input=e,_(a);a.lookahead>=ht;){i=a.strstart,n=a.lookahead-(ht-1);do a.ins_h=(a.ins_h<<a.hash_shift^a.window[i+ht-1])&a.hash_mask,a.prev[i&a.w_mask]=a.head[a.ins_h],a.head[a.ins_h]=i,i++;while(--n);a.strstart=i,a.lookahead=ht-1,_(a)}return a.strstart+=a.lookahead,a.block_start=a.strstart,a.insert=a.lookahead,a.lookahead=0,a.match_length=a.prev_length=ht-1,a.match_available=0,t.next_in=l,t.input=h,t.avail_in=o,a.wrap=s,H}var Z,R=t("../utils/common"),C=t("./trees"),N=t("./adler32"),O=t("./crc32"),D=t("./messages"),I=0,U=1,T=3,F=4,L=5,H=0,j=1,K=-2,M=-3,P=-5,Y=-1,q=1,G=2,X=3,W=4,J=0,Q=2,V=8,$=9,tt=15,et=8,at=29,it=256,nt=it+1+at,rt=30,st=19,ot=2*nt+1,lt=15,ht=3,dt=258,ft=dt+ht+1,_t=32,ut=42,ct=69,bt=73,gt=91,mt=103,wt=113,pt=666,vt=1,kt=2,yt=3,xt=4,zt=3;Z=[new w(0,0,0,0,u),new w(4,4,8,4,c),new w(4,5,16,8,c),new w(4,6,32,32,c),new w(4,4,16,16,b),new w(8,16,32,32,b),new w(8,16,128,128,b),new w(8,32,128,256,b),new w(32,128,258,1024,b),new w(32,258,258,4096,b)],a.deflateInit=B,a.deflateInit2=z,a.deflateReset=y,a.deflateResetKeep=k,a.deflateSetHeader=x,a.deflate=S,a.deflateEnd=E,a.deflateSetDictionary=A,a.deflateInfo="pako deflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./messages":13,"./trees":14}],9:[function(t,e,a){"use strict";function i(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}e.exports=i},{}],10:[function(t,e,a){"use strict";var i=30,n=12;e.exports=function(t,e){var a,r,s,o,l,h,d,f,_,u,c,b,g,m,w,p,v,k,y,x,z,B,S,E,A;a=t.state,r=t.next_in,E=t.input,s=r+(t.avail_in-5),o=t.next_out,A=t.output,l=o-(e-t.avail_out),h=o+(t.avail_out-257),d=a.dmax,f=a.wsize,_=a.whave,u=a.wnext,c=a.window,b=a.hold,g=a.bits,m=a.lencode,w=a.distcode,p=(1<<a.lenbits)-1,v=(1<<a.distbits)-1;t:do{g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=m[b&p];e:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,0===y)A[o++]=65535&k;else{if(!(16&y)){if(0===(64&y)){k=m[(65535&k)+(b&(1<<y)-1)];continue e}if(32&y){a.mode=n;break t}t.msg="invalid literal/length code",a.mode=i;break t}x=65535&k,y&=15,y&&(g<y&&(b+=E[r++]<<g,g+=8),x+=b&(1<<y)-1,b>>>=y,g-=y),g<15&&(b+=E[r++]<<g,g+=8,b+=E[r++]<<g,g+=8),k=w[b&v];a:for(;;){if(y=k>>>24,b>>>=y,g-=y,y=k>>>16&255,!(16&y)){if(0===(64&y)){k=w[(65535&k)+(b&(1<<y)-1)];continue a}t.msg="invalid distance code",a.mode=i;break t}if(z=65535&k,y&=15,g<y&&(b+=E[r++]<<g,g+=8,g<y&&(b+=E[r++]<<g,g+=8)),z+=b&(1<<y)-1,z>d){t.msg="invalid distance too far back",a.mode=i;break t}if(b>>>=y,g-=y,y=o-l,z>y){if(y=z-y,y>_&&a.sane){t.msg="invalid distance too far back",a.mode=i;break t}if(B=0,S=c,0===u){if(B+=f-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}else if(u<y){if(B+=f+u-y,y-=u,y<x){x-=y;do A[o++]=c[B++];while(--y);if(B=0,u<x){y=u,x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}}}else if(B+=u-y,y<x){x-=y;do A[o++]=c[B++];while(--y);B=o-z,S=A}for(;x>2;)A[o++]=S[B++],A[o++]=S[B++],A[o++]=S[B++],x-=3;x&&(A[o++]=S[B++],x>1&&(A[o++]=S[B++]))}else{B=o-z;do A[o++]=A[B++],A[o++]=A[B++],A[o++]=A[B++],x-=3;while(x>2);x&&(A[o++]=A[B++],x>1&&(A[o++]=A[B++]))}break}}break}}while(r<s&&o<h);x=g>>3,r-=x,g-=x<<3,b&=(1<<g)-1,t.next_in=r,t.next_out=o,t.avail_in=r<s?5+(s-r):5-(r-s),t.avail_out=o<h?257+(h-o):257-(o-h),a.hold=b,a.bits=g}},{}],11:[function(t,e,a){"use strict";function i(t){return(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24)}function n(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new w.Buf16(320),this.work=new w.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function r(t){var e;return t&&t.state?(e=t.state,t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=T,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new w.Buf32(bt),e.distcode=e.distdyn=new w.Buf32(gt),e.sane=1,e.back=-1,Z):N}function s(t){var e;return t&&t.state?(e=t.state,e.wsize=0,e.whave=0,e.wnext=0,r(t)):N}function o(t,e){var a,i;return t&&t.state?(i=t.state,e<0?(a=0,e=-e):(a=(e>>4)+1,e<48&&(e&=15)),e&&(e<8||e>15)?N:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=a,i.wbits=e,s(t))):N}function l(t,e){var a,i;return t?(i=new n,t.state=i,i.window=null,a=o(t,e),a!==Z&&(t.state=null),a):N}function h(t){return l(t,wt)}function d(t){if(pt){var e;for(g=new w.Buf32(512),m=new w.Buf32(32),e=0;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(y(z,t.lens,0,288,g,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;y(B,t.lens,0,32,m,0,t.work,{bits:5}),pt=!1}t.lencode=g,t.lenbits=9,t.distcode=m,t.distbits=5}function f(t,e,a,i){var n,r=t.state;return null===r.window&&(r.wsize=1<<r.wbits,r.wnext=0,r.whave=0,r.window=new w.Buf8(r.wsize)),i>=r.wsize?(w.arraySet(r.window,e,a-r.wsize,r.wsize,0),r.wnext=0,r.whave=r.wsize):(n=r.wsize-r.wnext,n>i&&(n=i),w.arraySet(r.window,e,a-i,n,r.wnext),i-=n,i?(w.arraySet(r.window,e,a-i,i,0),r.wnext=i,r.whave=r.wsize):(r.wnext+=n,r.wnext===r.wsize&&(r.wnext=0),r.whave<r.wsize&&(r.whave+=n))),0}function _(t,e){var a,n,r,s,o,l,h,_,u,c,b,g,m,bt,gt,mt,wt,pt,vt,kt,yt,xt,zt,Bt,St=0,Et=new w.Buf8(4),At=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return N;a=t.state,a.mode===X&&(a.mode=W),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,c=l,b=h,xt=Z;t:for(;;)switch(a.mode){case T:if(0===a.wrap){a.mode=W;break}for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(2&a.wrap&&35615===_){a.check=0,Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0),_=0,u=0,a.mode=F;break}if(a.flags=0,a.head&&(a.head.done=!1),!(1&a.wrap)||(((255&_)<<8)+(_>>8))%31){t.msg="incorrect header check",a.mode=_t;break}if((15&_)!==U){t.msg="unknown compression method",a.mode=_t;break}if(_>>>=4,u-=4,yt=(15&_)+8,0===a.wbits)a.wbits=yt;else if(yt>a.wbits){t.msg="invalid window size",a.mode=_t;break}a.dmax=1<<yt,t.adler=a.check=1,a.mode=512&_?q:X,_=0,u=0;break;case F:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(a.flags=_,(255&a.flags)!==U){t.msg="unknown compression method",a.mode=_t;break}if(57344&a.flags){t.msg="unknown header flags set",a.mode=_t;break}a.head&&(a.head.text=_>>8&1),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=L;case L:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.time=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,Et[2]=_>>>16&255,Et[3]=_>>>24&255,a.check=v(a.check,Et,4,0)),_=0,u=0,a.mode=H;case H:for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.head&&(a.head.xflags=255&_,a.head.os=_>>8),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0,a.mode=j;case j:if(1024&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length=_,a.head&&(a.head.extra_len=_),512&a.flags&&(Et[0]=255&_,Et[1]=_>>>8&255,a.check=v(a.check,Et,2,0)),_=0,u=0}else a.head&&(a.head.extra=null);a.mode=K;case K:if(1024&a.flags&&(g=a.length,g>l&&(g=l),g&&(a.head&&(yt=a.head.extra_len-a.length,a.head.extra||(a.head.extra=new Array(a.head.extra_len)),w.arraySet(a.head.extra,n,s,g,yt)),512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,a.length-=g),a.length))break t;a.length=0,a.mode=M;case M:if(2048&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.name+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.name=null);a.length=0,a.mode=P;case P:if(4096&a.flags){if(0===l)break t;g=0;do yt=n[s+g++],a.head&&yt&&a.length<65536&&(a.head.comment+=String.fromCharCode(yt));while(yt&&g<l);if(512&a.flags&&(a.check=v(a.check,n,g,s)),l-=g,s+=g,yt)break t}else a.head&&(a.head.comment=null);a.mode=Y;case Y:if(512&a.flags){for(;u<16;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(65535&a.check)){t.msg="header crc mismatch",a.mode=_t;break}_=0,u=0}a.head&&(a.head.hcrc=a.flags>>9&1,a.head.done=!0),t.adler=a.check=0,a.mode=X;break;case q:for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}t.adler=a.check=i(_),_=0,u=0,a.mode=G;case G:if(0===a.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,C;t.adler=a.check=1,a.mode=X;case X:if(e===E||e===A)break t;case W:if(a.last){_>>>=7&u,u-=7&u,a.mode=ht;break}for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}switch(a.last=1&_,_>>>=1,u-=1,3&_){case 0:a.mode=J;break;case 1:if(d(a),a.mode=at,e===A){_>>>=2,u-=2;break t}break;case 2:a.mode=$;break;case 3:t.msg="invalid block type",a.mode=_t}_>>>=2,u-=2;break;case J:for(_>>>=7&u,u-=7&u;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if((65535&_)!==(_>>>16^65535)){t.msg="invalid stored block lengths",a.mode=_t;break}if(a.length=65535&_,_=0,u=0,a.mode=Q,e===A)break t;case Q:a.mode=V;case V:if(g=a.length){if(g>l&&(g=l),g>h&&(g=h),0===g)break t;w.arraySet(r,n,s,g,o),l-=g,s+=g,h-=g,o+=g,a.length-=g;break}a.mode=X;break;case $:for(;u<14;){if(0===l)break t;
l--,_+=n[s++]<<u,u+=8}if(a.nlen=(31&_)+257,_>>>=5,u-=5,a.ndist=(31&_)+1,_>>>=5,u-=5,a.ncode=(15&_)+4,_>>>=4,u-=4,a.nlen>286||a.ndist>30){t.msg="too many length or distance symbols",a.mode=_t;break}a.have=0,a.mode=tt;case tt:for(;a.have<a.ncode;){for(;u<3;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.lens[At[a.have++]]=7&_,_>>>=3,u-=3}for(;a.have<19;)a.lens[At[a.have++]]=0;if(a.lencode=a.lendyn,a.lenbits=7,zt={bits:a.lenbits},xt=y(x,a.lens,0,19,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid code lengths set",a.mode=_t;break}a.have=0,a.mode=et;case et:for(;a.have<a.nlen+a.ndist;){for(;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(wt<16)_>>>=gt,u-=gt,a.lens[a.have++]=wt;else{if(16===wt){for(Bt=gt+2;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_>>>=gt,u-=gt,0===a.have){t.msg="invalid bit length repeat",a.mode=_t;break}yt=a.lens[a.have-1],g=3+(3&_),_>>>=2,u-=2}else if(17===wt){for(Bt=gt+3;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=3+(7&_),_>>>=3,u-=3}else{for(Bt=gt+7;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=gt,u-=gt,yt=0,g=11+(127&_),_>>>=7,u-=7}if(a.have+g>a.nlen+a.ndist){t.msg="invalid bit length repeat",a.mode=_t;break}for(;g--;)a.lens[a.have++]=yt}}if(a.mode===_t)break;if(0===a.lens[256]){t.msg="invalid code -- missing end-of-block",a.mode=_t;break}if(a.lenbits=9,zt={bits:a.lenbits},xt=y(z,a.lens,0,a.nlen,a.lencode,0,a.work,zt),a.lenbits=zt.bits,xt){t.msg="invalid literal/lengths set",a.mode=_t;break}if(a.distbits=6,a.distcode=a.distdyn,zt={bits:a.distbits},xt=y(B,a.lens,a.nlen,a.ndist,a.distcode,0,a.work,zt),a.distbits=zt.bits,xt){t.msg="invalid distances set",a.mode=_t;break}if(a.mode=at,e===A)break t;case at:a.mode=it;case it:if(l>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,k(t,b),o=t.next_out,r=t.output,h=t.avail_out,s=t.next_in,n=t.input,l=t.avail_in,_=a.hold,u=a.bits,a.mode===X&&(a.back=-1);break}for(a.back=0;St=a.lencode[_&(1<<a.lenbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(mt&&0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.lencode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,a.length=wt,0===mt){a.mode=lt;break}if(32&mt){a.back=-1,a.mode=X;break}if(64&mt){t.msg="invalid literal/length code",a.mode=_t;break}a.extra=15&mt,a.mode=nt;case nt:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.length+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}a.was=a.length,a.mode=rt;case rt:for(;St=a.distcode[_&(1<<a.distbits)-1],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(0===(240&mt)){for(pt=gt,vt=mt,kt=wt;St=a.distcode[kt+((_&(1<<pt+vt)-1)>>pt)],gt=St>>>24,mt=St>>>16&255,wt=65535&St,!(pt+gt<=u);){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}_>>>=pt,u-=pt,a.back+=pt}if(_>>>=gt,u-=gt,a.back+=gt,64&mt){t.msg="invalid distance code",a.mode=_t;break}a.offset=wt,a.extra=15&mt,a.mode=st;case st:if(a.extra){for(Bt=a.extra;u<Bt;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}a.offset+=_&(1<<a.extra)-1,_>>>=a.extra,u-=a.extra,a.back+=a.extra}if(a.offset>a.dmax){t.msg="invalid distance too far back",a.mode=_t;break}a.mode=ot;case ot:if(0===h)break t;if(g=b-h,a.offset>g){if(g=a.offset-g,g>a.whave&&a.sane){t.msg="invalid distance too far back",a.mode=_t;break}g>a.wnext?(g-=a.wnext,m=a.wsize-g):m=a.wnext-g,g>a.length&&(g=a.length),bt=a.window}else bt=r,m=o-a.offset,g=a.length;g>h&&(g=h),h-=g,a.length-=g;do r[o++]=bt[m++];while(--g);0===a.length&&(a.mode=it);break;case lt:if(0===h)break t;r[o++]=a.length,h--,a.mode=it;break;case ht:if(a.wrap){for(;u<32;){if(0===l)break t;l--,_|=n[s++]<<u,u+=8}if(b-=h,t.total_out+=b,a.total+=b,b&&(t.adler=a.check=a.flags?v(a.check,r,b,o-b):p(a.check,r,b,o-b)),b=h,(a.flags?_:i(_))!==a.check){t.msg="incorrect data check",a.mode=_t;break}_=0,u=0}a.mode=dt;case dt:if(a.wrap&&a.flags){for(;u<32;){if(0===l)break t;l--,_+=n[s++]<<u,u+=8}if(_!==(4294967295&a.total)){t.msg="incorrect length check",a.mode=_t;break}_=0,u=0}a.mode=ft;case ft:xt=R;break t;case _t:xt=O;break t;case ut:return D;case ct:default:return N}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=l,a.hold=_,a.bits=u,(a.wsize||b!==t.avail_out&&a.mode<_t&&(a.mode<ht||e!==S))&&f(t,t.output,t.next_out,b-t.avail_out)?(a.mode=ut,D):(c-=t.avail_in,b-=t.avail_out,t.total_in+=c,t.total_out+=b,a.total+=b,a.wrap&&b&&(t.adler=a.check=a.flags?v(a.check,r,b,t.next_out-b):p(a.check,r,b,t.next_out-b)),t.data_type=a.bits+(a.last?64:0)+(a.mode===X?128:0)+(a.mode===at||a.mode===Q?256:0),(0===c&&0===b||e===S)&&xt===Z&&(xt=I),xt)}function u(t){if(!t||!t.state)return N;var e=t.state;return e.window&&(e.window=null),t.state=null,Z}function c(t,e){var a;return t&&t.state?(a=t.state,0===(2&a.wrap)?N:(a.head=e,e.done=!1,Z)):N}function b(t,e){var a,i,n,r=e.length;return t&&t.state?(a=t.state,0!==a.wrap&&a.mode!==G?N:a.mode===G&&(i=1,i=p(i,e,r,0),i!==a.check)?O:(n=f(t,e,r,r))?(a.mode=ut,D):(a.havedict=1,Z)):N}var g,m,w=t("../utils/common"),p=t("./adler32"),v=t("./crc32"),k=t("./inffast"),y=t("./inftrees"),x=0,z=1,B=2,S=4,E=5,A=6,Z=0,R=1,C=2,N=-2,O=-3,D=-4,I=-5,U=8,T=1,F=2,L=3,H=4,j=5,K=6,M=7,P=8,Y=9,q=10,G=11,X=12,W=13,J=14,Q=15,V=16,$=17,tt=18,et=19,at=20,it=21,nt=22,rt=23,st=24,ot=25,lt=26,ht=27,dt=28,ft=29,_t=30,ut=31,ct=32,bt=852,gt=592,mt=15,wt=mt,pt=!0;a.inflateReset=s,a.inflateReset2=o,a.inflateResetKeep=r,a.inflateInit=h,a.inflateInit2=l,a.inflate=_,a.inflateEnd=u,a.inflateGetHeader=c,a.inflateSetDictionary=b,a.inflateInfo="pako inflate (from Nodeca project)"},{"../utils/common":3,"./adler32":5,"./crc32":7,"./inffast":10,"./inftrees":12}],12:[function(t,e,a){"use strict";var i=t("../utils/common"),n=15,r=852,s=592,o=0,l=1,h=2,d=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],f=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],_=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],u=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(t,e,a,c,b,g,m,w){var p,v,k,y,x,z,B,S,E,A=w.bits,Z=0,R=0,C=0,N=0,O=0,D=0,I=0,U=0,T=0,F=0,L=null,H=0,j=new i.Buf16(n+1),K=new i.Buf16(n+1),M=null,P=0;for(Z=0;Z<=n;Z++)j[Z]=0;for(R=0;R<c;R++)j[e[a+R]]++;for(O=A,N=n;N>=1&&0===j[N];N--);if(O>N&&(O=N),0===N)return b[g++]=20971520,b[g++]=20971520,w.bits=1,0;for(C=1;C<N&&0===j[C];C++);for(O<C&&(O=C),U=1,Z=1;Z<=n;Z++)if(U<<=1,U-=j[Z],U<0)return-1;if(U>0&&(t===o||1!==N))return-1;for(K[1]=0,Z=1;Z<n;Z++)K[Z+1]=K[Z]+j[Z];for(R=0;R<c;R++)0!==e[a+R]&&(m[K[e[a+R]]++]=R);if(t===o?(L=M=m,z=19):t===l?(L=d,H-=257,M=f,P-=257,z=256):(L=_,M=u,z=-1),F=0,R=0,Z=C,x=g,D=O,I=0,k=-1,T=1<<O,y=T-1,t===l&&T>r||t===h&&T>s)return 1;for(var Y=0;;){Y++,B=Z-I,m[R]<z?(S=0,E=m[R]):m[R]>z?(S=M[P+m[R]],E=L[H+m[R]]):(S=96,E=0),p=1<<Z-I,v=1<<D,C=v;do v-=p,b[x+(F>>I)+v]=B<<24|S<<16|E|0;while(0!==v);for(p=1<<Z-1;F&p;)p>>=1;if(0!==p?(F&=p-1,F+=p):F=0,R++,0===--j[Z]){if(Z===N)break;Z=e[a+m[R]]}if(Z>O&&(F&y)!==k){for(0===I&&(I=O),x+=C,D=Z-I,U=1<<D;D+I<N&&(U-=j[D+I],!(U<=0));)D++,U<<=1;if(T+=1<<D,t===l&&T>r||t===h&&T>s)return 1;k=F&y,b[k]=O<<24|D<<16|x-g|0}}return 0!==F&&(b[x+F]=Z-I<<24|64<<16|0),w.bits=O,0}},{"../utils/common":3}],13:[function(t,e,a){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},{}],14:[function(t,e,a){"use strict";function i(t){for(var e=t.length;--e>=0;)t[e]=0}function n(t,e,a,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=a,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}function r(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}function s(t){return t<256?lt[t]:lt[256+(t>>>7)]}function o(t,e){t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255}function l(t,e,a){t.bi_valid>W-a?(t.bi_buf|=e<<t.bi_valid&65535,o(t,t.bi_buf),t.bi_buf=e>>W-t.bi_valid,t.bi_valid+=a-W):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=a)}function h(t,e,a){l(t,a[2*e],a[2*e+1])}function d(t,e){var a=0;do a|=1&t,t>>>=1,a<<=1;while(--e>0);return a>>>1}function f(t){16===t.bi_valid?(o(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)}function _(t,e){var a,i,n,r,s,o,l=e.dyn_tree,h=e.max_code,d=e.stat_desc.static_tree,f=e.stat_desc.has_stree,_=e.stat_desc.extra_bits,u=e.stat_desc.extra_base,c=e.stat_desc.max_length,b=0;for(r=0;r<=X;r++)t.bl_count[r]=0;for(l[2*t.heap[t.heap_max]+1]=0,a=t.heap_max+1;a<G;a++)i=t.heap[a],r=l[2*l[2*i+1]+1]+1,r>c&&(r=c,b++),l[2*i+1]=r,i>h||(t.bl_count[r]++,s=0,i>=u&&(s=_[i-u]),o=l[2*i],t.opt_len+=o*(r+s),f&&(t.static_len+=o*(d[2*i+1]+s)));if(0!==b){do{for(r=c-1;0===t.bl_count[r];)r--;t.bl_count[r]--,t.bl_count[r+1]+=2,t.bl_count[c]--,b-=2}while(b>0);for(r=c;0!==r;r--)for(i=t.bl_count[r];0!==i;)n=t.heap[--a],n>h||(l[2*n+1]!==r&&(t.opt_len+=(r-l[2*n+1])*l[2*n],l[2*n+1]=r),i--)}}function u(t,e,a){var i,n,r=new Array(X+1),s=0;for(i=1;i<=X;i++)r[i]=s=s+a[i-1]<<1;for(n=0;n<=e;n++){var o=t[2*n+1];0!==o&&(t[2*n]=d(r[o]++,o))}}function c(){var t,e,a,i,r,s=new Array(X+1);for(a=0,i=0;i<K-1;i++)for(dt[i]=a,t=0;t<1<<et[i];t++)ht[a++]=i;for(ht[a-1]=i,r=0,i=0;i<16;i++)for(ft[i]=r,t=0;t<1<<at[i];t++)lt[r++]=i;for(r>>=7;i<Y;i++)for(ft[i]=r<<7,t=0;t<1<<at[i]-7;t++)lt[256+r++]=i;for(e=0;e<=X;e++)s[e]=0;for(t=0;t<=143;)st[2*t+1]=8,t++,s[8]++;for(;t<=255;)st[2*t+1]=9,t++,s[9]++;for(;t<=279;)st[2*t+1]=7,t++,s[7]++;for(;t<=287;)st[2*t+1]=8,t++,s[8]++;for(u(st,P+1,s),t=0;t<Y;t++)ot[2*t+1]=5,ot[2*t]=d(t,5);_t=new n(st,et,M+1,P,X),ut=new n(ot,at,0,Y,X),ct=new n(new Array(0),it,0,q,J)}function b(t){var e;for(e=0;e<P;e++)t.dyn_ltree[2*e]=0;for(e=0;e<Y;e++)t.dyn_dtree[2*e]=0;for(e=0;e<q;e++)t.bl_tree[2*e]=0;t.dyn_ltree[2*Q]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0}function g(t){t.bi_valid>8?o(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0}function m(t,e,a,i){g(t),i&&(o(t,a),o(t,~a)),N.arraySet(t.pending_buf,t.window,e,a,t.pending),t.pending+=a}function w(t,e,a,i){var n=2*e,r=2*a;return t[n]<t[r]||t[n]===t[r]&&i[e]<=i[a]}function p(t,e,a){for(var i=t.heap[a],n=a<<1;n<=t.heap_len&&(n<t.heap_len&&w(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!w(e,i,t.heap[n],t.depth));)t.heap[a]=t.heap[n],a=n,n<<=1;t.heap[a]=i}function v(t,e,a){var i,n,r,o,d=0;if(0!==t.last_lit)do i=t.pending_buf[t.d_buf+2*d]<<8|t.pending_buf[t.d_buf+2*d+1],n=t.pending_buf[t.l_buf+d],d++,0===i?h(t,n,e):(r=ht[n],h(t,r+M+1,e),o=et[r],0!==o&&(n-=dt[r],l(t,n,o)),i--,r=s(i),h(t,r,a),o=at[r],0!==o&&(i-=ft[r],l(t,i,o)));while(d<t.last_lit);h(t,Q,e)}function k(t,e){var a,i,n,r=e.dyn_tree,s=e.stat_desc.static_tree,o=e.stat_desc.has_stree,l=e.stat_desc.elems,h=-1;for(t.heap_len=0,t.heap_max=G,a=0;a<l;a++)0!==r[2*a]?(t.heap[++t.heap_len]=h=a,t.depth[a]=0):r[2*a+1]=0;for(;t.heap_len<2;)n=t.heap[++t.heap_len]=h<2?++h:0,r[2*n]=1,t.depth[n]=0,t.opt_len--,o&&(t.static_len-=s[2*n+1]);for(e.max_code=h,a=t.heap_len>>1;a>=1;a--)p(t,r,a);n=l;do a=t.heap[1],t.heap[1]=t.heap[t.heap_len--],p(t,r,1),i=t.heap[1],t.heap[--t.heap_max]=a,t.heap[--t.heap_max]=i,r[2*n]=r[2*a]+r[2*i],t.depth[n]=(t.depth[a]>=t.depth[i]?t.depth[a]:t.depth[i])+1,r[2*a+1]=r[2*i+1]=n,t.heap[1]=n++,p(t,r,1);while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],_(t,e),u(r,h,t.bl_count)}function y(t,e,a){var i,n,r=-1,s=e[1],o=0,l=7,h=4;for(0===s&&(l=138,h=3),e[2*(a+1)+1]=65535,i=0;i<=a;i++)n=s,s=e[2*(i+1)+1],++o<l&&n===s||(o<h?t.bl_tree[2*n]+=o:0!==n?(n!==r&&t.bl_tree[2*n]++,t.bl_tree[2*V]++):o<=10?t.bl_tree[2*$]++:t.bl_tree[2*tt]++,o=0,r=n,0===s?(l=138,h=3):n===s?(l=6,h=3):(l=7,h=4))}function x(t,e,a){var i,n,r=-1,s=e[1],o=0,d=7,f=4;for(0===s&&(d=138,f=3),i=0;i<=a;i++)if(n=s,s=e[2*(i+1)+1],!(++o<d&&n===s)){if(o<f){do h(t,n,t.bl_tree);while(0!==--o)}else 0!==n?(n!==r&&(h(t,n,t.bl_tree),o--),h(t,V,t.bl_tree),l(t,o-3,2)):o<=10?(h(t,$,t.bl_tree),l(t,o-3,3)):(h(t,tt,t.bl_tree),l(t,o-11,7));o=0,r=n,0===s?(d=138,f=3):n===s?(d=6,f=3):(d=7,f=4)}}function z(t){var e;for(y(t,t.dyn_ltree,t.l_desc.max_code),y(t,t.dyn_dtree,t.d_desc.max_code),k(t,t.bl_desc),e=q-1;e>=3&&0===t.bl_tree[2*nt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e}function B(t,e,a,i){var n;for(l(t,e-257,5),l(t,a-1,5),l(t,i-4,4),n=0;n<i;n++)l(t,t.bl_tree[2*nt[n]+1],3);x(t,t.dyn_ltree,e-1),x(t,t.dyn_dtree,a-1)}function S(t){var e,a=4093624447;for(e=0;e<=31;e++,a>>>=1)if(1&a&&0!==t.dyn_ltree[2*e])return D;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return I;for(e=32;e<M;e++)if(0!==t.dyn_ltree[2*e])return I;return D}function E(t){bt||(c(),bt=!0),t.l_desc=new r(t.dyn_ltree,_t),t.d_desc=new r(t.dyn_dtree,ut),t.bl_desc=new r(t.bl_tree,ct),t.bi_buf=0,t.bi_valid=0,b(t)}function A(t,e,a,i){l(t,(T<<1)+(i?1:0),3),m(t,e,a,!0)}function Z(t){l(t,F<<1,3),h(t,Q,st),f(t)}function R(t,e,a,i){var n,r,s=0;t.level>0?(t.strm.data_type===U&&(t.strm.data_type=S(t)),k(t,t.l_desc),k(t,t.d_desc),s=z(t),n=t.opt_len+3+7>>>3,r=t.static_len+3+7>>>3,r<=n&&(n=r)):n=r=a+5,a+4<=n&&e!==-1?A(t,e,a,i):t.strategy===O||r===n?(l(t,(F<<1)+(i?1:0),3),v(t,st,ot)):(l(t,(L<<1)+(i?1:0),3),B(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),v(t,t.dyn_ltree,t.dyn_dtree)),b(t),i&&g(t)}function C(t,e,a){return t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&a,t.last_lit++,0===e?t.dyn_ltree[2*a]++:(t.matches++,e--,t.dyn_ltree[2*(ht[a]+M+1)]++,t.dyn_dtree[2*s(e)]++),t.last_lit===t.lit_bufsize-1}var N=t("../utils/common"),O=4,D=0,I=1,U=2,T=0,F=1,L=2,H=3,j=258,K=29,M=256,P=M+1+K,Y=30,q=19,G=2*P+1,X=15,W=16,J=7,Q=256,V=16,$=17,tt=18,et=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],at=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],it=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],nt=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],rt=512,st=new Array(2*(P+2));i(st);var ot=new Array(2*Y);i(ot);var lt=new Array(rt);i(lt);var ht=new Array(j-H+1);i(ht);var dt=new Array(K);i(dt);var ft=new Array(Y);i(ft);var _t,ut,ct,bt=!1;a._tr_init=E,a._tr_stored_block=A,a._tr_flush_block=R,a._tr_tally=C,a._tr_align=Z},{"../utils/common":3}],15:[function(t,e,a){"use strict";function i(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}e.exports=i},{}],"/":[function(t,e,a){"use strict";var i=t("./lib/utils/common").assign,n=t("./lib/deflate"),r=t("./lib/inflate"),s=t("./lib/zlib/constants"),o={};i(o,n,r,s),e.exports=o},{"./lib/deflate":1,"./lib/inflate":2,"./lib/utils/common":3,"./lib/zlib/constants":6}]},{},[])("/")});

/*! @source http://purl.eligrey.com/github/FileSaver.js/blob/master/FileSaver.js */
var saveAs=saveAs||function(e){"use strict";if(typeof e==="undefined"||typeof navigator!=="undefined"&&/MSIE [1-9]\./.test(navigator.userAgent)){return}var t=e.document,n=function(){return e.URL||e.webkitURL||e},r=t.createElementNS("http://www.w3.org/1999/xhtml","a"),o="download"in r,a=function(e){var t=new MouseEvent("click");e.dispatchEvent(t)},i=/constructor/i.test(e.HTMLElement)||e.safari,f=/CriOS\/[\d]+/.test(navigator.userAgent),u=function(t){(e.setImmediate||e.setTimeout)(function(){throw t},0)},s="application/octet-stream",d=1e3*40,c=function(e){var t=function(){if(typeof e==="string"){n().revokeObjectURL(e)}else{e.remove()}};setTimeout(t,d)},l=function(e,t,n){t=[].concat(t);var r=t.length;while(r--){var o=e["on"+t[r]];if(typeof o==="function"){try{o.call(e,n||e)}catch(a){u(a)}}}},p=function(e){if(/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)){return new Blob([String.fromCharCode(65279),e],{type:e.type})}return e},v=function(t,u,d){if(!d){t=p(t)}var v=this,w=t.type,m=w===s,y,h=function(){l(v,"writestart progress write writeend".split(" "))},S=function(){if((f||m&&i)&&e.FileReader){var r=new FileReader;r.onloadend=function(){var t=f?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;");var n=e.open(t,"_blank");if(!n)e.location.href=t;t=undefined;v.readyState=v.DONE;h()};r.readAsDataURL(t);v.readyState=v.INIT;return}if(!y){y=n().createObjectURL(t)}if(m){e.location.href=y}else{var o=e.open(y,"_blank");if(!o){e.location.href=y}}v.readyState=v.DONE;h();c(y)};v.readyState=v.INIT;if(o){y=n().createObjectURL(t);setTimeout(function(){r.href=y;r.download=u;a(r);h();c(y);v.readyState=v.DONE});return}S()},w=v.prototype,m=function(e,t,n){return new v(e,t||e.name||"download",n)};if(typeof navigator!=="undefined"&&navigator.msSaveOrOpenBlob){return function(e,t,n){t=t||e.name||"download";if(!n){e=p(e)}return navigator.msSaveOrOpenBlob(e,t)}}w.abort=function(){};w.readyState=w.INIT=0;w.WRITING=1;w.DONE=2;w.error=w.onwritestart=w.onprogress=w.onwrite=w.onabort=w.onerror=w.onwriteend=null;return m}(typeof self!=="undefined"&&self||typeof window!=="undefined"&&window||this.content);if(typeof module!=="undefined"&&module.exports){module.exports.saveAs=saveAs}else if(typeof define!=="undefined"&&define!==null&&define.amd!==null){define("FileSaver.js",function(){return saveAs})}

if(typeof define == "function" && define.__amd) {
	define.amd = define.__amd;
	delete define.__amd;
}